
2moto1enco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6c0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  0800b7d0  0800b7d0  0001b7d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be34  0800be34  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800be34  0800be34  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800be34  0800be34  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800be34  0800be34  0001be34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800be3c  0800be3c  0001be3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800be40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c0  200001d8  0800c018  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001698  0800c018  00021698  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   00023780  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044c6  00000000  00000000  000439c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  00047e90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001282  00000000  00000000  00049688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e71a  00000000  00000000  0004a90a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a672  00000000  00000000  00069024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d992  00000000  00000000  00083696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000076d0  00000000  00000000  00121028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001286f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b7b8 	.word	0x0800b7b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800b7b8 	.word	0x0800b7b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <setCSLine>:
#include "AMT22.h"


void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8001120:	787a      	ldrb	r2, [r7, #1]
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	4619      	mov	r1, r3
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f003 fb5e 	bl	80047e8 <HAL_GPIO_WritePin>

}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <spiWriteRead>:


uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af02      	add	r7, sp, #8
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	461a      	mov	r2, r3
 8001140:	460b      	mov	r3, r1
 8001142:	72fb      	strb	r3, [r7, #11]
 8001144:	4613      	mov	r3, r2
 8001146:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 8001148:	893b      	ldrh	r3, [r7, #8]
 800114a:	2200      	movs	r2, #0
 800114c:	4619      	mov	r1, r3
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffde 	bl	8001110 <setCSLine>
	delay(docDelay);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f901 	bl	800135c <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 800115a:	f107 0217 	add.w	r2, r7, #23
 800115e:	f107 010b 	add.w	r1, r7, #11
 8001162:	230a      	movs	r3, #10
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f004 f859 	bl	8005220 <HAL_SPI_TransmitReceive>
	delay(docDelay);
 800116e:	2003      	movs	r0, #3
 8001170:	f000 f8f4 	bl	800135c <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 8001174:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001178:	893b      	ldrh	r3, [r7, #8]
 800117a:	4619      	mov	r1, r3
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffc7 	bl	8001110 <setCSLine>
	return data;
 8001182:	7dfb      	ldrb	r3, [r7, #23]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af02      	add	r7, sp, #8
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	460b      	mov	r3, r1
 800119c:	80fb      	strh	r3, [r7, #6]
 800119e:	4613      	mov	r3, r2
 80011a0:	717b      	strb	r3, [r7, #5]

	DWT_Delay_Init();
 80011a2:	f000 f8ed 	bl	8001380 <DWT_Delay_Init>

	uint16_t currentPosition = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	2200      	movs	r2, #0
 80011ae:	9200      	str	r2, [sp, #0]
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	2100      	movs	r1, #0
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f7ff ffbd 	bl	8001134 <spiWriteRead>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b29b      	uxth	r3, r3
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	84fb      	strh	r3, [r7, #38]	; 0x26
	delay(docDelay);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 f8ca 	bl	800135c <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1);
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	2201      	movs	r2, #1
 80011cc:	9200      	str	r2, [sp, #0]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	2100      	movs	r1, #0
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff ffae 	bl	8001134 <spiWriteRead>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011de:	4313      	orrs	r3, r2
 80011e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 0; i < 16; i++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
 80011e6:	e010      	b.n	800120a <getPositionSPI+0x7e>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 80011e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	fa42 f303 	asr.w	r3, r2, r3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	b2d9      	uxtb	r1, r3
 80011f8:	f107 0210 	add.w	r2, r7, #16
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	4413      	add	r3, r2
 8001200:	460a      	mov	r2, r1
 8001202:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	3301      	adds	r3, #1
 8001208:	623b      	str	r3, [r7, #32]
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	ddeb      	ble.n	80011e8 <getPositionSPI+0x5c>
	if ((binaryArray[15]
 8001210:	7ffb      	ldrb	r3, [r7, #31]
 8001212:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001214:	7f7a      	ldrb	r2, [r7, #29]
 8001216:	7efb      	ldrb	r3, [r7, #27]
 8001218:	4053      	eors	r3, r2
 800121a:	b2da      	uxtb	r2, r3
 800121c:	7e7b      	ldrb	r3, [r7, #25]
 800121e:	4053      	eors	r3, r2
 8001220:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001222:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001224:	4053      	eors	r3, r2
 8001226:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001228:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 800122a:	4053      	eors	r3, r2
 800122c:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 800122e:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001230:	4053      	eors	r3, r2
 8001232:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 8001234:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001236:	429a      	cmp	r2, r3
 8001238:	bf0c      	ite	eq
 800123a:	2301      	moveq	r3, #1
 800123c:	2300      	movne	r3, #0
 800123e:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 8001240:	4299      	cmp	r1, r3
 8001242:	d11e      	bne.n	8001282 <getPositionSPI+0xf6>
			&& (binaryArray[14]
 8001244:	7fbb      	ldrb	r3, [r7, #30]
 8001246:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8001248:	7f3a      	ldrb	r2, [r7, #28]
 800124a:	7ebb      	ldrb	r3, [r7, #26]
 800124c:	4053      	eors	r3, r2
 800124e:	b2da      	uxtb	r2, r3
 8001250:	7e3b      	ldrb	r3, [r7, #24]
 8001252:	4053      	eors	r3, r2
 8001254:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8001256:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8001258:	4053      	eors	r3, r2
 800125a:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 800125c:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 800125e:	4053      	eors	r3, r2
 8001260:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8001262:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8001264:	4053      	eors	r3, r2
 8001266:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 8001268:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 800126a:	429a      	cmp	r2, r3
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 8001274:	4299      	cmp	r1, r3
 8001276:	d104      	bne.n	8001282 <getPositionSPI+0xf6>
		currentPosition &= 0x3FFF;
 8001278:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800127a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800127e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001280:	e002      	b.n	8001288 <getPositionSPI+0xfc>
	} else {
		currentPosition = 0xFFFF; //bad position
 8001282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001286:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 8001288:	797b      	ldrb	r3, [r7, #5]
 800128a:	2b0c      	cmp	r3, #12
 800128c:	d107      	bne.n	800129e <getPositionSPI+0x112>
 800128e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001294:	4293      	cmp	r3, r2
 8001296:	d002      	beq.n	800129e <getPositionSPI+0x112>
		currentPosition = currentPosition >> 2;
 8001298:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	84fb      	strh	r3, [r7, #38]	; 0x26
	return currentPosition;
 800129e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <calculateAngle>:
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1);
	delay( docDelayLong + docDelayLong);

}

float calculateAngle(uint16_t encoderValue, uint8_t bitDepth) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	460a      	mov	r2, r1
 80012b2:	80fb      	strh	r3, [r7, #6]
 80012b4:	4613      	mov	r3, r2
 80012b6:	717b      	strb	r3, [r7, #5]
	float angle = 0.0;
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
	if (bitDepth == 12) {
 80012be:	797b      	ldrb	r3, [r7, #5]
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	d11e      	bne.n	8001302 <calculateAngle+0x5a>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_12_BIT;
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fce4 	bl	8000c94 <__aeabi_ui2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f8aa 	bl	8000428 <__aeabi_f2d>
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <calculateAngle+0xa8>)
 80012da:	f7ff f8fd 	bl	80004d8 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <calculateAngle+0xac>)
 80012ec:	f7ff fa1e 	bl	800072c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fbc6 	bl	8000a88 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e020      	b.n	8001344 <calculateAngle+0x9c>
	} else if (bitDepth == 14) {
 8001302:	797b      	ldrb	r3, [r7, #5]
 8001304:	2b0e      	cmp	r3, #14
 8001306:	d11d      	bne.n	8001344 <calculateAngle+0x9c>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_14_BIT;
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fcc2 	bl	8000c94 <__aeabi_ui2f>
 8001310:	4603      	mov	r3, r0
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f888 	bl	8000428 <__aeabi_f2d>
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <calculateAngle+0xa8>)
 800131e:	f7ff f8db 	bl	80004d8 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <calculateAngle+0xb0>)
 8001330:	f7ff f9fc 	bl	800072c <__aeabi_ddiv>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fba4 	bl	8000a88 <__aeabi_d2f>
 8001340:	4603      	mov	r3, r0
 8001342:	60fb      	str	r3, [r7, #12]
	}

	// до 0.2 градусів за документацією
	//angle = roundf(angle * 100.0) / 100.0;
	return angle;
 8001344:	68fb      	ldr	r3, [r7, #12]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40768000 	.word	0x40768000
 8001354:	40b00000 	.word	0x40b00000
 8001358:	40d00000 	.word	0x40d00000

0800135c <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1);
	delay(docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(uint32_t delayTime) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

	DWT_Delay_us(delayTime);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f83b 	bl	80013e0 <DWT_Delay_us>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <startDWT>:

int startDWT(){
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0

	 DWT_Delay_Init();
 8001376:	f000 f803 	bl	8001380 <DWT_Delay_Init>

}
 800137a:	bf00      	nop
 800137c:	4618      	mov	r0, r3
 800137e:	bd80      	pop	{r7, pc}

08001380 <DWT_Delay_Init>:
 */

#include "DWT_Delay.h"

uint32_t DWT_Delay_Init()
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <DWT_Delay_Init+0x58>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <DWT_Delay_Init+0x58>)
 800138a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800138e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <DWT_Delay_Init+0x58>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <DWT_Delay_Init+0x58>)
 8001396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800139a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <DWT_Delay_Init+0x5c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80013ba:	bf00      	nop
    __ASM volatile ("NOP");
 80013bc:	bf00      	nop
    __ASM volatile ("NOP");
 80013be:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80013c8:	2300      	movs	r3, #0
 80013ca:	e000      	b.n	80013ce <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80013cc:	2301      	movs	r3, #1
    }
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000edf0 	.word	0xe000edf0
 80013dc:	e0001000 	.word	0xe0001000

080013e0 <DWT_Delay_us>:

// This Function Provides Delay In Microseconds Using DWT
void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <DWT_Delay_us+0x48>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80013ee:	f003 fdf9 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a0d      	ldr	r2, [pc, #52]	; (800142c <DWT_Delay_us+0x4c>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	0c9b      	lsrs	r3, r3, #18
 80013fc:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8001408:	bf00      	nop
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <DWT_Delay_us+0x48>)
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad2      	subs	r2, r2, r3
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	1acb      	subs	r3, r1, r3
 8001418:	429a      	cmp	r2, r3
 800141a:	d3f6      	bcc.n	800140a <DWT_Delay_us+0x2a>
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e0001000 	.word	0xe0001000
 800142c:	431bde83 	.word	0x431bde83

08001430 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	e9c7 0100 	strd	r0, r1, [r7]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
	...

08001468 <_ZN7RoboArmC1Eff>:
#include "RoboArm.h"
//#include "TMC2209.h"

RoboArm::RoboArm(float defaultAngleT, float defaultDistanseT) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4a2d      	ldr	r2, [pc, #180]	; (800152c <_ZN7RoboArmC1Eff+0xc4>)
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	641a      	str	r2, [r3, #64]	; 0x40
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	645a      	str	r2, [r3, #68]	; 0x44
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4a29      	ldr	r2, [pc, #164]	; (8001530 <_ZN7RoboArmC1Eff+0xc8>)
 800148a:	649a      	str	r2, [r3, #72]	; 0x48
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	220e      	movs	r2, #14
 8001490:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	336c      	adds	r3, #108	; 0x6c
 8001498:	4618      	mov	r0, r3
 800149a:	f000 ff4b 	bl	8002334 <_ZN7TMC2209C1Ev>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3394      	adds	r3, #148	; 0x94
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 ff46 	bl	8002334 <_ZN7TMC2209C1Ev>
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	33bc      	adds	r3, #188	; 0xbc
 80014ac:	4618      	mov	r0, r3
 80014ae:	f000 ff41 	bl	8002334 <_ZN7TMC2209C1Ev>
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	2200      	movs	r2, #0
 80014be:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2200      	movs	r2, #0
 80014c6:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	f04f 0200 	mov.w	r2, #0
 80014e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f04f 0200 	mov.w	r2, #0
 80014ee:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	2200      	movs	r2, #0
 80014f6:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	defaultAngle = defaultAngleT;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	68ba      	ldr	r2, [r7, #8]
 8001512:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
	defaultDistanse = defaultDistanseT;
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8

	startDWT();
 800151e:	f7ff ff28 	bl	8001372 <startDWT>
}
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4618      	mov	r0, r3
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	42200000 	.word	0x42200000
 8001530:	437a0000 	.word	0x437a0000

08001534 <_ZN7RoboArm13EmergencyStopEv>:

int RoboArm::CloseGripper() {
	return 0;
}

int RoboArm::EmergencyStop() {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, GPIO_PIN_SET);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001544:	2201      	movs	r2, #1
 8001546:	4619      	mov	r1, r3
 8001548:	f003 f94e 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, GPIO_PIN_SET);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	f003 f946 	bl	80047e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, GPIO_PIN_SET);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8001564:	2201      	movs	r2, #1
 8001566:	4619      	mov	r1, r3
 8001568:	f003 f93e 	bl	80047e8 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f004 fb70 	bl	8005c58 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	2104      	movs	r1, #4
 800157e:	4618      	mov	r0, r3
 8001580:	f004 fb6a 	bl	8005c58 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_3);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	2108      	movs	r1, #8
 800158a:	4618      	mov	r0, r3
 800158c:	f004 fb64 	bl	8005c58 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4618      	mov	r0, r3
 8001596:	f004 fa3f 	bl	8005a18 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	4618      	mov	r0, r3
 80015a0:	f004 fa3a 	bl	8005a18 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim3M3);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 fa35 	bl	8005a18 <HAL_TIM_Base_Stop_IT>

	return 0;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_ZN7RoboArm15GetLastPositionEv>:
 return 0;

 }
 */

int RoboArm::GetLastPosition() {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_ang = GetPosEncoders(1);
 80015c4:	2101      	movs	r1, #1
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fa64 	bl	8001a94 <_ZN7RoboArm14GetPosEncodersEh>
 80015cc:	6138      	str	r0, [r7, #16]
	while (posnowT_ang == 0xFFFF && ++attempts < 3)
 80015ce:	e004      	b.n	80015da <_ZN7RoboArm15GetLastPositionEv+0x22>
		posnowT_ang = GetPosEncoders(1);
 80015d0:	2101      	movs	r1, #1
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fa5e 	bl	8001a94 <_ZN7RoboArm14GetPosEncodersEh>
 80015d8:	6138      	str	r0, [r7, #16]
	while (posnowT_ang == 0xFFFF && ++attempts < 3)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d107      	bne.n	80015f4 <_ZN7RoboArm15GetLastPositionEv+0x3c>
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	3301      	adds	r3, #1
 80015e8:	617b      	str	r3, [r7, #20]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	dc01      	bgt.n	80015f4 <_ZN7RoboArm15GetLastPositionEv+0x3c>
 80015f0:	2301      	movs	r3, #1
 80015f2:	e000      	b.n	80015f6 <_ZN7RoboArm15GetLastPositionEv+0x3e>
 80015f4:	2300      	movs	r3, #0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ea      	bne.n	80015d0 <_ZN7RoboArm15GetLastPositionEv+0x18>
	lastPosAngle_Enc = GetAngleEncoders(posnowT_ang);
 80015fa:	6939      	ldr	r1, [r7, #16]
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f000 fa36 	bl	8001a6e <_ZN7RoboArm16GetAngleEncodersEm>
 8001602:	4602      	mov	r2, r0
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	attempts = 0;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_lin = GetPosEncoders(2);
 800160e:	2102      	movs	r1, #2
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 fa3f 	bl	8001a94 <_ZN7RoboArm14GetPosEncodersEh>
 8001616:	60f8      	str	r0, [r7, #12]
	while (posnowT_lin == 0xFFFF && ++attempts < 3)
 8001618:	e004      	b.n	8001624 <_ZN7RoboArm15GetLastPositionEv+0x6c>
		posnowT_lin = GetPosEncoders(2);
 800161a:	2102      	movs	r1, #2
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fa39 	bl	8001a94 <_ZN7RoboArm14GetPosEncodersEh>
 8001622:	60f8      	str	r0, [r7, #12]
	while (posnowT_lin == 0xFFFF && ++attempts < 3)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800162a:	4293      	cmp	r3, r2
 800162c:	d107      	bne.n	800163e <_ZN7RoboArm15GetLastPositionEv+0x86>
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3301      	adds	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	2b02      	cmp	r3, #2
 8001638:	dc01      	bgt.n	800163e <_ZN7RoboArm15GetLastPositionEv+0x86>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <_ZN7RoboArm15GetLastPositionEv+0x88>
 800163e:	2300      	movs	r3, #0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1ea      	bne.n	800161a <_ZN7RoboArm15GetLastPositionEv+0x62>
	float pos = GetAngleEncoders(posnowT_lin);
 8001644:	68f9      	ldr	r1, [r7, #12]
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f000 fa11 	bl	8001a6e <_ZN7RoboArm16GetAngleEncodersEm>
 800164c:	60b8      	str	r0, [r7, #8]
	lastPosLinear_Enc = pos * distMax / 360.0;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001652:	68b9      	ldr	r1, [r7, #8]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fb75 	bl	8000d44 <__aeabi_fmul>
 800165a:	4603      	mov	r3, r0
 800165c:	4906      	ldr	r1, [pc, #24]	; (8001678 <_ZN7RoboArm15GetLastPositionEv+0xc0>)
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fc24 	bl	8000eac <__aeabi_fdiv>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	return 0;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3718      	adds	r7, #24
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	43b40000 	.word	0x43b40000

0800167c <_ZN7RoboArm11Move2MotorsEff>:

int RoboArm::Move2Motors(float angle, float distance) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b08c      	sub	sp, #48	; 0x30
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]

	// TIM1 Х  enc1 -  угол 360  -  8 оборотов движка на 1 оборот энкодера
	// TIM2  Y  enc2 - линейный -  6,4516129 оборотов движка (это целое линейное перемещение с запасом) на 1 оборот энкодера

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f004 fae2 	bl	8005c58 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	2104      	movs	r1, #4
 800169a:	4618      	mov	r0, r3
 800169c:	f004 fadc 	bl	8005c58 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim1M1);			// остановили прерывание таймеров
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f004 f9b7 	bl	8005a18 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f004 f9b2 	bl	8005a18 <HAL_TIM_Base_Stop_IT>

	SetEnable(1, false);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2101      	movs	r1, #1
 80016b8:	68f8      	ldr	r0, [r7, #12]
 80016ba:	f000 fe03 	bl	80022c4 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 80016be:	2200      	movs	r2, #0
 80016c0:	2102      	movs	r1, #2
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 fdfe 	bl	80022c4 <_ZN7RoboArm9SetEnableEtb>

	GetLastPosition(); //update -> lastPosAngle lastPosLinear from ENCODER
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f7ff ff75 	bl	80015b8 <_ZN7RoboArm15GetLastPositionEv>

	float pos_ang = abs(lastPosAngle_Enc - angle);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80016d4:	68b9      	ldr	r1, [r7, #8]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff fa2a 	bl	8000b30 <__aeabi_fsub>
 80016dc:	4603      	mov	r3, r0
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff feb5 	bl	800144e <_ZSt3absf>
 80016e4:	62b8      	str	r0, [r7, #40]	; 0x28
	float inverse_pos_ang = abs(360.0 - pos_ang);
 80016e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80016e8:	f7fe fe9e 	bl	8000428 <__aeabi_f2d>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	f04f 0000 	mov.w	r0, #0
 80016f4:	4978      	ldr	r1, [pc, #480]	; (80018d8 <_ZN7RoboArm11Move2MotorsEff+0x25c>)
 80016f6:	f7fe fd37 	bl	8000168 <__aeabi_dsub>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	4610      	mov	r0, r2
 8001700:	4619      	mov	r1, r3
 8001702:	f7ff fe95 	bl	8001430 <_ZSt3absd>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	f7ff f9bb 	bl	8000a88 <__aeabi_d2f>
 8001712:	4603      	mov	r3, r0
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
	float actualPosAngle;

	/* виставили в яку сторону ехать мотору*/
	if (inverse_pos_ang < pos_ang) {
 8001716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001718:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800171a:	f7ff fcb1 	bl	8001080 <__aeabi_fcmplt>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d027      	beq.n	8001774 <_ZN7RoboArm11Move2MotorsEff+0xf8>
		actualPosAngle = inverse_pos_ang;
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (lastPosAngle_Enc < angle) {
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800172e:	4619      	mov	r1, r3
 8001730:	68b8      	ldr	r0, [r7, #8]
 8001732:	f7ff fcc3 	bl	80010bc <__aeabi_fcmpgt>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d008      	beq.n	800174e <_ZN7RoboArm11Move2MotorsEff+0xd2>
			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	6918      	ldr	r0, [r3, #16]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8a9b      	ldrh	r3, [r3, #20]
 8001744:	2200      	movs	r2, #0
 8001746:	4619      	mov	r1, r3
 8001748:	f003 f84e 	bl	80047e8 <HAL_GPIO_WritePin>
 800174c:	e039      	b.n	80017c2 <_ZN7RoboArm11Move2MotorsEff+0x146>
		} else if (lastPosAngle_Enc > angle) {
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8001754:	4619      	mov	r1, r3
 8001756:	68b8      	ldr	r0, [r7, #8]
 8001758:	f7ff fc92 	bl	8001080 <__aeabi_fcmplt>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d02f      	beq.n	80017c2 <_ZN7RoboArm11Move2MotorsEff+0x146>
			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	6918      	ldr	r0, [r3, #16]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	8a9b      	ldrh	r3, [r3, #20]
 800176a:	2201      	movs	r2, #1
 800176c:	4619      	mov	r1, r3
 800176e:	f003 f83b 	bl	80047e8 <HAL_GPIO_WritePin>
 8001772:	e026      	b.n	80017c2 <_ZN7RoboArm11Move2MotorsEff+0x146>
		}
	} else {
		actualPosAngle = pos_ang;
 8001774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001776:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (lastPosAngle_Enc < angle) {
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800177e:	4619      	mov	r1, r3
 8001780:	68b8      	ldr	r0, [r7, #8]
 8001782:	f7ff fc9b 	bl	80010bc <__aeabi_fcmpgt>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <_ZN7RoboArm11Move2MotorsEff+0x122>
			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6918      	ldr	r0, [r3, #16]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	8a9b      	ldrh	r3, [r3, #20]
 8001794:	2201      	movs	r2, #1
 8001796:	4619      	mov	r1, r3
 8001798:	f003 f826 	bl	80047e8 <HAL_GPIO_WritePin>
 800179c:	e011      	b.n	80017c2 <_ZN7RoboArm11Move2MotorsEff+0x146>
		} else if (lastPosAngle_Enc > angle) {
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80017a4:	4619      	mov	r1, r3
 80017a6:	68b8      	ldr	r0, [r7, #8]
 80017a8:	f7ff fc6a 	bl	8001080 <__aeabi_fcmplt>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d007      	beq.n	80017c2 <_ZN7RoboArm11Move2MotorsEff+0x146>
			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6918      	ldr	r0, [r3, #16]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	8a9b      	ldrh	r3, [r3, #20]
 80017ba:	2200      	movs	r2, #0
 80017bc:	4619      	mov	r1, r3
 80017be:	f003 f813 	bl	80047e8 <HAL_GPIO_WritePin>
//	if (lastPosLinear < distance) {
//		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
//	} else if (lastPosLinear > distance) {
//		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
//	}
	if (lastPosLinear_Enc < distance) {
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80017c8:	4619      	mov	r1, r3
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff fc76 	bl	80010bc <__aeabi_fcmpgt>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d008      	beq.n	80017e8 <_ZN7RoboArm11Move2MotorsEff+0x16c>
		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6998      	ldr	r0, [r3, #24]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	8b9b      	ldrh	r3, [r3, #28]
 80017de:	2200      	movs	r2, #0
 80017e0:	4619      	mov	r1, r3
 80017e2:	f003 f801 	bl	80047e8 <HAL_GPIO_WritePin>
 80017e6:	e011      	b.n	800180c <_ZN7RoboArm11Move2MotorsEff+0x190>
	} else if (lastPosLinear_Enc > distance) {
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80017ee:	4619      	mov	r1, r3
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f7ff fc45 	bl	8001080 <__aeabi_fcmplt>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d007      	beq.n	800180c <_ZN7RoboArm11Move2MotorsEff+0x190>
		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6998      	ldr	r0, [r3, #24]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	8b9b      	ldrh	r3, [r3, #28]
 8001804:	2201      	movs	r2, #1
 8001806:	4619      	mov	r1, r3
 8001808:	f002 ffee 	bl	80047e8 <HAL_GPIO_WritePin>
	}

//	actualPosAngle = abs(lastPosAngle - angle);
	float actualPosDistance = abs(lastPosLinear_Enc - distance);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff f98b 	bl	8000b30 <__aeabi_fsub>
 800181a:	4603      	mov	r3, r0
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fe16 	bl	800144e <_ZSt3absf>
 8001822:	6238      	str	r0, [r7, #32]

	//set microstepping TODO
	anglePsteps = (actualPosAngle * (8 * motorStep * drvMicroSteps)) / 360; //angle to steps
 8001824:	492d      	ldr	r1, [pc, #180]	; (80018dc <_ZN7RoboArm11Move2MotorsEff+0x260>)
 8001826:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001828:	f7ff fa8c 	bl	8000d44 <__aeabi_fmul>
 800182c:	4603      	mov	r3, r0
 800182e:	492c      	ldr	r1, [pc, #176]	; (80018e0 <_ZN7RoboArm11Move2MotorsEff+0x264>)
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fb3b 	bl	8000eac <__aeabi_fdiv>
 8001836:	4603      	mov	r3, r0
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fc49 	bl	80010d0 <__aeabi_f2uiz>
 800183e:	4602      	mov	r2, r0
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	645a      	str	r2, [r3, #68]	; 0x44
//	anglePsteps = anglePsteps+(anglePsteps*0.05);
	distPsteps = actualPosDistance * linearStepsMil; //steps to distanse
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	6a39      	ldr	r1, [r7, #32]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fa7a 	bl	8000d44 <__aeabi_fmul>
 8001850:	4603      	mov	r3, r0
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fc3c 	bl	80010d0 <__aeabi_f2uiz>
 8001858:	4602      	mov	r2, r0
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
//	lastPosAngle = angle;
//	lastPosLinear = distance;

// 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера

	uint32_t periodM1 = 1200;
 800185e:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8001862:	61fb      	str	r3, [r7, #28]
	uint32_t psc = 72 - 1;
 8001864:	2347      	movs	r3, #71	; 0x47
 8001866:	61bb      	str	r3, [r7, #24]
	uint32_t delimiter = 1;
 8001868:	2301      	movs	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
	uint32_t mnoj = 1;
 800186c:	2301      	movs	r3, #1
 800186e:	613b      	str	r3, [r7, #16]

	if (anglePsteps > distPsteps) {
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001878:	429a      	cmp	r2, r3
 800187a:	d933      	bls.n	80018e4 <_ZN7RoboArm11Move2MotorsEff+0x268>

		htim1M1->Instance->PSC = psc;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = periodM1;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1M1->Instance->CCR1 = periodM1 / 2;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	0852      	lsrs	r2, r2, #1
 800189a:	635a      	str	r2, [r3, #52]	; 0x34

		delimiter = anglePsteps / distPsteps;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a8:	617b      	str	r3, [r7, #20]
		mnoj = periodM1 * delimiter;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	fb02 f303 	mul.w	r3, r2, r3
 80018b2:	613b      	str	r3, [r7, #16]

		htim2M2->Instance->PSC = psc;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = mnoj;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	693a      	ldr	r2, [r7, #16]
 80018c6:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2M2->Instance->CCR2 = mnoj / 2;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	0852      	lsrs	r2, r2, #1
 80018d2:	639a      	str	r2, [r3, #56]	; 0x38
 80018d4:	e038      	b.n	8001948 <_ZN7RoboArm11Move2MotorsEff+0x2cc>
 80018d6:	bf00      	nop
 80018d8:	40768000 	.word	0x40768000
 80018dc:	46480000 	.word	0x46480000
 80018e0:	43b40000 	.word	0x43b40000

	} else if (anglePsteps < distPsteps) {
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d22b      	bcs.n	8001948 <_ZN7RoboArm11Move2MotorsEff+0x2cc>

		htim2M2->Instance->PSC = psc;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	69ba      	ldr	r2, [r7, #24]
 80018f8:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = periodM1;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2M2->Instance->CCR2 = periodM1 / 2;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	0852      	lsrs	r2, r2, #1
 800190e:	639a      	str	r2, [r3, #56]	; 0x38

		delimiter = distPsteps / anglePsteps;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001918:	fbb2 f3f3 	udiv	r3, r2, r3
 800191c:	617b      	str	r3, [r7, #20]
		mnoj = periodM1 * delimiter;
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	fb02 f303 	mul.w	r3, r2, r3
 8001926:	613b      	str	r3, [r7, #16]

		htim1M1->Instance->PSC = psc;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = mnoj;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1M1->Instance->CCR1 = mnoj / 2;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	0852      	lsrs	r2, r2, #1
 8001946:	635a      	str	r2, [r3, #52]	; 0x34
	}

	stateMoveM1 = true;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
	stateMoveM2 = true;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3

	SetEnable(1, true);
 8001958:	2201      	movs	r2, #1
 800195a:	2101      	movs	r1, #1
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 fcb1 	bl	80022c4 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 8001962:	2201      	movs	r2, #1
 8001964:	2102      	movs	r1, #2
 8001966:	68f8      	ldr	r0, [r7, #12]
 8001968:	f000 fcac 	bl	80022c4 <_ZN7RoboArm9SetEnableEtb>

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f004 f8ce 	bl	8005b14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	2104      	movs	r1, #4
 800197e:	4618      	mov	r0, r3
 8001980:	f004 f8c8 	bl	8005b14 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4618      	mov	r0, r3
 800198a:	f003 fff3 	bl	8005974 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	4618      	mov	r0, r3
 8001994:	f003 ffee 	bl	8005974 <HAL_TIM_Base_Start_IT>

	return 0;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3730      	adds	r7, #48	; 0x30
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop

080019a4 <_ZN7RoboArm13setPrintStateEb>:

int RoboArm::OpenGripper() {
	return 0;
}

int RoboArm::setPrintState(bool state) {
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
	if (state) {
 80019b0:	78fb      	ldrb	r3, [r7, #3]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d004      	beq.n	80019c0 <_ZN7RoboArm13setPrintStateEb+0x1c>
		PrintAllState = true;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
 80019be:	e003      	b.n	80019c8 <_ZN7RoboArm13setPrintStateEb+0x24>
	} else {
		PrintAllState = false;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
	}
	return 0;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bc80      	pop	{r7}
 80019d2:	4770      	bx	lr

080019d4 <_ZN7RoboArm13getPrintStateEv>:

bool RoboArm::getPrintState() {
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	if (PrintAllState) {
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <_ZN7RoboArm13getPrintStateEv+0x16>
		return true;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e000      	b.n	80019ec <_ZN7RoboArm13getPrintStateEv+0x18>
	} else {
		return false;
 80019ea:	2300      	movs	r3, #0
	}
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	370c      	adds	r7, #12
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc80      	pop	{r7}
 80019f4:	4770      	bx	lr

080019f6 <_ZN7RoboArm17SetMicrosteps4AllEh>:

int RoboArm::SetMicrosteps4All(uint8_t microsteps_per_step) {
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	6078      	str	r0, [r7, #4]
 80019fe:	460b      	mov	r3, r1
 8001a00:	70fb      	strb	r3, [r7, #3]

	tmcd_angle.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3394      	adds	r3, #148	; 0x94
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 fcec 	bl	80023e8 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	// tmcd_gripper.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
	tmcd_linear.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	336c      	adds	r3, #108	; 0x6c
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	4611      	mov	r1, r2
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fce5 	bl	80023e8 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

	return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>:

int RoboArm::SetSettEncoders(SPI_HandleTypeDef &arm_hspi1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc1T, uint16_t CS_Pin_Enc1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc2T, uint16_t CS_Pin_Enc2T,
		uint8_t ResolutionEncodersT) {
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	807b      	strh	r3, [r7, #2]

	arm_hspi1 = &arm_hspi1T;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	68ba      	ldr	r2, [r7, #8]
 8001a3a:	651a      	str	r2, [r3, #80]	; 0x50
	CS_GPIO_Port_Enc1 = CS_GPIO_Port_Enc1T;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	659a      	str	r2, [r3, #88]	; 0x58
	CS_Pin_Enc1 = CS_Pin_Enc1T;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	887a      	ldrh	r2, [r7, #2]
 8001a46:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	CS_Pin_Enc2 = CS_Pin_Enc2T;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	8bba      	ldrh	r2, [r7, #28]
 8001a4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	CS_GPIO_Port_Enc2 = CS_GPIO_Port_Enc2T;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	661a      	str	r2, [r3, #96]	; 0x60
	ResolutionEncoders = ResolutionEncodersT;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	return 0;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <_ZN7RoboArm16GetAngleEncodersEm>:

float RoboArm::GetAngleEncoders(uint32_t encoderValue) {
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	6039      	str	r1, [r7, #0]
	//	https://www.cuidevices.com/product/resource/amt22.pdf
	return calculateAngle(encoderValue, ResolutionEncoders);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	b29a      	uxth	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001a82:	4619      	mov	r1, r3
 8001a84:	4610      	mov	r0, r2
 8001a86:	f7ff fc0f 	bl	80012a8 <calculateAngle>
 8001a8a:	4603      	mov	r3, r0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_ZN7RoboArm14GetPosEncodersEh>:

uint32_t RoboArm::GetPosEncoders(uint8_t numEnc) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	70fb      	strb	r3, [r7, #3]
	switch (numEnc) {
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d002      	beq.n	8001aac <_ZN7RoboArm14GetPosEncodersEh+0x18>
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d013      	beq.n	8001ad2 <_ZN7RoboArm14GetPosEncodersEh+0x3e>
 8001aaa:	e025      	b.n	8001af8 <_ZN7RoboArm14GetPosEncodersEh+0x64>
	case 1:
		posNowEnc1 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001ac0:	f7ff fb64 	bl	800118c <getPositionSPI>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	665a      	str	r2, [r3, #100]	; 0x64
				ResolutionEncoders);
		return posNowEnc1;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001ad0:	e013      	b.n	8001afa <_ZN7RoboArm14GetPosEncodersEh+0x66>
		break;
	case 2:
		posNowEnc2 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001ae6:	f7ff fb51 	bl	800118c <getPositionSPI>
 8001aea:	4603      	mov	r3, r0
 8001aec:	461a      	mov	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	669a      	str	r2, [r3, #104]	; 0x68
				ResolutionEncoders);
		return posNowEnc2;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001af6:	e000      	b.n	8001afa <_ZN7RoboArm14GetPosEncodersEh+0x66>
		break;
	default:
		return 1;
 8001af8:	2301      	movs	r3, #1
		break;
	}
	return 0;
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <_ZN7RoboArm11GetStatusMsEP7TMC2209>:

int RoboArm::GetStatusMs(TMC2209 *tmcd) {
 8001b04:	b590      	push	{r4, r7, lr}
 8001b06:	b0cd      	sub	sp, #308	; 0x134
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b0e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001b12:	6018      	str	r0, [r3, #0]
 8001b14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b1c:	6019      	str	r1, [r3, #0]

	TMC2209::Settings settings = tmcd->getSettings();
 8001b1e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b2a:	6819      	ldr	r1, [r3, #0]
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	f000 fd59 	bl	80025e4 <_ZN7TMC220911getSettingsEv>
	uint8_t version = tmcd->getVersion();
 8001b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	f000 fcda 	bl	80024f4 <_ZN7TMC220910getVersionEv>
 8001b40:	4603      	mov	r3, r0
 8001b42:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	uint8_t global_status = tmcd->getGlobalStatus();
 8001b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b4e:	6818      	ldr	r0, [r3, #0]
 8001b50:	f000 fe6d 	bl	800282e <_ZN7TMC220915getGlobalStatusEv>
 8001b54:	4603      	mov	r3, r0
 8001b56:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
	uint16_t iopins = tmcd->getIOPins();
 8001b5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b62:	6818      	ldr	r0, [r3, #0]
 8001b64:	f000 fce6 	bl	8002534 <_ZN7TMC22099getIOPinsEv>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
	uint16_t mscnt = tmcd->getMicrostepCounter();
 8001b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b76:	6818      	ldr	r0, [r3, #0]
 8001b78:	f000 fe75 	bl	8002866 <_ZN7TMC220919getMicrostepCounterEv>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
	uint32_t drv_status = tmcd->readDrvStatusBytes();
 8001b82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b8a:	6818      	ldr	r0, [r3, #0]
 8001b8c:	f000 fe42 	bl	8002814 <_ZN7TMC220918readDrvStatusBytesEv>
 8001b90:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
	uint16_t sg_result = tmcd->getStallGuardResult();
 8001b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b9c:	6818      	ldr	r0, [r3, #0]
 8001b9e:	f000 fe54 	bl	800284a <_ZN7TMC220919getStallGuardResultEv>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f8a7 3122 	strh.w	r3, [r7, #290]	; 0x122
	HAL_HalfDuplex_EnableTransmitter(huartTmc);
 8001ba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f005 fa01 	bl	8006fbe <HAL_HalfDuplex_EnableTransmitter>
	char str[255];
	HAL_UART_Transmit(huartPrint, (uint8_t*) "\r\n----------\r\n\0",
 8001bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f8d3 00e8 	ldr.w	r0, [r3, #232]	; 0xe8
 8001bca:	231e      	movs	r3, #30
 8001bcc:	220e      	movs	r2, #14
 8001bce:	497c      	ldr	r1, [pc, #496]	; (8001dc0 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2bc>)
 8001bd0:	f004 fe0b 	bl	80067ea <HAL_UART_Transmit>
			strlen("\r\n----------\r\n\0"), 30);

	if (!settings.is_communicating) {
 8001bd4:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
 8001bd8:	f083 0301 	eor.w	r3, r3, #1
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d01b      	beq.n	8001c1a <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x116>
		sprintf(str, "\rIS NOT COMMUNICATING\r\n\0");
 8001be2:	f107 030c 	add.w	r3, r7, #12
 8001be6:	4977      	ldr	r1, [pc, #476]	; (8001dc4 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2c0>)
 8001be8:	4618      	mov	r0, r3
 8001bea:	f007 fc41 	bl	8009470 <siprintf>
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001bf2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001bfc:	f107 030c 	add.w	r3, r7, #12
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe faa5 	bl	8000150 <strlen>
 8001c06:	4603      	mov	r3, r0
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	f107 010c 	add.w	r1, r7, #12
 8001c0e:	231e      	movs	r3, #30
 8001c10:	4620      	mov	r0, r4
 8001c12:	f004 fdea 	bl	80067ea <HAL_UART_Transmit>
		return 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	e1c6      	b.n	8001fa8 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x4a4>
	} else {

		sprintf(str, "\rsettings.is_communicating = %d\r\n\0",
				settings.is_communicating);
 8001c1a:	f897 310c 	ldrb.w	r3, [r7, #268]	; 0x10c
		sprintf(str, "\rsettings.is_communicating = %d\r\n\0",
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f107 030c 	add.w	r3, r7, #12
 8001c24:	4968      	ldr	r1, [pc, #416]	; (8001dc8 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2c4>)
 8001c26:	4618      	mov	r0, r3
 8001c28:	f007 fc22 	bl	8009470 <siprintf>
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001c3a:	f107 030c 	add.w	r3, r7, #12
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7fe fa86 	bl	8000150 <strlen>
 8001c44:	4603      	mov	r3, r0
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	f107 010c 	add.w	r1, r7, #12
 8001c4c:	231e      	movs	r3, #30
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f004 fdcb 	bl	80067ea <HAL_UART_Transmit>
		sprintf(str, "\rsettings.is_setup = %d\r\n\0", settings.is_setup);
 8001c54:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 8001c58:	461a      	mov	r2, r3
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	495b      	ldr	r1, [pc, #364]	; (8001dcc <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2c8>)
 8001c60:	4618      	mov	r0, r3
 8001c62:	f007 fc05 	bl	8009470 <siprintf>
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001c66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001c6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001c74:	f107 030c 	add.w	r3, r7, #12
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7fe fa69 	bl	8000150 <strlen>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	f107 010c 	add.w	r1, r7, #12
 8001c86:	231e      	movs	r3, #30
 8001c88:	4620      	mov	r0, r4
 8001c8a:	f004 fdae 	bl	80067ea <HAL_UART_Transmit>
		sprintf(str, "\rsettings.software_enabled = %d\r\n\0",
				settings.software_enabled);
 8001c8e:	f897 310e 	ldrb.w	r3, [r7, #270]	; 0x10e
		sprintf(str, "\rsettings.software_enabled = %d\r\n\0",
 8001c92:	461a      	mov	r2, r3
 8001c94:	f107 030c 	add.w	r3, r7, #12
 8001c98:	494d      	ldr	r1, [pc, #308]	; (8001dd0 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2cc>)
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f007 fbe8 	bl	8009470 <siprintf>
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001ca0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ca4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001cae:	f107 030c 	add.w	r3, r7, #12
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7fe fa4c 	bl	8000150 <strlen>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	b29a      	uxth	r2, r3
 8001cbc:	f107 010c 	add.w	r1, r7, #12
 8001cc0:	231e      	movs	r3, #30
 8001cc2:	4620      	mov	r0, r4
 8001cc4:	f004 fd91 	bl	80067ea <HAL_UART_Transmit>
		sprintf(str, "\rsettings.microsteps_per_step = %d\r\n\0",
				settings.microsteps_per_step);
 8001cc8:	f8b7 3110 	ldrh.w	r3, [r7, #272]	; 0x110
		sprintf(str, "\rsettings.microsteps_per_step = %d\r\n\0",
 8001ccc:	461a      	mov	r2, r3
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	4940      	ldr	r1, [pc, #256]	; (8001dd4 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2d0>)
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f007 fbcb 	bl	8009470 <siprintf>
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001cda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001cde:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001ce8:	f107 030c 	add.w	r3, r7, #12
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7fe fa2f 	bl	8000150 <strlen>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	f107 010c 	add.w	r1, r7, #12
 8001cfa:	231e      	movs	r3, #30
 8001cfc:	4620      	mov	r0, r4
 8001cfe:	f004 fd74 	bl	80067ea <HAL_UART_Transmit>
		sprintf(str, "\rsettings.inverse_motor_direction_enabled = %d\r\n\0",
				settings.inverse_motor_direction_enabled);
 8001d02:	f897 3112 	ldrb.w	r3, [r7, #274]	; 0x112
		sprintf(str, "\rsettings.inverse_motor_direction_enabled = %d\r\n\0",
 8001d06:	461a      	mov	r2, r3
 8001d08:	f107 030c 	add.w	r3, r7, #12
 8001d0c:	4932      	ldr	r1, [pc, #200]	; (8001dd8 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2d4>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f007 fbae 	bl	8009470 <siprintf>
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001d14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d18:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7fe fa12 	bl	8000150 <strlen>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	f107 010c 	add.w	r1, r7, #12
 8001d34:	231e      	movs	r3, #30
 8001d36:	4620      	mov	r0, r4
 8001d38:	f004 fd57 	bl	80067ea <HAL_UART_Transmit>
		sprintf(str, "\rsettings.stealth_chop_enabled = %d\r\n\0",
				settings.stealth_chop_enabled);
 8001d3c:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
		sprintf(str, "\rsettings.stealth_chop_enabled = %d\r\n\0",
 8001d40:	461a      	mov	r2, r3
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	4925      	ldr	r1, [pc, #148]	; (8001ddc <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2d8>)
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f007 fb91 	bl	8009470 <siprintf>
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001d52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001d5c:	f107 030c 	add.w	r3, r7, #12
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7fe f9f5 	bl	8000150 <strlen>
 8001d66:	4603      	mov	r3, r0
 8001d68:	b29a      	uxth	r2, r3
 8001d6a:	f107 010c 	add.w	r1, r7, #12
 8001d6e:	231e      	movs	r3, #30
 8001d70:	4620      	mov	r0, r4
 8001d72:	f004 fd3a 	bl	80067ea <HAL_UART_Transmit>

		switch (settings.standstill_mode) {
 8001d76:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
 8001d7a:	2b03      	cmp	r3, #3
 8001d7c:	d83d      	bhi.n	8001dfa <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2f6>
 8001d7e:	a201      	add	r2, pc, #4	; (adr r2, 8001d84 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x280>)
 8001d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d84:	08001d95 	.word	0x08001d95
 8001d88:	08001da3 	.word	0x08001da3
 8001d8c:	08001db1 	.word	0x08001db1
 8001d90:	08001ded 	.word	0x08001ded
		case TMC2209::NORMAL:
			sprintf(str, "\rsettings.standstill_mode = normal\r\n\0");
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	4911      	ldr	r1, [pc, #68]	; (8001de0 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2dc>)
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f007 fb68 	bl	8009470 <siprintf>
			break;
 8001da0:	e02b      	b.n	8001dfa <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2f6>
		case TMC2209::FREEWHEELING:
			sprintf(str, "\rsettings.standstill_mode = freewheeling\r\n\0");
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	490f      	ldr	r1, [pc, #60]	; (8001de4 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2e0>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f007 fb61 	bl	8009470 <siprintf>
			break;
 8001dae:	e024      	b.n	8001dfa <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2f6>
		case TMC2209::STRONG_BRAKING:
			sprintf(str, "\rsettings.standstill_mode = strong_braking\r\n\0");
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	490c      	ldr	r1, [pc, #48]	; (8001de8 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2e4>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f007 fb5a 	bl	8009470 <siprintf>
			break;
 8001dbc:	e01d      	b.n	8001dfa <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x2f6>
 8001dbe:	bf00      	nop
 8001dc0:	0800b7d0 	.word	0x0800b7d0
 8001dc4:	0800b7e0 	.word	0x0800b7e0
 8001dc8:	0800b7fc 	.word	0x0800b7fc
 8001dcc:	0800b820 	.word	0x0800b820
 8001dd0:	0800b83c 	.word	0x0800b83c
 8001dd4:	0800b860 	.word	0x0800b860
 8001dd8:	0800b888 	.word	0x0800b888
 8001ddc:	0800b8bc 	.word	0x0800b8bc
 8001de0:	0800b8e4 	.word	0x0800b8e4
 8001de4:	0800b90c 	.word	0x0800b90c
 8001de8:	0800b938 	.word	0x0800b938
		case TMC2209::BRAKING:
			sprintf(str, "\rsettings.standstill_mode = braking\r\n\0");
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	4970      	ldr	r1, [pc, #448]	; (8001fb4 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x4b0>)
 8001df2:	4618      	mov	r0, r3
 8001df4:	f007 fb3c 	bl	8009470 <siprintf>
			break;
 8001df8:	bf00      	nop
		}
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001dfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe f99f 	bl	8000150 <strlen>
 8001e12:	4603      	mov	r3, r0
 8001e14:	b29a      	uxth	r2, r3
 8001e16:	f107 010c 	add.w	r1, r7, #12
 8001e1a:	231e      	movs	r3, #30
 8001e1c:	4620      	mov	r0, r4
 8001e1e:	f004 fce4 	bl	80067ea <HAL_UART_Transmit>
		sprintf(str, "\rGSTAT   = 0x%02x\r\n\0", global_status);
 8001e22:	f897 212e 	ldrb.w	r2, [r7, #302]	; 0x12e
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	4963      	ldr	r1, [pc, #396]	; (8001fb8 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x4b4>)
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f007 fb1f 	bl	8009470 <siprintf>
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe f983 	bl	8000150 <strlen>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b29a      	uxth	r2, r3
 8001e4e:	f107 010c 	add.w	r1, r7, #12
 8001e52:	231e      	movs	r3, #30
 8001e54:	4620      	mov	r0, r4
 8001e56:	f004 fcc8 	bl	80067ea <HAL_UART_Transmit>
		sprintf(str, "\rIOPins  = 0x%03x\r\n\0", iopins);
 8001e5a:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	4956      	ldr	r1, [pc, #344]	; (8001fbc <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x4b8>)
 8001e64:	4618      	mov	r0, r3
 8001e66:	f007 fb03 	bl	8009470 <siprintf>
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7fe f967 	bl	8000150 <strlen>
 8001e82:	4603      	mov	r3, r0
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	f107 010c 	add.w	r1, r7, #12
 8001e8a:	231e      	movs	r3, #30
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f004 fcac 	bl	80067ea <HAL_UART_Transmit>
		sprintf(str, "\rVersion = %d\r\n\0", version);
 8001e92:	f897 212f 	ldrb.w	r2, [r7, #303]	; 0x12f
 8001e96:	f107 030c 	add.w	r3, r7, #12
 8001e9a:	4949      	ldr	r1, [pc, #292]	; (8001fc0 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x4bc>)
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f007 fae7 	bl	8009470 <siprintf>
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ea6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001eb0:	f107 030c 	add.w	r3, r7, #12
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7fe f94b 	bl	8000150 <strlen>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	f107 010c 	add.w	r1, r7, #12
 8001ec2:	231e      	movs	r3, #30
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	f004 fc90 	bl	80067ea <HAL_UART_Transmit>
		sprintf(str, "\rSGRES   = %d\r\n\0", sg_result);
 8001eca:	f8b7 2122 	ldrh.w	r2, [r7, #290]	; 0x122
 8001ece:	f107 030c 	add.w	r3, r7, #12
 8001ed2:	493c      	ldr	r1, [pc, #240]	; (8001fc4 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x4c0>)
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f007 facb 	bl	8009470 <siprintf>
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001ede:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001ee8:	f107 030c 	add.w	r3, r7, #12
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe f92f 	bl	8000150 <strlen>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	b29a      	uxth	r2, r3
 8001ef6:	f107 010c 	add.w	r1, r7, #12
 8001efa:	231e      	movs	r3, #30
 8001efc:	4620      	mov	r0, r4
 8001efe:	f004 fc74 	bl	80067ea <HAL_UART_Transmit>
		sprintf(str, "\rMSCNT   = %d\r\n\0", mscnt);
 8001f02:	f8b7 212a 	ldrh.w	r2, [r7, #298]	; 0x12a
 8001f06:	f107 030c 	add.w	r3, r7, #12
 8001f0a:	492f      	ldr	r1, [pc, #188]	; (8001fc8 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x4c4>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f007 faaf 	bl	8009470 <siprintf>
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe f913 	bl	8000150 <strlen>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	f107 010c 	add.w	r1, r7, #12
 8001f32:	231e      	movs	r3, #30
 8001f34:	4620      	mov	r0, r4
 8001f36:	f004 fc58 	bl	80067ea <HAL_UART_Transmit>
		sprintf(str, "\rDRVSTATUS = 0x%08x\r\n\0", drv_status);
 8001f3a:	f107 030c 	add.w	r3, r7, #12
 8001f3e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001f42:	4922      	ldr	r1, [pc, #136]	; (8001fcc <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x4c8>)
 8001f44:	4618      	mov	r0, r3
 8001f46:	f007 fa93 	bl	8009470 <siprintf>
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001f4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001f58:	f107 030c 	add.w	r3, r7, #12
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe f8f7 	bl	8000150 <strlen>
 8001f62:	4603      	mov	r3, r0
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	f107 010c 	add.w	r1, r7, #12
 8001f6a:	231e      	movs	r3, #30
 8001f6c:	4620      	mov	r0, r4
 8001f6e:	f004 fc3c 	bl	80067ea <HAL_UART_Transmit>
		sprintf(str, "\r\n\0");
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	4916      	ldr	r1, [pc, #88]	; (8001fd0 <_ZN7RoboArm11GetStatusMsEP7TMC2209+0x4cc>)
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f007 fa79 	bl	8009470 <siprintf>
		HAL_UART_Transmit(huartPrint, (uint8_t*) str, strlen(str), 30);
 8001f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8001f82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe f8dd 	bl	8000150 <strlen>
 8001f96:	4603      	mov	r3, r0
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	f107 010c 	add.w	r1, r7, #12
 8001f9e:	231e      	movs	r3, #30
 8001fa0:	4620      	mov	r0, r4
 8001fa2:	f004 fc22 	bl	80067ea <HAL_UART_Transmit>
	}

	return 0;
 8001fa6:	2300      	movs	r3, #0
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd90      	pop	{r4, r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	0800b968 	.word	0x0800b968
 8001fb8:	0800b990 	.word	0x0800b990
 8001fbc:	0800b9a8 	.word	0x0800b9a8
 8001fc0:	0800b9c0 	.word	0x0800b9c0
 8001fc4:	0800b9d4 	.word	0x0800b9d4
 8001fc8:	0800b9e8 	.word	0x0800b9e8
 8001fcc:	0800b9fc 	.word	0x0800b9fc
 8001fd0:	0800ba14 	.word	0x0800ba14

08001fd4 <_ZN7RoboArm15SetSoftwareZeroEv>:
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2);
	HAL_Delay(250);
	return 0;
}

int RoboArm::SetSoftwareZero() {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
//	ang_zero = GetPosEncoders(1);
//	lin_zero = GetPosEncoders(2);

	int attempts = 0;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_1 = GetPosEncoders(1);
 8001fe0:	2101      	movs	r1, #1
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7ff fd56 	bl	8001a94 <_ZN7RoboArm14GetPosEncodersEh>
 8001fe8:	6138      	str	r0, [r7, #16]

	while (posnowT_1 == 0xFFFF && ++attempts < 3)
 8001fea:	e004      	b.n	8001ff6 <_ZN7RoboArm15SetSoftwareZeroEv+0x22>
		posnowT_1 = GetPosEncoders(1); //try again
 8001fec:	2101      	movs	r1, #1
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff fd50 	bl	8001a94 <_ZN7RoboArm14GetPosEncodersEh>
 8001ff4:	6138      	str	r0, [r7, #16]
	while (posnowT_1 == 0xFFFF && ++attempts < 3)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d107      	bne.n	8002010 <_ZN7RoboArm15SetSoftwareZeroEv+0x3c>
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	3301      	adds	r3, #1
 8002004:	617b      	str	r3, [r7, #20]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	2b02      	cmp	r3, #2
 800200a:	dc01      	bgt.n	8002010 <_ZN7RoboArm15SetSoftwareZeroEv+0x3c>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <_ZN7RoboArm15SetSoftwareZeroEv+0x3e>
 8002010:	2300      	movs	r3, #0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1ea      	bne.n	8001fec <_ZN7RoboArm15SetSoftwareZeroEv+0x18>

	attempts = 0;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]

	//			float ang = posnowT*360/16384;
	ang_zero = GetAngleEncoders(posnowT_1); // - defaultAngle; //0, 120, 240
 800201a:	6939      	ldr	r1, [r7, #16]
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f7ff fd26 	bl	8001a6e <_ZN7RoboArm16GetAngleEncodersEm>
 8002022:	4602      	mov	r2, r0
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	//			un_send.params.ang = angleT;

	uint32_t posnowT_2 = GetPosEncoders(2);
 800202a:	2102      	movs	r1, #2
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7ff fd31 	bl	8001a94 <_ZN7RoboArm14GetPosEncodersEh>
 8002032:	60f8      	str	r0, [r7, #12]
	while (posnowT_2 == 0xFFFF && ++attempts < 3)
 8002034:	e004      	b.n	8002040 <_ZN7RoboArm15SetSoftwareZeroEv+0x6c>
		posnowT_2 = GetPosEncoders(2); //try again
 8002036:	2102      	movs	r1, #2
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fd2b 	bl	8001a94 <_ZN7RoboArm14GetPosEncodersEh>
 800203e:	60f8      	str	r0, [r7, #12]
	while (posnowT_2 == 0xFFFF && ++attempts < 3)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002046:	4293      	cmp	r3, r2
 8002048:	d107      	bne.n	800205a <_ZN7RoboArm15SetSoftwareZeroEv+0x86>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	3301      	adds	r3, #1
 800204e:	617b      	str	r3, [r7, #20]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	2b02      	cmp	r3, #2
 8002054:	dc01      	bgt.n	800205a <_ZN7RoboArm15SetSoftwareZeroEv+0x86>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <_ZN7RoboArm15SetSoftwareZeroEv+0x88>
 800205a:	2300      	movs	r3, #0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d1ea      	bne.n	8002036 <_ZN7RoboArm15SetSoftwareZeroEv+0x62>
	float ang_pos = GetAngleEncoders(posnowT_2);
 8002060:	68f9      	ldr	r1, [r7, #12]
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff fd03 	bl	8001a6e <_ZN7RoboArm16GetAngleEncodersEm>
 8002068:	60b8      	str	r0, [r7, #8]
	lin_zero = ang_pos * distMax / 360.0;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206e:	68b9      	ldr	r1, [r7, #8]
 8002070:	4618      	mov	r0, r3
 8002072:	f7fe fe67 	bl	8000d44 <__aeabi_fmul>
 8002076:	4603      	mov	r3, r0
 8002078:	4906      	ldr	r1, [pc, #24]	; (8002094 <_ZN7RoboArm15SetSoftwareZeroEv+0xc0>)
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe ff16 	bl	8000eac <__aeabi_fdiv>
 8002080:	4603      	mov	r3, r0
 8002082:	461a      	mov	r2, r3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	return 0;
 800208a:	2300      	movs	r3, #0
}
 800208c:	4618      	mov	r0, r3
 800208e:	3718      	adds	r7, #24
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}
 8002094:	43b40000 	.word	0x43b40000

08002098 <_ZN7RoboArm17ShiftZeroInputAngEf>:

float RoboArm::ShiftZeroInputAng(float angle) {
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
	float ang_actual = ang_zero + angle;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80020a8:	4619      	mov	r1, r3
 80020aa:	6838      	ldr	r0, [r7, #0]
 80020ac:	f7fe fd42 	bl	8000b34 <__addsf3>
 80020b0:	4603      	mov	r3, r0
 80020b2:	60fb      	str	r3, [r7, #12]
	if (ang_actual > 360.0)
 80020b4:	4908      	ldr	r1, [pc, #32]	; (80020d8 <_ZN7RoboArm17ShiftZeroInputAngEf+0x40>)
 80020b6:	68f8      	ldr	r0, [r7, #12]
 80020b8:	f7ff f800 	bl	80010bc <__aeabi_fcmpgt>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d005      	beq.n	80020ce <_ZN7RoboArm17ShiftZeroInputAngEf+0x36>
		ang_actual -= 360.0;
 80020c2:	4905      	ldr	r1, [pc, #20]	; (80020d8 <_ZN7RoboArm17ShiftZeroInputAngEf+0x40>)
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f7fe fd33 	bl	8000b30 <__aeabi_fsub>
 80020ca:	4603      	mov	r3, r0
 80020cc:	60fb      	str	r3, [r7, #12]
	return ang_actual;
 80020ce:	68fb      	ldr	r3, [r7, #12]
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	43b40000 	.word	0x43b40000

080020dc <_ZN7RoboArm17ShiftZeroInputLinEf>:

float RoboArm::ShiftZeroInputLin(float distance) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
	float lin_actual = lin_zero + distance;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80020ec:	4619      	mov	r1, r3
 80020ee:	6838      	ldr	r0, [r7, #0]
 80020f0:	f7fe fd20 	bl	8000b34 <__addsf3>
 80020f4:	4603      	mov	r3, r0
 80020f6:	60fb      	str	r3, [r7, #12]
	if (lin_actual > distMax)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020fc:	4619      	mov	r1, r3
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f7fe ffdc 	bl	80010bc <__aeabi_fcmpgt>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d007      	beq.n	800211a <_ZN7RoboArm17ShiftZeroInputLinEf+0x3e>
		lin_actual -= distMax;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210e:	4619      	mov	r1, r3
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f7fe fd0d 	bl	8000b30 <__aeabi_fsub>
 8002116:	4603      	mov	r3, r0
 8002118:	60fb      	str	r3, [r7, #12]
	return lin_actual;
 800211a:	68fb      	ldr	r3, [r7, #12]
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <_ZN7RoboArm18ShiftZeroOutputAngEf>:

float RoboArm::ShiftZeroOutputAng(float ang_actual) {
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
	float ang = ang_actual - ang_zero;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8002134:	4619      	mov	r1, r3
 8002136:	6838      	ldr	r0, [r7, #0]
 8002138:	f7fe fcfa 	bl	8000b30 <__aeabi_fsub>
 800213c:	4603      	mov	r3, r0
 800213e:	60fb      	str	r3, [r7, #12]
	if (ang < 0.0)
 8002140:	f04f 0100 	mov.w	r1, #0
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f7fe ff9b 	bl	8001080 <__aeabi_fcmplt>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <_ZN7RoboArm18ShiftZeroOutputAngEf+0x38>
		ang = 360.0 + ang;
 8002150:	4905      	ldr	r1, [pc, #20]	; (8002168 <_ZN7RoboArm18ShiftZeroOutputAngEf+0x44>)
 8002152:	68f8      	ldr	r0, [r7, #12]
 8002154:	f7fe fcee 	bl	8000b34 <__addsf3>
 8002158:	4603      	mov	r3, r0
 800215a:	60fb      	str	r3, [r7, #12]
	return ang;
 800215c:	68fb      	ldr	r3, [r7, #12]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	43b40000 	.word	0x43b40000

0800216c <_ZN7RoboArm18ShiftZeroOutputLinEf>:

float RoboArm::ShiftZeroOutputLin(float lin_actual) {
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
	float lin = lin_actual - lin_zero;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800217c:	4619      	mov	r1, r3
 800217e:	6838      	ldr	r0, [r7, #0]
 8002180:	f7fe fcd6 	bl	8000b30 <__aeabi_fsub>
 8002184:	4603      	mov	r3, r0
 8002186:	60fb      	str	r3, [r7, #12]
	if (lin < 0.0)
 8002188:	f04f 0100 	mov.w	r1, #0
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f7fe ff77 	bl	8001080 <__aeabi_fcmplt>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d007      	beq.n	80021a8 <_ZN7RoboArm18ShiftZeroOutputLinEf+0x3c>
		lin = distMax + lin;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800219c:	4619      	mov	r1, r3
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f7fe fcc8 	bl	8000b34 <__addsf3>
 80021a4:	4603      	mov	r3, r0
 80021a6:	60fb      	str	r3, [r7, #12]
	return lin;
 80021a8:	68fb      	ldr	r3, [r7, #12]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefS1_R17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_t>:
		GPIO_TypeDef *Dir1_GPIO_Port_M1T, uint16_t Dir1_Pin_M1T,
		GPIO_TypeDef *Dir2_GPIO_Port_M2T, uint16_t Dir2_Pin_M2T,
		GPIO_TypeDef *Dir3_GPIO_Port_M3T, uint16_t Dir3_Pin_M3T,
		GPIO_TypeDef *En1_GPIO_Port_M1T, uint16_t En1_Pin_M1T,
		GPIO_TypeDef *En2_GPIO_Port_M2T, uint16_t En2_Pin_M2T,
		GPIO_TypeDef *En3_GPIO_Port_M3T, uint16_t En3_Pin_M3T) {
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	607a      	str	r2, [r7, #4]
 80021be:	603b      	str	r3, [r7, #0]
//		UART_HandleTypeDef &huart_tmcT) {
	htim1M1 = &htim1;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	605a      	str	r2, [r3, #4]
	htim2M2 = &htim2;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	609a      	str	r2, [r3, #8]
	htim3M3 = &htim3;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	60da      	str	r2, [r3, #12]

	huartTmc = &huartTmcT;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
	huartPrint = &huartPrintT;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	687a      	ldr	r2, [r7, #4]
 80021de:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

	Dir1_GPIO_Port_M1 = Dir1_GPIO_Port_M1T;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a3a      	ldr	r2, [r7, #32]
 80021e6:	611a      	str	r2, [r3, #16]
	Dir1_Pin_M1 = Dir1_Pin_M1T;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80021ec:	829a      	strh	r2, [r3, #20]
	Dir2_GPIO_Port_M2 = Dir2_GPIO_Port_M2T;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80021f2:	619a      	str	r2, [r3, #24]
	Dir2_Pin_M2 = Dir2_Pin_M2T;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80021f8:	839a      	strh	r2, [r3, #28]
	Dir3_GPIO_Port_M3 = Dir3_GPIO_Port_M3T;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80021fe:	621a      	str	r2, [r3, #32]
	Dir3_Pin_M3 = Dir3_Pin_M3T;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002204:	849a      	strh	r2, [r3, #36]	; 0x24

	En1_GPIO_Port_M1 = En1_GPIO_Port_M1T;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800220a:	629a      	str	r2, [r3, #40]	; 0x28
	En1_Pin_M1 = En1_Pin_M1T;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8002210:	859a      	strh	r2, [r3, #44]	; 0x2c
	En2_GPIO_Port_M2 = En2_GPIO_Port_M2T;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
	En2_Pin_M2 = En2_Pin_M2T;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800221e:	869a      	strh	r2, [r3, #52]	; 0x34
	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002224:	639a      	str	r2, [r3, #56]	; 0x38
	En3_Pin_M3 = En3_Pin_M3T;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800222c:	879a      	strh	r2, [r3, #60]	; 0x3c

	SetEnable(1, true);
 800222e:	2201      	movs	r2, #1
 8002230:	2101      	movs	r1, #1
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f846 	bl	80022c4 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 8002238:	2201      	movs	r2, #1
 800223a:	2102      	movs	r1, #2
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f841 	bl	80022c4 <_ZN7RoboArm9SetEnableEtb>
//	SetEnable(3, true);

	tmcd_angle.setup(huartTmc, 9600, tmcd_angle.SERIAL_ADDRESS_0);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f103 0094 	add.w	r0, r3, #148	; 0x94
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 800224e:	2300      	movs	r3, #0
 8002250:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002254:	f000 f88a 	bl	800236c <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	//tmcd_gripper.setup(huartTmc, 115200, tmcd_gripper.SERIAL_ADDRESS_1);
	tmcd_linear.setup(huartTmc, 9600, tmcd_linear.SERIAL_ADDRESS_3);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8002264:	2303      	movs	r3, #3
 8002266:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800226a:	f000 f87f 	bl	800236c <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	//	tmcd_gripper.disableAutomaticGradientAdaptation();

//	tmcd_linear.disableAutomaticCurrentScaling();
//	tmcd_linear.disableAutomaticGradientAdaptation();

	GetStatusMs(&tmcd_angle);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	3394      	adds	r3, #148	; 0x94
 8002272:	4619      	mov	r1, r3
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f7ff fc45 	bl	8001b04 <_ZN7RoboArm11GetStatusMsEP7TMC2209>
	GetStatusMs(&tmcd_linear);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	336c      	adds	r3, #108	; 0x6c
 800227e:	4619      	mov	r1, r3
 8002280:	68f8      	ldr	r0, [r7, #12]
 8002282:	f7ff fc3f 	bl	8001b04 <_ZN7RoboArm11GetStatusMsEP7TMC2209>
//	GetStatusMs(&tmcd_gripper);

	SetMicrosteps4All(3);
 8002286:	2103      	movs	r1, #3
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f7ff fbb4 	bl	80019f6 <_ZN7RoboArm17SetMicrosteps4AllEh>

	GetStatusMs(&tmcd_angle);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3394      	adds	r3, #148	; 0x94
 8002292:	4619      	mov	r1, r3
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f7ff fc35 	bl	8001b04 <_ZN7RoboArm11GetStatusMsEP7TMC2209>
	GetStatusMs(&tmcd_linear);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	336c      	adds	r3, #108	; 0x6c
 800229e:	4619      	mov	r1, r3
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f7ff fc2f 	bl	8001b04 <_ZN7RoboArm11GetStatusMsEP7TMC2209>
//	GetStatusMs(&tmcd_gripper);

	SetEnable(1, false);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2101      	movs	r1, #1
 80022aa:	68f8      	ldr	r0, [r7, #12]
 80022ac:	f000 f80a 	bl	80022c4 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 80022b0:	2200      	movs	r2, #0
 80022b2:	2102      	movs	r1, #2
 80022b4:	68f8      	ldr	r0, [r7, #12]
 80022b6:	f000 f805 	bl	80022c4 <_ZN7RoboArm9SetEnableEtb>
//	SetEnable(3, false);

	return 0;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_ZN7RoboArm9SetEnableEtb>:

int RoboArm::SetEnable(uint16_t numMotor, bool state) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]

	GPIO_PinState pinSet;

	if (state) {
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d002      	beq.n	80022e0 <_ZN7RoboArm9SetEnableEtb+0x1c>
		pinSet = GPIO_PIN_RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	e001      	b.n	80022e4 <_ZN7RoboArm9SetEnableEtb+0x20>
	} else {
		pinSet = GPIO_PIN_SET;
 80022e0:	2301      	movs	r3, #1
 80022e2:	73fb      	strb	r3, [r7, #15]
	}

	if (numMotor == 1) {
 80022e4:	887b      	ldrh	r3, [r7, #2]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d108      	bne.n	80022fc <_ZN7RoboArm9SetEnableEtb+0x38>
		HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, pinSet);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022f2:	7bfa      	ldrb	r2, [r7, #15]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f002 fa77 	bl	80047e8 <HAL_GPIO_WritePin>
 80022fa:	e016      	b.n	800232a <_ZN7RoboArm9SetEnableEtb+0x66>
	} else if (numMotor == 2) {
 80022fc:	887b      	ldrh	r3, [r7, #2]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d108      	bne.n	8002314 <_ZN7RoboArm9SetEnableEtb+0x50>
		HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, pinSet);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800230a:	7bfa      	ldrb	r2, [r7, #15]
 800230c:	4619      	mov	r1, r3
 800230e:	f002 fa6b 	bl	80047e8 <HAL_GPIO_WritePin>
 8002312:	e00a      	b.n	800232a <_ZN7RoboArm9SetEnableEtb+0x66>
	} else if (numMotor == 3) {
 8002314:	887b      	ldrh	r3, [r7, #2]
 8002316:	2b03      	cmp	r3, #3
 8002318:	d107      	bne.n	800232a <_ZN7RoboArm9SetEnableEtb+0x66>
		HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, pinSet);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	4619      	mov	r1, r3
 8002326:	f002 fa5f 	bl	80047e8 <HAL_GPIO_WritePin>
	}

	return 0;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <_ZN7TMC2209C1Ev>:
//
// ----------------------------------------------------------------------------
#include "TMC2209.h"
#include "main.h"

TMC2209::TMC2209() {
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2203      	movs	r2, #3
 8002340:	f883 2020 	strb.w	r2, [r3, #32]
	serial_baud_rate_ = 115200;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800234a:	601a      	str	r2, [r3, #0]
	serial_address_ = SERIAL_ADDRESS_3;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2203      	movs	r2, #3
 8002350:	711a      	strb	r2, [r3, #4]
	hardware_enable_pin_ = -1;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002358:	80da      	strh	r2, [r3, #6]
	cool_step_enabled_ = false;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2200      	movs	r2, #0
 800235e:	761a      	strb	r2, [r3, #24]
}
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>:

void TMC2209::setup(UART_HandleTypeDef *tmc_uart,long serial_baud_rate, SerialAddress serial_address) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	70fb      	strb	r3, [r7, #3]
	tmcuart=tmc_uart;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	609a      	str	r2, [r3, #8]
	initialize(serial_baud_rate, serial_address);
 8002380:	78fb      	ldrb	r3, [r7, #3]
 8002382:	461a      	mov	r2, r3
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 fa7b 	bl	8002882 <_ZN7TMC220910initializeElNS_13SerialAddressE>
}
 800238c:	bf00      	nop
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_ZN7TMC22097disableEv>:
	}
	chopper_config_.toff = toff_;
	writeStoredChopperConfig();
}

void TMC2209::disable() {
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	db0f      	blt.n	80023c6 <_ZN7TMC22097disableEv+0x32>
		//digitalWrite(hardware_enable_pin_, HIGH);
		HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_SET);
 80023a6:	2201      	movs	r2, #1
 80023a8:	2120      	movs	r1, #32
 80023aa:	480d      	ldr	r0, [pc, #52]	; (80023e0 <_ZN7TMC22097disableEv+0x4c>)
 80023ac:	f002 fa1c 	bl	80047e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_SET);
 80023b0:	2201      	movs	r2, #1
 80023b2:	2101      	movs	r1, #1
 80023b4:	480a      	ldr	r0, [pc, #40]	; (80023e0 <_ZN7TMC22097disableEv+0x4c>)
 80023b6:	f002 fa17 	bl	80047e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_SET);
 80023ba:	2201      	movs	r2, #1
 80023bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023c0:	4808      	ldr	r0, [pc, #32]	; (80023e4 <_ZN7TMC22097disableEv+0x50>)
 80023c2:	f002 fa11 	bl	80047e8 <HAL_GPIO_WritePin>
	}
	chopper_config_.toff = TOFF_DISABLE;
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	7f13      	ldrb	r3, [r2, #28]
 80023ca:	f36f 0303 	bfc	r3, #0, #4
 80023ce:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fc5e 	bl	8002c92 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80023d6:	bf00      	nop
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	40010800 	.word	0x40010800
 80023e4:	40010c00 	.word	0x40010c00

080023e8 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>:
		++exponent;
	}
	setMicrostepsPerStepPowerOfTwo(exponent);
}

void TMC2209::setMicrostepsPerStepPowerOfTwo(uint8_t exponent) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	70fb      	strb	r3, [r7, #3]
	switch (exponent) {
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	2b07      	cmp	r3, #7
 80023f8:	d84a      	bhi.n	8002490 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xa8>
 80023fa:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0x18>)
 80023fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002400:	08002421 	.word	0x08002421
 8002404:	0800242f 	.word	0x0800242f
 8002408:	0800243d 	.word	0x0800243d
 800240c:	0800244b 	.word	0x0800244b
 8002410:	08002459 	.word	0x08002459
 8002414:	08002467 	.word	0x08002467
 8002418:	08002475 	.word	0x08002475
 800241c:	08002483 	.word	0x08002483
	case 0: {
		chopper_config_.mres = MRES_001;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	7fd3      	ldrb	r3, [r2, #31]
 8002424:	2108      	movs	r1, #8
 8002426:	f361 0303 	bfi	r3, r1, #0, #4
 800242a:	77d3      	strb	r3, [r2, #31]
		break;
 800242c:	e036      	b.n	800249c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 1: {
		chopper_config_.mres = MRES_002;
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	7fd3      	ldrb	r3, [r2, #31]
 8002432:	2107      	movs	r1, #7
 8002434:	f361 0303 	bfi	r3, r1, #0, #4
 8002438:	77d3      	strb	r3, [r2, #31]
		break;
 800243a:	e02f      	b.n	800249c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 2: {
		chopper_config_.mres = MRES_004;
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	7fd3      	ldrb	r3, [r2, #31]
 8002440:	2106      	movs	r1, #6
 8002442:	f361 0303 	bfi	r3, r1, #0, #4
 8002446:	77d3      	strb	r3, [r2, #31]
		break;
 8002448:	e028      	b.n	800249c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 3: {
		chopper_config_.mres = MRES_008;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	7fd3      	ldrb	r3, [r2, #31]
 800244e:	2105      	movs	r1, #5
 8002450:	f361 0303 	bfi	r3, r1, #0, #4
 8002454:	77d3      	strb	r3, [r2, #31]
		break;
 8002456:	e021      	b.n	800249c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 4: {
		chopper_config_.mres = MRES_016;
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	7fd3      	ldrb	r3, [r2, #31]
 800245c:	2104      	movs	r1, #4
 800245e:	f361 0303 	bfi	r3, r1, #0, #4
 8002462:	77d3      	strb	r3, [r2, #31]
		break;
 8002464:	e01a      	b.n	800249c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 5: {
		chopper_config_.mres = MRES_032;
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	7fd3      	ldrb	r3, [r2, #31]
 800246a:	2103      	movs	r1, #3
 800246c:	f361 0303 	bfi	r3, r1, #0, #4
 8002470:	77d3      	strb	r3, [r2, #31]
		break;
 8002472:	e013      	b.n	800249c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 6: {
		chopper_config_.mres = MRES_064;
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	7fd3      	ldrb	r3, [r2, #31]
 8002478:	2102      	movs	r1, #2
 800247a:	f361 0303 	bfi	r3, r1, #0, #4
 800247e:	77d3      	strb	r3, [r2, #31]
		break;
 8002480:	e00c      	b.n	800249c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 7: {
		chopper_config_.mres = MRES_128;
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	7fd3      	ldrb	r3, [r2, #31]
 8002486:	2101      	movs	r1, #1
 8002488:	f361 0303 	bfi	r3, r1, #0, #4
 800248c:	77d3      	strb	r3, [r2, #31]
		break;
 800248e:	e005      	b.n	800249c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 8:
	default: {
		chopper_config_.mres = MRES_256;
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	7fd3      	ldrb	r3, [r2, #31]
 8002494:	f36f 0303 	bfc	r3, #0, #4
 8002498:	77d3      	strb	r3, [r2, #31]
		break;
 800249a:	bf00      	nop
	}
	}
	writeStoredChopperConfig();
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 fbf8 	bl	8002c92 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80024a2:	bf00      	nop
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop

080024ac <_ZN7TMC220930disableAutomaticCurrentScalingEv>:
void TMC2209::enableAutomaticCurrentScaling() {
	pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
	writeStoredPwmConfig();
}

void TMC2209::disableAutomaticCurrentScaling() {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_OFF;
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80024ba:	f36f 0382 	bfc	r3, #2, #1
 80024be:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	writeStoredPwmConfig();
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fc01 	bl	8002cca <_ZN7TMC220920writeStoredPwmConfigEv>
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <_ZN7TMC220934disableAutomaticGradientAdaptationEv>:
void TMC2209::enableAutomaticGradientAdaptation() {
	pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
	writeStoredPwmConfig();
}

void TMC2209::disableAutomaticGradientAdaptation() {
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
	pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80024de:	f36f 03c3 	bfc	r3, #3, #1
 80024e2:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	writeStoredPwmConfig();
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fbef 	bl	8002cca <_ZN7TMC220920writeStoredPwmConfigEv>
}
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_ZN7TMC220910getVersionEv>:
	writeStoredGlobalConfig();
}

// bidirectional methods

uint8_t TMC2209::getVersion() {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
	Input input;
	input.bytes = read(ADDRESS_IOIN);
 80024fc:	2106      	movs	r1, #6
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 fb00 	bl	8002b04 <_ZN7TMC22094readEh>
 8002504:	4603      	mov	r3, r0
 8002506:	60fb      	str	r3, [r7, #12]

	return input.version;
 8002508:	7bfb      	ldrb	r3, [r7, #15]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <_ZN7TMC220915isCommunicatingEv>:

bool TMC2209::isCommunicating() {
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
	return (getVersion() == VERSION);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f7ff ffea 	bl	80024f4 <_ZN7TMC220910getVersionEv>
 8002520:	4603      	mov	r3, r0
 8002522:	2b21      	cmp	r3, #33	; 0x21
 8002524:	bf0c      	ite	eq
 8002526:	2301      	moveq	r3, #1
 8002528:	2300      	movne	r3, #0
 800252a:	b2db      	uxtb	r3, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <_ZN7TMC22099getIOPinsEv>:

	return input.enn;
}

/* custom function */
uint16_t TMC2209::getIOPins(){
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
	return (read(ADDRESS_IOIN)>>22)&0x3ff;
 800253c:	2106      	movs	r1, #6
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 fae0 	bl	8002b04 <_ZN7TMC22094readEh>
 8002544:	4603      	mov	r3, r0
 8002546:	0d9b      	lsrs	r3, r3, #22
 8002548:	b29b      	uxth	r3, r3
 800254a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800254e:	b29b      	uxth	r3, r3
}
 8002550:	4618      	mov	r0, r3
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <_ZN7TMC220920getMicrostepsPerStepEv>:

uint16_t TMC2209::getMicrostepsPerStep() {
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
	uint16_t microsteps_per_step_exponent;
	switch (chopper_config_.mres) {
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7fdb      	ldrb	r3, [r3, #31]
 8002564:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002568:	b2db      	uxtb	r3, r3
 800256a:	3b01      	subs	r3, #1
 800256c:	2b07      	cmp	r3, #7
 800256e:	d82b      	bhi.n	80025c8 <_ZN7TMC220920getMicrostepsPerStepEv+0x70>
 8002570:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <_ZN7TMC220920getMicrostepsPerStepEv+0x20>)
 8002572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002576:	bf00      	nop
 8002578:	080025c3 	.word	0x080025c3
 800257c:	080025bd 	.word	0x080025bd
 8002580:	080025b7 	.word	0x080025b7
 8002584:	080025b1 	.word	0x080025b1
 8002588:	080025ab 	.word	0x080025ab
 800258c:	080025a5 	.word	0x080025a5
 8002590:	0800259f 	.word	0x0800259f
 8002594:	08002599 	.word	0x08002599
	case MRES_001: {
		microsteps_per_step_exponent = 0;
 8002598:	2300      	movs	r3, #0
 800259a:	81fb      	strh	r3, [r7, #14]
		break;
 800259c:	e017      	b.n	80025ce <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_002: {
		microsteps_per_step_exponent = 1;
 800259e:	2301      	movs	r3, #1
 80025a0:	81fb      	strh	r3, [r7, #14]
		break;
 80025a2:	e014      	b.n	80025ce <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_004: {
		microsteps_per_step_exponent = 2;
 80025a4:	2302      	movs	r3, #2
 80025a6:	81fb      	strh	r3, [r7, #14]
		break;
 80025a8:	e011      	b.n	80025ce <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_008: {
		microsteps_per_step_exponent = 3;
 80025aa:	2303      	movs	r3, #3
 80025ac:	81fb      	strh	r3, [r7, #14]
		break;
 80025ae:	e00e      	b.n	80025ce <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_016: {
		microsteps_per_step_exponent = 4;
 80025b0:	2304      	movs	r3, #4
 80025b2:	81fb      	strh	r3, [r7, #14]
		break;
 80025b4:	e00b      	b.n	80025ce <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_032: {
		microsteps_per_step_exponent = 5;
 80025b6:	2305      	movs	r3, #5
 80025b8:	81fb      	strh	r3, [r7, #14]
		break;
 80025ba:	e008      	b.n	80025ce <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_064: {
		microsteps_per_step_exponent = 6;
 80025bc:	2306      	movs	r3, #6
 80025be:	81fb      	strh	r3, [r7, #14]
		break;
 80025c0:	e005      	b.n	80025ce <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_128: {
		microsteps_per_step_exponent = 7;
 80025c2:	2307      	movs	r3, #7
 80025c4:	81fb      	strh	r3, [r7, #14]
		break;
 80025c6:	e002      	b.n	80025ce <_ZN7TMC220920getMicrostepsPerStepEv+0x76>
	}
	case MRES_256:
	default: {
		microsteps_per_step_exponent = 8;
 80025c8:	2308      	movs	r3, #8
 80025ca:	81fb      	strh	r3, [r7, #14]
		break;
 80025cc:	bf00      	nop
	}
	}
	return 1 << microsteps_per_step_exponent;
 80025ce:	89fb      	ldrh	r3, [r7, #14]
 80025d0:	2201      	movs	r2, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	b29b      	uxth	r3, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3714      	adds	r7, #20
 80025dc:	46bd      	mov	sp, r7
 80025de:	bc80      	pop	{r7}
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop

080025e4 <_ZN7TMC220911getSettingsEv>:

TMC2209::Settings TMC2209::getSettings() {
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	Settings settings;
	settings.is_communicating = isCommunicating();
 80025ee:	6838      	ldr	r0, [r7, #0]
 80025f0:	f7ff ff8f 	bl	8002512 <_ZN7TMC220915isCommunicatingEv>
 80025f4:	4603      	mov	r3, r0
 80025f6:	461a      	mov	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	701a      	strb	r2, [r3, #0]

	if (settings.is_communicating) {
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80c3 	beq.w	800278c <_ZN7TMC220911getSettingsEv+0x1a8>
		readAndStoreRegisters();
 8002606:	6838      	ldr	r0, [r7, #0]
 8002608:	f000 f9fc 	bl	8002a04 <_ZN7TMC220921readAndStoreRegistersEv>

		settings.is_setup = global_config_.pdn_disable;
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	7b1b      	ldrb	r3, [r3, #12]
 8002610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	bf14      	ite	ne
 800261a:	2301      	movne	r3, #1
 800261c:	2300      	moveq	r3, #0
 800261e:	b2da      	uxtb	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	705a      	strb	r2, [r3, #1]
		settings.software_enabled = (chopper_config_.toff > TOFF_DISABLE);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	7f1b      	ldrb	r3, [r3, #28]
 8002628:	f003 030f 	and.w	r3, r3, #15
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	bf14      	ite	ne
 8002632:	2301      	movne	r3, #1
 8002634:	2300      	moveq	r3, #0
 8002636:	b2da      	uxtb	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	709a      	strb	r2, [r3, #2]
		settings.microsteps_per_step = getMicrostepsPerStep();
 800263c:	6838      	ldr	r0, [r7, #0]
 800263e:	f7ff ff8b 	bl	8002558 <_ZN7TMC220920getMicrostepsPerStepEv>
 8002642:	4603      	mov	r3, r0
 8002644:	461a      	mov	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	809a      	strh	r2, [r3, #4]
		settings.inverse_motor_direction_enabled = global_config_.shaft;
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	7b1b      	ldrb	r3, [r3, #12]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf14      	ite	ne
 8002658:	2301      	movne	r3, #1
 800265a:	2300      	moveq	r3, #0
 800265c:	b2da      	uxtb	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	719a      	strb	r2, [r3, #6]
		settings.stealth_chop_enabled = not global_config_.enable_spread_cycle;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	7b1b      	ldrb	r3, [r3, #12]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2da      	uxtb	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	71da      	strb	r2, [r3, #7]
		settings.standstill_mode = pwm_config_.freewheel;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002680:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002684:	b2db      	uxtb	r3, r3
 8002686:	461a      	mov	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	721a      	strb	r2, [r3, #8]
		settings.irun_percent = currentSettingToPercent(driver_current_.irun);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	7c5b      	ldrb	r3, [r3, #17]
 8002690:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8002694:	b2db      	uxtb	r3, r3
 8002696:	4619      	mov	r1, r3
 8002698:	6838      	ldr	r0, [r7, #0]
 800269a:	f000 fa8d 	bl	8002bb8 <_ZN7TMC220923currentSettingToPercentEh>
 800269e:	4603      	mov	r3, r0
 80026a0:	461a      	mov	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	725a      	strb	r2, [r3, #9]
		settings.irun_register_value = driver_current_.irun;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	7c5b      	ldrb	r3, [r3, #17]
 80026aa:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	461a      	mov	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	729a      	strb	r2, [r3, #10]
		settings.ihold_percent = currentSettingToPercent(driver_current_.ihold);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	7c1b      	ldrb	r3, [r3, #16]
 80026ba:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	4619      	mov	r1, r3
 80026c2:	6838      	ldr	r0, [r7, #0]
 80026c4:	f000 fa78 	bl	8002bb8 <_ZN7TMC220923currentSettingToPercentEh>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	72da      	strb	r2, [r3, #11]
		settings.ihold_register_value = driver_current_.ihold;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	7c1b      	ldrb	r3, [r3, #16]
 80026d4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	731a      	strb	r2, [r3, #12]
		settings.iholddelay_percent = holdDelaySettingToPercent(
				driver_current_.iholddelay);
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	7c9b      	ldrb	r3, [r3, #18]
 80026e4:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80026e8:	b2db      	uxtb	r3, r3
		settings.iholddelay_percent = holdDelaySettingToPercent(
 80026ea:	4619      	mov	r1, r3
 80026ec:	6838      	ldr	r0, [r7, #0]
 80026ee:	f000 fa9d 	bl	8002c2c <_ZN7TMC220925holdDelaySettingToPercentEh>
 80026f2:	4603      	mov	r3, r0
 80026f4:	461a      	mov	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	735a      	strb	r2, [r3, #13]
		settings.iholddelay_register_value = driver_current_.iholddelay;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	7c9b      	ldrb	r3, [r3, #18]
 80026fe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8002702:	b2db      	uxtb	r3, r3
 8002704:	461a      	mov	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	739a      	strb	r2, [r3, #14]
		settings.automatic_current_scaling_enabled = pwm_config_.pwm_autoscale;
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	bf14      	ite	ne
 800271a:	2301      	movne	r3, #1
 800271c:	2300      	moveq	r3, #0
 800271e:	b2da      	uxtb	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	73da      	strb	r2, [r3, #15]
		settings.automatic_gradient_adaptation_enabled =
				pwm_config_.pwm_autograd;
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800272a:	f003 0308 	and.w	r3, r3, #8
 800272e:	b2db      	uxtb	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2da      	uxtb	r2, r3
		settings.automatic_gradient_adaptation_enabled =
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	741a      	strb	r2, [r3, #16]
		settings.pwm_offset = pwm_config_.pwm_offset;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	745a      	strb	r2, [r3, #17]
		settings.pwm_gradient = pwm_config_.pwm_grad;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	749a      	strb	r2, [r3, #18]
		settings.cool_step_enabled = cool_step_enabled_;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	7e1a      	ldrb	r2, [r3, #24]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	74da      	strb	r2, [r3, #19]
		settings.analog_current_scaling_enabled = global_config_.i_scale_analog;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	7b1b      	ldrb	r3, [r3, #12]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	b2db      	uxtb	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf14      	ite	ne
 8002768:	2301      	movne	r3, #1
 800276a:	2300      	moveq	r3, #0
 800276c:	b2da      	uxtb	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	751a      	strb	r2, [r3, #20]
		settings.internal_sense_resistors_enabled =
				global_config_.internal_rsense;
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	7b1b      	ldrb	r3, [r3, #12]
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	bf14      	ite	ne
 8002780:	2301      	movne	r3, #1
 8002782:	2300      	moveq	r3, #0
 8002784:	b2da      	uxtb	r2, r3
		settings.internal_sense_resistors_enabled =
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	755a      	strb	r2, [r3, #21]
		settings.cool_step_enabled = false;
		settings.analog_current_scaling_enabled = false;
		settings.internal_sense_resistors_enabled = false;
	}

	return settings;
 800278a:	e03e      	b.n	800280a <_ZN7TMC220911getSettingsEv+0x226>
		settings.is_setup = false;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	705a      	strb	r2, [r3, #1]
		settings.software_enabled = false;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	709a      	strb	r2, [r3, #2]
		settings.microsteps_per_step = 0;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	809a      	strh	r2, [r3, #4]
		settings.inverse_motor_direction_enabled = false;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	719a      	strb	r2, [r3, #6]
		settings.stealth_chop_enabled = false;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	71da      	strb	r2, [r3, #7]
		settings.standstill_mode = pwm_config_.freewheel;
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80027b0:	f3c3 1301 	ubfx	r3, r3, #4, #2
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	721a      	strb	r2, [r3, #8]
		settings.irun_percent = 0;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	725a      	strb	r2, [r3, #9]
		settings.irun_register_value = 0;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	729a      	strb	r2, [r3, #10]
		settings.ihold_percent = 0;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	72da      	strb	r2, [r3, #11]
		settings.ihold_register_value = 0;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	731a      	strb	r2, [r3, #12]
		settings.iholddelay_percent = 0;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	735a      	strb	r2, [r3, #13]
		settings.iholddelay_register_value = 0;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	739a      	strb	r2, [r3, #14]
		settings.automatic_current_scaling_enabled = false;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	73da      	strb	r2, [r3, #15]
		settings.automatic_gradient_adaptation_enabled = false;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	741a      	strb	r2, [r3, #16]
		settings.pwm_offset = 0;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2200      	movs	r2, #0
 80027f0:	745a      	strb	r2, [r3, #17]
		settings.pwm_gradient = 0;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	749a      	strb	r2, [r3, #18]
		settings.cool_step_enabled = false;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	74da      	strb	r2, [r3, #19]
		settings.analog_current_scaling_enabled = false;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	751a      	strb	r2, [r3, #20]
		settings.internal_sense_resistors_enabled = false;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	755a      	strb	r2, [r3, #21]
	return settings;
 800280a:	bf00      	nop
}
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}

08002814 <_ZN7TMC220918readDrvStatusBytesEv>:
	drive_status.bytes = read(ADDRESS_DRV_STATUS);
	return drive_status.status;
}

/* custom function */
uint32_t TMC2209::readDrvStatusBytes(){
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	return read(ADDRESS_DRV_STATUS);
 800281c:	216f      	movs	r1, #111	; 0x6f
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f970 	bl	8002b04 <_ZN7TMC22094readEh>
 8002824:	4603      	mov	r3, r0
}
 8002826:	4618      	mov	r0, r3
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}

0800282e <_ZN7TMC220915getGlobalStatusEv>:

/* custom function */
uint8_t TMC2209::getGlobalStatus(){
 800282e:	b580      	push	{r7, lr}
 8002830:	b082      	sub	sp, #8
 8002832:	af00      	add	r7, sp, #0
 8002834:	6078      	str	r0, [r7, #4]
	return read(ADDRESS_GSTAT);
 8002836:	2101      	movs	r1, #1
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f963 	bl	8002b04 <_ZN7TMC22094readEh>
 800283e:	4603      	mov	r3, r0
 8002840:	b2db      	uxtb	r3, r3
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <_ZN7TMC220919getStallGuardResultEv>:

uint32_t TMC2209::getInterstepDuration() {
	return read(ADDRESS_TSTEP);
}

uint16_t TMC2209::getStallGuardResult() {
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
	return read(ADDRESS_SG_RESULT);
 8002852:	2141      	movs	r1, #65	; 0x41
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f955 	bl	8002b04 <_ZN7TMC22094readEh>
 800285a:	4603      	mov	r3, r0
 800285c:	b29b      	uxth	r3, r3
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <_ZN7TMC220919getMicrostepCounterEv>:
	pwm_auto.bytes = read(ADDRESS_PWM_AUTO);

	return pwm_auto.pwm_gradient_auto;
}

uint16_t TMC2209::getMicrostepCounter() {
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
	return read(ADDRESS_MSCNT);
 800286e:	216a      	movs	r1, #106	; 0x6a
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f947 	bl	8002b04 <_ZN7TMC22094readEh>
 8002876:	4603      	mov	r3, r0
 8002878:	b29b      	uxth	r3, r3
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <_ZN7TMC220910initializeElNS_13SerialAddressE>:

// private
/* EDITED */
void TMC2209::initialize(long serial_baud_rate, SerialAddress serial_address) {
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	60f8      	str	r0, [r7, #12]
 800288a:	60b9      	str	r1, [r7, #8]
 800288c:	4613      	mov	r3, r2
 800288e:	71fb      	strb	r3, [r7, #7]
	serial_baud_rate_ = serial_baud_rate;
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	601a      	str	r2, [r3, #0]

	setOperationModeToSerial(serial_address);
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	4619      	mov	r1, r3
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f810 	bl	80028c0 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>
	setRegistersToDefaults();
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f835 	bl	8002910 <_ZN7TMC220922setRegistersToDefaultsEv>

	//minimizeMotorCurrent();
	disable();
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f7ff fd74 	bl	8002394 <_ZN7TMC22097disableEv>
	disableAutomaticCurrentScaling();
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7ff fdfd 	bl	80024ac <_ZN7TMC220930disableAutomaticCurrentScalingEv>
	disableAutomaticGradientAdaptation();
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f7ff fe0c 	bl	80024d0 <_ZN7TMC220934disableAutomaticGradientAdaptationEv>
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>:

//	  tmcuart->RxXferCount = 0;

}

void TMC2209::setOperationModeToSerial(SerialAddress serial_address) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	460b      	mov	r3, r1
 80028ca:	70fb      	strb	r3, [r7, #3]
	serial_address_ = serial_address;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	78fa      	ldrb	r2, [r7, #3]
 80028d0:	711a      	strb	r2, [r3, #4]

	global_config_.bytes = 0;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	60da      	str	r2, [r3, #12]
	global_config_.i_scale_analog = 0;
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	7b13      	ldrb	r3, [r2, #12]
 80028dc:	f36f 0300 	bfc	r3, #0, #1
 80028e0:	7313      	strb	r3, [r2, #12]
	global_config_.pdn_disable = 1;
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	7b13      	ldrb	r3, [r2, #12]
 80028e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ea:	7313      	strb	r3, [r2, #12]
	global_config_.mstep_reg_select = 1;
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	7b13      	ldrb	r3, [r2, #12]
 80028f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f4:	7313      	strb	r3, [r2, #12]
	global_config_.multistep_filt = 1;
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	7b53      	ldrb	r3, [r2, #13]
 80028fa:	f043 0301 	orr.w	r3, r3, #1
 80028fe:	7353      	strb	r3, [r2, #13]

	writeStoredGlobalConfig();
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 f9aa 	bl	8002c5a <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <_ZN7TMC220922setRegistersToDefaultsEv>:

void TMC2209::setRegistersToDefaults() {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	driver_current_.bytes = 0;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
	driver_current_.ihold = IHOLD_DEFAULT;
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	7c13      	ldrb	r3, [r2, #16]
 8002922:	2110      	movs	r1, #16
 8002924:	f361 0304 	bfi	r3, r1, #0, #5
 8002928:	7413      	strb	r3, [r2, #16]
	driver_current_.irun = IRUN_DEFAULT;
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	7c53      	ldrb	r3, [r2, #17]
 800292e:	f043 031f 	orr.w	r3, r3, #31
 8002932:	7453      	strb	r3, [r2, #17]
	driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	7c93      	ldrb	r3, [r2, #18]
 8002938:	2101      	movs	r1, #1
 800293a:	f361 0303 	bfi	r3, r1, #0, #4
 800293e:	7493      	strb	r3, [r2, #18]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	691b      	ldr	r3, [r3, #16]
 8002944:	461a      	mov	r2, r3
 8002946:	2110      	movs	r1, #16
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f89f 	bl	8002a8c <_ZN7TMC22095writeEhm>

	chopper_config_.bytes = CHOPPER_CONFIG_DEFAULT;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a2a      	ldr	r2, [pc, #168]	; (80029fc <_ZN7TMC220922setRegistersToDefaultsEv+0xec>)
 8002952:	61da      	str	r2, [r3, #28]
	chopper_config_.tbl = TBL_DEFAULT;
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	69d3      	ldr	r3, [r2, #28]
 8002958:	2102      	movs	r1, #2
 800295a:	f361 33d0 	bfi	r3, r1, #15, #2
 800295e:	61d3      	str	r3, [r2, #28]
	chopper_config_.hend = HEND_DEFAULT;
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	8b93      	ldrh	r3, [r2, #28]
 8002964:	f36f 13ca 	bfc	r3, #7, #4
 8002968:	8393      	strh	r3, [r2, #28]
	chopper_config_.hstart = HSTART_DEFAULT;
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	7f13      	ldrb	r3, [r2, #28]
 800296e:	2105      	movs	r1, #5
 8002970:	f361 1306 	bfi	r3, r1, #4, #3
 8002974:	7713      	strb	r3, [r2, #28]
	chopper_config_.toff = TOFF_DEFAULT;
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	7f13      	ldrb	r3, [r2, #28]
 800297a:	2103      	movs	r1, #3
 800297c:	f361 0303 	bfi	r3, r1, #0, #4
 8002980:	7713      	strb	r3, [r2, #28]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	461a      	mov	r2, r3
 8002988:	216c      	movs	r1, #108	; 0x6c
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f87e 	bl	8002a8c <_ZN7TMC22095writeEhm>

	pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a1b      	ldr	r2, [pc, #108]	; (8002a00 <_ZN7TMC220922setRegistersToDefaultsEv+0xf0>)
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	461a      	mov	r2, r3
 800299c:	2170      	movs	r1, #112	; 0x70
 800299e:	6878      	ldr	r0, [r7, #4]
 80029a0:	f000 f874 	bl	8002a8c <_ZN7TMC22095writeEhm>

	cool_config_.bytes = COOLCONF_DEFAULT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	615a      	str	r2, [r3, #20]
	write(ADDRESS_COOLCONF, cool_config_.bytes);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	461a      	mov	r2, r3
 80029b0:	2142      	movs	r1, #66	; 0x42
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f000 f86a 	bl	8002a8c <_ZN7TMC22095writeEhm>

	write(ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 80029b8:	2214      	movs	r2, #20
 80029ba:	2111      	movs	r1, #17
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f865 	bl	8002a8c <_ZN7TMC22095writeEhm>
	write(ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 80029c2:	2200      	movs	r2, #0
 80029c4:	2113      	movs	r1, #19
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f860 	bl	8002a8c <_ZN7TMC22095writeEhm>
	write(ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 80029cc:	2200      	movs	r2, #0
 80029ce:	2122      	movs	r1, #34	; 0x22
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f000 f85b 	bl	8002a8c <_ZN7TMC22095writeEhm>
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 80029d6:	2200      	movs	r2, #0
 80029d8:	2114      	movs	r1, #20
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f000 f856 	bl	8002a8c <_ZN7TMC22095writeEhm>
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 80029e0:	2200      	movs	r2, #0
 80029e2:	2140      	movs	r1, #64	; 0x40
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f851 	bl	8002a8c <_ZN7TMC22095writeEhm>
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2142      	movs	r1, #66	; 0x42
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 f84c 	bl	8002a8c <_ZN7TMC22095writeEhm>
}
 80029f4:	bf00      	nop
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	10000053 	.word	0x10000053
 8002a00:	c10d0024 	.word	0xc10d0024

08002a04 <_ZN7TMC220921readAndStoreRegistersEv>:

void TMC2209::readAndStoreRegisters() {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	global_config_.bytes = readGlobalConfigBytes();
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f000 f933 	bl	8002c78 <_ZN7TMC220921readGlobalConfigBytesEv>
 8002a12:	4602      	mov	r2, r0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	60da      	str	r2, [r3, #12]
	chopper_config_.bytes = readChopperConfigBytes();
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f949 	bl	8002cb0 <_ZN7TMC220922readChopperConfigBytesEv>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	61da      	str	r2, [r3, #28]
	pwm_config_.bytes = readPwmConfigBytes();
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f95f 	bl	8002ce8 <_ZN7TMC220918readPwmConfigBytesEv>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002a30:	bf00      	nop
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_ZN7TMC220911reverseDataEm>:
	driver_current_.irun = CURRENT_SETTING_MIN;
	driver_current_.ihold = CURRENT_SETTING_MIN;
	writeStoredDriverCurrent();
}

uint32_t TMC2209::reverseData(uint32_t data) {
 8002a38:	b480      	push	{r7}
 8002a3a:	b085      	sub	sp, #20
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
 8002a40:	6039      	str	r1, [r7, #0]
	uint32_t reversed_data = 0;
 8002a42:	2300      	movs	r3, #0
 8002a44:	60fb      	str	r3, [r7, #12]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8002a46:	2300      	movs	r3, #0
 8002a48:	72fb      	strb	r3, [r7, #11]
 8002a4a:	e016      	b.n	8002a7a <_ZN7TMC220911reverseDataEm+0x42>
		right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 8002a4c:	7afb      	ldrb	r3, [r7, #11]
 8002a4e:	f1c3 0303 	rsb	r3, r3, #3
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	72bb      	strb	r3, [r7, #10]
		left_shift = i * BITS_PER_BYTE;
 8002a58:	7afb      	ldrb	r3, [r7, #11]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	727b      	strb	r3, [r7, #9]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 8002a5e:	7abb      	ldrb	r3, [r7, #10]
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	fa22 f303 	lsr.w	r3, r2, r3
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	7a7b      	ldrb	r3, [r7, #9]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	68fa      	ldr	r2, [r7, #12]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8002a74:	7afb      	ldrb	r3, [r7, #11]
 8002a76:	3301      	adds	r3, #1
 8002a78:	72fb      	strb	r3, [r7, #11]
 8002a7a:	7afb      	ldrb	r3, [r7, #11]
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d9e5      	bls.n	8002a4c <_ZN7TMC220911reverseDataEm+0x14>
	}
	return reversed_data;
 8002a80:	68fb      	ldr	r3, [r7, #12]
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bc80      	pop	{r7}
 8002a8a:	4770      	bx	lr

08002a8c <_ZN7TMC22095writeEhm>:
	for (uint8_t i = 0; i < datagram_size; ++i) {
		byte = serialRead();
	}*/
}

void TMC2209::write(uint8_t register_address, uint32_t data) {
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	460b      	mov	r3, r1
 8002a96:	607a      	str	r2, [r7, #4]
 8002a98:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 8002a9a:	f04f 0200 	mov.w	r2, #0
 8002a9e:	f04f 0300 	mov.w	r3, #0
 8002aa2:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 8002aa6:	7c3b      	ldrb	r3, [r7, #16]
 8002aa8:	2205      	movs	r2, #5
 8002aaa:	f362 0303 	bfi	r3, r2, #0, #4
 8002aae:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = serial_address_;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	791b      	ldrb	r3, [r3, #4]
 8002ab4:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 8002ab6:	7afb      	ldrb	r3, [r7, #11]
 8002ab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	7cbb      	ldrb	r3, [r7, #18]
 8002ac0:	f362 0306 	bfi	r3, r2, #0, #7
 8002ac4:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 8002ac6:	7cbb      	ldrb	r3, [r7, #18]
 8002ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002acc:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data);
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	68f8      	ldr	r0, [r7, #12]
 8002ad2:	f7ff ffb1 	bl	8002a38 <_ZN7TMC220911reverseDataEm>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f8c7 3013 	str.w	r3, [r7, #19]
	write_datagram.crc = calculateCrc(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002adc:	f107 0310 	add.w	r3, r7, #16
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f90c 	bl	8002d02 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>
 8002aea:	4603      	mov	r3, r0
 8002aec:	75fb      	strb	r3, [r7, #23]
	sendDatagramUnidirectional(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002aee:	f107 0310 	add.w	r3, r7, #16
 8002af2:	2208      	movs	r2, #8
 8002af4:	4619      	mov	r1, r3
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 f952 	bl	8002da0 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>
}
 8002afc:	bf00      	nop
 8002afe:	3718      	adds	r7, #24
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <_ZN7TMC22094readEh>:

/* CHANGED TO HAL */
uint32_t TMC2209::read(uint8_t register_address) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	70fb      	strb	r3, [r7, #3]
	ReadRequestDatagram read_request_datagram;
	read_request_datagram.bytes = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	613b      	str	r3, [r7, #16]
	read_request_datagram.sync = SYNC;
 8002b14:	7c3b      	ldrb	r3, [r7, #16]
 8002b16:	2205      	movs	r2, #5
 8002b18:	f362 0303 	bfi	r3, r2, #0, #4
 8002b1c:	743b      	strb	r3, [r7, #16]
	read_request_datagram.serial_address = serial_address_;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	791b      	ldrb	r3, [r3, #4]
 8002b22:	747b      	strb	r3, [r7, #17]
	read_request_datagram.register_address = register_address;
 8002b24:	78fb      	ldrb	r3, [r7, #3]
 8002b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	7cbb      	ldrb	r3, [r7, #18]
 8002b2e:	f362 0306 	bfi	r3, r2, #0, #7
 8002b32:	74bb      	strb	r3, [r7, #18]
	read_request_datagram.rw = RW_READ;
 8002b34:	7cbb      	ldrb	r3, [r7, #18]
 8002b36:	f36f 13c7 	bfc	r3, #7, #1
 8002b3a:	74bb      	strb	r3, [r7, #18]
	read_request_datagram.crc = calculateCrc(read_request_datagram,	READ_REQUEST_DATAGRAM_SIZE);
 8002b3c:	f107 0310 	add.w	r3, r7, #16
 8002b40:	2204      	movs	r2, #4
 8002b42:	4619      	mov	r1, r3
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f944 	bl	8002dd2 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	74fb      	strb	r3, [r7, #19]

	HAL_HalfDuplex_EnableTransmitter(tmcuart);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	4618      	mov	r0, r3
 8002b54:	f004 fa33 	bl	8006fbe <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(tmcuart, (uint8_t *)(&read_request_datagram.bytes), READ_REQUEST_DATAGRAM_SIZE, 12);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6898      	ldr	r0, [r3, #8]
 8002b5c:	f107 0110 	add.w	r1, r7, #16
 8002b60:	230c      	movs	r3, #12
 8002b62:	2204      	movs	r2, #4
 8002b64:	f003 fe41 	bl	80067ea <HAL_UART_Transmit>

	WriteReadReplyDatagram read_reply_datagram;
	read_reply_datagram.bytes = 0;
 8002b68:	f04f 0200 	mov.w	r2, #0
 8002b6c:	f04f 0300 	mov.w	r3, #0
 8002b70:	e9c7 2302 	strd	r2, r3, [r7, #8]

	HAL_StatusTypeDef status3 = HAL_HalfDuplex_EnableReceiver(tmcuart);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f004 fa53 	bl	8007024 <HAL_HalfDuplex_EnableReceiver>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	75fb      	strb	r3, [r7, #23]
	HAL_StatusTypeDef status = HAL_UART_Receive(tmcuart, (uint8_t *)(&read_reply_datagram.bytes), WRITE_READ_REPLY_DATAGRAM_SIZE, 12);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6898      	ldr	r0, [r3, #8]
 8002b86:	f107 0108 	add.w	r1, r7, #8
 8002b8a:	230c      	movs	r3, #12
 8002b8c:	2208      	movs	r2, #8
 8002b8e:	f003 feaf 	bl	80068f0 <HAL_UART_Receive>
 8002b92:	4603      	mov	r3, r0
 8002b94:	75bb      	strb	r3, [r7, #22]
	if (status != HAL_OK){
 8002b96:	7dbb      	ldrb	r3, [r7, #22]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <_ZN7TMC22094readEh+0x9c>
		return 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e007      	b.n	8002bb0 <_ZN7TMC22094readEh+0xac>
	}

	return reverseData(read_reply_datagram.data);
 8002ba0:	f8d7 300b 	ldr.w	r3, [r7, #11]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff ff46 	bl	8002a38 <_ZN7TMC220911reverseDataEm>
 8002bac:	4603      	mov	r3, r0
 8002bae:	bf00      	nop
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3718      	adds	r7, #24
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <_ZN7TMC220923currentSettingToPercentEh>:
	uint8_t current_setting = map(constrained_percent, PERCENT_MIN, PERCENT_MAX,
			CURRENT_SETTING_MIN, CURRENT_SETTING_MAX);
	return current_setting;
}

uint8_t TMC2209::currentSettingToPercent(uint8_t current_setting) {
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af02      	add	r7, sp, #8
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	70fb      	strb	r3, [r7, #3]
	uint8_t percent = map(current_setting, CURRENT_SETTING_MIN,
 8002bc4:	78f9      	ldrb	r1, [r7, #3]
 8002bc6:	2364      	movs	r3, #100	; 0x64
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	231f      	movs	r3, #31
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f807 	bl	8002be6 <_ZN7TMC22093mapEhhhhh>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	73fb      	strb	r3, [r7, #15]
			CURRENT_SETTING_MAX, PERCENT_MIN, PERCENT_MAX);
	return percent;
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <_ZN7TMC22093mapEhhhhh>:

uint8_t TMC2209::map(uint8_t x, uint8_t in_min,  uint8_t in_max, uint8_t out_min, uint8_t out_max){
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	4608      	mov	r0, r1
 8002bf0:	4611      	mov	r1, r2
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	70fb      	strb	r3, [r7, #3]
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	70bb      	strb	r3, [r7, #2]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	707b      	strb	r3, [r7, #1]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	78bb      	ldrb	r3, [r7, #2]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	7d39      	ldrb	r1, [r7, #20]
 8002c08:	7c3a      	ldrb	r2, [r7, #16]
 8002c0a:	1a8a      	subs	r2, r1, r2
 8002c0c:	fb03 f202 	mul.w	r2, r3, r2
 8002c10:	7879      	ldrb	r1, [r7, #1]
 8002c12:	78bb      	ldrb	r3, [r7, #2]
 8002c14:	1acb      	subs	r3, r1, r3
 8002c16:	fb92 f3f3 	sdiv	r3, r2, r3
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	7c3b      	ldrb	r3, [r7, #16]
 8002c1e:	4413      	add	r3, r2
 8002c20:	b2db      	uxtb	r3, r3
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <_ZN7TMC220925holdDelaySettingToPercentEh>:
	uint8_t constrained_percent = constrain(percent, PERCENT_MIN, PERCENT_MAX);
	uint8_t hold_delay_setting = map(constrained_percent, PERCENT_MIN, PERCENT_MAX, HOLD_DELAY_MIN, HOLD_DELAY_MAX);
	return hold_delay_setting;
}

uint8_t TMC2209::holdDelaySettingToPercent(uint8_t hold_delay_setting) {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af02      	add	r7, sp, #8
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	70fb      	strb	r3, [r7, #3]
	uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
 8002c38:	78f9      	ldrb	r1, [r7, #3]
 8002c3a:	2364      	movs	r3, #100	; 0x64
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	230f      	movs	r3, #15
 8002c44:	2200      	movs	r2, #0
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7ff ffcd 	bl	8002be6 <_ZN7TMC22093mapEhhhhh>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	73fb      	strb	r3, [r7, #15]
	return percent;
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <_ZN7TMC220923writeStoredGlobalConfigEv>:

void TMC2209::writeStoredGlobalConfig() {
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	461a      	mov	r2, r3
 8002c68:	2100      	movs	r1, #0
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff ff0e 	bl	8002a8c <_ZN7TMC22095writeEhm>
}
 8002c70:	bf00      	nop
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <_ZN7TMC220921readGlobalConfigBytesEv>:

uint32_t TMC2209::readGlobalConfigBytes() {
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
	return read(ADDRESS_GCONF);
 8002c80:	2100      	movs	r1, #0
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ff3e 	bl	8002b04 <_ZN7TMC22094readEh>
 8002c88:	4603      	mov	r3, r0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <_ZN7TMC220924writeStoredChopperConfigEv>:
	if (cool_step_enabled_) {
		write(ADDRESS_COOLCONF, cool_config_.bytes);
	}
}

void TMC2209::writeStoredChopperConfig() {
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	216c      	movs	r1, #108	; 0x6c
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7ff fef2 	bl	8002a8c <_ZN7TMC22095writeEhm>
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <_ZN7TMC220922readChopperConfigBytesEv>:

uint32_t TMC2209::readChopperConfigBytes() {
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
	return read(ADDRESS_CHOPCONF);
 8002cb8:	216c      	movs	r1, #108	; 0x6c
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff ff22 	bl	8002b04 <_ZN7TMC22094readEh>
 8002cc0:	4603      	mov	r3, r0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <_ZN7TMC220920writeStoredPwmConfigEv>:

void TMC2209::writeStoredPwmConfig() {
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	2170      	movs	r1, #112	; 0x70
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff fed6 	bl	8002a8c <_ZN7TMC22095writeEhm>
}
 8002ce0:	bf00      	nop
 8002ce2:	3708      	adds	r7, #8
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_ZN7TMC220918readPwmConfigBytesEv>:

uint32_t TMC2209::readPwmConfigBytes() {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	return read(ADDRESS_PWMCONF);
 8002cf0:	2170      	movs	r1, #112	; 0x70
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ff06 	bl	8002b04 <_ZN7TMC22094readEh>
 8002cf8:	4603      	mov	r3, r0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 8002d02:	b4f0      	push	{r4, r5, r6, r7}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	60f8      	str	r0, [r7, #12]
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 8002d10:	2300      	movs	r3, #0
 8002d12:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8002d14:	2300      	movs	r3, #0
 8002d16:	757b      	strb	r3, [r7, #21]
 8002d18:	e037      	b.n	8002d8a <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x88>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	7d79      	ldrb	r1, [r7, #21]
 8002d22:	00c9      	lsls	r1, r1, #3
 8002d24:	f1c1 0620 	rsb	r6, r1, #32
 8002d28:	f1a1 0020 	sub.w	r0, r1, #32
 8002d2c:	fa22 f401 	lsr.w	r4, r2, r1
 8002d30:	fa03 f606 	lsl.w	r6, r3, r6
 8002d34:	4334      	orrs	r4, r6
 8002d36:	fa23 f000 	lsr.w	r0, r3, r0
 8002d3a:	4304      	orrs	r4, r0
 8002d3c:	fa23 f501 	lsr.w	r5, r3, r1
 8002d40:	4623      	mov	r3, r4
 8002d42:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8002d44:	2300      	movs	r3, #0
 8002d46:	753b      	strb	r3, [r7, #20]
 8002d48:	e019      	b.n	8002d7e <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x7c>
			if ((crc >> 7) ^ (byte & 0x01)) {
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
 8002d4c:	09db      	lsrs	r3, r3, #7
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	7dbb      	ldrb	r3, [r7, #22]
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d007      	beq.n	8002d6c <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x6a>
				crc = (crc << 1) ^ 0x07;
 8002d5c:	7dfb      	ldrb	r3, [r7, #23]
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	b25b      	sxtb	r3, r3
 8002d62:	f083 0307 	eor.w	r3, r3, #7
 8002d66:	b25b      	sxtb	r3, r3
 8002d68:	75fb      	strb	r3, [r7, #23]
 8002d6a:	e002      	b.n	8002d72 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x70>
				crc = crc << 1;
 8002d6c:	7dfb      	ldrb	r3, [r7, #23]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 8002d72:	7dbb      	ldrb	r3, [r7, #22]
 8002d74:	085b      	lsrs	r3, r3, #1
 8002d76:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8002d78:	7d3b      	ldrb	r3, [r7, #20]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	753b      	strb	r3, [r7, #20]
 8002d7e:	7d3b      	ldrb	r3, [r7, #20]
 8002d80:	2b07      	cmp	r3, #7
 8002d82:	d9e2      	bls.n	8002d4a <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x48>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8002d84:	7d7b      	ldrb	r3, [r7, #21]
 8002d86:	3301      	adds	r3, #1
 8002d88:	757b      	strb	r3, [r7, #21]
 8002d8a:	7d7a      	ldrb	r2, [r7, #21]
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	429a      	cmp	r2, r3
 8002d92:	dbc2      	blt.n	8002d1a <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x18>
	return crc;
 8002d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d9e:	4770      	bx	lr

08002da0 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagramUnidirectional(Datagram &datagram, uint8_t datagram_size) {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	4613      	mov	r3, r2
 8002dac:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(tmcuart);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f004 f903 	bl	8006fbe <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(tmcuart, (uint8_t *)(&datagram), datagram_size, HAL_MAX_DELAY);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6898      	ldr	r0, [r3, #8]
 8002dbc:	79fb      	ldrb	r3, [r7, #7]
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	f003 fd10 	bl	80067ea <HAL_UART_Transmit>
}
 8002dca:	bf00      	nop
 8002dcc:	3710      	adds	r7, #16
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 8002dd2:	b480      	push	{r7}
 8002dd4:	b087      	sub	sp, #28
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 8002de0:	2300      	movs	r3, #0
 8002de2:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8002de4:	2300      	movs	r3, #0
 8002de6:	757b      	strb	r3, [r7, #21]
 8002de8:	e029      	b.n	8002e3e <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x6c>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	7d7b      	ldrb	r3, [r7, #21]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	fa22 f303 	lsr.w	r3, r2, r3
 8002df6:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8002df8:	2300      	movs	r3, #0
 8002dfa:	753b      	strb	r3, [r7, #20]
 8002dfc:	e019      	b.n	8002e32 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x60>
			if ((crc >> 7) ^ (byte & 0x01)) {
 8002dfe:	7dfb      	ldrb	r3, [r7, #23]
 8002e00:	09db      	lsrs	r3, r3, #7
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	7dbb      	ldrb	r3, [r7, #22]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d007      	beq.n	8002e20 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x4e>
				crc = (crc << 1) ^ 0x07;
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	b25b      	sxtb	r3, r3
 8002e16:	f083 0307 	eor.w	r3, r3, #7
 8002e1a:	b25b      	sxtb	r3, r3
 8002e1c:	75fb      	strb	r3, [r7, #23]
 8002e1e:	e002      	b.n	8002e26 <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x54>
				crc = crc << 1;
 8002e20:	7dfb      	ldrb	r3, [r7, #23]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 8002e26:	7dbb      	ldrb	r3, [r7, #22]
 8002e28:	085b      	lsrs	r3, r3, #1
 8002e2a:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8002e2c:	7d3b      	ldrb	r3, [r7, #20]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	753b      	strb	r3, [r7, #20]
 8002e32:	7d3b      	ldrb	r3, [r7, #20]
 8002e34:	2b07      	cmp	r3, #7
 8002e36:	d9e2      	bls.n	8002dfe <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x2c>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8002e38:	7d7b      	ldrb	r3, [r7, #21]
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	757b      	strb	r3, [r7, #21]
 8002e3e:	7d7a      	ldrb	r2, [r7, #21]
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	429a      	cmp	r2, r3
 8002e46:	dbd0      	blt.n	8002dea <_ZN7TMC220912calculateCrcINS_19ReadRequestDatagramEEEhRT_h+0x18>
	return crc;
 8002e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	371c      	adds	r7, #28
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002e54:	b480      	push	{r7}
 8002e56:	b085      	sub	sp, #20
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a06      	ldr	r2, [pc, #24]	; (8002e7c <vApplicationGetIdleTaskMemory+0x28>)
 8002e64:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4a05      	ldr	r2, [pc, #20]	; (8002e80 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e6a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002e72:	bf00      	nop
 8002e74:	3714      	adds	r7, #20
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	200001f4 	.word	0x200001f4
 8002e80:	20000294 	.word	0x20000294

08002e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e84:	b5b0      	push	{r4, r5, r7, lr}
 8002e86:	b0a4      	sub	sp, #144	; 0x90
 8002e88:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e8a:	f001 f965 	bl	8004158 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e8e:	f000 f89d 	bl	8002fcc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e92:	f000 faed 	bl	8003470 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8002e96:	f000 f927 	bl	80030e8 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8002e9a:	f000 f9bd 	bl	8003218 <_ZL12MX_TIM2_Initv>
  MX_SPI1_Init();
 8002e9e:	f000 f8e7 	bl	8003070 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8002ea2:	f000 fa89 	bl	80033b8 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8002ea6:	f000 fab5 	bl	8003414 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8002eaa:	f000 fa1d 	bl	80032e8 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Init(&htim1);
 8002eae:	4838      	ldr	r0, [pc, #224]	; (8002f90 <main+0x10c>)
 8002eb0:	f002 fd08 	bl	80058c4 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim2);
 8002eb4:	4837      	ldr	r0, [pc, #220]	; (8002f94 <main+0x110>)
 8002eb6:	f002 fd05 	bl	80058c4 <HAL_TIM_Base_Init>

	arm.SetSettMotors(huart2, huart1, htim1, htim2, htim3, Dir1_GPIO_Port, Dir1_Pin,
 8002eba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ebe:	930d      	str	r3, [sp, #52]	; 0x34
 8002ec0:	4b35      	ldr	r3, [pc, #212]	; (8002f98 <main+0x114>)
 8002ec2:	930c      	str	r3, [sp, #48]	; 0x30
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	930b      	str	r3, [sp, #44]	; 0x2c
 8002ec8:	4b34      	ldr	r3, [pc, #208]	; (8002f9c <main+0x118>)
 8002eca:	930a      	str	r3, [sp, #40]	; 0x28
 8002ecc:	2320      	movs	r3, #32
 8002ece:	9309      	str	r3, [sp, #36]	; 0x24
 8002ed0:	4b32      	ldr	r3, [pc, #200]	; (8002f9c <main+0x118>)
 8002ed2:	9308      	str	r3, [sp, #32]
 8002ed4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ed8:	9307      	str	r3, [sp, #28]
 8002eda:	4b2f      	ldr	r3, [pc, #188]	; (8002f98 <main+0x114>)
 8002edc:	9306      	str	r3, [sp, #24]
 8002ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ee2:	9305      	str	r3, [sp, #20]
 8002ee4:	4b2c      	ldr	r3, [pc, #176]	; (8002f98 <main+0x114>)
 8002ee6:	9304      	str	r3, [sp, #16]
 8002ee8:	2340      	movs	r3, #64	; 0x40
 8002eea:	9303      	str	r3, [sp, #12]
 8002eec:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <main+0x118>)
 8002eee:	9302      	str	r3, [sp, #8]
 8002ef0:	4b2b      	ldr	r3, [pc, #172]	; (8002fa0 <main+0x11c>)
 8002ef2:	9301      	str	r3, [sp, #4]
 8002ef4:	4b27      	ldr	r3, [pc, #156]	; (8002f94 <main+0x110>)
 8002ef6:	9300      	str	r3, [sp, #0]
 8002ef8:	4b25      	ldr	r3, [pc, #148]	; (8002f90 <main+0x10c>)
 8002efa:	4a2a      	ldr	r2, [pc, #168]	; (8002fa4 <main+0x120>)
 8002efc:	492a      	ldr	r1, [pc, #168]	; (8002fa8 <main+0x124>)
 8002efe:	482b      	ldr	r0, [pc, #172]	; (8002fac <main+0x128>)
 8002f00:	f7ff f957 	bl	80021b2 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefS1_R17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_t>
			Dir2_GPIO_Port, Dir2_Pin, Dir3_GPIO_Port, Dir3_Pin, En1_GPIO_Port,
			En1_Pin, En2_GPIO_Port, En2_Pin, En3_GPIO_Port, En3_Pin);

	arm.SetSettEncoders(hspi1, CS1_GPIO_Port, CS1_Pin, CS2_GPIO_Port, CS2_Pin,
 8002f04:	230e      	movs	r3, #14
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	2302      	movs	r3, #2
 8002f0a:	9301      	str	r3, [sp, #4]
 8002f0c:	4b22      	ldr	r3, [pc, #136]	; (8002f98 <main+0x114>)
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	2301      	movs	r3, #1
 8002f12:	4a21      	ldr	r2, [pc, #132]	; (8002f98 <main+0x114>)
 8002f14:	4926      	ldr	r1, [pc, #152]	; (8002fb0 <main+0x12c>)
 8002f16:	4825      	ldr	r0, [pc, #148]	; (8002fac <main+0x128>)
 8002f18:	f7fe fd86 	bl	8001a28 <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <main+0x130>)
 8002f1e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002f22:	461d      	mov	r5, r3
 8002f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002f30:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002f34:	2100      	movs	r1, #0
 8002f36:	4618      	mov	r0, r3
 8002f38:	f004 fb96 	bl	8007668 <osThreadCreate>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4a1e      	ldr	r2, [pc, #120]	; (8002fb8 <main+0x134>)
 8002f40:	6013      	str	r3, [r2, #0]

  /* definition and creation of myAMT22Task */
  osThreadDef(myAMT22Task, StartAMT22Data, osPriorityIdle, 0, 128);
 8002f42:	4b1e      	ldr	r3, [pc, #120]	; (8002fbc <main+0x138>)
 8002f44:	f107 0420 	add.w	r4, r7, #32
 8002f48:	461d      	mov	r5, r3
 8002f4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myAMT22TaskHandle = osThreadCreate(osThread(myAMT22Task), NULL);
 8002f56:	f107 0320 	add.w	r3, r7, #32
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f004 fb83 	bl	8007668 <osThreadCreate>
 8002f62:	4603      	mov	r3, r0
 8002f64:	4a16      	ldr	r2, [pc, #88]	; (8002fc0 <main+0x13c>)
 8002f66:	6013      	str	r3, [r2, #0]

  /* definition and creation of myUARTTask */
  osThreadDef(myUARTTask, StartUARTData, osPriorityIdle, 0, 128);
 8002f68:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <main+0x140>)
 8002f6a:	1d3c      	adds	r4, r7, #4
 8002f6c:	461d      	mov	r5, r3
 8002f6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f72:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002f76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myUARTTaskHandle = osThreadCreate(osThread(myUARTTask), NULL);
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f004 fb72 	bl	8007668 <osThreadCreate>
 8002f84:	4603      	mov	r3, r0
 8002f86:	4a10      	ldr	r2, [pc, #64]	; (8002fc8 <main+0x144>)
 8002f88:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002f8a:	f004 fb66 	bl	800765a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8002f8e:	e7fe      	b.n	8002f8e <main+0x10a>
 8002f90:	200004ec 	.word	0x200004ec
 8002f94:	20000534 	.word	0x20000534
 8002f98:	40010c00 	.word	0x40010c00
 8002f9c:	40010800 	.word	0x40010800
 8002fa0:	2000057c 	.word	0x2000057c
 8002fa4:	200005c4 	.word	0x200005c4
 8002fa8:	2000060c 	.word	0x2000060c
 8002fac:	20000694 	.word	0x20000694
 8002fb0:	20000494 	.word	0x20000494
 8002fb4:	0800ba24 	.word	0x0800ba24
 8002fb8:	20000654 	.word	0x20000654
 8002fbc:	0800ba4c 	.word	0x0800ba4c
 8002fc0:	20000658 	.word	0x20000658
 8002fc4:	0800ba74 	.word	0x0800ba74
 8002fc8:	2000065c 	.word	0x2000065c

08002fcc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b090      	sub	sp, #64	; 0x40
 8002fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fd2:	f107 0318 	add.w	r3, r7, #24
 8002fd6:	2228      	movs	r2, #40	; 0x28
 8002fd8:	2100      	movs	r1, #0
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f006 faab 	bl	8009536 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fe0:	1d3b      	adds	r3, r7, #4
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	605a      	str	r2, [r3, #4]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	60da      	str	r2, [r3, #12]
 8002fec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ff6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003000:	2302      	movs	r3, #2
 8003002:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003004:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003008:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800300a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800300e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003010:	f107 0318 	add.w	r3, r7, #24
 8003014:	4618      	mov	r0, r3
 8003016:	f001 fc19 	bl	800484c <HAL_RCC_OscConfig>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf14      	ite	ne
 8003020:	2301      	movne	r3, #1
 8003022:	2300      	moveq	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 800302a:	f000 fca5 	bl	8003978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800302e:	230f      	movs	r3, #15
 8003030:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003032:	2302      	movs	r3, #2
 8003034:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003036:	2300      	movs	r3, #0
 8003038:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800303a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800303e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003040:	2300      	movs	r3, #0
 8003042:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003044:	1d3b      	adds	r3, r7, #4
 8003046:	2102      	movs	r1, #2
 8003048:	4618      	mov	r0, r3
 800304a:	f001 fe81 	bl	8004d50 <HAL_RCC_ClockConfig>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800305e:	f000 fc8b 	bl	8003978 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003062:	f001 ff5f 	bl	8004f24 <HAL_RCC_EnableCSS>
}
 8003066:	bf00      	nop
 8003068:	3740      	adds	r7, #64	; 0x40
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003074:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <_ZL12MX_SPI1_Initv+0x70>)
 8003076:	4a1b      	ldr	r2, [pc, #108]	; (80030e4 <_ZL12MX_SPI1_Initv+0x74>)
 8003078:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800307a:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <_ZL12MX_SPI1_Initv+0x70>)
 800307c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003080:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <_ZL12MX_SPI1_Initv+0x70>)
 8003084:	2200      	movs	r2, #0
 8003086:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003088:	4b15      	ldr	r3, [pc, #84]	; (80030e0 <_ZL12MX_SPI1_Initv+0x70>)
 800308a:	2200      	movs	r2, #0
 800308c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800308e:	4b14      	ldr	r3, [pc, #80]	; (80030e0 <_ZL12MX_SPI1_Initv+0x70>)
 8003090:	2200      	movs	r2, #0
 8003092:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003094:	4b12      	ldr	r3, [pc, #72]	; (80030e0 <_ZL12MX_SPI1_Initv+0x70>)
 8003096:	2200      	movs	r2, #0
 8003098:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800309a:	4b11      	ldr	r3, [pc, #68]	; (80030e0 <_ZL12MX_SPI1_Initv+0x70>)
 800309c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80030a2:	4b0f      	ldr	r3, [pc, #60]	; (80030e0 <_ZL12MX_SPI1_Initv+0x70>)
 80030a4:	2218      	movs	r2, #24
 80030a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80030a8:	4b0d      	ldr	r3, [pc, #52]	; (80030e0 <_ZL12MX_SPI1_Initv+0x70>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80030ae:	4b0c      	ldr	r3, [pc, #48]	; (80030e0 <_ZL12MX_SPI1_Initv+0x70>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <_ZL12MX_SPI1_Initv+0x70>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80030ba:	4b09      	ldr	r3, [pc, #36]	; (80030e0 <_ZL12MX_SPI1_Initv+0x70>)
 80030bc:	220a      	movs	r2, #10
 80030be:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80030c0:	4807      	ldr	r0, [pc, #28]	; (80030e0 <_ZL12MX_SPI1_Initv+0x70>)
 80030c2:	f002 f829 	bl	8005118 <HAL_SPI_Init>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf14      	ite	ne
 80030cc:	2301      	movne	r3, #1
 80030ce:	2300      	moveq	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80030d6:	f000 fc4f 	bl	8003978 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80030da:	bf00      	nop
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	20000494 	.word	0x20000494
 80030e4:	40013000 	.word	0x40013000

080030e8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b092      	sub	sp, #72	; 0x48
 80030ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ee:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80030f2:	2200      	movs	r2, #0
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80030f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fc:	2200      	movs	r2, #0
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	605a      	str	r2, [r3, #4]
 8003102:	609a      	str	r2, [r3, #8]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	611a      	str	r2, [r3, #16]
 8003108:	615a      	str	r2, [r3, #20]
 800310a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800310c:	1d3b      	adds	r3, r7, #4
 800310e:	2220      	movs	r2, #32
 8003110:	2100      	movs	r1, #0
 8003112:	4618      	mov	r0, r3
 8003114:	f006 fa0f 	bl	8009536 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003118:	4b3d      	ldr	r3, [pc, #244]	; (8003210 <_ZL12MX_TIM1_Initv+0x128>)
 800311a:	4a3e      	ldr	r2, [pc, #248]	; (8003214 <_ZL12MX_TIM1_Initv+0x12c>)
 800311c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 800311e:	4b3c      	ldr	r3, [pc, #240]	; (8003210 <_ZL12MX_TIM1_Initv+0x128>)
 8003120:	2248      	movs	r2, #72	; 0x48
 8003122:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003124:	4b3a      	ldr	r3, [pc, #232]	; (8003210 <_ZL12MX_TIM1_Initv+0x128>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 800312a:	4b39      	ldr	r3, [pc, #228]	; (8003210 <_ZL12MX_TIM1_Initv+0x128>)
 800312c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003130:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003132:	4b37      	ldr	r3, [pc, #220]	; (8003210 <_ZL12MX_TIM1_Initv+0x128>)
 8003134:	2200      	movs	r2, #0
 8003136:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003138:	4b35      	ldr	r3, [pc, #212]	; (8003210 <_ZL12MX_TIM1_Initv+0x128>)
 800313a:	2200      	movs	r2, #0
 800313c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800313e:	4b34      	ldr	r3, [pc, #208]	; (8003210 <_ZL12MX_TIM1_Initv+0x128>)
 8003140:	2200      	movs	r2, #0
 8003142:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003144:	4832      	ldr	r0, [pc, #200]	; (8003210 <_ZL12MX_TIM1_Initv+0x128>)
 8003146:	f002 fc95 	bl	8005a74 <HAL_TIM_PWM_Init>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 800315a:	f000 fc0d 	bl	8003978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003162:	2300      	movs	r3, #0
 8003164:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003166:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800316a:	4619      	mov	r1, r3
 800316c:	4828      	ldr	r0, [pc, #160]	; (8003210 <_ZL12MX_TIM1_Initv+0x128>)
 800316e:	f003 f9d3 	bl	8006518 <HAL_TIMEx_MasterConfigSynchronization>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	bf14      	ite	ne
 8003178:	2301      	movne	r3, #1
 800317a:	2300      	moveq	r3, #0
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8003182:	f000 fbf9 	bl	8003978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003186:	2360      	movs	r3, #96	; 0x60
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800318e:	2300      	movs	r3, #0
 8003190:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003192:	2300      	movs	r3, #0
 8003194:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003196:	2300      	movs	r3, #0
 8003198:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800319a:	2300      	movs	r3, #0
 800319c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800319e:	2300      	movs	r3, #0
 80031a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80031a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031a6:	2200      	movs	r2, #0
 80031a8:	4619      	mov	r1, r3
 80031aa:	4819      	ldr	r0, [pc, #100]	; (8003210 <_ZL12MX_TIM1_Initv+0x128>)
 80031ac:	f002 fec0 	bl	8005f30 <HAL_TIM_PWM_ConfigChannel>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	bf14      	ite	ne
 80031b6:	2301      	movne	r3, #1
 80031b8:	2300      	moveq	r3, #0
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 80031c0:	f000 fbda 	bl	8003978 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80031d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80031de:	2300      	movs	r3, #0
 80031e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80031e2:	1d3b      	adds	r3, r7, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	480a      	ldr	r0, [pc, #40]	; (8003210 <_ZL12MX_TIM1_Initv+0x128>)
 80031e8:	f003 f9f4 	bl	80065d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	bf14      	ite	ne
 80031f2:	2301      	movne	r3, #1
 80031f4:	2300      	moveq	r3, #0
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d001      	beq.n	8003200 <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 80031fc:	f000 fbbc 	bl	8003978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003200:	4803      	ldr	r0, [pc, #12]	; (8003210 <_ZL12MX_TIM1_Initv+0x128>)
 8003202:	f000 fce1 	bl	8003bc8 <HAL_TIM_MspPostInit>

}
 8003206:	bf00      	nop
 8003208:	3748      	adds	r7, #72	; 0x48
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	200004ec 	.word	0x200004ec
 8003214:	40012c00 	.word	0x40012c00

08003218 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b08a      	sub	sp, #40	; 0x28
 800321c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800321e:	f107 0320 	add.w	r3, r7, #32
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
 8003226:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003228:	1d3b      	adds	r3, r7, #4
 800322a:	2200      	movs	r2, #0
 800322c:	601a      	str	r2, [r3, #0]
 800322e:	605a      	str	r2, [r3, #4]
 8003230:	609a      	str	r2, [r3, #8]
 8003232:	60da      	str	r2, [r3, #12]
 8003234:	611a      	str	r2, [r3, #16]
 8003236:	615a      	str	r2, [r3, #20]
 8003238:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800323a:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <_ZL12MX_TIM2_Initv+0xcc>)
 800323c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003240:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 8003242:	4b28      	ldr	r3, [pc, #160]	; (80032e4 <_ZL12MX_TIM2_Initv+0xcc>)
 8003244:	2248      	movs	r2, #72	; 0x48
 8003246:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003248:	4b26      	ldr	r3, [pc, #152]	; (80032e4 <_ZL12MX_TIM2_Initv+0xcc>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800324e:	4b25      	ldr	r3, [pc, #148]	; (80032e4 <_ZL12MX_TIM2_Initv+0xcc>)
 8003250:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003254:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003256:	4b23      	ldr	r3, [pc, #140]	; (80032e4 <_ZL12MX_TIM2_Initv+0xcc>)
 8003258:	2200      	movs	r2, #0
 800325a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800325c:	4b21      	ldr	r3, [pc, #132]	; (80032e4 <_ZL12MX_TIM2_Initv+0xcc>)
 800325e:	2200      	movs	r2, #0
 8003260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003262:	4820      	ldr	r0, [pc, #128]	; (80032e4 <_ZL12MX_TIM2_Initv+0xcc>)
 8003264:	f002 fc06 	bl	8005a74 <HAL_TIM_PWM_Init>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	bf14      	ite	ne
 800326e:	2301      	movne	r3, #1
 8003270:	2300      	moveq	r3, #0
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8003278:	f000 fb7e 	bl	8003978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800327c:	2300      	movs	r3, #0
 800327e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003280:	2300      	movs	r3, #0
 8003282:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003284:	f107 0320 	add.w	r3, r7, #32
 8003288:	4619      	mov	r1, r3
 800328a:	4816      	ldr	r0, [pc, #88]	; (80032e4 <_ZL12MX_TIM2_Initv+0xcc>)
 800328c:	f003 f944 	bl	8006518 <HAL_TIMEx_MasterConfigSynchronization>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf14      	ite	ne
 8003296:	2301      	movne	r3, #1
 8003298:	2300      	moveq	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d001      	beq.n	80032a4 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 80032a0:	f000 fb6a 	bl	8003978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032a4:	2360      	movs	r3, #96	; 0x60
 80032a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80032a8:	2300      	movs	r3, #0
 80032aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032ac:	2300      	movs	r3, #0
 80032ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032b4:	1d3b      	adds	r3, r7, #4
 80032b6:	2204      	movs	r2, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	480a      	ldr	r0, [pc, #40]	; (80032e4 <_ZL12MX_TIM2_Initv+0xcc>)
 80032bc:	f002 fe38 	bl	8005f30 <HAL_TIM_PWM_ConfigChannel>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	bf14      	ite	ne
 80032c6:	2301      	movne	r3, #1
 80032c8:	2300      	moveq	r3, #0
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 80032d0:	f000 fb52 	bl	8003978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80032d4:	4803      	ldr	r0, [pc, #12]	; (80032e4 <_ZL12MX_TIM2_Initv+0xcc>)
 80032d6:	f000 fc77 	bl	8003bc8 <HAL_TIM_MspPostInit>

}
 80032da:	bf00      	nop
 80032dc:	3728      	adds	r7, #40	; 0x28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000534 	.word	0x20000534

080032e8 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08a      	sub	sp, #40	; 0x28
 80032ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032ee:	f107 0320 	add.w	r3, r7, #32
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032f8:	1d3b      	adds	r3, r7, #4
 80032fa:	2200      	movs	r2, #0
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	605a      	str	r2, [r3, #4]
 8003300:	609a      	str	r2, [r3, #8]
 8003302:	60da      	str	r2, [r3, #12]
 8003304:	611a      	str	r2, [r3, #16]
 8003306:	615a      	str	r2, [r3, #20]
 8003308:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800330a:	4b29      	ldr	r3, [pc, #164]	; (80033b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800330c:	4a29      	ldr	r2, [pc, #164]	; (80033b4 <_ZL12MX_TIM3_Initv+0xcc>)
 800330e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 8003310:	4b27      	ldr	r3, [pc, #156]	; (80033b0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003312:	2248      	movs	r2, #72	; 0x48
 8003314:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003316:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800331c:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800331e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003322:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003324:	4b22      	ldr	r3, [pc, #136]	; (80033b0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003326:	2200      	movs	r2, #0
 8003328:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800332a:	4b21      	ldr	r3, [pc, #132]	; (80033b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800332c:	2200      	movs	r2, #0
 800332e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003330:	481f      	ldr	r0, [pc, #124]	; (80033b0 <_ZL12MX_TIM3_Initv+0xc8>)
 8003332:	f002 fb9f 	bl	8005a74 <HAL_TIM_PWM_Init>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8003346:	f000 fb17 	bl	8003978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800334a:	2300      	movs	r3, #0
 800334c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800334e:	2300      	movs	r3, #0
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003352:	f107 0320 	add.w	r3, r7, #32
 8003356:	4619      	mov	r1, r3
 8003358:	4815      	ldr	r0, [pc, #84]	; (80033b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800335a:	f003 f8dd 	bl	8006518 <HAL_TIMEx_MasterConfigSynchronization>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	bf14      	ite	ne
 8003364:	2301      	movne	r3, #1
 8003366:	2300      	moveq	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 800336e:	f000 fb03 	bl	8003978 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003372:	2360      	movs	r3, #96	; 0x60
 8003374:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003376:	2300      	movs	r3, #0
 8003378:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003382:	1d3b      	adds	r3, r7, #4
 8003384:	2204      	movs	r2, #4
 8003386:	4619      	mov	r1, r3
 8003388:	4809      	ldr	r0, [pc, #36]	; (80033b0 <_ZL12MX_TIM3_Initv+0xc8>)
 800338a:	f002 fdd1 	bl	8005f30 <HAL_TIM_PWM_ConfigChannel>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	bf14      	ite	ne
 8003394:	2301      	movne	r3, #1
 8003396:	2300      	moveq	r3, #0
 8003398:	b2db      	uxtb	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800339e:	f000 faeb 	bl	8003978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80033a2:	4803      	ldr	r0, [pc, #12]	; (80033b0 <_ZL12MX_TIM3_Initv+0xc8>)
 80033a4:	f000 fc10 	bl	8003bc8 <HAL_TIM_MspPostInit>

}
 80033a8:	bf00      	nop
 80033aa:	3728      	adds	r7, #40	; 0x28
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	2000057c 	.word	0x2000057c
 80033b4:	40000400 	.word	0x40000400

080033b8 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80033bc:	4b13      	ldr	r3, [pc, #76]	; (800340c <_ZL19MX_USART1_UART_Initv+0x54>)
 80033be:	4a14      	ldr	r2, [pc, #80]	; (8003410 <_ZL19MX_USART1_UART_Initv+0x58>)
 80033c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80033c2:	4b12      	ldr	r3, [pc, #72]	; (800340c <_ZL19MX_USART1_UART_Initv+0x54>)
 80033c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80033c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80033ca:	4b10      	ldr	r3, [pc, #64]	; (800340c <_ZL19MX_USART1_UART_Initv+0x54>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80033d0:	4b0e      	ldr	r3, [pc, #56]	; (800340c <_ZL19MX_USART1_UART_Initv+0x54>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80033d6:	4b0d      	ldr	r3, [pc, #52]	; (800340c <_ZL19MX_USART1_UART_Initv+0x54>)
 80033d8:	2200      	movs	r2, #0
 80033da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80033dc:	4b0b      	ldr	r3, [pc, #44]	; (800340c <_ZL19MX_USART1_UART_Initv+0x54>)
 80033de:	220c      	movs	r2, #12
 80033e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80033e2:	4b0a      	ldr	r3, [pc, #40]	; (800340c <_ZL19MX_USART1_UART_Initv+0x54>)
 80033e4:	2200      	movs	r2, #0
 80033e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80033e8:	4b08      	ldr	r3, [pc, #32]	; (800340c <_ZL19MX_USART1_UART_Initv+0x54>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80033ee:	4807      	ldr	r0, [pc, #28]	; (800340c <_ZL19MX_USART1_UART_Initv+0x54>)
 80033f0:	f003 f953 	bl	800669a <HAL_UART_Init>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bf14      	ite	ne
 80033fa:	2301      	movne	r3, #1
 80033fc:	2300      	moveq	r3, #0
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8003404:	f000 fab8 	bl	8003978 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003408:	bf00      	nop
 800340a:	bd80      	pop	{r7, pc}
 800340c:	200005c4 	.word	0x200005c4
 8003410:	40013800 	.word	0x40013800

08003414 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
//
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <_ZL19MX_USART2_UART_Initv+0x54>)
 800341a:	4a14      	ldr	r2, [pc, #80]	; (800346c <_ZL19MX_USART2_UART_Initv+0x58>)
 800341c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800341e:	4b12      	ldr	r3, [pc, #72]	; (8003468 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003420:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003424:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003428:	2200      	movs	r2, #0
 800342a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <_ZL19MX_USART2_UART_Initv+0x54>)
 800342e:	2200      	movs	r2, #0
 8003430:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <_ZL19MX_USART2_UART_Initv+0x54>)
 800343a:	220c      	movs	r2, #12
 800343c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003440:	2200      	movs	r2, #0
 8003442:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003444:	4b08      	ldr	r3, [pc, #32]	; (8003468 <_ZL19MX_USART2_UART_Initv+0x54>)
 8003446:	2200      	movs	r2, #0
 8003448:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 800344a:	4807      	ldr	r0, [pc, #28]	; (8003468 <_ZL19MX_USART2_UART_Initv+0x54>)
 800344c:	f003 f975 	bl	800673a <HAL_HalfDuplex_Init>
 8003450:	4603      	mov	r3, r0
 8003452:	2b00      	cmp	r3, #0
 8003454:	bf14      	ite	ne
 8003456:	2301      	movne	r3, #1
 8003458:	2300      	moveq	r3, #0
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8003460:	f000 fa8a 	bl	8003978 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
//
  /* USER CODE END USART2_Init 2 */

}
 8003464:	bf00      	nop
 8003466:	bd80      	pop	{r7, pc}
 8003468:	2000060c 	.word	0x2000060c
 800346c:	40004400 	.word	0x40004400

08003470 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003476:	f107 0310 	add.w	r3, r7, #16
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003484:	4b3f      	ldr	r3, [pc, #252]	; (8003584 <_ZL12MX_GPIO_Initv+0x114>)
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	4a3e      	ldr	r2, [pc, #248]	; (8003584 <_ZL12MX_GPIO_Initv+0x114>)
 800348a:	f043 0310 	orr.w	r3, r3, #16
 800348e:	6193      	str	r3, [r2, #24]
 8003490:	4b3c      	ldr	r3, [pc, #240]	; (8003584 <_ZL12MX_GPIO_Initv+0x114>)
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800349c:	4b39      	ldr	r3, [pc, #228]	; (8003584 <_ZL12MX_GPIO_Initv+0x114>)
 800349e:	699b      	ldr	r3, [r3, #24]
 80034a0:	4a38      	ldr	r2, [pc, #224]	; (8003584 <_ZL12MX_GPIO_Initv+0x114>)
 80034a2:	f043 0320 	orr.w	r3, r3, #32
 80034a6:	6193      	str	r3, [r2, #24]
 80034a8:	4b36      	ldr	r3, [pc, #216]	; (8003584 <_ZL12MX_GPIO_Initv+0x114>)
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	60bb      	str	r3, [r7, #8]
 80034b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b4:	4b33      	ldr	r3, [pc, #204]	; (8003584 <_ZL12MX_GPIO_Initv+0x114>)
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	4a32      	ldr	r2, [pc, #200]	; (8003584 <_ZL12MX_GPIO_Initv+0x114>)
 80034ba:	f043 0304 	orr.w	r3, r3, #4
 80034be:	6193      	str	r3, [r2, #24]
 80034c0:	4b30      	ldr	r3, [pc, #192]	; (8003584 <_ZL12MX_GPIO_Initv+0x114>)
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0304 	and.w	r3, r3, #4
 80034c8:	607b      	str	r3, [r7, #4]
 80034ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034cc:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <_ZL12MX_GPIO_Initv+0x114>)
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <_ZL12MX_GPIO_Initv+0x114>)
 80034d2:	f043 0308 	orr.w	r3, r3, #8
 80034d6:	6193      	str	r3, [r2, #24]
 80034d8:	4b2a      	ldr	r3, [pc, #168]	; (8003584 <_ZL12MX_GPIO_Initv+0x114>)
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	f003 0308 	and.w	r3, r3, #8
 80034e0:	603b      	str	r3, [r7, #0]
 80034e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80034e4:	2200      	movs	r2, #0
 80034e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80034ea:	4827      	ldr	r0, [pc, #156]	; (8003588 <_ZL12MX_GPIO_Initv+0x118>)
 80034ec:	f001 f97c 	bl	80047e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, En2_Pin|En1_Pin|Dir1_Pin|EndCap4_Pin
 80034f0:	2200      	movs	r2, #0
 80034f2:	f649 0161 	movw	r1, #39009	; 0x9861
 80034f6:	4825      	ldr	r0, [pc, #148]	; (800358c <_ZL12MX_GPIO_Initv+0x11c>)
 80034f8:	f001 f976 	bl	80047e8 <HAL_GPIO_WritePin>
                          |Buser_Pin|Reserved_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS1_Pin|CS2_Pin|Dir2_Pin|Led1_Pin
 80034fc:	2200      	movs	r2, #0
 80034fe:	f64d 71c3 	movw	r1, #57283	; 0xdfc3
 8003502:	4823      	ldr	r0, [pc, #140]	; (8003590 <_ZL12MX_GPIO_Initv+0x120>)
 8003504:	f001 f970 	bl	80047e8 <HAL_GPIO_WritePin>
                          |EndCap1_Pin|EndCap2_Pin|S1_Pin|S2_Pin
                          |EndCap3_Pin|En3_Pin|Dir3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8003508:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800350c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800350e:	2301      	movs	r3, #1
 8003510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003516:	2302      	movs	r3, #2
 8003518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 800351a:	f107 0310 	add.w	r3, r7, #16
 800351e:	4619      	mov	r1, r3
 8003520:	4819      	ldr	r0, [pc, #100]	; (8003588 <_ZL12MX_GPIO_Initv+0x118>)
 8003522:	f000 ffdd 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : En2_Pin En1_Pin Dir1_Pin EndCap4_Pin
                           Buser_Pin Reserved_Pin */
  GPIO_InitStruct.Pin = En2_Pin|En1_Pin|Dir1_Pin|EndCap4_Pin
 8003526:	f649 0361 	movw	r3, #39009	; 0x9861
 800352a:	613b      	str	r3, [r7, #16]
                          |Buser_Pin|Reserved_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800352c:	2301      	movs	r3, #1
 800352e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003534:	2302      	movs	r3, #2
 8003536:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003538:	f107 0310 	add.w	r3, r7, #16
 800353c:	4619      	mov	r1, r3
 800353e:	4813      	ldr	r0, [pc, #76]	; (800358c <_ZL12MX_GPIO_Initv+0x11c>)
 8003540:	f000 ffce 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8003544:	2310      	movs	r3, #16
 8003546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003548:	2300      	movs	r3, #0
 800354a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8003550:	f107 0310 	add.w	r3, r7, #16
 8003554:	4619      	mov	r1, r3
 8003556:	480d      	ldr	r0, [pc, #52]	; (800358c <_ZL12MX_GPIO_Initv+0x11c>)
 8003558:	f000 ffc2 	bl	80044e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS2_Pin Dir2_Pin Led1_Pin
                           EndCap1_Pin EndCap2_Pin S1_Pin S2_Pin
                           EndCap3_Pin En3_Pin Dir3_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|Dir2_Pin|Led1_Pin
 800355c:	f64d 73c3 	movw	r3, #57283	; 0xdfc3
 8003560:	613b      	str	r3, [r7, #16]
                          |EndCap1_Pin|EndCap2_Pin|S1_Pin|S2_Pin
                          |EndCap3_Pin|En3_Pin|Dir3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003562:	2301      	movs	r3, #1
 8003564:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003566:	2300      	movs	r3, #0
 8003568:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800356a:	2302      	movs	r3, #2
 800356c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800356e:	f107 0310 	add.w	r3, r7, #16
 8003572:	4619      	mov	r1, r3
 8003574:	4806      	ldr	r0, [pc, #24]	; (8003590 <_ZL12MX_GPIO_Initv+0x120>)
 8003576:	f000 ffb3 	bl	80044e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800357a:	bf00      	nop
 800357c:	3720      	adds	r7, #32
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	40011000 	.word	0x40011000
 800358c:	40010800 	.word	0x40010800
 8003590:	40010c00 	.word	0x40010c00

08003594 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	if (huart == &huart1) {
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a1d      	ldr	r2, [pc, #116]	; (8003614 <HAL_UART_RxCpltCallback+0x80>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d12e      	bne.n	8003602 <HAL_UART_RxCpltCallback+0x6e>
//		if(!strcmp(rx_buffer,"TEXT")) {
//		}

//		uint8_t data[] = { '\\', 0x8f, 0xf8, 'B', 'q', '}', 0x16, 'C', 1, 1, 0, 0 };
		memcpy(un.bytes, rx_buffer, sizeof(rx_buffer));
 80035a4:	4b1c      	ldr	r3, [pc, #112]	; (8003618 <HAL_UART_RxCpltCallback+0x84>)
 80035a6:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_UART_RxCpltCallback+0x88>)
 80035a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80035aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		switch (un.params.hold) {
 80035ae:	4b1a      	ldr	r3, [pc, #104]	; (8003618 <HAL_UART_RxCpltCallback+0x84>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	2b4b      	cmp	r3, #75	; 0x4b
 80035b4:	d018      	beq.n	80035e8 <HAL_UART_RxCpltCallback+0x54>
 80035b6:	2b4b      	cmp	r3, #75	; 0x4b
 80035b8:	dc19      	bgt.n	80035ee <HAL_UART_RxCpltCallback+0x5a>
 80035ba:	2b32      	cmp	r3, #50	; 0x32
 80035bc:	d010      	beq.n	80035e0 <HAL_UART_RxCpltCallback+0x4c>
 80035be:	2b32      	cmp	r3, #50	; 0x32
 80035c0:	dc15      	bgt.n	80035ee <HAL_UART_RxCpltCallback+0x5a>
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	dc02      	bgt.n	80035cc <HAL_UART_RxCpltCallback+0x38>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	da03      	bge.n	80035d2 <HAL_UART_RxCpltCallback+0x3e>
 80035ca:	e010      	b.n	80035ee <HAL_UART_RxCpltCallback+0x5a>
 80035cc:	2b19      	cmp	r3, #25
 80035ce:	d004      	beq.n	80035da <HAL_UART_RxCpltCallback+0x46>
 80035d0:	e00d      	b.n	80035ee <HAL_UART_RxCpltCallback+0x5a>
		case 0:
		case 1:
			startFirstMove = true;
 80035d2:	4b13      	ldr	r3, [pc, #76]	; (8003620 <HAL_UART_RxCpltCallback+0x8c>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	701a      	strb	r2, [r3, #0]
			break;
 80035d8:	e009      	b.n	80035ee <HAL_UART_RxCpltCallback+0x5a>
		case 25:
			stopBeforeReboot = true;
 80035da:	4b12      	ldr	r3, [pc, #72]	; (8003624 <HAL_UART_RxCpltCallback+0x90>)
 80035dc:	2201      	movs	r2, #1
 80035de:	701a      	strb	r2, [r3, #0]
		case 50:
			sendDataFlag = true;
 80035e0:	4b11      	ldr	r3, [pc, #68]	; (8003628 <HAL_UART_RxCpltCallback+0x94>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
			break;
 80035e6:	e002      	b.n	80035ee <HAL_UART_RxCpltCallback+0x5a>
		case 75:
			setZeroFlag = true;
 80035e8:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_UART_RxCpltCallback+0x98>)
 80035ea:	2201      	movs	r2, #1
 80035ec:	701a      	strb	r2, [r3, #0]
		}
		memset(rx_buffer, 0, sizeof(rx_buffer));
 80035ee:	220c      	movs	r2, #12
 80035f0:	2100      	movs	r1, #0
 80035f2:	480a      	ldr	r0, [pc, #40]	; (800361c <HAL_UART_RxCpltCallback+0x88>)
 80035f4:	f005 ff9f 	bl	8009536 <memset>
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 80035f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80035fc:	480c      	ldr	r0, [pc, #48]	; (8003630 <HAL_UART_RxCpltCallback+0x9c>)
 80035fe:	f001 f90b 	bl	8004818 <HAL_GPIO_TogglePin>
	}
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8003602:	220c      	movs	r2, #12
 8003604:	4905      	ldr	r1, [pc, #20]	; (800361c <HAL_UART_RxCpltCallback+0x88>)
 8003606:	4803      	ldr	r0, [pc, #12]	; (8003614 <HAL_UART_RxCpltCallback+0x80>)
 8003608:	f003 fa04 	bl	8006a14 <HAL_UART_Receive_IT>
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	200005c4 	.word	0x200005c4
 8003618:	20000674 	.word	0x20000674
 800361c:	20000660 	.word	0x20000660
 8003620:	2000066c 	.word	0x2000066c
 8003624:	2000066e 	.word	0x2000066e
 8003628:	2000066d 	.word	0x2000066d
 800362c:	2000066f 	.word	0x2000066f
 8003630:	40011000 	.word	0x40011000

08003634 <_Z16StartDefaultTaskPKv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	arm.setPrintState(false);
 800363c:	2100      	movs	r1, #0
 800363e:	481c      	ldr	r0, [pc, #112]	; (80036b0 <_Z16StartDefaultTaskPKv+0x7c>)
 8003640:	f7fe f9b0 	bl	80019a4 <_ZN7RoboArm13setPrintStateEb>
	/* Infinite loop */
	for (;;) {
		if (startFirstMove) {
 8003644:	4b1b      	ldr	r3, [pc, #108]	; (80036b4 <_Z16StartDefaultTaskPKv+0x80>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d01f      	beq.n	800368c <_Z16StartDefaultTaskPKv+0x58>
			startFirstMove = false;
 800364c:	4b19      	ldr	r3, [pc, #100]	; (80036b4 <_Z16StartDefaultTaskPKv+0x80>)
 800364e:	2200      	movs	r2, #0
 8003650:	701a      	strb	r2, [r3, #0]
			float angle = arm.ShiftZeroInputAng(un.params.ang);
 8003652:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <_Z16StartDefaultTaskPKv+0x84>)
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4619      	mov	r1, r3
 8003658:	4815      	ldr	r0, [pc, #84]	; (80036b0 <_Z16StartDefaultTaskPKv+0x7c>)
 800365a:	f7fe fd1d 	bl	8002098 <_ZN7RoboArm17ShiftZeroInputAngEf>
 800365e:	60f8      	str	r0, [r7, #12]
			uint16_t distance = arm.ShiftZeroInputLin(un.params.lin);
 8003660:	4b15      	ldr	r3, [pc, #84]	; (80036b8 <_Z16StartDefaultTaskPKv+0x84>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4619      	mov	r1, r3
 8003666:	4812      	ldr	r0, [pc, #72]	; (80036b0 <_Z16StartDefaultTaskPKv+0x7c>)
 8003668:	f7fe fd38 	bl	80020dc <_ZN7RoboArm17ShiftZeroInputLinEf>
 800366c:	4603      	mov	r3, r0
 800366e:	4618      	mov	r0, r3
 8003670:	f7fd fd2e 	bl	80010d0 <__aeabi_f2uiz>
 8003674:	4603      	mov	r3, r0
 8003676:	817b      	strh	r3, [r7, #10]
			arm.Move2Motors(angle, distance);
 8003678:	897b      	ldrh	r3, [r7, #10]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fd fb0a 	bl	8000c94 <__aeabi_ui2f>
 8003680:	4603      	mov	r3, r0
 8003682:	461a      	mov	r2, r3
 8003684:	68f9      	ldr	r1, [r7, #12]
 8003686:	480a      	ldr	r0, [pc, #40]	; (80036b0 <_Z16StartDefaultTaskPKv+0x7c>)
 8003688:	f7fd fff8 	bl	800167c <_ZN7RoboArm11Move2MotorsEff>
//			arm.Move2MotorsSimu(un.params.ang, un.params.lin);
//			arm.Move2MotorsSimu(recAngleF, recDist);
			//steppingyakkazavmaxim(2000, 230);
		}

		if (timerFT1 && timerFT2) {
 800368c:	4b0b      	ldr	r3, [pc, #44]	; (80036bc <_Z16StartDefaultTaskPKv+0x88>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d009      	beq.n	80036a8 <_Z16StartDefaultTaskPKv+0x74>
 8003694:	4b0a      	ldr	r3, [pc, #40]	; (80036c0 <_Z16StartDefaultTaskPKv+0x8c>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <_Z16StartDefaultTaskPKv+0x74>

			timerFT1 = false;
 800369c:	4b07      	ldr	r3, [pc, #28]	; (80036bc <_Z16StartDefaultTaskPKv+0x88>)
 800369e:	2200      	movs	r2, #0
 80036a0:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 80036a2:	4b07      	ldr	r3, [pc, #28]	; (80036c0 <_Z16StartDefaultTaskPKv+0x8c>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]

		//	arm.correctPosition();

		}

		osDelay(1);
 80036a8:	2001      	movs	r0, #1
 80036aa:	f004 f829 	bl	8007700 <osDelay>
	}
 80036ae:	e7c9      	b.n	8003644 <_Z16StartDefaultTaskPKv+0x10>
 80036b0:	20000694 	.word	0x20000694
 80036b4:	2000066c 	.word	0x2000066c
 80036b8:	20000674 	.word	0x20000674
 80036bc:	20000670 	.word	0x20000670
 80036c0:	20000671 	.word	0x20000671

080036c4 <_Z14StartAMT22DataPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAMT22Data */
void StartAMT22Data(void const * argument)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
//		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str),
//				HAL_MAX_DELAY);



		osDelay(1000);
 80036cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036d0:	f004 f816 	bl	8007700 <osDelay>
 80036d4:	e7fa      	b.n	80036cc <_Z14StartAMT22DataPKv+0x8>
	...

080036d8 <_Z13StartUARTDataPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUARTData */
void StartUARTData(void const * argument)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b08a      	sub	sp, #40	; 0x28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTData */
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 80036e0:	220c      	movs	r2, #12
 80036e2:	4965      	ldr	r1, [pc, #404]	; (8003878 <_Z13StartUARTDataPKv+0x1a0>)
 80036e4:	4865      	ldr	r0, [pc, #404]	; (800387c <_Z13StartUARTDataPKv+0x1a4>)
 80036e6:	f003 f995 	bl	8006a14 <HAL_UART_Receive_IT>
	uint32_t posnowT_1, posnowT_2;
//	float angleT = 0;
//	uint32_t linearDist = 0;
//	flagReadEnc = 1;
//	uint32_t distPmm = 0;
	arm.setPrintState(true);
 80036ea:	2101      	movs	r1, #1
 80036ec:	4864      	ldr	r0, [pc, #400]	; (8003880 <_Z13StartUARTDataPKv+0x1a8>)
 80036ee:	f7fe f959 	bl	80019a4 <_ZN7RoboArm13setPrintStateEb>
	/* Infinite loop */
	for (;;) {

		if (arm.getPrintState() && sendDataFlag) {
 80036f2:	4863      	ldr	r0, [pc, #396]	; (8003880 <_Z13StartUARTDataPKv+0x1a8>)
 80036f4:	f7fe f96e 	bl	80019d4 <_ZN7RoboArm13getPrintStateEv>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d005      	beq.n	800370a <_Z13StartUARTDataPKv+0x32>
 80036fe:	4b61      	ldr	r3, [pc, #388]	; (8003884 <_Z13StartUARTDataPKv+0x1ac>)
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <_Z13StartUARTDataPKv+0x32>
 8003706:	2301      	movs	r3, #1
 8003708:	e000      	b.n	800370c <_Z13StartUARTDataPKv+0x34>
 800370a:	2300      	movs	r3, #0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d078      	beq.n	8003802 <_Z13StartUARTDataPKv+0x12a>
			sendDataFlag = false;
 8003710:	4b5c      	ldr	r3, [pc, #368]	; (8003884 <_Z13StartUARTDataPKv+0x1ac>)
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]

			int attempts = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]

			posnowT_1 = arm.GetPosEncoders(1);
 800371a:	2101      	movs	r1, #1
 800371c:	4858      	ldr	r0, [pc, #352]	; (8003880 <_Z13StartUARTDataPKv+0x1a8>)
 800371e:	f7fe f9b9 	bl	8001a94 <_ZN7RoboArm14GetPosEncodersEh>
 8003722:	6278      	str	r0, [r7, #36]	; 0x24
//			//if the position returned was 0xFFFF we know that there was an error calculating the checksum
			//make 3 attempts for position. we will pre-increment attempts because we'll use the number later and want an accurate count
			while (posnowT_1 == 0xFFFF && ++attempts < 3)
 8003724:	e004      	b.n	8003730 <_Z13StartUARTDataPKv+0x58>
				posnowT_1 = arm.GetPosEncoders(1); //try again
 8003726:	2101      	movs	r1, #1
 8003728:	4855      	ldr	r0, [pc, #340]	; (8003880 <_Z13StartUARTDataPKv+0x1a8>)
 800372a:	f7fe f9b3 	bl	8001a94 <_ZN7RoboArm14GetPosEncodersEh>
 800372e:	6278      	str	r0, [r7, #36]	; 0x24
			while (posnowT_1 == 0xFFFF && ++attempts < 3)
 8003730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003736:	4293      	cmp	r3, r2
 8003738:	d107      	bne.n	800374a <_Z13StartUARTDataPKv+0x72>
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	3301      	adds	r3, #1
 800373e:	61fb      	str	r3, [r7, #28]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	2b02      	cmp	r3, #2
 8003744:	dc01      	bgt.n	800374a <_Z13StartUARTDataPKv+0x72>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <_Z13StartUARTDataPKv+0x74>
 800374a:	2300      	movs	r3, #0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d1ea      	bne.n	8003726 <_Z13StartUARTDataPKv+0x4e>

//			float ang = posnowT_1*360/16384;
			float ang_actual = arm.GetAngleEncoders(posnowT_1);
 8003750:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003752:	484b      	ldr	r0, [pc, #300]	; (8003880 <_Z13StartUARTDataPKv+0x1a8>)
 8003754:	f7fe f98b 	bl	8001a6e <_ZN7RoboArm16GetAngleEncodersEm>
 8003758:	61b8      	str	r0, [r7, #24]
			float ang = arm.ShiftZeroOutputAng(ang_actual);
 800375a:	69b9      	ldr	r1, [r7, #24]
 800375c:	4848      	ldr	r0, [pc, #288]	; (8003880 <_Z13StartUARTDataPKv+0x1a8>)
 800375e:	f7fe fce1 	bl	8002124 <_ZN7RoboArm18ShiftZeroOutputAngEf>
 8003762:	6178      	str	r0, [r7, #20]

			attempts = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	61fb      	str	r3, [r7, #28]
//			un_send.params.ang = angleT;

			posnowT_2 = arm.GetPosEncoders(2);
 8003768:	2102      	movs	r1, #2
 800376a:	4845      	ldr	r0, [pc, #276]	; (8003880 <_Z13StartUARTDataPKv+0x1a8>)
 800376c:	f7fe f992 	bl	8001a94 <_ZN7RoboArm14GetPosEncodersEh>
 8003770:	6238      	str	r0, [r7, #32]
			while (posnowT_2 == 0xFFFF && ++attempts < 3)
 8003772:	e004      	b.n	800377e <_Z13StartUARTDataPKv+0xa6>
				posnowT_2 = arm.GetPosEncoders(2); //try again
 8003774:	2102      	movs	r1, #2
 8003776:	4842      	ldr	r0, [pc, #264]	; (8003880 <_Z13StartUARTDataPKv+0x1a8>)
 8003778:	f7fe f98c 	bl	8001a94 <_ZN7RoboArm14GetPosEncodersEh>
 800377c:	6238      	str	r0, [r7, #32]
			while (posnowT_2 == 0xFFFF && ++attempts < 3)
 800377e:	6a3b      	ldr	r3, [r7, #32]
 8003780:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003784:	4293      	cmp	r3, r2
 8003786:	d107      	bne.n	8003798 <_Z13StartUARTDataPKv+0xc0>
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	3301      	adds	r3, #1
 800378c:	61fb      	str	r3, [r7, #28]
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	2b02      	cmp	r3, #2
 8003792:	dc01      	bgt.n	8003798 <_Z13StartUARTDataPKv+0xc0>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <_Z13StartUARTDataPKv+0xc2>
 8003798:	2300      	movs	r3, #0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1ea      	bne.n	8003774 <_Z13StartUARTDataPKv+0x9c>

			float ang_pos = arm.GetAngleEncoders(posnowT_2);
 800379e:	6a39      	ldr	r1, [r7, #32]
 80037a0:	4837      	ldr	r0, [pc, #220]	; (8003880 <_Z13StartUARTDataPKv+0x1a8>)
 80037a2:	f7fe f964 	bl	8001a6e <_ZN7RoboArm16GetAngleEncodersEm>
 80037a6:	6138      	str	r0, [r7, #16]
			float pos_actual = ang_pos * 250.0 / 360.0;
 80037a8:	6938      	ldr	r0, [r7, #16]
 80037aa:	f7fc fe3d 	bl	8000428 <__aeabi_f2d>
 80037ae:	f04f 0200 	mov.w	r2, #0
 80037b2:	4b35      	ldr	r3, [pc, #212]	; (8003888 <_Z13StartUARTDataPKv+0x1b0>)
 80037b4:	f7fc fe90 	bl	80004d8 <__aeabi_dmul>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4610      	mov	r0, r2
 80037be:	4619      	mov	r1, r3
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	4b31      	ldr	r3, [pc, #196]	; (800388c <_Z13StartUARTDataPKv+0x1b4>)
 80037c6:	f7fc ffb1 	bl	800072c <__aeabi_ddiv>
 80037ca:	4602      	mov	r2, r0
 80037cc:	460b      	mov	r3, r1
 80037ce:	4610      	mov	r0, r2
 80037d0:	4619      	mov	r1, r3
 80037d2:	f7fd f959 	bl	8000a88 <__aeabi_d2f>
 80037d6:	4603      	mov	r3, r0
 80037d8:	60fb      	str	r3, [r7, #12]
			float pos = arm.ShiftZeroOutputLin(pos_actual);
 80037da:	68f9      	ldr	r1, [r7, #12]
 80037dc:	4828      	ldr	r0, [pc, #160]	; (8003880 <_Z13StartUARTDataPKv+0x1a8>)
 80037de:	f7fe fcc5 	bl	800216c <_ZN7RoboArm18ShiftZeroOutputLinEf>
 80037e2:	60b8      	str	r0, [r7, #8]
//					* (6.45 / 360);
//			uint32_t mils = distPsteps / arm.linearStepsMil;
//
//			un_send.params.lin = mils;
//			un_send.params.hold = 0;
			un_send.params.lin = pos;
 80037e4:	4a2a      	ldr	r2, [pc, #168]	; (8003890 <_Z13StartUARTDataPKv+0x1b8>)
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	6013      	str	r3, [r2, #0]
			un_send.params.ang = ang;
 80037ea:	4a29      	ldr	r2, [pc, #164]	; (8003890 <_Z13StartUARTDataPKv+0x1b8>)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	6053      	str	r3, [r2, #4]
			un_send.params.hold = 0;
 80037f0:	4b27      	ldr	r3, [pc, #156]	; (8003890 <_Z13StartUARTDataPKv+0x1b8>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	609a      	str	r2, [r3, #8]
//					0x09,0x0a,0x0b,0x0c};
//
//			size_t s = sizeof(un_send);

//			sprintf(str, "%.2f:", un_send.params.ang);//, send_params.lin, 100);
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 80037f6:	230c      	movs	r3, #12
 80037f8:	220c      	movs	r2, #12
 80037fa:	4925      	ldr	r1, [pc, #148]	; (8003890 <_Z13StartUARTDataPKv+0x1b8>)
 80037fc:	481f      	ldr	r0, [pc, #124]	; (800387c <_Z13StartUARTDataPKv+0x1a4>)
 80037fe:	f002 fff4 	bl	80067ea <HAL_UART_Transmit>
//			HAL_UART_Transmit(&huart1, (uint8_t*)str, sizeof(str), 12);
//			sendDataFlag = false;

		}

		if (stopBeforeReboot) {
 8003802:	4b24      	ldr	r3, [pc, #144]	; (8003894 <_Z13StartUARTDataPKv+0x1bc>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d016      	beq.n	8003838 <_Z13StartUARTDataPKv+0x160>
			stopBeforeReboot = false;
 800380a:	4b22      	ldr	r3, [pc, #136]	; (8003894 <_Z13StartUARTDataPKv+0x1bc>)
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
			arm.EmergencyStop();
 8003810:	481b      	ldr	r0, [pc, #108]	; (8003880 <_Z13StartUARTDataPKv+0x1a8>)
 8003812:	f7fd fe8f 	bl	8001534 <_ZN7RoboArm13EmergencyStopEv>
			un_send.params.lin = 0;
 8003816:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <_Z13StartUARTDataPKv+0x1b8>)
 8003818:	f04f 0200 	mov.w	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 800381e:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <_Z13StartUARTDataPKv+0x1b8>)
 8003820:	f04f 0200 	mov.w	r2, #0
 8003824:	605a      	str	r2, [r3, #4]
			un_send.params.hold = 10;
 8003826:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <_Z13StartUARTDataPKv+0x1b8>)
 8003828:	220a      	movs	r2, #10
 800382a:	609a      	str	r2, [r3, #8]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 800382c:	230c      	movs	r3, #12
 800382e:	220c      	movs	r2, #12
 8003830:	4917      	ldr	r1, [pc, #92]	; (8003890 <_Z13StartUARTDataPKv+0x1b8>)
 8003832:	4812      	ldr	r0, [pc, #72]	; (800387c <_Z13StartUARTDataPKv+0x1a4>)
 8003834:	f002 ffd9 	bl	80067ea <HAL_UART_Transmit>
					12);
		}

		if (setZeroFlag) {
 8003838:	4b17      	ldr	r3, [pc, #92]	; (8003898 <_Z13StartUARTDataPKv+0x1c0>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d016      	beq.n	800386e <_Z13StartUARTDataPKv+0x196>
			setZeroFlag = false;
 8003840:	4b15      	ldr	r3, [pc, #84]	; (8003898 <_Z13StartUARTDataPKv+0x1c0>)
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
//			arm.SetZeroEncoders();
			arm.SetSoftwareZero();
 8003846:	480e      	ldr	r0, [pc, #56]	; (8003880 <_Z13StartUARTDataPKv+0x1a8>)
 8003848:	f7fe fbc4 	bl	8001fd4 <_ZN7RoboArm15SetSoftwareZeroEv>
			un_send.params.lin = 0;
 800384c:	4b10      	ldr	r3, [pc, #64]	; (8003890 <_Z13StartUARTDataPKv+0x1b8>)
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8003854:	4b0e      	ldr	r3, [pc, #56]	; (8003890 <_Z13StartUARTDataPKv+0x1b8>)
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	605a      	str	r2, [r3, #4]
			un_send.params.hold = 10;
 800385c:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <_Z13StartUARTDataPKv+0x1b8>)
 800385e:	220a      	movs	r2, #10
 8003860:	609a      	str	r2, [r3, #8]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8003862:	230c      	movs	r3, #12
 8003864:	220c      	movs	r2, #12
 8003866:	490a      	ldr	r1, [pc, #40]	; (8003890 <_Z13StartUARTDataPKv+0x1b8>)
 8003868:	4804      	ldr	r0, [pc, #16]	; (800387c <_Z13StartUARTDataPKv+0x1a4>)
 800386a:	f002 ffbe 	bl	80067ea <HAL_UART_Transmit>
					12);
		}

		osDelay(500);
 800386e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003872:	f003 ff45 	bl	8007700 <osDelay>
	}
 8003876:	e73c      	b.n	80036f2 <_Z13StartUARTDataPKv+0x1a>
 8003878:	20000660 	.word	0x20000660
 800387c:	200005c4 	.word	0x200005c4
 8003880:	20000694 	.word	0x20000694
 8003884:	2000066d 	.word	0x2000066d
 8003888:	406f4000 	.word	0x406f4000
 800388c:	40768000 	.word	0x40768000
 8003890:	20000680 	.word	0x20000680
 8003894:	2000066e 	.word	0x2000066e
 8003898:	2000066f 	.word	0x2000066f

0800389c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a2a      	ldr	r2, [pc, #168]	; (8003954 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d121      	bne.n	80038f2 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		cntImpulse1++;
 80038ae:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3301      	adds	r3, #1
 80038b4:	4a28      	ldr	r2, [pc, #160]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80038b6:	6013      	str	r3, [r2, #0]
		if (cntImpulse1 >= arm.anglePsteps) {
 80038b8:	4b28      	ldr	r3, [pc, #160]	; (800395c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80038ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038bc:	4b26      	ldr	r3, [pc, #152]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d83c      	bhi.n	800393e <HAL_TIM_PeriodElapsedCallback+0xa2>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80038c4:	2100      	movs	r1, #0
 80038c6:	4826      	ldr	r0, [pc, #152]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80038c8:	f002 f9c6 	bl	8005c58 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 80038cc:	4824      	ldr	r0, [pc, #144]	; (8003960 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80038ce:	f002 f8a3 	bl	8005a18 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(1, false);
 80038d2:	2200      	movs	r2, #0
 80038d4:	2101      	movs	r1, #1
 80038d6:	4821      	ldr	r0, [pc, #132]	; (800395c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80038d8:	f7fe fcf4 	bl	80022c4 <_ZN7RoboArm9SetEnableEtb>
			cntImpulse1 = 0;
 80038dc:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
			arm.stateMoveM1 = false;
 80038e2:	4b1e      	ldr	r3, [pc, #120]	; (800395c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
			timerFT1 = true;
 80038ea:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e025      	b.n	800393e <HAL_TIM_PeriodElapsedCallback+0xa2>
		}

	} else if (htim->Instance == TIM2) {
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fa:	d120      	bne.n	800393e <HAL_TIM_PeriodElapsedCallback+0xa2>

		cntImpulse2++;
 80038fc:	4b1a      	ldr	r3, [pc, #104]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3301      	adds	r3, #1
 8003902:	4a19      	ldr	r2, [pc, #100]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003904:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= arm.distPsteps) {
 8003906:	4b15      	ldr	r3, [pc, #84]	; (800395c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800390a:	4b17      	ldr	r3, [pc, #92]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d815      	bhi.n	800393e <HAL_TIM_PeriodElapsedCallback+0xa2>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8003912:	2104      	movs	r1, #4
 8003914:	4815      	ldr	r0, [pc, #84]	; (800396c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8003916:	f002 f99f 	bl	8005c58 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 800391a:	4814      	ldr	r0, [pc, #80]	; (800396c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800391c:	f002 f87c 	bl	8005a18 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(2, false);
 8003920:	2200      	movs	r2, #0
 8003922:	2102      	movs	r1, #2
 8003924:	480d      	ldr	r0, [pc, #52]	; (800395c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003926:	f7fe fccd 	bl	80022c4 <_ZN7RoboArm9SetEnableEtb>
			cntImpulse2 = 0;
 800392a:	4b0f      	ldr	r3, [pc, #60]	; (8003968 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800392c:	2200      	movs	r2, #0
 800392e:	601a      	str	r2, [r3, #0]
			arm.stateMoveM2 = false;
 8003930:	4b0a      	ldr	r3, [pc, #40]	; (800395c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8003932:	2200      	movs	r2, #0
 8003934:	f883 20f3 	strb.w	r2, [r3, #243]	; 0xf3
			timerFT2 = true;
 8003938:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800393a:	2201      	movs	r2, #1
 800393c:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a0c      	ldr	r2, [pc, #48]	; (8003974 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d101      	bne.n	800394c <HAL_TIM_PeriodElapsedCallback+0xb0>
    HAL_IncTick();
 8003948:	f000 fc1c 	bl	8004184 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800394c:	bf00      	nop
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	40012c00 	.word	0x40012c00
 8003958:	2000068c 	.word	0x2000068c
 800395c:	20000694 	.word	0x20000694
 8003960:	200004ec 	.word	0x200004ec
 8003964:	20000670 	.word	0x20000670
 8003968:	20000690 	.word	0x20000690
 800396c:	20000534 	.word	0x20000534
 8003970:	20000671 	.word	0x20000671
 8003974:	40000800 	.word	0x40000800

08003978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800397c:	b672      	cpsid	i
}
 800397e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003980:	e7fe      	b.n	8003980 <Error_Handler+0x8>
	...

08003984 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d10a      	bne.n	80039aa <_Z41__static_initialization_and_destruction_0ii+0x26>
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800399a:	4293      	cmp	r3, r2
 800399c:	d105      	bne.n	80039aa <_Z41__static_initialization_and_destruction_0ii+0x26>
RoboArm arm(0, 124);
 800399e:	4a05      	ldr	r2, [pc, #20]	; (80039b4 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80039a0:	f04f 0100 	mov.w	r1, #0
 80039a4:	4804      	ldr	r0, [pc, #16]	; (80039b8 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80039a6:	f7fd fd5f 	bl	8001468 <_ZN7RoboArmC1Eff>
}
 80039aa:	bf00      	nop
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	42f80000 	.word	0x42f80000
 80039b8:	20000694 	.word	0x20000694

080039bc <_GLOBAL__sub_I_hspi1>:
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
 80039c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80039c4:	2001      	movs	r0, #1
 80039c6:	f7ff ffdd 	bl	8003984 <_Z41__static_initialization_and_destruction_0ii>
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80039d2:	4b1c      	ldr	r3, [pc, #112]	; (8003a44 <HAL_MspInit+0x78>)
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <HAL_MspInit+0x78>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6193      	str	r3, [r2, #24]
 80039de:	4b19      	ldr	r3, [pc, #100]	; (8003a44 <HAL_MspInit+0x78>)
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	60bb      	str	r3, [r7, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80039ea:	4b16      	ldr	r3, [pc, #88]	; (8003a44 <HAL_MspInit+0x78>)
 80039ec:	69db      	ldr	r3, [r3, #28]
 80039ee:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_MspInit+0x78>)
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f4:	61d3      	str	r3, [r2, #28]
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <HAL_MspInit+0x78>)
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a02:	2200      	movs	r2, #0
 8003a04:	210f      	movs	r1, #15
 8003a06:	f06f 0001 	mvn.w	r0, #1
 8003a0a:	f000 fc8c 	bl	8004326 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003a0e:	2200      	movs	r2, #0
 8003a10:	2105      	movs	r1, #5
 8003a12:	2005      	movs	r0, #5
 8003a14:	f000 fc87 	bl	8004326 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003a18:	2005      	movs	r0, #5
 8003a1a:	f000 fca0 	bl	800435e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003a1e:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <HAL_MspInit+0x7c>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	60fb      	str	r3, [r7, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003a32:	60fb      	str	r3, [r7, #12]
 8003a34:	4a04      	ldr	r2, [pc, #16]	; (8003a48 <HAL_MspInit+0x7c>)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40021000 	.word	0x40021000
 8003a48:	40010000 	.word	0x40010000

08003a4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b08a      	sub	sp, #40	; 0x28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a54:	f107 0314 	add.w	r3, r7, #20
 8003a58:	2200      	movs	r2, #0
 8003a5a:	601a      	str	r2, [r3, #0]
 8003a5c:	605a      	str	r2, [r3, #4]
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a26      	ldr	r2, [pc, #152]	; (8003b00 <HAL_SPI_MspInit+0xb4>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d145      	bne.n	8003af8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a6c:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <HAL_SPI_MspInit+0xb8>)
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	4a24      	ldr	r2, [pc, #144]	; (8003b04 <HAL_SPI_MspInit+0xb8>)
 8003a72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a76:	6193      	str	r3, [r2, #24]
 8003a78:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <HAL_SPI_MspInit+0xb8>)
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a80:	613b      	str	r3, [r7, #16]
 8003a82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a84:	4b1f      	ldr	r3, [pc, #124]	; (8003b04 <HAL_SPI_MspInit+0xb8>)
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	4a1e      	ldr	r2, [pc, #120]	; (8003b04 <HAL_SPI_MspInit+0xb8>)
 8003a8a:	f043 0308 	orr.w	r3, r3, #8
 8003a8e:	6193      	str	r3, [r2, #24]
 8003a90:	4b1c      	ldr	r3, [pc, #112]	; (8003b04 <HAL_SPI_MspInit+0xb8>)
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003a9c:	2328      	movs	r3, #40	; 0x28
 8003a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003aa8:	f107 0314 	add.w	r3, r7, #20
 8003aac:	4619      	mov	r1, r3
 8003aae:	4816      	ldr	r0, [pc, #88]	; (8003b08 <HAL_SPI_MspInit+0xbc>)
 8003ab0:	f000 fd16 	bl	80044e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003ab4:	2310      	movs	r3, #16
 8003ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ac0:	f107 0314 	add.w	r3, r7, #20
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4810      	ldr	r0, [pc, #64]	; (8003b08 <HAL_SPI_MspInit+0xbc>)
 8003ac8:	f000 fd0a 	bl	80044e0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003acc:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <HAL_SPI_MspInit+0xc0>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	f043 0301 	orr.w	r3, r3, #1
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae2:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <HAL_SPI_MspInit+0xc0>)
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2105      	movs	r1, #5
 8003aec:	2023      	movs	r0, #35	; 0x23
 8003aee:	f000 fc1a 	bl	8004326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8003af2:	2023      	movs	r0, #35	; 0x23
 8003af4:	f000 fc33 	bl	800435e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003af8:	bf00      	nop
 8003afa:	3728      	adds	r7, #40	; 0x28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40013000 	.word	0x40013000
 8003b04:	40021000 	.word	0x40021000
 8003b08:	40010c00 	.word	0x40010c00
 8003b0c:	40010000 	.word	0x40010000

08003b10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a27      	ldr	r2, [pc, #156]	; (8003bbc <HAL_TIM_PWM_MspInit+0xac>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d114      	bne.n	8003b4c <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b22:	4b27      	ldr	r3, [pc, #156]	; (8003bc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003b24:	699b      	ldr	r3, [r3, #24]
 8003b26:	4a26      	ldr	r2, [pc, #152]	; (8003bc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003b28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b2c:	6193      	str	r3, [r2, #24]
 8003b2e:	4b24      	ldr	r3, [pc, #144]	; (8003bc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2105      	movs	r1, #5
 8003b3e:	2019      	movs	r0, #25
 8003b40:	f000 fbf1 	bl	8004326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8003b44:	2019      	movs	r0, #25
 8003b46:	f000 fc0a 	bl	800435e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003b4a:	e032      	b.n	8003bb2 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM2)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b54:	d114      	bne.n	8003b80 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b56:	4b1a      	ldr	r3, [pc, #104]	; (8003bc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003b58:	69db      	ldr	r3, [r3, #28]
 8003b5a:	4a19      	ldr	r2, [pc, #100]	; (8003bc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	61d3      	str	r3, [r2, #28]
 8003b62:	4b17      	ldr	r3, [pc, #92]	; (8003bc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003b64:	69db      	ldr	r3, [r3, #28]
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	613b      	str	r3, [r7, #16]
 8003b6c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8003b6e:	2200      	movs	r2, #0
 8003b70:	2105      	movs	r1, #5
 8003b72:	201c      	movs	r0, #28
 8003b74:	f000 fbd7 	bl	8004326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003b78:	201c      	movs	r0, #28
 8003b7a:	f000 fbf0 	bl	800435e <HAL_NVIC_EnableIRQ>
}
 8003b7e:	e018      	b.n	8003bb2 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM3)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a0f      	ldr	r2, [pc, #60]	; (8003bc4 <HAL_TIM_PWM_MspInit+0xb4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d113      	bne.n	8003bb2 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b8a:	4b0d      	ldr	r3, [pc, #52]	; (8003bc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	4a0c      	ldr	r2, [pc, #48]	; (8003bc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003b90:	f043 0302 	orr.w	r3, r3, #2
 8003b94:	61d3      	str	r3, [r2, #28]
 8003b96:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2105      	movs	r1, #5
 8003ba6:	201d      	movs	r0, #29
 8003ba8:	f000 fbbd 	bl	8004326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003bac:	201d      	movs	r0, #29
 8003bae:	f000 fbd6 	bl	800435e <HAL_NVIC_EnableIRQ>
}
 8003bb2:	bf00      	nop
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	40021000 	.word	0x40021000
 8003bc4:	40000400 	.word	0x40000400

08003bc8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08a      	sub	sp, #40	; 0x28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd0:	f107 0318 	add.w	r3, r7, #24
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]
 8003bd8:	605a      	str	r2, [r3, #4]
 8003bda:	609a      	str	r2, [r3, #8]
 8003bdc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a2e      	ldr	r2, [pc, #184]	; (8003c9c <HAL_TIM_MspPostInit+0xd4>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d119      	bne.n	8003c1c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be8:	4b2d      	ldr	r3, [pc, #180]	; (8003ca0 <HAL_TIM_MspPostInit+0xd8>)
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	4a2c      	ldr	r2, [pc, #176]	; (8003ca0 <HAL_TIM_MspPostInit+0xd8>)
 8003bee:	f043 0304 	orr.w	r3, r3, #4
 8003bf2:	6193      	str	r3, [r2, #24]
 8003bf4:	4b2a      	ldr	r3, [pc, #168]	; (8003ca0 <HAL_TIM_MspPostInit+0xd8>)
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c06:	2302      	movs	r3, #2
 8003c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c0e:	f107 0318 	add.w	r3, r7, #24
 8003c12:	4619      	mov	r1, r3
 8003c14:	4823      	ldr	r0, [pc, #140]	; (8003ca4 <HAL_TIM_MspPostInit+0xdc>)
 8003c16:	f000 fc63 	bl	80044e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c1a:	e03a      	b.n	8003c92 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c24:	d118      	bne.n	8003c58 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <HAL_TIM_MspPostInit+0xd8>)
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	4a1d      	ldr	r2, [pc, #116]	; (8003ca0 <HAL_TIM_MspPostInit+0xd8>)
 8003c2c:	f043 0304 	orr.w	r3, r3, #4
 8003c30:	6193      	str	r3, [r2, #24]
 8003c32:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <HAL_TIM_MspPostInit+0xd8>)
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f003 0304 	and.w	r3, r3, #4
 8003c3a:	613b      	str	r3, [r7, #16]
 8003c3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c42:	2302      	movs	r3, #2
 8003c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c46:	2302      	movs	r3, #2
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c4a:	f107 0318 	add.w	r3, r7, #24
 8003c4e:	4619      	mov	r1, r3
 8003c50:	4814      	ldr	r0, [pc, #80]	; (8003ca4 <HAL_TIM_MspPostInit+0xdc>)
 8003c52:	f000 fc45 	bl	80044e0 <HAL_GPIO_Init>
}
 8003c56:	e01c      	b.n	8003c92 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <HAL_TIM_MspPostInit+0xe0>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d117      	bne.n	8003c92 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c62:	4b0f      	ldr	r3, [pc, #60]	; (8003ca0 <HAL_TIM_MspPostInit+0xd8>)
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	4a0e      	ldr	r2, [pc, #56]	; (8003ca0 <HAL_TIM_MspPostInit+0xd8>)
 8003c68:	f043 0304 	orr.w	r3, r3, #4
 8003c6c:	6193      	str	r3, [r2, #24]
 8003c6e:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <HAL_TIM_MspPostInit+0xd8>)
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003c7a:	2380      	movs	r3, #128	; 0x80
 8003c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c82:	2302      	movs	r3, #2
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c86:	f107 0318 	add.w	r3, r7, #24
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	4805      	ldr	r0, [pc, #20]	; (8003ca4 <HAL_TIM_MspPostInit+0xdc>)
 8003c8e:	f000 fc27 	bl	80044e0 <HAL_GPIO_Init>
}
 8003c92:	bf00      	nop
 8003c94:	3728      	adds	r7, #40	; 0x28
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40012c00 	.word	0x40012c00
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40010800 	.word	0x40010800
 8003ca8:	40000400 	.word	0x40000400

08003cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	; 0x28
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb4:	f107 0318 	add.w	r3, r7, #24
 8003cb8:	2200      	movs	r2, #0
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	605a      	str	r2, [r3, #4]
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a39      	ldr	r2, [pc, #228]	; (8003dac <HAL_UART_MspInit+0x100>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d13a      	bne.n	8003d42 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003ccc:	4b38      	ldr	r3, [pc, #224]	; (8003db0 <HAL_UART_MspInit+0x104>)
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	4a37      	ldr	r2, [pc, #220]	; (8003db0 <HAL_UART_MspInit+0x104>)
 8003cd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cd6:	6193      	str	r3, [r2, #24]
 8003cd8:	4b35      	ldr	r3, [pc, #212]	; (8003db0 <HAL_UART_MspInit+0x104>)
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce4:	4b32      	ldr	r3, [pc, #200]	; (8003db0 <HAL_UART_MspInit+0x104>)
 8003ce6:	699b      	ldr	r3, [r3, #24]
 8003ce8:	4a31      	ldr	r2, [pc, #196]	; (8003db0 <HAL_UART_MspInit+0x104>)
 8003cea:	f043 0304 	orr.w	r3, r3, #4
 8003cee:	6193      	str	r3, [r2, #24]
 8003cf0:	4b2f      	ldr	r3, [pc, #188]	; (8003db0 <HAL_UART_MspInit+0x104>)
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d02:	2302      	movs	r3, #2
 8003d04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d06:	2303      	movs	r3, #3
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d0a:	f107 0318 	add.w	r3, r7, #24
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4828      	ldr	r0, [pc, #160]	; (8003db4 <HAL_UART_MspInit+0x108>)
 8003d12:	f000 fbe5 	bl	80044e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003d16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d20:	2300      	movs	r3, #0
 8003d22:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d24:	f107 0318 	add.w	r3, r7, #24
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4822      	ldr	r0, [pc, #136]	; (8003db4 <HAL_UART_MspInit+0x108>)
 8003d2c:	f000 fbd8 	bl	80044e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003d30:	2200      	movs	r2, #0
 8003d32:	2105      	movs	r1, #5
 8003d34:	2025      	movs	r0, #37	; 0x25
 8003d36:	f000 faf6 	bl	8004326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003d3a:	2025      	movs	r0, #37	; 0x25
 8003d3c:	f000 fb0f 	bl	800435e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d40:	e030      	b.n	8003da4 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1c      	ldr	r2, [pc, #112]	; (8003db8 <HAL_UART_MspInit+0x10c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d12b      	bne.n	8003da4 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d4c:	4b18      	ldr	r3, [pc, #96]	; (8003db0 <HAL_UART_MspInit+0x104>)
 8003d4e:	69db      	ldr	r3, [r3, #28]
 8003d50:	4a17      	ldr	r2, [pc, #92]	; (8003db0 <HAL_UART_MspInit+0x104>)
 8003d52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d56:	61d3      	str	r3, [r2, #28]
 8003d58:	4b15      	ldr	r3, [pc, #84]	; (8003db0 <HAL_UART_MspInit+0x104>)
 8003d5a:	69db      	ldr	r3, [r3, #28]
 8003d5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d64:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_UART_MspInit+0x104>)
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	4a11      	ldr	r2, [pc, #68]	; (8003db0 <HAL_UART_MspInit+0x104>)
 8003d6a:	f043 0304 	orr.w	r3, r3, #4
 8003d6e:	6193      	str	r3, [r2, #24]
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <HAL_UART_MspInit+0x104>)
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	f003 0304 	and.w	r3, r3, #4
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d80:	2312      	movs	r3, #18
 8003d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003d84:	2303      	movs	r3, #3
 8003d86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d88:	f107 0318 	add.w	r3, r7, #24
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4809      	ldr	r0, [pc, #36]	; (8003db4 <HAL_UART_MspInit+0x108>)
 8003d90:	f000 fba6 	bl	80044e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003d94:	2200      	movs	r2, #0
 8003d96:	2105      	movs	r1, #5
 8003d98:	2026      	movs	r0, #38	; 0x26
 8003d9a:	f000 fac4 	bl	8004326 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d9e:	2026      	movs	r0, #38	; 0x26
 8003da0:	f000 fadd 	bl	800435e <HAL_NVIC_EnableIRQ>
}
 8003da4:	bf00      	nop
 8003da6:	3728      	adds	r7, #40	; 0x28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40013800 	.word	0x40013800
 8003db0:	40021000 	.word	0x40021000
 8003db4:	40010800 	.word	0x40010800
 8003db8:	40004400 	.word	0x40004400

08003dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b08e      	sub	sp, #56	; 0x38
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003dd2:	4b34      	ldr	r3, [pc, #208]	; (8003ea4 <HAL_InitTick+0xe8>)
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	4a33      	ldr	r2, [pc, #204]	; (8003ea4 <HAL_InitTick+0xe8>)
 8003dd8:	f043 0304 	orr.w	r3, r3, #4
 8003ddc:	61d3      	str	r3, [r2, #28]
 8003dde:	4b31      	ldr	r3, [pc, #196]	; (8003ea4 <HAL_InitTick+0xe8>)
 8003de0:	69db      	ldr	r3, [r3, #28]
 8003de2:	f003 0304 	and.w	r3, r3, #4
 8003de6:	60fb      	str	r3, [r7, #12]
 8003de8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003dea:	f107 0210 	add.w	r2, r7, #16
 8003dee:	f107 0314 	add.w	r3, r7, #20
 8003df2:	4611      	mov	r1, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f001 f927 	bl	8005048 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003dfa:	6a3b      	ldr	r3, [r7, #32]
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d103      	bne.n	8003e0c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003e04:	f001 f8f8 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8003e08:	6378      	str	r0, [r7, #52]	; 0x34
 8003e0a:	e004      	b.n	8003e16 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003e0c:	f001 f8f4 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8003e10:	4603      	mov	r3, r0
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e18:	4a23      	ldr	r2, [pc, #140]	; (8003ea8 <HAL_InitTick+0xec>)
 8003e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e1e:	0c9b      	lsrs	r3, r3, #18
 8003e20:	3b01      	subs	r3, #1
 8003e22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8003e24:	4b21      	ldr	r3, [pc, #132]	; (8003eac <HAL_InitTick+0xf0>)
 8003e26:	4a22      	ldr	r2, [pc, #136]	; (8003eb0 <HAL_InitTick+0xf4>)
 8003e28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003e2a:	4b20      	ldr	r3, [pc, #128]	; (8003eac <HAL_InitTick+0xf0>)
 8003e2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003e30:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8003e32:	4a1e      	ldr	r2, [pc, #120]	; (8003eac <HAL_InitTick+0xf0>)
 8003e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e36:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003e38:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <HAL_InitTick+0xf0>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	; (8003eac <HAL_InitTick+0xf0>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e44:	4b19      	ldr	r3, [pc, #100]	; (8003eac <HAL_InitTick+0xf0>)
 8003e46:	2200      	movs	r2, #0
 8003e48:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003e4a:	4818      	ldr	r0, [pc, #96]	; (8003eac <HAL_InitTick+0xf0>)
 8003e4c:	f001 fd3a 	bl	80058c4 <HAL_TIM_Base_Init>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003e56:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d11b      	bne.n	8003e96 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8003e5e:	4813      	ldr	r0, [pc, #76]	; (8003eac <HAL_InitTick+0xf0>)
 8003e60:	f001 fd88 	bl	8005974 <HAL_TIM_Base_Start_IT>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003e6a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d111      	bne.n	8003e96 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003e72:	201e      	movs	r0, #30
 8003e74:	f000 fa73 	bl	800435e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b0f      	cmp	r3, #15
 8003e7c:	d808      	bhi.n	8003e90 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8003e7e:	2200      	movs	r2, #0
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	201e      	movs	r0, #30
 8003e84:	f000 fa4f 	bl	8004326 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e88:	4a0a      	ldr	r2, [pc, #40]	; (8003eb4 <HAL_InitTick+0xf8>)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6013      	str	r3, [r2, #0]
 8003e8e:	e002      	b.n	8003e96 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003e96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3738      	adds	r7, #56	; 0x38
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	431bde83 	.word	0x431bde83
 8003eac:	200007b0 	.word	0x200007b0
 8003eb0:	40000800 	.word	0x40000800
 8003eb4:	20000004 	.word	0x20000004

08003eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003ebc:	f001 f8f4 	bl	80050a8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ec0:	e7fe      	b.n	8003ec0 <NMI_Handler+0x8>

08003ec2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ec6:	e7fe      	b.n	8003ec6 <HardFault_Handler+0x4>

08003ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003ecc:	e7fe      	b.n	8003ecc <MemManage_Handler+0x4>

08003ece <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ed2:	e7fe      	b.n	8003ed2 <BusFault_Handler+0x4>

08003ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ed8:	e7fe      	b.n	8003ed8 <UsageFault_Handler+0x4>

08003eda <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003eda:	b480      	push	{r7}
 8003edc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ede:	bf00      	nop
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bc80      	pop	{r7}
 8003ee4:	4770      	bx	lr

08003ee6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003eea:	bf00      	nop
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr
	...

08003ef4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003ef8:	4802      	ldr	r0, [pc, #8]	; (8003f04 <TIM1_UP_IRQHandler+0x10>)
 8003efa:	f001 ff11 	bl	8005d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	200004ec 	.word	0x200004ec

08003f08 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003f0c:	4802      	ldr	r0, [pc, #8]	; (8003f18 <TIM2_IRQHandler+0x10>)
 8003f0e:	f001 ff07 	bl	8005d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003f12:	bf00      	nop
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000534 	.word	0x20000534

08003f1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f20:	4802      	ldr	r0, [pc, #8]	; (8003f2c <TIM3_IRQHandler+0x10>)
 8003f22:	f001 fefd 	bl	8005d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f26:	bf00      	nop
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	2000057c 	.word	0x2000057c

08003f30 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f34:	4802      	ldr	r0, [pc, #8]	; (8003f40 <TIM4_IRQHandler+0x10>)
 8003f36:	f001 fef3 	bl	8005d20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f3a:	bf00      	nop
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	200007b0 	.word	0x200007b0

08003f44 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003f48:	4802      	ldr	r0, [pc, #8]	; (8003f54 <SPI1_IRQHandler+0x10>)
 8003f4a:	f001 fb19 	bl	8005580 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000494 	.word	0x20000494

08003f58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f5c:	4802      	ldr	r0, [pc, #8]	; (8003f68 <USART1_IRQHandler+0x10>)
 8003f5e:	f002 fd7f 	bl	8006a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f62:	bf00      	nop
 8003f64:	bd80      	pop	{r7, pc}
 8003f66:	bf00      	nop
 8003f68:	200005c4 	.word	0x200005c4

08003f6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f70:	4802      	ldr	r0, [pc, #8]	; (8003f7c <USART2_IRQHandler+0x10>)
 8003f72:	f002 fd75 	bl	8006a60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f76:	bf00      	nop
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	2000060c 	.word	0x2000060c

08003f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003f80:	b480      	push	{r7}
 8003f82:	af00      	add	r7, sp, #0
  return 1;
 8003f84:	2301      	movs	r3, #1
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bc80      	pop	{r7}
 8003f8c:	4770      	bx	lr

08003f8e <_kill>:

int _kill(int pid, int sig)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003f98:	f005 fb76 	bl	8009688 <__errno>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2216      	movs	r2, #22
 8003fa0:	601a      	str	r2, [r3, #0]
  return -1;
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <_exit>:

void _exit (int status)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fb6:	f04f 31ff 	mov.w	r1, #4294967295
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff ffe7 	bl	8003f8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fc0:	e7fe      	b.n	8003fc0 <_exit+0x12>

08003fc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b086      	sub	sp, #24
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	60f8      	str	r0, [r7, #12]
 8003fca:	60b9      	str	r1, [r7, #8]
 8003fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	e00a      	b.n	8003fea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003fd4:	f3af 8000 	nop.w
 8003fd8:	4601      	mov	r1, r0
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	60ba      	str	r2, [r7, #8]
 8003fe0:	b2ca      	uxtb	r2, r1
 8003fe2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	3301      	adds	r3, #1
 8003fe8:	617b      	str	r3, [r7, #20]
 8003fea:	697a      	ldr	r2, [r7, #20]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	dbf0      	blt.n	8003fd4 <_read+0x12>
  }

  return len;
 8003ff2:	687b      	ldr	r3, [r7, #4]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3718      	adds	r7, #24
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	bd80      	pop	{r7, pc}

08003ffc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b086      	sub	sp, #24
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004008:	2300      	movs	r3, #0
 800400a:	617b      	str	r3, [r7, #20]
 800400c:	e009      	b.n	8004022 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	60ba      	str	r2, [r7, #8]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	3301      	adds	r3, #1
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	429a      	cmp	r2, r3
 8004028:	dbf1      	blt.n	800400e <_write+0x12>
  }
  return len;
 800402a:	687b      	ldr	r3, [r7, #4]
}
 800402c:	4618      	mov	r0, r3
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <_close>:

int _close(int file)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800403c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800404a:	b480      	push	{r7}
 800404c:	b083      	sub	sp, #12
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800405a:	605a      	str	r2, [r3, #4]
  return 0;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	370c      	adds	r7, #12
 8004062:	46bd      	mov	sp, r7
 8004064:	bc80      	pop	{r7}
 8004066:	4770      	bx	lr

08004068 <_isatty>:

int _isatty(int file)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004070:	2301      	movs	r3, #1
}
 8004072:	4618      	mov	r0, r3
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr

0800407c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800407c:	b480      	push	{r7}
 800407e:	b085      	sub	sp, #20
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	bc80      	pop	{r7}
 8004092:	4770      	bx	lr

08004094 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800409c:	4a14      	ldr	r2, [pc, #80]	; (80040f0 <_sbrk+0x5c>)
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <_sbrk+0x60>)
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80040a8:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <_sbrk+0x64>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d102      	bne.n	80040b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040b0:	4b11      	ldr	r3, [pc, #68]	; (80040f8 <_sbrk+0x64>)
 80040b2:	4a12      	ldr	r2, [pc, #72]	; (80040fc <_sbrk+0x68>)
 80040b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040b6:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <_sbrk+0x64>)
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4413      	add	r3, r2
 80040be:	693a      	ldr	r2, [r7, #16]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d207      	bcs.n	80040d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040c4:	f005 fae0 	bl	8009688 <__errno>
 80040c8:	4603      	mov	r3, r0
 80040ca:	220c      	movs	r2, #12
 80040cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040ce:	f04f 33ff 	mov.w	r3, #4294967295
 80040d2:	e009      	b.n	80040e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040d4:	4b08      	ldr	r3, [pc, #32]	; (80040f8 <_sbrk+0x64>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040da:	4b07      	ldr	r3, [pc, #28]	; (80040f8 <_sbrk+0x64>)
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4413      	add	r3, r2
 80040e2:	4a05      	ldr	r2, [pc, #20]	; (80040f8 <_sbrk+0x64>)
 80040e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040e6:	68fb      	ldr	r3, [r7, #12]
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3718      	adds	r7, #24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	20005000 	.word	0x20005000
 80040f4:	00000400 	.word	0x00000400
 80040f8:	200007f8 	.word	0x200007f8
 80040fc:	20001698 	.word	0x20001698

08004100 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004100:	b480      	push	{r7}
 8004102:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004104:	bf00      	nop
 8004106:	46bd      	mov	sp, r7
 8004108:	bc80      	pop	{r7}
 800410a:	4770      	bx	lr

0800410c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800410c:	f7ff fff8 	bl	8004100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004110:	480b      	ldr	r0, [pc, #44]	; (8004140 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004112:	490c      	ldr	r1, [pc, #48]	; (8004144 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004114:	4a0c      	ldr	r2, [pc, #48]	; (8004148 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004118:	e002      	b.n	8004120 <LoopCopyDataInit>

0800411a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800411a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800411c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800411e:	3304      	adds	r3, #4

08004120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004124:	d3f9      	bcc.n	800411a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004126:	4a09      	ldr	r2, [pc, #36]	; (800414c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004128:	4c09      	ldr	r4, [pc, #36]	; (8004150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800412a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800412c:	e001      	b.n	8004132 <LoopFillZerobss>

0800412e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800412e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004130:	3204      	adds	r2, #4

08004132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004134:	d3fb      	bcc.n	800412e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004136:	f005 faad 	bl	8009694 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800413a:	f7fe fea3 	bl	8002e84 <main>
  bx lr
 800413e:	4770      	bx	lr
  ldr r0, =_sdata
 8004140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004144:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004148:	0800be40 	.word	0x0800be40
  ldr r2, =_sbss
 800414c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004150:	20001698 	.word	0x20001698

08004154 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004154:	e7fe      	b.n	8004154 <ADC1_2_IRQHandler>
	...

08004158 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800415c:	4b08      	ldr	r3, [pc, #32]	; (8004180 <HAL_Init+0x28>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a07      	ldr	r2, [pc, #28]	; (8004180 <HAL_Init+0x28>)
 8004162:	f043 0310 	orr.w	r3, r3, #16
 8004166:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004168:	2003      	movs	r0, #3
 800416a:	f000 f8d1 	bl	8004310 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800416e:	200f      	movs	r0, #15
 8004170:	f7ff fe24 	bl	8003dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004174:	f7ff fc2a 	bl	80039cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	40022000 	.word	0x40022000

08004184 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_IncTick+0x1c>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	4b05      	ldr	r3, [pc, #20]	; (80041a4 <HAL_IncTick+0x20>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4413      	add	r3, r2
 8004194:	4a03      	ldr	r2, [pc, #12]	; (80041a4 <HAL_IncTick+0x20>)
 8004196:	6013      	str	r3, [r2, #0]
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	20000008 	.word	0x20000008
 80041a4:	200007fc 	.word	0x200007fc

080041a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	af00      	add	r7, sp, #0
  return uwTick;
 80041ac:	4b02      	ldr	r3, [pc, #8]	; (80041b8 <HAL_GetTick+0x10>)
 80041ae:	681b      	ldr	r3, [r3, #0]
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bc80      	pop	{r7}
 80041b6:	4770      	bx	lr
 80041b8:	200007fc 	.word	0x200007fc

080041bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f003 0307 	and.w	r3, r3, #7
 80041ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041cc:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <__NVIC_SetPriorityGrouping+0x44>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041d2:	68ba      	ldr	r2, [r7, #8]
 80041d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041d8:	4013      	ands	r3, r2
 80041da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ee:	4a04      	ldr	r2, [pc, #16]	; (8004200 <__NVIC_SetPriorityGrouping+0x44>)
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	60d3      	str	r3, [r2, #12]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bc80      	pop	{r7}
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	e000ed00 	.word	0xe000ed00

08004204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004208:	4b04      	ldr	r3, [pc, #16]	; (800421c <__NVIC_GetPriorityGrouping+0x18>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	0a1b      	lsrs	r3, r3, #8
 800420e:	f003 0307 	and.w	r3, r3, #7
}
 8004212:	4618      	mov	r0, r3
 8004214:	46bd      	mov	sp, r7
 8004216:	bc80      	pop	{r7}
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	e000ed00 	.word	0xe000ed00

08004220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800422a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422e:	2b00      	cmp	r3, #0
 8004230:	db0b      	blt.n	800424a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004232:	79fb      	ldrb	r3, [r7, #7]
 8004234:	f003 021f 	and.w	r2, r3, #31
 8004238:	4906      	ldr	r1, [pc, #24]	; (8004254 <__NVIC_EnableIRQ+0x34>)
 800423a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423e:	095b      	lsrs	r3, r3, #5
 8004240:	2001      	movs	r0, #1
 8004242:	fa00 f202 	lsl.w	r2, r0, r2
 8004246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800424a:	bf00      	nop
 800424c:	370c      	adds	r7, #12
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	e000e100 	.word	0xe000e100

08004258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	4603      	mov	r3, r0
 8004260:	6039      	str	r1, [r7, #0]
 8004262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004268:	2b00      	cmp	r3, #0
 800426a:	db0a      	blt.n	8004282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	b2da      	uxtb	r2, r3
 8004270:	490c      	ldr	r1, [pc, #48]	; (80042a4 <__NVIC_SetPriority+0x4c>)
 8004272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004276:	0112      	lsls	r2, r2, #4
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	440b      	add	r3, r1
 800427c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004280:	e00a      	b.n	8004298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	b2da      	uxtb	r2, r3
 8004286:	4908      	ldr	r1, [pc, #32]	; (80042a8 <__NVIC_SetPriority+0x50>)
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	3b04      	subs	r3, #4
 8004290:	0112      	lsls	r2, r2, #4
 8004292:	b2d2      	uxtb	r2, r2
 8004294:	440b      	add	r3, r1
 8004296:	761a      	strb	r2, [r3, #24]
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	bc80      	pop	{r7}
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	e000e100 	.word	0xe000e100
 80042a8:	e000ed00 	.word	0xe000ed00

080042ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b089      	sub	sp, #36	; 0x24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f003 0307 	and.w	r3, r3, #7
 80042be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f1c3 0307 	rsb	r3, r3, #7
 80042c6:	2b04      	cmp	r3, #4
 80042c8:	bf28      	it	cs
 80042ca:	2304      	movcs	r3, #4
 80042cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	3304      	adds	r3, #4
 80042d2:	2b06      	cmp	r3, #6
 80042d4:	d902      	bls.n	80042dc <NVIC_EncodePriority+0x30>
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	3b03      	subs	r3, #3
 80042da:	e000      	b.n	80042de <NVIC_EncodePriority+0x32>
 80042dc:	2300      	movs	r3, #0
 80042de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e0:	f04f 32ff 	mov.w	r2, #4294967295
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43da      	mvns	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	401a      	ands	r2, r3
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042f4:	f04f 31ff 	mov.w	r1, #4294967295
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	fa01 f303 	lsl.w	r3, r1, r3
 80042fe:	43d9      	mvns	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004304:	4313      	orrs	r3, r2
         );
}
 8004306:	4618      	mov	r0, r3
 8004308:	3724      	adds	r7, #36	; 0x24
 800430a:	46bd      	mov	sp, r7
 800430c:	bc80      	pop	{r7}
 800430e:	4770      	bx	lr

08004310 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff ff4f 	bl	80041bc <__NVIC_SetPriorityGrouping>
}
 800431e:	bf00      	nop
 8004320:	3708      	adds	r7, #8
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004326:	b580      	push	{r7, lr}
 8004328:	b086      	sub	sp, #24
 800432a:	af00      	add	r7, sp, #0
 800432c:	4603      	mov	r3, r0
 800432e:	60b9      	str	r1, [r7, #8]
 8004330:	607a      	str	r2, [r7, #4]
 8004332:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004338:	f7ff ff64 	bl	8004204 <__NVIC_GetPriorityGrouping>
 800433c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	68b9      	ldr	r1, [r7, #8]
 8004342:	6978      	ldr	r0, [r7, #20]
 8004344:	f7ff ffb2 	bl	80042ac <NVIC_EncodePriority>
 8004348:	4602      	mov	r2, r0
 800434a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f7ff ff81 	bl	8004258 <__NVIC_SetPriority>
}
 8004356:	bf00      	nop
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}

0800435e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
 8004364:	4603      	mov	r3, r0
 8004366:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004368:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800436c:	4618      	mov	r0, r3
 800436e:	f7ff ff57 	bl	8004220 <__NVIC_EnableIRQ>
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800437a:	b480      	push	{r7}
 800437c:	b085      	sub	sp, #20
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004382:	2300      	movs	r3, #0
 8004384:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d008      	beq.n	80043a4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2204      	movs	r2, #4
 8004396:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e020      	b.n	80043e6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 020e 	bic.w	r2, r2, #14
 80043b2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f022 0201 	bic.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043cc:	2101      	movs	r1, #1
 80043ce:	fa01 f202 	lsl.w	r2, r1, r2
 80043d2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr

080043f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b084      	sub	sp, #16
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d005      	beq.n	8004414 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2204      	movs	r2, #4
 800440c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
 8004412:	e051      	b.n	80044b8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 020e 	bic.w	r2, r2, #14
 8004422:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f022 0201 	bic.w	r2, r2, #1
 8004432:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a22      	ldr	r2, [pc, #136]	; (80044c4 <HAL_DMA_Abort_IT+0xd4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d029      	beq.n	8004492 <HAL_DMA_Abort_IT+0xa2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a21      	ldr	r2, [pc, #132]	; (80044c8 <HAL_DMA_Abort_IT+0xd8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d022      	beq.n	800448e <HAL_DMA_Abort_IT+0x9e>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <HAL_DMA_Abort_IT+0xdc>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d01a      	beq.n	8004488 <HAL_DMA_Abort_IT+0x98>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <HAL_DMA_Abort_IT+0xe0>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d012      	beq.n	8004482 <HAL_DMA_Abort_IT+0x92>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <HAL_DMA_Abort_IT+0xe4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00a      	beq.n	800447c <HAL_DMA_Abort_IT+0x8c>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_DMA_Abort_IT+0xe8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d102      	bne.n	8004476 <HAL_DMA_Abort_IT+0x86>
 8004470:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004474:	e00e      	b.n	8004494 <HAL_DMA_Abort_IT+0xa4>
 8004476:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800447a:	e00b      	b.n	8004494 <HAL_DMA_Abort_IT+0xa4>
 800447c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004480:	e008      	b.n	8004494 <HAL_DMA_Abort_IT+0xa4>
 8004482:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004486:	e005      	b.n	8004494 <HAL_DMA_Abort_IT+0xa4>
 8004488:	f44f 7380 	mov.w	r3, #256	; 0x100
 800448c:	e002      	b.n	8004494 <HAL_DMA_Abort_IT+0xa4>
 800448e:	2310      	movs	r3, #16
 8004490:	e000      	b.n	8004494 <HAL_DMA_Abort_IT+0xa4>
 8004492:	2301      	movs	r3, #1
 8004494:	4a11      	ldr	r2, [pc, #68]	; (80044dc <HAL_DMA_Abort_IT+0xec>)
 8004496:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	4798      	blx	r3
    } 
  }
  return status;
 80044b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	40020008 	.word	0x40020008
 80044c8:	4002001c 	.word	0x4002001c
 80044cc:	40020030 	.word	0x40020030
 80044d0:	40020044 	.word	0x40020044
 80044d4:	40020058 	.word	0x40020058
 80044d8:	4002006c 	.word	0x4002006c
 80044dc:	40020000 	.word	0x40020000

080044e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b08b      	sub	sp, #44	; 0x2c
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044ea:	2300      	movs	r3, #0
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80044ee:	2300      	movs	r3, #0
 80044f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044f2:	e169      	b.n	80047c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80044f4:	2201      	movs	r2, #1
 80044f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f8:	fa02 f303 	lsl.w	r3, r2, r3
 80044fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	4013      	ands	r3, r2
 8004506:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	429a      	cmp	r2, r3
 800450e:	f040 8158 	bne.w	80047c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4a9a      	ldr	r2, [pc, #616]	; (8004780 <HAL_GPIO_Init+0x2a0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d05e      	beq.n	80045da <HAL_GPIO_Init+0xfa>
 800451c:	4a98      	ldr	r2, [pc, #608]	; (8004780 <HAL_GPIO_Init+0x2a0>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d875      	bhi.n	800460e <HAL_GPIO_Init+0x12e>
 8004522:	4a98      	ldr	r2, [pc, #608]	; (8004784 <HAL_GPIO_Init+0x2a4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d058      	beq.n	80045da <HAL_GPIO_Init+0xfa>
 8004528:	4a96      	ldr	r2, [pc, #600]	; (8004784 <HAL_GPIO_Init+0x2a4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d86f      	bhi.n	800460e <HAL_GPIO_Init+0x12e>
 800452e:	4a96      	ldr	r2, [pc, #600]	; (8004788 <HAL_GPIO_Init+0x2a8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d052      	beq.n	80045da <HAL_GPIO_Init+0xfa>
 8004534:	4a94      	ldr	r2, [pc, #592]	; (8004788 <HAL_GPIO_Init+0x2a8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d869      	bhi.n	800460e <HAL_GPIO_Init+0x12e>
 800453a:	4a94      	ldr	r2, [pc, #592]	; (800478c <HAL_GPIO_Init+0x2ac>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d04c      	beq.n	80045da <HAL_GPIO_Init+0xfa>
 8004540:	4a92      	ldr	r2, [pc, #584]	; (800478c <HAL_GPIO_Init+0x2ac>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d863      	bhi.n	800460e <HAL_GPIO_Init+0x12e>
 8004546:	4a92      	ldr	r2, [pc, #584]	; (8004790 <HAL_GPIO_Init+0x2b0>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d046      	beq.n	80045da <HAL_GPIO_Init+0xfa>
 800454c:	4a90      	ldr	r2, [pc, #576]	; (8004790 <HAL_GPIO_Init+0x2b0>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d85d      	bhi.n	800460e <HAL_GPIO_Init+0x12e>
 8004552:	2b12      	cmp	r3, #18
 8004554:	d82a      	bhi.n	80045ac <HAL_GPIO_Init+0xcc>
 8004556:	2b12      	cmp	r3, #18
 8004558:	d859      	bhi.n	800460e <HAL_GPIO_Init+0x12e>
 800455a:	a201      	add	r2, pc, #4	; (adr r2, 8004560 <HAL_GPIO_Init+0x80>)
 800455c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004560:	080045db 	.word	0x080045db
 8004564:	080045b5 	.word	0x080045b5
 8004568:	080045c7 	.word	0x080045c7
 800456c:	08004609 	.word	0x08004609
 8004570:	0800460f 	.word	0x0800460f
 8004574:	0800460f 	.word	0x0800460f
 8004578:	0800460f 	.word	0x0800460f
 800457c:	0800460f 	.word	0x0800460f
 8004580:	0800460f 	.word	0x0800460f
 8004584:	0800460f 	.word	0x0800460f
 8004588:	0800460f 	.word	0x0800460f
 800458c:	0800460f 	.word	0x0800460f
 8004590:	0800460f 	.word	0x0800460f
 8004594:	0800460f 	.word	0x0800460f
 8004598:	0800460f 	.word	0x0800460f
 800459c:	0800460f 	.word	0x0800460f
 80045a0:	0800460f 	.word	0x0800460f
 80045a4:	080045bd 	.word	0x080045bd
 80045a8:	080045d1 	.word	0x080045d1
 80045ac:	4a79      	ldr	r2, [pc, #484]	; (8004794 <HAL_GPIO_Init+0x2b4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80045b2:	e02c      	b.n	800460e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	623b      	str	r3, [r7, #32]
          break;
 80045ba:	e029      	b.n	8004610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	3304      	adds	r3, #4
 80045c2:	623b      	str	r3, [r7, #32]
          break;
 80045c4:	e024      	b.n	8004610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	3308      	adds	r3, #8
 80045cc:	623b      	str	r3, [r7, #32]
          break;
 80045ce:	e01f      	b.n	8004610 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	330c      	adds	r3, #12
 80045d6:	623b      	str	r3, [r7, #32]
          break;
 80045d8:	e01a      	b.n	8004610 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d102      	bne.n	80045e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80045e2:	2304      	movs	r3, #4
 80045e4:	623b      	str	r3, [r7, #32]
          break;
 80045e6:	e013      	b.n	8004610 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d105      	bne.n	80045fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045f0:	2308      	movs	r3, #8
 80045f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69fa      	ldr	r2, [r7, #28]
 80045f8:	611a      	str	r2, [r3, #16]
          break;
 80045fa:	e009      	b.n	8004610 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80045fc:	2308      	movs	r3, #8
 80045fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69fa      	ldr	r2, [r7, #28]
 8004604:	615a      	str	r2, [r3, #20]
          break;
 8004606:	e003      	b.n	8004610 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004608:	2300      	movs	r3, #0
 800460a:	623b      	str	r3, [r7, #32]
          break;
 800460c:	e000      	b.n	8004610 <HAL_GPIO_Init+0x130>
          break;
 800460e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	2bff      	cmp	r3, #255	; 0xff
 8004614:	d801      	bhi.n	800461a <HAL_GPIO_Init+0x13a>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	e001      	b.n	800461e <HAL_GPIO_Init+0x13e>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	3304      	adds	r3, #4
 800461e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	2bff      	cmp	r3, #255	; 0xff
 8004624:	d802      	bhi.n	800462c <HAL_GPIO_Init+0x14c>
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	e002      	b.n	8004632 <HAL_GPIO_Init+0x152>
 800462c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462e:	3b08      	subs	r3, #8
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	210f      	movs	r1, #15
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	fa01 f303 	lsl.w	r3, r1, r3
 8004640:	43db      	mvns	r3, r3
 8004642:	401a      	ands	r2, r3
 8004644:	6a39      	ldr	r1, [r7, #32]
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	fa01 f303 	lsl.w	r3, r1, r3
 800464c:	431a      	orrs	r2, r3
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	f000 80b1 	beq.w	80047c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004660:	4b4d      	ldr	r3, [pc, #308]	; (8004798 <HAL_GPIO_Init+0x2b8>)
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	4a4c      	ldr	r2, [pc, #304]	; (8004798 <HAL_GPIO_Init+0x2b8>)
 8004666:	f043 0301 	orr.w	r3, r3, #1
 800466a:	6193      	str	r3, [r2, #24]
 800466c:	4b4a      	ldr	r3, [pc, #296]	; (8004798 <HAL_GPIO_Init+0x2b8>)
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	60bb      	str	r3, [r7, #8]
 8004676:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004678:	4a48      	ldr	r2, [pc, #288]	; (800479c <HAL_GPIO_Init+0x2bc>)
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	089b      	lsrs	r3, r3, #2
 800467e:	3302      	adds	r3, #2
 8004680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004684:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	f003 0303 	and.w	r3, r3, #3
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	220f      	movs	r2, #15
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	43db      	mvns	r3, r3
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4013      	ands	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a40      	ldr	r2, [pc, #256]	; (80047a0 <HAL_GPIO_Init+0x2c0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d013      	beq.n	80046cc <HAL_GPIO_Init+0x1ec>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	4a3f      	ldr	r2, [pc, #252]	; (80047a4 <HAL_GPIO_Init+0x2c4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d00d      	beq.n	80046c8 <HAL_GPIO_Init+0x1e8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	4a3e      	ldr	r2, [pc, #248]	; (80047a8 <HAL_GPIO_Init+0x2c8>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d007      	beq.n	80046c4 <HAL_GPIO_Init+0x1e4>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a3d      	ldr	r2, [pc, #244]	; (80047ac <HAL_GPIO_Init+0x2cc>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d101      	bne.n	80046c0 <HAL_GPIO_Init+0x1e0>
 80046bc:	2303      	movs	r3, #3
 80046be:	e006      	b.n	80046ce <HAL_GPIO_Init+0x1ee>
 80046c0:	2304      	movs	r3, #4
 80046c2:	e004      	b.n	80046ce <HAL_GPIO_Init+0x1ee>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e002      	b.n	80046ce <HAL_GPIO_Init+0x1ee>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_GPIO_Init+0x1ee>
 80046cc:	2300      	movs	r3, #0
 80046ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046d0:	f002 0203 	and.w	r2, r2, #3
 80046d4:	0092      	lsls	r2, r2, #2
 80046d6:	4093      	lsls	r3, r2
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	4313      	orrs	r3, r2
 80046dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80046de:	492f      	ldr	r1, [pc, #188]	; (800479c <HAL_GPIO_Init+0x2bc>)
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	089b      	lsrs	r3, r3, #2
 80046e4:	3302      	adds	r3, #2
 80046e6:	68fa      	ldr	r2, [r7, #12]
 80046e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d006      	beq.n	8004706 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80046f8:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 80046fa:	689a      	ldr	r2, [r3, #8]
 80046fc:	492c      	ldr	r1, [pc, #176]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	4313      	orrs	r3, r2
 8004702:	608b      	str	r3, [r1, #8]
 8004704:	e006      	b.n	8004714 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004706:	4b2a      	ldr	r3, [pc, #168]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004708:	689a      	ldr	r2, [r3, #8]
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	43db      	mvns	r3, r3
 800470e:	4928      	ldr	r1, [pc, #160]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004710:	4013      	ands	r3, r2
 8004712:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d006      	beq.n	800472e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004720:	4b23      	ldr	r3, [pc, #140]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	4922      	ldr	r1, [pc, #136]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004726:	69bb      	ldr	r3, [r7, #24]
 8004728:	4313      	orrs	r3, r2
 800472a:	60cb      	str	r3, [r1, #12]
 800472c:	e006      	b.n	800473c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800472e:	4b20      	ldr	r3, [pc, #128]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	43db      	mvns	r3, r3
 8004736:	491e      	ldr	r1, [pc, #120]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004738:	4013      	ands	r3, r2
 800473a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004744:	2b00      	cmp	r3, #0
 8004746:	d006      	beq.n	8004756 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004748:	4b19      	ldr	r3, [pc, #100]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	4918      	ldr	r1, [pc, #96]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]
 8004754:	e006      	b.n	8004764 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004756:	4b16      	ldr	r3, [pc, #88]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004758:	685a      	ldr	r2, [r3, #4]
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	43db      	mvns	r3, r3
 800475e:	4914      	ldr	r1, [pc, #80]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004760:	4013      	ands	r3, r2
 8004762:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d021      	beq.n	80047b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004770:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	490e      	ldr	r1, [pc, #56]	; (80047b0 <HAL_GPIO_Init+0x2d0>)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	4313      	orrs	r3, r2
 800477a:	600b      	str	r3, [r1, #0]
 800477c:	e021      	b.n	80047c2 <HAL_GPIO_Init+0x2e2>
 800477e:	bf00      	nop
 8004780:	10320000 	.word	0x10320000
 8004784:	10310000 	.word	0x10310000
 8004788:	10220000 	.word	0x10220000
 800478c:	10210000 	.word	0x10210000
 8004790:	10120000 	.word	0x10120000
 8004794:	10110000 	.word	0x10110000
 8004798:	40021000 	.word	0x40021000
 800479c:	40010000 	.word	0x40010000
 80047a0:	40010800 	.word	0x40010800
 80047a4:	40010c00 	.word	0x40010c00
 80047a8:	40011000 	.word	0x40011000
 80047ac:	40011400 	.word	0x40011400
 80047b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80047b4:	4b0b      	ldr	r3, [pc, #44]	; (80047e4 <HAL_GPIO_Init+0x304>)
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	43db      	mvns	r3, r3
 80047bc:	4909      	ldr	r1, [pc, #36]	; (80047e4 <HAL_GPIO_Init+0x304>)
 80047be:	4013      	ands	r3, r2
 80047c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	3301      	adds	r3, #1
 80047c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	fa22 f303 	lsr.w	r3, r2, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	f47f ae8e 	bne.w	80044f4 <HAL_GPIO_Init+0x14>
  }
}
 80047d8:	bf00      	nop
 80047da:	bf00      	nop
 80047dc:	372c      	adds	r7, #44	; 0x2c
 80047de:	46bd      	mov	sp, r7
 80047e0:	bc80      	pop	{r7}
 80047e2:	4770      	bx	lr
 80047e4:	40010400 	.word	0x40010400

080047e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	807b      	strh	r3, [r7, #2]
 80047f4:	4613      	mov	r3, r2
 80047f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047f8:	787b      	ldrb	r3, [r7, #1]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d003      	beq.n	8004806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047fe:	887a      	ldrh	r2, [r7, #2]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004804:	e003      	b.n	800480e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004806:	887b      	ldrh	r3, [r7, #2]
 8004808:	041a      	lsls	r2, r3, #16
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	611a      	str	r2, [r3, #16]
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr

08004818 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004818:	b480      	push	{r7}
 800481a:	b085      	sub	sp, #20
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	460b      	mov	r3, r1
 8004822:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800482a:	887a      	ldrh	r2, [r7, #2]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4013      	ands	r3, r2
 8004830:	041a      	lsls	r2, r3, #16
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	43d9      	mvns	r1, r3
 8004836:	887b      	ldrh	r3, [r7, #2]
 8004838:	400b      	ands	r3, r1
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	611a      	str	r2, [r3, #16]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	bc80      	pop	{r7}
 8004848:	4770      	bx	lr
	...

0800484c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e272      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 8087 	beq.w	800497a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800486c:	4b92      	ldr	r3, [pc, #584]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 030c 	and.w	r3, r3, #12
 8004874:	2b04      	cmp	r3, #4
 8004876:	d00c      	beq.n	8004892 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004878:	4b8f      	ldr	r3, [pc, #572]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f003 030c 	and.w	r3, r3, #12
 8004880:	2b08      	cmp	r3, #8
 8004882:	d112      	bne.n	80048aa <HAL_RCC_OscConfig+0x5e>
 8004884:	4b8c      	ldr	r3, [pc, #560]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800488c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004890:	d10b      	bne.n	80048aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004892:	4b89      	ldr	r3, [pc, #548]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d06c      	beq.n	8004978 <HAL_RCC_OscConfig+0x12c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d168      	bne.n	8004978 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e24c      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b2:	d106      	bne.n	80048c2 <HAL_RCC_OscConfig+0x76>
 80048b4:	4b80      	ldr	r3, [pc, #512]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a7f      	ldr	r2, [pc, #508]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	e02e      	b.n	8004920 <HAL_RCC_OscConfig+0xd4>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x98>
 80048ca:	4b7b      	ldr	r3, [pc, #492]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a7a      	ldr	r2, [pc, #488]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	4b78      	ldr	r3, [pc, #480]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a77      	ldr	r2, [pc, #476]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e01d      	b.n	8004920 <HAL_RCC_OscConfig+0xd4>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048ec:	d10c      	bne.n	8004908 <HAL_RCC_OscConfig+0xbc>
 80048ee:	4b72      	ldr	r3, [pc, #456]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a71      	ldr	r2, [pc, #452]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048f8:	6013      	str	r3, [r2, #0]
 80048fa:	4b6f      	ldr	r3, [pc, #444]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a6e      	ldr	r2, [pc, #440]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e00b      	b.n	8004920 <HAL_RCC_OscConfig+0xd4>
 8004908:	4b6b      	ldr	r3, [pc, #428]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a6a      	ldr	r2, [pc, #424]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 800490e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b68      	ldr	r3, [pc, #416]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a67      	ldr	r2, [pc, #412]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 800491a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800491e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d013      	beq.n	8004950 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004928:	f7ff fc3e 	bl	80041a8 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004930:	f7ff fc3a 	bl	80041a8 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b64      	cmp	r3, #100	; 0x64
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e200      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004942:	4b5d      	ldr	r3, [pc, #372]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0f0      	beq.n	8004930 <HAL_RCC_OscConfig+0xe4>
 800494e:	e014      	b.n	800497a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004950:	f7ff fc2a 	bl	80041a8 <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004958:	f7ff fc26 	bl	80041a8 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b64      	cmp	r3, #100	; 0x64
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e1ec      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800496a:	4b53      	ldr	r3, [pc, #332]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d1f0      	bne.n	8004958 <HAL_RCC_OscConfig+0x10c>
 8004976:	e000      	b.n	800497a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0302 	and.w	r3, r3, #2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d063      	beq.n	8004a4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004986:	4b4c      	ldr	r3, [pc, #304]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 030c 	and.w	r3, r3, #12
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00b      	beq.n	80049aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004992:	4b49      	ldr	r3, [pc, #292]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f003 030c 	and.w	r3, r3, #12
 800499a:	2b08      	cmp	r3, #8
 800499c:	d11c      	bne.n	80049d8 <HAL_RCC_OscConfig+0x18c>
 800499e:	4b46      	ldr	r3, [pc, #280]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d116      	bne.n	80049d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049aa:	4b43      	ldr	r3, [pc, #268]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <HAL_RCC_OscConfig+0x176>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d001      	beq.n	80049c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e1c0      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049c2:	4b3d      	ldr	r3, [pc, #244]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	4939      	ldr	r1, [pc, #228]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049d6:	e03a      	b.n	8004a4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d020      	beq.n	8004a22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e0:	4b36      	ldr	r3, [pc, #216]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e6:	f7ff fbdf 	bl	80041a8 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ec:	e008      	b.n	8004a00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049ee:	f7ff fbdb 	bl	80041a8 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e1a1      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a00:	4b2d      	ldr	r3, [pc, #180]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d0f0      	beq.n	80049ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0c:	4b2a      	ldr	r3, [pc, #168]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	4927      	ldr	r1, [pc, #156]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	600b      	str	r3, [r1, #0]
 8004a20:	e015      	b.n	8004a4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a22:	4b26      	ldr	r3, [pc, #152]	; (8004abc <HAL_RCC_OscConfig+0x270>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a28:	f7ff fbbe 	bl	80041a8 <HAL_GetTick>
 8004a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a2e:	e008      	b.n	8004a42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a30:	f7ff fbba 	bl	80041a8 <HAL_GetTick>
 8004a34:	4602      	mov	r2, r0
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	1ad3      	subs	r3, r2, r3
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d901      	bls.n	8004a42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e180      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a42:	4b1d      	ldr	r3, [pc, #116]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1f0      	bne.n	8004a30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d03a      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d019      	beq.n	8004a96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a62:	4b17      	ldr	r3, [pc, #92]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004a64:	2201      	movs	r2, #1
 8004a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a68:	f7ff fb9e 	bl	80041a8 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a70:	f7ff fb9a 	bl	80041a8 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e160      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a82:	4b0d      	ldr	r3, [pc, #52]	; (8004ab8 <HAL_RCC_OscConfig+0x26c>)
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d0f0      	beq.n	8004a70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a8e:	2001      	movs	r0, #1
 8004a90:	f000 fb1e 	bl	80050d0 <RCC_Delay>
 8004a94:	e01c      	b.n	8004ad0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a96:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <HAL_RCC_OscConfig+0x274>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a9c:	f7ff fb84 	bl	80041a8 <HAL_GetTick>
 8004aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa2:	e00f      	b.n	8004ac4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa4:	f7ff fb80 	bl	80041a8 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d908      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e146      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
 8004ab6:	bf00      	nop
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	42420000 	.word	0x42420000
 8004ac0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac4:	4b92      	ldr	r3, [pc, #584]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1e9      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 80a6 	beq.w	8004c2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ae2:	4b8b      	ldr	r3, [pc, #556]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10d      	bne.n	8004b0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004aee:	4b88      	ldr	r3, [pc, #544]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	4a87      	ldr	r2, [pc, #540]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af8:	61d3      	str	r3, [r2, #28]
 8004afa:	4b85      	ldr	r3, [pc, #532]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b02:	60bb      	str	r3, [r7, #8]
 8004b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b06:	2301      	movs	r3, #1
 8004b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b0a:	4b82      	ldr	r3, [pc, #520]	; (8004d14 <HAL_RCC_OscConfig+0x4c8>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d118      	bne.n	8004b48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b16:	4b7f      	ldr	r3, [pc, #508]	; (8004d14 <HAL_RCC_OscConfig+0x4c8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a7e      	ldr	r2, [pc, #504]	; (8004d14 <HAL_RCC_OscConfig+0x4c8>)
 8004b1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b22:	f7ff fb41 	bl	80041a8 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2a:	f7ff fb3d 	bl	80041a8 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b64      	cmp	r3, #100	; 0x64
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e103      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3c:	4b75      	ldr	r3, [pc, #468]	; (8004d14 <HAL_RCC_OscConfig+0x4c8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d106      	bne.n	8004b5e <HAL_RCC_OscConfig+0x312>
 8004b50:	4b6f      	ldr	r3, [pc, #444]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	4a6e      	ldr	r2, [pc, #440]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b56:	f043 0301 	orr.w	r3, r3, #1
 8004b5a:	6213      	str	r3, [r2, #32]
 8004b5c:	e02d      	b.n	8004bba <HAL_RCC_OscConfig+0x36e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCC_OscConfig+0x334>
 8004b66:	4b6a      	ldr	r3, [pc, #424]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	4a69      	ldr	r2, [pc, #420]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b6c:	f023 0301 	bic.w	r3, r3, #1
 8004b70:	6213      	str	r3, [r2, #32]
 8004b72:	4b67      	ldr	r3, [pc, #412]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	4a66      	ldr	r2, [pc, #408]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b78:	f023 0304 	bic.w	r3, r3, #4
 8004b7c:	6213      	str	r3, [r2, #32]
 8004b7e:	e01c      	b.n	8004bba <HAL_RCC_OscConfig+0x36e>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b05      	cmp	r3, #5
 8004b86:	d10c      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x356>
 8004b88:	4b61      	ldr	r3, [pc, #388]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	4a60      	ldr	r2, [pc, #384]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b8e:	f043 0304 	orr.w	r3, r3, #4
 8004b92:	6213      	str	r3, [r2, #32]
 8004b94:	4b5e      	ldr	r3, [pc, #376]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b96:	6a1b      	ldr	r3, [r3, #32]
 8004b98:	4a5d      	ldr	r2, [pc, #372]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004b9a:	f043 0301 	orr.w	r3, r3, #1
 8004b9e:	6213      	str	r3, [r2, #32]
 8004ba0:	e00b      	b.n	8004bba <HAL_RCC_OscConfig+0x36e>
 8004ba2:	4b5b      	ldr	r3, [pc, #364]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	4a5a      	ldr	r2, [pc, #360]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004ba8:	f023 0301 	bic.w	r3, r3, #1
 8004bac:	6213      	str	r3, [r2, #32]
 8004bae:	4b58      	ldr	r3, [pc, #352]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	4a57      	ldr	r2, [pc, #348]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004bb4:	f023 0304 	bic.w	r3, r3, #4
 8004bb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d015      	beq.n	8004bee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc2:	f7ff faf1 	bl	80041a8 <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bca:	f7ff faed 	bl	80041a8 <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e0b1      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be0:	4b4b      	ldr	r3, [pc, #300]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ee      	beq.n	8004bca <HAL_RCC_OscConfig+0x37e>
 8004bec:	e014      	b.n	8004c18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bee:	f7ff fadb 	bl	80041a8 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf4:	e00a      	b.n	8004c0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf6:	f7ff fad7 	bl	80041a8 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d901      	bls.n	8004c0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c08:	2303      	movs	r3, #3
 8004c0a:	e09b      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0c:	4b40      	ldr	r3, [pc, #256]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c0e:	6a1b      	ldr	r3, [r3, #32]
 8004c10:	f003 0302 	and.w	r3, r3, #2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d1ee      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c18:	7dfb      	ldrb	r3, [r7, #23]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d105      	bne.n	8004c2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c1e:	4b3c      	ldr	r3, [pc, #240]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c20:	69db      	ldr	r3, [r3, #28]
 8004c22:	4a3b      	ldr	r2, [pc, #236]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	69db      	ldr	r3, [r3, #28]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8087 	beq.w	8004d42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c34:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 030c 	and.w	r3, r3, #12
 8004c3c:	2b08      	cmp	r3, #8
 8004c3e:	d061      	beq.n	8004d04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d146      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c48:	4b33      	ldr	r3, [pc, #204]	; (8004d18 <HAL_RCC_OscConfig+0x4cc>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4e:	f7ff faab 	bl	80041a8 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c56:	f7ff faa7 	bl	80041a8 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e06d      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c68:	4b29      	ldr	r3, [pc, #164]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d1f0      	bne.n	8004c56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7c:	d108      	bne.n	8004c90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	4921      	ldr	r1, [pc, #132]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c90:	4b1f      	ldr	r3, [pc, #124]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a19      	ldr	r1, [r3, #32]
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	491b      	ldr	r1, [pc, #108]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca8:	4b1b      	ldr	r3, [pc, #108]	; (8004d18 <HAL_RCC_OscConfig+0x4cc>)
 8004caa:	2201      	movs	r2, #1
 8004cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cae:	f7ff fa7b 	bl	80041a8 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cb4:	e008      	b.n	8004cc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb6:	f7ff fa77 	bl	80041a8 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	2b02      	cmp	r3, #2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e03d      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004cc8:	4b11      	ldr	r3, [pc, #68]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d0f0      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x46a>
 8004cd4:	e035      	b.n	8004d42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd6:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <HAL_RCC_OscConfig+0x4cc>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cdc:	f7ff fa64 	bl	80041a8 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce4:	f7ff fa60 	bl	80041a8 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e026      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cf6:	4b06      	ldr	r3, [pc, #24]	; (8004d10 <HAL_RCC_OscConfig+0x4c4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x498>
 8004d02:	e01e      	b.n	8004d42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	69db      	ldr	r3, [r3, #28]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d107      	bne.n	8004d1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e019      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
 8004d10:	40021000 	.word	0x40021000
 8004d14:	40007000 	.word	0x40007000
 8004d18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d1c:	4b0b      	ldr	r3, [pc, #44]	; (8004d4c <HAL_RCC_OscConfig+0x500>)
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a1b      	ldr	r3, [r3, #32]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d106      	bne.n	8004d3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d001      	beq.n	8004d42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004d42:	2300      	movs	r3, #0
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	3718      	adds	r7, #24
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	40021000 	.word	0x40021000

08004d50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	e0d0      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d64:	4b6a      	ldr	r3, [pc, #424]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0307 	and.w	r3, r3, #7
 8004d6c:	683a      	ldr	r2, [r7, #0]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d910      	bls.n	8004d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d72:	4b67      	ldr	r3, [pc, #412]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f023 0207 	bic.w	r2, r3, #7
 8004d7a:	4965      	ldr	r1, [pc, #404]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d82:	4b63      	ldr	r3, [pc, #396]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	d001      	beq.n	8004d94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0b8      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0302 	and.w	r3, r3, #2
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d020      	beq.n	8004de2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d005      	beq.n	8004db8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dac:	4b59      	ldr	r3, [pc, #356]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a58      	ldr	r2, [pc, #352]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004db2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004db6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0308 	and.w	r3, r3, #8
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d005      	beq.n	8004dd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dc4:	4b53      	ldr	r3, [pc, #332]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	4a52      	ldr	r2, [pc, #328]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004dce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dd0:	4b50      	ldr	r3, [pc, #320]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	494d      	ldr	r1, [pc, #308]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d040      	beq.n	8004e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d107      	bne.n	8004e06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004df6:	4b47      	ldr	r3, [pc, #284]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d115      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	e07f      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d107      	bne.n	8004e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e0e:	4b41      	ldr	r3, [pc, #260]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e073      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e1e:	4b3d      	ldr	r3, [pc, #244]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f003 0302 	and.w	r3, r3, #2
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e06b      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e2e:	4b39      	ldr	r3, [pc, #228]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f023 0203 	bic.w	r2, r3, #3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	4936      	ldr	r1, [pc, #216]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e40:	f7ff f9b2 	bl	80041a8 <HAL_GetTick>
 8004e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e46:	e00a      	b.n	8004e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e48:	f7ff f9ae 	bl	80041a8 <HAL_GetTick>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d901      	bls.n	8004e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e053      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e5e:	4b2d      	ldr	r3, [pc, #180]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 020c 	and.w	r2, r3, #12
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d1eb      	bne.n	8004e48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e70:	4b27      	ldr	r3, [pc, #156]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	683a      	ldr	r2, [r7, #0]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d210      	bcs.n	8004ea0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e7e:	4b24      	ldr	r3, [pc, #144]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f023 0207 	bic.w	r2, r3, #7
 8004e86:	4922      	ldr	r1, [pc, #136]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e8e:	4b20      	ldr	r3, [pc, #128]	; (8004f10 <HAL_RCC_ClockConfig+0x1c0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0307 	and.w	r3, r3, #7
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d001      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e032      	b.n	8004f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d008      	beq.n	8004ebe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eac:	4b19      	ldr	r3, [pc, #100]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	4916      	ldr	r1, [pc, #88]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004eca:	4b12      	ldr	r3, [pc, #72]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	00db      	lsls	r3, r3, #3
 8004ed8:	490e      	ldr	r1, [pc, #56]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ede:	f000 f82d 	bl	8004f3c <HAL_RCC_GetSysClockFreq>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	4b0b      	ldr	r3, [pc, #44]	; (8004f14 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	091b      	lsrs	r3, r3, #4
 8004eea:	f003 030f 	and.w	r3, r3, #15
 8004eee:	490a      	ldr	r1, [pc, #40]	; (8004f18 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef0:	5ccb      	ldrb	r3, [r1, r3]
 8004ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ef6:	4a09      	ldr	r2, [pc, #36]	; (8004f1c <HAL_RCC_ClockConfig+0x1cc>)
 8004ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004efa:	4b09      	ldr	r3, [pc, #36]	; (8004f20 <HAL_RCC_ClockConfig+0x1d0>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe ff5c 	bl	8003dbc <HAL_InitTick>

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40022000 	.word	0x40022000
 8004f14:	40021000 	.word	0x40021000
 8004f18:	0800ba98 	.word	0x0800ba98
 8004f1c:	20000000 	.word	0x20000000
 8004f20:	20000004 	.word	0x20000004

08004f24 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004f24:	b480      	push	{r7}
 8004f26:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004f28:	4b03      	ldr	r3, [pc, #12]	; (8004f38 <HAL_RCC_EnableCSS+0x14>)
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	601a      	str	r2, [r3, #0]
}
 8004f2e:	bf00      	nop
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bc80      	pop	{r7}
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	4242004c 	.word	0x4242004c

08004f3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f42:	2300      	movs	r3, #0
 8004f44:	60fb      	str	r3, [r7, #12]
 8004f46:	2300      	movs	r3, #0
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	2300      	movs	r3, #0
 8004f50:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004f56:	4b1e      	ldr	r3, [pc, #120]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b04      	cmp	r3, #4
 8004f64:	d002      	beq.n	8004f6c <HAL_RCC_GetSysClockFreq+0x30>
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d003      	beq.n	8004f72 <HAL_RCC_GetSysClockFreq+0x36>
 8004f6a:	e027      	b.n	8004fbc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004f6c:	4b19      	ldr	r3, [pc, #100]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f6e:	613b      	str	r3, [r7, #16]
      break;
 8004f70:	e027      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	0c9b      	lsrs	r3, r3, #18
 8004f76:	f003 030f 	and.w	r3, r3, #15
 8004f7a:	4a17      	ldr	r2, [pc, #92]	; (8004fd8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004f7c:	5cd3      	ldrb	r3, [r2, r3]
 8004f7e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d010      	beq.n	8004fac <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f8a:	4b11      	ldr	r3, [pc, #68]	; (8004fd0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	0c5b      	lsrs	r3, r3, #17
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	4a11      	ldr	r2, [pc, #68]	; (8004fdc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004f96:	5cd3      	ldrb	r3, [r2, r3]
 8004f98:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a0d      	ldr	r2, [pc, #52]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004f9e:	fb03 f202 	mul.w	r2, r3, r2
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	617b      	str	r3, [r7, #20]
 8004faa:	e004      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a0c      	ldr	r2, [pc, #48]	; (8004fe0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004fb0:	fb02 f303 	mul.w	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	613b      	str	r3, [r7, #16]
      break;
 8004fba:	e002      	b.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004fbe:	613b      	str	r3, [r7, #16]
      break;
 8004fc0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fc2:	693b      	ldr	r3, [r7, #16]
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bc80      	pop	{r7}
 8004fcc:	4770      	bx	lr
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	007a1200 	.word	0x007a1200
 8004fd8:	0800bab0 	.word	0x0800bab0
 8004fdc:	0800bac0 	.word	0x0800bac0
 8004fe0:	003d0900 	.word	0x003d0900

08004fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe8:	4b02      	ldr	r3, [pc, #8]	; (8004ff4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bc80      	pop	{r7}
 8004ff2:	4770      	bx	lr
 8004ff4:	20000000 	.word	0x20000000

08004ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ffc:	f7ff fff2 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8005000:	4602      	mov	r2, r0
 8005002:	4b05      	ldr	r3, [pc, #20]	; (8005018 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	0a1b      	lsrs	r3, r3, #8
 8005008:	f003 0307 	and.w	r3, r3, #7
 800500c:	4903      	ldr	r1, [pc, #12]	; (800501c <HAL_RCC_GetPCLK1Freq+0x24>)
 800500e:	5ccb      	ldrb	r3, [r1, r3]
 8005010:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005014:	4618      	mov	r0, r3
 8005016:	bd80      	pop	{r7, pc}
 8005018:	40021000 	.word	0x40021000
 800501c:	0800baa8 	.word	0x0800baa8

08005020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005024:	f7ff ffde 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b05      	ldr	r3, [pc, #20]	; (8005040 <HAL_RCC_GetPCLK2Freq+0x20>)
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	0adb      	lsrs	r3, r3, #11
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	4903      	ldr	r1, [pc, #12]	; (8005044 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
}
 800503c:	4618      	mov	r0, r3
 800503e:	bd80      	pop	{r7, pc}
 8005040:	40021000 	.word	0x40021000
 8005044:	0800baa8 	.word	0x0800baa8

08005048 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	220f      	movs	r2, #15
 8005056:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005058:	4b11      	ldr	r3, [pc, #68]	; (80050a0 <HAL_RCC_GetClockConfig+0x58>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f003 0203 	and.w	r2, r3, #3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005064:	4b0e      	ldr	r3, [pc, #56]	; (80050a0 <HAL_RCC_GetClockConfig+0x58>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <HAL_RCC_GetClockConfig+0x58>)
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800507c:	4b08      	ldr	r3, [pc, #32]	; (80050a0 <HAL_RCC_GetClockConfig+0x58>)
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	08db      	lsrs	r3, r3, #3
 8005082:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800508a:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <HAL_RCC_GetClockConfig+0x5c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0207 	and.w	r2, r3, #7
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40022000 	.word	0x40022000

080050a8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80050ac:	4b06      	ldr	r3, [pc, #24]	; (80050c8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b4:	2b80      	cmp	r3, #128	; 0x80
 80050b6:	d104      	bne.n	80050c2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80050b8:	f000 f828 	bl	800510c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80050bc:	4b03      	ldr	r3, [pc, #12]	; (80050cc <HAL_RCC_NMI_IRQHandler+0x24>)
 80050be:	2280      	movs	r2, #128	; 0x80
 80050c0:	701a      	strb	r2, [r3, #0]
  }
}
 80050c2:	bf00      	nop
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	40021000 	.word	0x40021000
 80050cc:	4002100a 	.word	0x4002100a

080050d0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050d8:	4b0a      	ldr	r3, [pc, #40]	; (8005104 <RCC_Delay+0x34>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a0a      	ldr	r2, [pc, #40]	; (8005108 <RCC_Delay+0x38>)
 80050de:	fba2 2303 	umull	r2, r3, r2, r3
 80050e2:	0a5b      	lsrs	r3, r3, #9
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	fb02 f303 	mul.w	r3, r2, r3
 80050ea:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050ec:	bf00      	nop
  }
  while (Delay --);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	1e5a      	subs	r2, r3, #1
 80050f2:	60fa      	str	r2, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1f9      	bne.n	80050ec <RCC_Delay+0x1c>
}
 80050f8:	bf00      	nop
 80050fa:	bf00      	nop
 80050fc:	3714      	adds	r7, #20
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr
 8005104:	20000000 	.word	0x20000000
 8005108:	10624dd3 	.word	0x10624dd3

0800510c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8005110:	bf00      	nop
 8005112:	46bd      	mov	sp, r7
 8005114:	bc80      	pop	{r7}
 8005116:	4770      	bx	lr

08005118 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b082      	sub	sp, #8
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e076      	b.n	8005218 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	2b00      	cmp	r3, #0
 8005130:	d108      	bne.n	8005144 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800513a:	d009      	beq.n	8005150 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	61da      	str	r2, [r3, #28]
 8005142:	e005      	b.n	8005150 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fe fc6e 	bl	8003a4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005186:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005198:	431a      	orrs	r2, r3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051a2:	431a      	orrs	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	431a      	orrs	r2, r3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	699b      	ldr	r3, [r3, #24]
 80051bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051c0:	431a      	orrs	r2, r3
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051ca:	431a      	orrs	r2, r3
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a1b      	ldr	r3, [r3, #32]
 80051d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d4:	ea42 0103 	orr.w	r1, r2, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	699b      	ldr	r3, [r3, #24]
 80051ec:	0c1a      	lsrs	r2, r3, #16
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f002 0204 	and.w	r2, r2, #4
 80051f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	69da      	ldr	r2, [r3, #28]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005206:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08c      	sub	sp, #48	; 0x30
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800522e:	2301      	movs	r3, #1
 8005230:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800523e:	2b01      	cmp	r3, #1
 8005240:	d101      	bne.n	8005246 <HAL_SPI_TransmitReceive+0x26>
 8005242:	2302      	movs	r3, #2
 8005244:	e198      	b.n	8005578 <HAL_SPI_TransmitReceive+0x358>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800524e:	f7fe ffab 	bl	80041a8 <HAL_GetTick>
 8005252:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800525a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005264:	887b      	ldrh	r3, [r7, #2]
 8005266:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005268:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800526c:	2b01      	cmp	r3, #1
 800526e:	d00f      	beq.n	8005290 <HAL_SPI_TransmitReceive+0x70>
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005276:	d107      	bne.n	8005288 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d103      	bne.n	8005288 <HAL_SPI_TransmitReceive+0x68>
 8005280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005284:	2b04      	cmp	r3, #4
 8005286:	d003      	beq.n	8005290 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005288:	2302      	movs	r3, #2
 800528a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800528e:	e16d      	b.n	800556c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d005      	beq.n	80052a2 <HAL_SPI_TransmitReceive+0x82>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d002      	beq.n	80052a2 <HAL_SPI_TransmitReceive+0x82>
 800529c:	887b      	ldrh	r3, [r7, #2]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d103      	bne.n	80052aa <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80052a8:	e160      	b.n	800556c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d003      	beq.n	80052be <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2205      	movs	r2, #5
 80052ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	887a      	ldrh	r2, [r7, #2]
 80052ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	887a      	ldrh	r2, [r7, #2]
 80052d4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	68ba      	ldr	r2, [r7, #8]
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	887a      	ldrh	r2, [r7, #2]
 80052e0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	887a      	ldrh	r2, [r7, #2]
 80052e6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052fe:	2b40      	cmp	r3, #64	; 0x40
 8005300:	d007      	beq.n	8005312 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005310:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800531a:	d17c      	bne.n	8005416 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	685b      	ldr	r3, [r3, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d002      	beq.n	800532a <HAL_SPI_TransmitReceive+0x10a>
 8005324:	8b7b      	ldrh	r3, [r7, #26]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d16a      	bne.n	8005400 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532e:	881a      	ldrh	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533a:	1c9a      	adds	r2, r3, #2
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005344:	b29b      	uxth	r3, r3
 8005346:	3b01      	subs	r3, #1
 8005348:	b29a      	uxth	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800534e:	e057      	b.n	8005400 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b02      	cmp	r3, #2
 800535c:	d11b      	bne.n	8005396 <HAL_SPI_TransmitReceive+0x176>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005362:	b29b      	uxth	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d016      	beq.n	8005396 <HAL_SPI_TransmitReceive+0x176>
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536a:	2b01      	cmp	r3, #1
 800536c:	d113      	bne.n	8005396 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005372:	881a      	ldrh	r2, [r3, #0]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537e:	1c9a      	adds	r2, r3, #2
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d119      	bne.n	80053d8 <HAL_SPI_TransmitReceive+0x1b8>
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d014      	beq.n	80053d8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	b292      	uxth	r2, r2
 80053ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c0:	1c9a      	adds	r2, r3, #2
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80053d4:	2301      	movs	r3, #1
 80053d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80053d8:	f7fe fee6 	bl	80041a8 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d80b      	bhi.n	8005400 <HAL_SPI_TransmitReceive+0x1e0>
 80053e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ee:	d007      	beq.n	8005400 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80053fe:	e0b5      	b.n	800556c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1a2      	bne.n	8005350 <HAL_SPI_TransmitReceive+0x130>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800540e:	b29b      	uxth	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	d19d      	bne.n	8005350 <HAL_SPI_TransmitReceive+0x130>
 8005414:	e080      	b.n	8005518 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d002      	beq.n	8005424 <HAL_SPI_TransmitReceive+0x204>
 800541e:	8b7b      	ldrh	r3, [r7, #26]
 8005420:	2b01      	cmp	r3, #1
 8005422:	d16f      	bne.n	8005504 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	330c      	adds	r3, #12
 800542e:	7812      	ldrb	r2, [r2, #0]
 8005430:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005440:	b29b      	uxth	r3, r3
 8005442:	3b01      	subs	r3, #1
 8005444:	b29a      	uxth	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800544a:	e05b      	b.n	8005504 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b02      	cmp	r3, #2
 8005458:	d11c      	bne.n	8005494 <HAL_SPI_TransmitReceive+0x274>
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d017      	beq.n	8005494 <HAL_SPI_TransmitReceive+0x274>
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	2b01      	cmp	r3, #1
 8005468:	d114      	bne.n	8005494 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	330c      	adds	r3, #12
 8005474:	7812      	ldrb	r2, [r2, #0]
 8005476:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800547c:	1c5a      	adds	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005486:	b29b      	uxth	r3, r3
 8005488:	3b01      	subs	r3, #1
 800548a:	b29a      	uxth	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d119      	bne.n	80054d6 <HAL_SPI_TransmitReceive+0x2b6>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d014      	beq.n	80054d6 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054d2:	2301      	movs	r3, #1
 80054d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054d6:	f7fe fe67 	bl	80041a8 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d803      	bhi.n	80054ee <HAL_SPI_TransmitReceive+0x2ce>
 80054e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d102      	bne.n	80054f4 <HAL_SPI_TransmitReceive+0x2d4>
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d107      	bne.n	8005504 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80054f4:	2303      	movs	r3, #3
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8005502:	e033      	b.n	800556c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005508:	b29b      	uxth	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d19e      	bne.n	800544c <HAL_SPI_TransmitReceive+0x22c>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	d199      	bne.n	800544c <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f9b3 	bl	8005888 <SPI_EndRxTxTransaction>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d006      	beq.n	8005536 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2220      	movs	r2, #32
 8005532:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005534:	e01a      	b.n	800556c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10a      	bne.n	8005554 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800553e:	2300      	movs	r3, #0
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	617b      	str	r3, [r7, #20]
 8005552:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005558:	2b00      	cmp	r3, #0
 800555a:	d003      	beq.n	8005564 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005562:	e003      	b.n	800556c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005574:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005578:	4618      	mov	r0, r3
 800557a:	3730      	adds	r7, #48	; 0x30
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10e      	bne.n	80055c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80055a2:	69bb      	ldr	r3, [r7, #24]
 80055a4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d009      	beq.n	80055c0 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d004      	beq.n	80055c0 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	4798      	blx	r3
    return;
 80055be:	e0b7      	b.n	8005730 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d009      	beq.n	80055de <HAL_SPI_IRQHandler+0x5e>
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d004      	beq.n	80055de <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	4798      	blx	r3
    return;
 80055dc:	e0a8      	b.n	8005730 <HAL_SPI_IRQHandler+0x1b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <HAL_SPI_IRQHandler+0x74>
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 809e 	beq.w	8005730 <HAL_SPI_IRQHandler+0x1b0>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f003 0320 	and.w	r3, r3, #32
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 8098 	beq.w	8005730 <HAL_SPI_IRQHandler+0x1b0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d023      	beq.n	8005652 <HAL_SPI_IRQHandler+0xd2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005610:	b2db      	uxtb	r3, r3
 8005612:	2b03      	cmp	r3, #3
 8005614:	d011      	beq.n	800563a <HAL_SPI_IRQHandler+0xba>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800561a:	f043 0204 	orr.w	r2, r3, #4
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005622:	2300      	movs	r3, #0
 8005624:	617b      	str	r3, [r7, #20]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	e00b      	b.n	8005652 <HAL_SPI_IRQHandler+0xd2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800563a:	2300      	movs	r3, #0
 800563c:	613b      	str	r3, [r7, #16]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	693b      	ldr	r3, [r7, #16]
        return;
 8005650:	e06e      	b.n	8005730 <HAL_SPI_IRQHandler+0x1b0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	f003 0320 	and.w	r3, r3, #32
 8005658:	2b00      	cmp	r3, #0
 800565a:	d014      	beq.n	8005686 <HAL_SPI_IRQHandler+0x106>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005660:	f043 0201 	orr.w	r2, r3, #1
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005668:	2300      	movs	r3, #0
 800566a:	60fb      	str	r3, [r7, #12]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005682:	601a      	str	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800568a:	2b00      	cmp	r3, #0
 800568c:	d04f      	beq.n	800572e <HAL_SPI_IRQHandler+0x1ae>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800569c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d104      	bne.n	80056ba <HAL_SPI_IRQHandler+0x13a>
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d034      	beq.n	8005724 <HAL_SPI_IRQHandler+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0203 	bic.w	r2, r2, #3
 80056c8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d011      	beq.n	80056f6 <HAL_SPI_IRQHandler+0x176>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d6:	4a18      	ldr	r2, [pc, #96]	; (8005738 <HAL_SPI_IRQHandler+0x1b8>)
 80056d8:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fe fe86 	bl	80043f0 <HAL_DMA_Abort_IT>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d005      	beq.n	80056f6 <HAL_SPI_IRQHandler+0x176>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d016      	beq.n	800572c <HAL_SPI_IRQHandler+0x1ac>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005702:	4a0d      	ldr	r2, [pc, #52]	; (8005738 <HAL_SPI_IRQHandler+0x1b8>)
 8005704:	635a      	str	r2, [r3, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570a:	4618      	mov	r0, r3
 800570c:	f7fe fe70 	bl	80043f0 <HAL_DMA_Abort_IT>
 8005710:	4603      	mov	r3, r0
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <HAL_SPI_IRQHandler+0x1ac>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800571a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005722:	e003      	b.n	800572c <HAL_SPI_IRQHandler+0x1ac>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f809 	bl	800573c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800572a:	e000      	b.n	800572e <HAL_SPI_IRQHandler+0x1ae>
        if (hspi->hdmatx != NULL)
 800572c:	bf00      	nop
    return;
 800572e:	bf00      	nop
  }
}
 8005730:	3720      	adds	r7, #32
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}
 8005736:	bf00      	nop
 8005738:	0800574f 	.word	0x0800574f

0800573c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800573c:	b480      	push	{r7}
 800573e:	b083      	sub	sp, #12
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005744:	bf00      	nop
 8005746:	370c      	adds	r7, #12
 8005748:	46bd      	mov	sp, r7
 800574a:	bc80      	pop	{r7}
 800574c:	4770      	bx	lr

0800574e <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800574e:	b580      	push	{r7, lr}
 8005750:	b084      	sub	sp, #16
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2200      	movs	r2, #0
 8005760:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f7ff ffe7 	bl	800573c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800576e:	bf00      	nop
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	4613      	mov	r3, r2
 8005786:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005788:	f7fe fd0e 	bl	80041a8 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	1a9b      	subs	r3, r3, r2
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	4413      	add	r3, r2
 8005796:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005798:	f7fe fd06 	bl	80041a8 <HAL_GetTick>
 800579c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800579e:	4b39      	ldr	r3, [pc, #228]	; (8005884 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	015b      	lsls	r3, r3, #5
 80057a4:	0d1b      	lsrs	r3, r3, #20
 80057a6:	69fa      	ldr	r2, [r7, #28]
 80057a8:	fb02 f303 	mul.w	r3, r2, r3
 80057ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80057ae:	e054      	b.n	800585a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d050      	beq.n	800585a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80057b8:	f7fe fcf6 	bl	80041a8 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d902      	bls.n	80057ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d13d      	bne.n	800584a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685a      	ldr	r2, [r3, #4]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057e6:	d111      	bne.n	800580c <SPI_WaitFlagStateUntilTimeout+0x94>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057f0:	d004      	beq.n	80057fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057fa:	d107      	bne.n	800580c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800580a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005814:	d10f      	bne.n	8005836 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005824:	601a      	str	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005834:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e017      	b.n	800587a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	3b01      	subs	r3, #1
 8005858:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4013      	ands	r3, r2
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	429a      	cmp	r2, r3
 8005868:	bf0c      	ite	eq
 800586a:	2301      	moveq	r3, #1
 800586c:	2300      	movne	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	79fb      	ldrb	r3, [r7, #7]
 8005874:	429a      	cmp	r2, r3
 8005876:	d19b      	bne.n	80057b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3720      	adds	r7, #32
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	20000000 	.word	0x20000000

08005888 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af02      	add	r7, sp, #8
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	2200      	movs	r2, #0
 800589c:	2180      	movs	r1, #128	; 0x80
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f7ff ff6a 	bl	8005778 <SPI_WaitFlagStateUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d007      	beq.n	80058ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058ae:	f043 0220 	orr.w	r2, r3, #32
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e000      	b.n	80058bc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80058ba:	2300      	movs	r3, #0
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e041      	b.n	800595a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f839 	bl	8005962 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3304      	adds	r3, #4
 8005900:	4619      	mov	r1, r3
 8005902:	4610      	mov	r0, r2
 8005904:	f000 fbfa 	bl	80060fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b01      	cmp	r3, #1
 8005986:	d001      	beq.n	800598c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e03a      	b.n	8005a02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2202      	movs	r2, #2
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0201 	orr.w	r2, r2, #1
 80059a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a18      	ldr	r2, [pc, #96]	; (8005a0c <HAL_TIM_Base_Start_IT+0x98>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d00e      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x58>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059b6:	d009      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x58>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a14      	ldr	r2, [pc, #80]	; (8005a10 <HAL_TIM_Base_Start_IT+0x9c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d004      	beq.n	80059cc <HAL_TIM_Base_Start_IT+0x58>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a13      	ldr	r2, [pc, #76]	; (8005a14 <HAL_TIM_Base_Start_IT+0xa0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d111      	bne.n	80059f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2b06      	cmp	r3, #6
 80059dc:	d010      	beq.n	8005a00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0201 	orr.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ee:	e007      	b.n	8005a00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f042 0201 	orr.w	r2, r2, #1
 80059fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bc80      	pop	{r7}
 8005a0a:	4770      	bx	lr
 8005a0c:	40012c00 	.word	0x40012c00
 8005a10:	40000400 	.word	0x40000400
 8005a14:	40000800 	.word	0x40000800

08005a18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0201 	bic.w	r2, r2, #1
 8005a2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6a1a      	ldr	r2, [r3, #32]
 8005a36:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10f      	bne.n	8005a60 <HAL_TIM_Base_Stop_IT+0x48>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6a1a      	ldr	r2, [r3, #32]
 8005a46:	f240 4344 	movw	r3, #1092	; 0x444
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d107      	bne.n	8005a60 <HAL_TIM_Base_Stop_IT+0x48>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0201 	bic.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bc80      	pop	{r7}
 8005a72:	4770      	bx	lr

08005a74 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e041      	b.n	8005b0a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d106      	bne.n	8005aa0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7fe f838 	bl	8003b10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2202      	movs	r2, #2
 8005aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	3304      	adds	r3, #4
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	f000 fb22 	bl	80060fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2201      	movs	r2, #1
 8005aec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d109      	bne.n	8005b38 <HAL_TIM_PWM_Start+0x24>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	bf14      	ite	ne
 8005b30:	2301      	movne	r3, #1
 8005b32:	2300      	moveq	r3, #0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	e022      	b.n	8005b7e <HAL_TIM_PWM_Start+0x6a>
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	2b04      	cmp	r3, #4
 8005b3c:	d109      	bne.n	8005b52 <HAL_TIM_PWM_Start+0x3e>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	bf14      	ite	ne
 8005b4a:	2301      	movne	r3, #1
 8005b4c:	2300      	moveq	r3, #0
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	e015      	b.n	8005b7e <HAL_TIM_PWM_Start+0x6a>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d109      	bne.n	8005b6c <HAL_TIM_PWM_Start+0x58>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	bf14      	ite	ne
 8005b64:	2301      	movne	r3, #1
 8005b66:	2300      	moveq	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	e008      	b.n	8005b7e <HAL_TIM_PWM_Start+0x6a>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	bf14      	ite	ne
 8005b78:	2301      	movne	r3, #1
 8005b7a:	2300      	moveq	r3, #0
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d001      	beq.n	8005b86 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e05e      	b.n	8005c44 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d104      	bne.n	8005b96 <HAL_TIM_PWM_Start+0x82>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2202      	movs	r2, #2
 8005b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b94:	e013      	b.n	8005bbe <HAL_TIM_PWM_Start+0xaa>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b04      	cmp	r3, #4
 8005b9a:	d104      	bne.n	8005ba6 <HAL_TIM_PWM_Start+0x92>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ba4:	e00b      	b.n	8005bbe <HAL_TIM_PWM_Start+0xaa>
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b08      	cmp	r3, #8
 8005baa:	d104      	bne.n	8005bb6 <HAL_TIM_PWM_Start+0xa2>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2202      	movs	r2, #2
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bb4:	e003      	b.n	8005bbe <HAL_TIM_PWM_Start+0xaa>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2202      	movs	r2, #2
 8005bba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	6839      	ldr	r1, [r7, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f000 fc82 	bl	80064d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a1e      	ldr	r2, [pc, #120]	; (8005c4c <HAL_TIM_PWM_Start+0x138>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d107      	bne.n	8005be6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005be4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a18      	ldr	r2, [pc, #96]	; (8005c4c <HAL_TIM_PWM_Start+0x138>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00e      	beq.n	8005c0e <HAL_TIM_PWM_Start+0xfa>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bf8:	d009      	beq.n	8005c0e <HAL_TIM_PWM_Start+0xfa>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a14      	ldr	r2, [pc, #80]	; (8005c50 <HAL_TIM_PWM_Start+0x13c>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d004      	beq.n	8005c0e <HAL_TIM_PWM_Start+0xfa>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a12      	ldr	r2, [pc, #72]	; (8005c54 <HAL_TIM_PWM_Start+0x140>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d111      	bne.n	8005c32 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2b06      	cmp	r3, #6
 8005c1e:	d010      	beq.n	8005c42 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f042 0201 	orr.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c30:	e007      	b.n	8005c42 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f042 0201 	orr.w	r2, r2, #1
 8005c40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3710      	adds	r7, #16
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40012c00 	.word	0x40012c00
 8005c50:	40000400 	.word	0x40000400
 8005c54:	40000800 	.word	0x40000800

08005c58 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	2200      	movs	r2, #0
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fc30 	bl	80064d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a29      	ldr	r2, [pc, #164]	; (8005d1c <HAL_TIM_PWM_Stop+0xc4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d117      	bne.n	8005caa <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	6a1a      	ldr	r2, [r3, #32]
 8005c80:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c84:	4013      	ands	r3, r2
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10f      	bne.n	8005caa <HAL_TIM_PWM_Stop+0x52>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	6a1a      	ldr	r2, [r3, #32]
 8005c90:	f240 4344 	movw	r3, #1092	; 0x444
 8005c94:	4013      	ands	r3, r2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d107      	bne.n	8005caa <HAL_TIM_PWM_Stop+0x52>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ca8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	6a1a      	ldr	r2, [r3, #32]
 8005cb0:	f241 1311 	movw	r3, #4369	; 0x1111
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10f      	bne.n	8005cda <HAL_TIM_PWM_Stop+0x82>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6a1a      	ldr	r2, [r3, #32]
 8005cc0:	f240 4344 	movw	r3, #1092	; 0x444
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d107      	bne.n	8005cda <HAL_TIM_PWM_Stop+0x82>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f022 0201 	bic.w	r2, r2, #1
 8005cd8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d104      	bne.n	8005cea <HAL_TIM_PWM_Stop+0x92>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce8:	e013      	b.n	8005d12 <HAL_TIM_PWM_Stop+0xba>
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d104      	bne.n	8005cfa <HAL_TIM_PWM_Stop+0xa2>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cf8:	e00b      	b.n	8005d12 <HAL_TIM_PWM_Stop+0xba>
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	2b08      	cmp	r3, #8
 8005cfe:	d104      	bne.n	8005d0a <HAL_TIM_PWM_Stop+0xb2>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d08:	e003      	b.n	8005d12 <HAL_TIM_PWM_Stop+0xba>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005d12:	2300      	movs	r3, #0
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	40012c00 	.word	0x40012c00

08005d20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b082      	sub	sp, #8
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0302 	and.w	r3, r3, #2
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d122      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0302 	and.w	r3, r3, #2
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d11b      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0202 	mvn.w	r2, #2
 8005d4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 f9af 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005d68:	e005      	b.n	8005d76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f9a2 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 f9b1 	bl	80060d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f003 0304 	and.w	r3, r3, #4
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	d122      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f003 0304 	and.w	r3, r3, #4
 8005d94:	2b04      	cmp	r3, #4
 8005d96:	d11b      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f06f 0204 	mvn.w	r2, #4
 8005da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2202      	movs	r2, #2
 8005da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 f985 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005dbc:	e005      	b.n	8005dca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 f978 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f987 	bl	80060d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0308 	and.w	r3, r3, #8
 8005dda:	2b08      	cmp	r3, #8
 8005ddc:	d122      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0308 	and.w	r3, r3, #8
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d11b      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0208 	mvn.w	r2, #8
 8005df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2204      	movs	r2, #4
 8005dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	69db      	ldr	r3, [r3, #28]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f95b 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005e10:	e005      	b.n	8005e1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f94e 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f95d 	bl	80060d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0310 	and.w	r3, r3, #16
 8005e2e:	2b10      	cmp	r3, #16
 8005e30:	d122      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0310 	and.w	r3, r3, #16
 8005e3c:	2b10      	cmp	r3, #16
 8005e3e:	d11b      	bne.n	8005e78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0210 	mvn.w	r2, #16
 8005e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f931 	bl	80060c6 <HAL_TIM_IC_CaptureCallback>
 8005e64:	e005      	b.n	8005e72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f924 	bl	80060b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 f933 	bl	80060d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d10e      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d107      	bne.n	8005ea4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0201 	mvn.w	r2, #1
 8005e9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fd fcfc 	bl	800389c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eae:	2b80      	cmp	r3, #128	; 0x80
 8005eb0:	d10e      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ebc:	2b80      	cmp	r3, #128	; 0x80
 8005ebe:	d107      	bne.n	8005ed0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ec8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 fbdc 	bl	8006688 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	2b40      	cmp	r3, #64	; 0x40
 8005edc:	d10e      	bne.n	8005efc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ee8:	2b40      	cmp	r3, #64	; 0x40
 8005eea:	d107      	bne.n	8005efc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f000 f8f7 	bl	80060ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d10e      	bne.n	8005f28 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0320 	and.w	r3, r3, #32
 8005f14:	2b20      	cmp	r3, #32
 8005f16:	d107      	bne.n	8005f28 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0220 	mvn.w	r2, #32
 8005f20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fba7 	bl	8006676 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f28:	bf00      	nop
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e0ae      	b.n	80060ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b0c      	cmp	r3, #12
 8005f5a:	f200 809f 	bhi.w	800609c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005f5e:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08005f99 	.word	0x08005f99
 8005f68:	0800609d 	.word	0x0800609d
 8005f6c:	0800609d 	.word	0x0800609d
 8005f70:	0800609d 	.word	0x0800609d
 8005f74:	08005fd9 	.word	0x08005fd9
 8005f78:	0800609d 	.word	0x0800609d
 8005f7c:	0800609d 	.word	0x0800609d
 8005f80:	0800609d 	.word	0x0800609d
 8005f84:	0800601b 	.word	0x0800601b
 8005f88:	0800609d 	.word	0x0800609d
 8005f8c:	0800609d 	.word	0x0800609d
 8005f90:	0800609d 	.word	0x0800609d
 8005f94:	0800605b 	.word	0x0800605b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68b9      	ldr	r1, [r7, #8]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 f90e 	bl	80061c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	699a      	ldr	r2, [r3, #24]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f042 0208 	orr.w	r2, r2, #8
 8005fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	699a      	ldr	r2, [r3, #24]
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0204 	bic.w	r2, r2, #4
 8005fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6999      	ldr	r1, [r3, #24]
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	430a      	orrs	r2, r1
 8005fd4:	619a      	str	r2, [r3, #24]
      break;
 8005fd6:	e064      	b.n	80060a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f000 f954 	bl	800628c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	699a      	ldr	r2, [r3, #24]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ff2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	699a      	ldr	r2, [r3, #24]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006002:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	6999      	ldr	r1, [r3, #24]
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	021a      	lsls	r2, r3, #8
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	430a      	orrs	r2, r1
 8006016:	619a      	str	r2, [r3, #24]
      break;
 8006018:	e043      	b.n	80060a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	4618      	mov	r0, r3
 8006022:	f000 f99d 	bl	8006360 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69da      	ldr	r2, [r3, #28]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f042 0208 	orr.w	r2, r2, #8
 8006034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	69da      	ldr	r2, [r3, #28]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0204 	bic.w	r2, r2, #4
 8006044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69d9      	ldr	r1, [r3, #28]
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	691a      	ldr	r2, [r3, #16]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	61da      	str	r2, [r3, #28]
      break;
 8006058:	e023      	b.n	80060a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68b9      	ldr	r1, [r7, #8]
 8006060:	4618      	mov	r0, r3
 8006062:	f000 f9e7 	bl	8006434 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69da      	ldr	r2, [r3, #28]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006074:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	69da      	ldr	r2, [r3, #28]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006084:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69d9      	ldr	r1, [r3, #28]
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	021a      	lsls	r2, r3, #8
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	430a      	orrs	r2, r1
 8006098:	61da      	str	r2, [r3, #28]
      break;
 800609a:	e002      	b.n	80060a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	75fb      	strb	r3, [r7, #23]
      break;
 80060a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2200      	movs	r2, #0
 80060a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80060aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bc80      	pop	{r7}
 80060c4:	4770      	bx	lr

080060c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b083      	sub	sp, #12
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80060ce:	bf00      	nop
 80060d0:	370c      	adds	r7, #12
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bc80      	pop	{r7}
 80060d6:	4770      	bx	lr

080060d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bc80      	pop	{r7}
 80060e8:	4770      	bx	lr

080060ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b083      	sub	sp, #12
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060f2:	bf00      	nop
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bc80      	pop	{r7}
 80060fa:	4770      	bx	lr

080060fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a29      	ldr	r2, [pc, #164]	; (80061b4 <TIM_Base_SetConfig+0xb8>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d00b      	beq.n	800612c <TIM_Base_SetConfig+0x30>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800611a:	d007      	beq.n	800612c <TIM_Base_SetConfig+0x30>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	4a26      	ldr	r2, [pc, #152]	; (80061b8 <TIM_Base_SetConfig+0xbc>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d003      	beq.n	800612c <TIM_Base_SetConfig+0x30>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	4a25      	ldr	r2, [pc, #148]	; (80061bc <TIM_Base_SetConfig+0xc0>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d108      	bne.n	800613e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006132:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a1c      	ldr	r2, [pc, #112]	; (80061b4 <TIM_Base_SetConfig+0xb8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00b      	beq.n	800615e <TIM_Base_SetConfig+0x62>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614c:	d007      	beq.n	800615e <TIM_Base_SetConfig+0x62>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a19      	ldr	r2, [pc, #100]	; (80061b8 <TIM_Base_SetConfig+0xbc>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d003      	beq.n	800615e <TIM_Base_SetConfig+0x62>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a18      	ldr	r2, [pc, #96]	; (80061bc <TIM_Base_SetConfig+0xc0>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d108      	bne.n	8006170 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4313      	orrs	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a07      	ldr	r2, [pc, #28]	; (80061b4 <TIM_Base_SetConfig+0xb8>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d103      	bne.n	80061a4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	615a      	str	r2, [r3, #20]
}
 80061aa:	bf00      	nop
 80061ac:	3714      	adds	r7, #20
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bc80      	pop	{r7}
 80061b2:	4770      	bx	lr
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	40000400 	.word	0x40000400
 80061bc:	40000800 	.word	0x40000800

080061c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b087      	sub	sp, #28
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
 80061c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a1b      	ldr	r3, [r3, #32]
 80061ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	f023 0201 	bic.w	r2, r3, #1
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f023 0303 	bic.w	r3, r3, #3
 80061f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	4313      	orrs	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f023 0302 	bic.w	r3, r3, #2
 8006208:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	4313      	orrs	r3, r2
 8006212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a1c      	ldr	r2, [pc, #112]	; (8006288 <TIM_OC1_SetConfig+0xc8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d10c      	bne.n	8006236 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f023 0308 	bic.w	r3, r3, #8
 8006222:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	697a      	ldr	r2, [r7, #20]
 800622a:	4313      	orrs	r3, r2
 800622c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	f023 0304 	bic.w	r3, r3, #4
 8006234:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a13      	ldr	r2, [pc, #76]	; (8006288 <TIM_OC1_SetConfig+0xc8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d111      	bne.n	8006262 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006244:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800624c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	695b      	ldr	r3, [r3, #20]
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	693a      	ldr	r2, [r7, #16]
 8006266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	621a      	str	r2, [r3, #32]
}
 800627c:	bf00      	nop
 800627e:	371c      	adds	r7, #28
 8006280:	46bd      	mov	sp, r7
 8006282:	bc80      	pop	{r7}
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	40012c00 	.word	0x40012c00

0800628c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800628c:	b480      	push	{r7}
 800628e:	b087      	sub	sp, #28
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a1b      	ldr	r3, [r3, #32]
 80062a0:	f023 0210 	bic.w	r2, r3, #16
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	699b      	ldr	r3, [r3, #24]
 80062b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	021b      	lsls	r3, r3, #8
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f023 0320 	bic.w	r3, r3, #32
 80062d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	4a1d      	ldr	r2, [pc, #116]	; (800635c <TIM_OC2_SetConfig+0xd0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d10d      	bne.n	8006308 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	011b      	lsls	r3, r3, #4
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	4a14      	ldr	r2, [pc, #80]	; (800635c <TIM_OC2_SetConfig+0xd0>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d113      	bne.n	8006338 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006316:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800631e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	695b      	ldr	r3, [r3, #20]
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	699b      	ldr	r3, [r3, #24]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4313      	orrs	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	693a      	ldr	r2, [r7, #16]
 800633c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	bc80      	pop	{r7}
 800635a:	4770      	bx	lr
 800635c:	40012c00 	.word	0x40012c00

08006360 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006360:	b480      	push	{r7}
 8006362:	b087      	sub	sp, #28
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6a1b      	ldr	r3, [r3, #32]
 8006374:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800638e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f023 0303 	bic.w	r3, r3, #3
 8006396:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	4313      	orrs	r3, r2
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80063a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689b      	ldr	r3, [r3, #8]
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a1d      	ldr	r2, [pc, #116]	; (8006430 <TIM_OC3_SetConfig+0xd0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d10d      	bne.n	80063da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80063c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	021b      	lsls	r3, r3, #8
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80063d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a14      	ldr	r2, [pc, #80]	; (8006430 <TIM_OC3_SetConfig+0xd0>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d113      	bne.n	800640a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80063e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	011b      	lsls	r3, r3, #4
 80063f8:	693a      	ldr	r2, [r7, #16]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	011b      	lsls	r3, r3, #4
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	621a      	str	r2, [r3, #32]
}
 8006424:	bf00      	nop
 8006426:	371c      	adds	r7, #28
 8006428:	46bd      	mov	sp, r7
 800642a:	bc80      	pop	{r7}
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	40012c00 	.word	0x40012c00

08006434 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6a1b      	ldr	r3, [r3, #32]
 8006448:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800646a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	021b      	lsls	r3, r3, #8
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4313      	orrs	r3, r2
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800647e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	689b      	ldr	r3, [r3, #8]
 8006484:	031b      	lsls	r3, r3, #12
 8006486:	693a      	ldr	r2, [r7, #16]
 8006488:	4313      	orrs	r3, r2
 800648a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a0f      	ldr	r2, [pc, #60]	; (80064cc <TIM_OC4_SetConfig+0x98>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d109      	bne.n	80064a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800649a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	019b      	lsls	r3, r3, #6
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	621a      	str	r2, [r3, #32]
}
 80064c2:	bf00      	nop
 80064c4:	371c      	adds	r7, #28
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr
 80064cc:	40012c00 	.word	0x40012c00

080064d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b087      	sub	sp, #28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f003 031f 	and.w	r3, r3, #31
 80064e2:	2201      	movs	r2, #1
 80064e4:	fa02 f303 	lsl.w	r3, r2, r3
 80064e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a1a      	ldr	r2, [r3, #32]
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	43db      	mvns	r3, r3
 80064f2:	401a      	ands	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6a1a      	ldr	r2, [r3, #32]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	f003 031f 	and.w	r3, r3, #31
 8006502:	6879      	ldr	r1, [r7, #4]
 8006504:	fa01 f303 	lsl.w	r3, r1, r3
 8006508:	431a      	orrs	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	621a      	str	r2, [r3, #32]
}
 800650e:	bf00      	nop
 8006510:	371c      	adds	r7, #28
 8006512:	46bd      	mov	sp, r7
 8006514:	bc80      	pop	{r7}
 8006516:	4770      	bx	lr

08006518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006528:	2b01      	cmp	r3, #1
 800652a:	d101      	bne.n	8006530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800652c:	2302      	movs	r3, #2
 800652e:	e046      	b.n	80065be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2202      	movs	r2, #2
 800653c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68fa      	ldr	r2, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a16      	ldr	r2, [pc, #88]	; (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d00e      	beq.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800657c:	d009      	beq.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a12      	ldr	r2, [pc, #72]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d004      	beq.n	8006592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a10      	ldr	r2, [pc, #64]	; (80065d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d10c      	bne.n	80065ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006598:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	68ba      	ldr	r2, [r7, #8]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	68ba      	ldr	r2, [r7, #8]
 80065aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3714      	adds	r7, #20
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bc80      	pop	{r7}
 80065c6:	4770      	bx	lr
 80065c8:	40012c00 	.word	0x40012c00
 80065cc:	40000400 	.word	0x40000400
 80065d0:	40000800 	.word	0x40000800

080065d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80065de:	2300      	movs	r3, #0
 80065e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d101      	bne.n	80065f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065ec:	2302      	movs	r3, #2
 80065ee:	e03d      	b.n	800666c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	4313      	orrs	r3, r2
 8006604:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	4313      	orrs	r3, r2
 8006612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	4313      	orrs	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4313      	orrs	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	691b      	ldr	r3, [r3, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	695b      	ldr	r3, [r3, #20]
 8006648:	4313      	orrs	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	4313      	orrs	r3, r2
 8006658:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800666a:	2300      	movs	r3, #0
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	bc80      	pop	{r7}
 8006674:	4770      	bx	lr

08006676 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006676:	b480      	push	{r7}
 8006678:	b083      	sub	sp, #12
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	bc80      	pop	{r7}
 8006686:	4770      	bx	lr

08006688 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	bc80      	pop	{r7}
 8006698:	4770      	bx	lr

0800669a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d101      	bne.n	80066ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	e042      	b.n	8006732 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f7fd faf3 	bl	8003cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2224      	movs	r2, #36	; 0x24
 80066ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80066dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 ff16 	bl	8007510 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691a      	ldr	r2, [r3, #16]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	695a      	ldr	r2, [r3, #20]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006702:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68da      	ldr	r2, [r3, #12]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006712:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2220      	movs	r2, #32
 800671e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2220      	movs	r2, #32
 8006726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3708      	adds	r7, #8
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}

0800673a <HAL_HalfDuplex_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b082      	sub	sp, #8
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e04a      	b.n	80067e2 <HAL_HalfDuplex_Init+0xa8>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d106      	bne.n	8006766 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7fd faa3 	bl	8003cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2224      	movs	r2, #36	; 0x24
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800677c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 fec6 	bl	8007510 <UART_SetConfig>

  /* In half-duplex mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	691a      	ldr	r2, [r3, #16]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006792:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695a      	ldr	r2, [r3, #20]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80067a2:	615a      	str	r2, [r3, #20]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	695a      	ldr	r2, [r3, #20]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0208 	orr.w	r2, r2, #8
 80067b2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	68da      	ldr	r2, [r3, #12]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067c2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state*/
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2220      	movs	r2, #32
 80067ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2220      	movs	r2, #32
 80067d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2200      	movs	r2, #0
 80067de:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ea:	b580      	push	{r7, lr}
 80067ec:	b08a      	sub	sp, #40	; 0x28
 80067ee:	af02      	add	r7, sp, #8
 80067f0:	60f8      	str	r0, [r7, #12]
 80067f2:	60b9      	str	r1, [r7, #8]
 80067f4:	603b      	str	r3, [r7, #0]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067fa:	2300      	movs	r3, #0
 80067fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b20      	cmp	r3, #32
 8006808:	d16d      	bne.n	80068e6 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <HAL_UART_Transmit+0x2c>
 8006810:	88fb      	ldrh	r3, [r7, #6]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e066      	b.n	80068e8 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2221      	movs	r2, #33	; 0x21
 8006824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006828:	f7fd fcbe 	bl	80041a8 <HAL_GetTick>
 800682c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	88fa      	ldrh	r2, [r7, #6]
 8006832:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	88fa      	ldrh	r2, [r7, #6]
 8006838:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006842:	d108      	bne.n	8006856 <HAL_UART_Transmit+0x6c>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d104      	bne.n	8006856 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800684c:	2300      	movs	r3, #0
 800684e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	61bb      	str	r3, [r7, #24]
 8006854:	e003      	b.n	800685e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800685a:	2300      	movs	r3, #0
 800685c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800685e:	e02a      	b.n	80068b6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2200      	movs	r2, #0
 8006868:	2180      	movs	r1, #128	; 0x80
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 fc0d 	bl	800708a <UART_WaitOnFlagUntilTimeout>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8006876:	2303      	movs	r3, #3
 8006878:	e036      	b.n	80068e8 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10b      	bne.n	8006898 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	881b      	ldrh	r3, [r3, #0]
 8006884:	461a      	mov	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800688e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	3302      	adds	r3, #2
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	e007      	b.n	80068a8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	781a      	ldrb	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	3301      	adds	r3, #1
 80068a6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d1cf      	bne.n	8006860 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2200      	movs	r2, #0
 80068c8:	2140      	movs	r1, #64	; 0x40
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f000 fbdd 	bl	800708a <UART_WaitOnFlagUntilTimeout>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d001      	beq.n	80068da <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80068d6:	2303      	movs	r3, #3
 80068d8:	e006      	b.n	80068e8 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2220      	movs	r2, #32
 80068de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80068e2:	2300      	movs	r3, #0
 80068e4:	e000      	b.n	80068e8 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80068e6:	2302      	movs	r3, #2
  }
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3720      	adds	r7, #32
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	; 0x28
 80068f4:	af02      	add	r7, sp, #8
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	603b      	str	r3, [r7, #0]
 80068fc:	4613      	mov	r3, r2
 80068fe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800690a:	b2db      	uxtb	r3, r3
 800690c:	2b20      	cmp	r3, #32
 800690e:	d17c      	bne.n	8006a0a <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <HAL_UART_Receive+0x2c>
 8006916:	88fb      	ldrh	r3, [r7, #6]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d101      	bne.n	8006920 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e075      	b.n	8006a0c <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2200      	movs	r2, #0
 8006924:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2222      	movs	r2, #34	; 0x22
 800692a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006934:	f7fd fc38 	bl	80041a8 <HAL_GetTick>
 8006938:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	88fa      	ldrh	r2, [r7, #6]
 800693e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	88fa      	ldrh	r2, [r7, #6]
 8006944:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800694e:	d108      	bne.n	8006962 <HAL_UART_Receive+0x72>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d104      	bne.n	8006962 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8006958:	2300      	movs	r3, #0
 800695a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	61bb      	str	r3, [r7, #24]
 8006960:	e003      	b.n	800696a <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006966:	2300      	movs	r3, #0
 8006968:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800696a:	e043      	b.n	80069f4 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2200      	movs	r2, #0
 8006974:	2120      	movs	r1, #32
 8006976:	68f8      	ldr	r0, [r7, #12]
 8006978:	f000 fb87 	bl	800708a <UART_WaitOnFlagUntilTimeout>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d001      	beq.n	8006986 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8006982:	2303      	movs	r3, #3
 8006984:	e042      	b.n	8006a0c <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8006986:	69fb      	ldr	r3, [r7, #28]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10c      	bne.n	80069a6 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	b29b      	uxth	r3, r3
 8006994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006998:	b29a      	uxth	r2, r3
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	3302      	adds	r3, #2
 80069a2:	61bb      	str	r3, [r7, #24]
 80069a4:	e01f      	b.n	80069e6 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069ae:	d007      	beq.n	80069c0 <HAL_UART_Receive+0xd0>
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d10a      	bne.n	80069ce <HAL_UART_Receive+0xde>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d106      	bne.n	80069ce <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	701a      	strb	r2, [r3, #0]
 80069cc:	e008      	b.n	80069e0 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069da:	b2da      	uxtb	r2, r3
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	3301      	adds	r3, #1
 80069e4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069ea:	b29b      	uxth	r3, r3
 80069ec:	3b01      	subs	r3, #1
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d1b6      	bne.n	800696c <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2220      	movs	r2, #32
 8006a02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8006a06:	2300      	movs	r3, #0
 8006a08:	e000      	b.n	8006a0c <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a0a:	2302      	movs	r3, #2
  }
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3720      	adds	r7, #32
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	2b20      	cmp	r3, #32
 8006a2c:	d112      	bne.n	8006a54 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <HAL_UART_Receive_IT+0x26>
 8006a34:	88fb      	ldrh	r3, [r7, #6]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d101      	bne.n	8006a3e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e00b      	b.n	8006a56 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a44:	88fb      	ldrh	r3, [r7, #6]
 8006a46:	461a      	mov	r2, r3
 8006a48:	68b9      	ldr	r1, [r7, #8]
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 fb8b 	bl	8007166 <UART_Start_Receive_IT>
 8006a50:	4603      	mov	r3, r0
 8006a52:	e000      	b.n	8006a56 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006a54:	2302      	movs	r3, #2
  }
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}
	...

08006a60 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b0ba      	sub	sp, #232	; 0xe8
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	695b      	ldr	r3, [r3, #20]
 8006a82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a96:	f003 030f 	and.w	r3, r3, #15
 8006a9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10f      	bne.n	8006ac6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x66>
 8006ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d003      	beq.n	8006ac6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fc67 	bl	8007392 <UART_Receive_IT>
      return;
 8006ac4:	e25b      	b.n	8006f7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ac6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 80de 	beq.w	8006c8c <HAL_UART_IRQHandler+0x22c>
 8006ad0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ad4:	f003 0301 	and.w	r3, r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d106      	bne.n	8006aea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ae0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80d1 	beq.w	8006c8c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006aea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d00b      	beq.n	8006b0e <HAL_UART_IRQHandler+0xae>
 8006af6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006afa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d005      	beq.n	8006b0e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	f043 0201 	orr.w	r2, r3, #1
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b12:	f003 0304 	and.w	r3, r3, #4
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00b      	beq.n	8006b32 <HAL_UART_IRQHandler+0xd2>
 8006b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d005      	beq.n	8006b32 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b2a:	f043 0202 	orr.w	r2, r3, #2
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00b      	beq.n	8006b56 <HAL_UART_IRQHandler+0xf6>
 8006b3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b42:	f003 0301 	and.w	r3, r3, #1
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4e:	f043 0204 	orr.w	r2, r3, #4
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d011      	beq.n	8006b86 <HAL_UART_IRQHandler+0x126>
 8006b62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d105      	bne.n	8006b7a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b72:	f003 0301 	and.w	r3, r3, #1
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d005      	beq.n	8006b86 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b7e:	f043 0208 	orr.w	r2, r3, #8
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	f000 81f2 	beq.w	8006f74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d008      	beq.n	8006bae <HAL_UART_IRQHandler+0x14e>
 8006b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba0:	f003 0320 	and.w	r3, r3, #32
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d002      	beq.n	8006bae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f000 fbf2 	bl	8007392 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	bf14      	ite	ne
 8006bbc:	2301      	movne	r3, #1
 8006bbe:	2300      	moveq	r3, #0
 8006bc0:	b2db      	uxtb	r3, r3
 8006bc2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bca:	f003 0308 	and.w	r3, r3, #8
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d103      	bne.n	8006bda <HAL_UART_IRQHandler+0x17a>
 8006bd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d04f      	beq.n	8006c7a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 fafc 	bl	80071d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d041      	beq.n	8006c72 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3314      	adds	r3, #20
 8006bf4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006bfc:	e853 3f00 	ldrex	r3, [r3]
 8006c00:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	3314      	adds	r3, #20
 8006c16:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c26:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1d9      	bne.n	8006bee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d013      	beq.n	8006c6a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c46:	4a7e      	ldr	r2, [pc, #504]	; (8006e40 <HAL_UART_IRQHandler+0x3e0>)
 8006c48:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fd fbce 	bl	80043f0 <HAL_DMA_Abort_IT>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d016      	beq.n	8006c88 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	687a      	ldr	r2, [r7, #4]
 8006c62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006c64:	4610      	mov	r0, r2
 8006c66:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c68:	e00e      	b.n	8006c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f993 	bl	8006f96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c70:	e00a      	b.n	8006c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f000 f98f 	bl	8006f96 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c78:	e006      	b.n	8006c88 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f98b 	bl	8006f96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006c86:	e175      	b.n	8006f74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	bf00      	nop
    return;
 8006c8a:	e173      	b.n	8006f74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	f040 814f 	bne.w	8006f34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c9a:	f003 0310 	and.w	r3, r3, #16
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 8148 	beq.w	8006f34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca8:	f003 0310 	and.w	r3, r3, #16
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	f000 8141 	beq.w	8006f34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60bb      	str	r3, [r7, #8]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	60bb      	str	r3, [r7, #8]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	60bb      	str	r3, [r7, #8]
 8006cc6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	695b      	ldr	r3, [r3, #20]
 8006cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f000 80b6 	beq.w	8006e44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006ce4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 8145 	beq.w	8006f78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	f080 813e 	bcs.w	8006f78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d02:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d08:	699b      	ldr	r3, [r3, #24]
 8006d0a:	2b20      	cmp	r3, #32
 8006d0c:	f000 8088 	beq.w	8006e20 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	330c      	adds	r3, #12
 8006d16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d26:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	330c      	adds	r3, #12
 8006d38:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d3c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d40:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d44:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d48:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1d9      	bne.n	8006d10 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	3314      	adds	r3, #20
 8006d62:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d66:	e853 3f00 	ldrex	r3, [r3]
 8006d6a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d6e:	f023 0301 	bic.w	r3, r3, #1
 8006d72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	3314      	adds	r3, #20
 8006d7c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d80:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d84:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d88:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e1      	bne.n	8006d5c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	3314      	adds	r3, #20
 8006d9e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006da2:	e853 3f00 	ldrex	r3, [r3]
 8006da6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006da8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006daa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	3314      	adds	r3, #20
 8006db8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006dbc:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006dbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006dc2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dc4:	e841 2300 	strex	r3, r2, [r1]
 8006dc8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006dca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1e3      	bne.n	8006d98 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2220      	movs	r2, #32
 8006dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	330c      	adds	r3, #12
 8006de4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de8:	e853 3f00 	ldrex	r3, [r3]
 8006dec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006dee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006df0:	f023 0310 	bic.w	r3, r3, #16
 8006df4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	330c      	adds	r3, #12
 8006dfe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e02:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e04:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e0a:	e841 2300 	strex	r3, r2, [r1]
 8006e0e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1e3      	bne.n	8006dde <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7fd faad 	bl	800437a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	b29b      	uxth	r3, r3
 8006e34:	4619      	mov	r1, r3
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f8b6 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e3c:	e09c      	b.n	8006f78 <HAL_UART_IRQHandler+0x518>
 8006e3e:	bf00      	nop
 8006e40:	0800729d 	.word	0x0800729d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	f000 808e 	beq.w	8006f7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006e60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 8089 	beq.w	8006f7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	330c      	adds	r3, #12
 8006e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e74:	e853 3f00 	ldrex	r3, [r3]
 8006e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	330c      	adds	r3, #12
 8006e8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e8e:	647a      	str	r2, [r7, #68]	; 0x44
 8006e90:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e3      	bne.n	8006e6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3314      	adds	r3, #20
 8006ea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8006eb2:	6a3b      	ldr	r3, [r7, #32]
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3314      	adds	r3, #20
 8006ec2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ec6:	633a      	str	r2, [r7, #48]	; 0x30
 8006ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ecc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ece:	e841 2300 	strex	r3, r2, [r1]
 8006ed2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1e3      	bne.n	8006ea2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	330c      	adds	r3, #12
 8006eee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 0310 	bic.w	r3, r3, #16
 8006efe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	330c      	adds	r3, #12
 8006f08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f0c:	61fa      	str	r2, [r7, #28]
 8006f0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	69b9      	ldr	r1, [r7, #24]
 8006f12:	69fa      	ldr	r2, [r7, #28]
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	617b      	str	r3, [r7, #20]
   return(result);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e3      	bne.n	8006ee8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2202      	movs	r2, #2
 8006f24:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f2a:	4619      	mov	r1, r3
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f83b 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f32:	e023      	b.n	8006f7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d009      	beq.n	8006f54 <HAL_UART_IRQHandler+0x4f4>
 8006f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d003      	beq.n	8006f54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 f9b9 	bl	80072c4 <UART_Transmit_IT>
    return;
 8006f52:	e014      	b.n	8006f7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00e      	beq.n	8006f7e <HAL_UART_IRQHandler+0x51e>
 8006f60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d008      	beq.n	8006f7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f9f8 	bl	8007362 <UART_EndTransmit_IT>
    return;
 8006f72:	e004      	b.n	8006f7e <HAL_UART_IRQHandler+0x51e>
    return;
 8006f74:	bf00      	nop
 8006f76:	e002      	b.n	8006f7e <HAL_UART_IRQHandler+0x51e>
      return;
 8006f78:	bf00      	nop
 8006f7a:	e000      	b.n	8006f7e <HAL_UART_IRQHandler+0x51e>
      return;
 8006f7c:	bf00      	nop
  }
}
 8006f7e:	37e8      	adds	r7, #232	; 0xe8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f8c:	bf00      	nop
 8006f8e:	370c      	adds	r7, #12
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bc80      	pop	{r7}
 8006f94:	4770      	bx	lr

08006f96 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006f96:	b480      	push	{r7}
 8006f98:	b083      	sub	sp, #12
 8006f9a:	af00      	add	r7, sp, #0
 8006f9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006f9e:	bf00      	nop
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bc80      	pop	{r7}
 8006fa6:	4770      	bx	lr

08006fa8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b083      	sub	sp, #12
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fb4:	bf00      	nop
 8006fb6:	370c      	adds	r7, #12
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bc80      	pop	{r7}
 8006fbc:	4770      	bx	lr

08006fbe <HAL_HalfDuplex_EnableTransmitter>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
{
 8006fbe:	b480      	push	{r7}
 8006fc0:	b085      	sub	sp, #20
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d101      	bne.n	8006fd8 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e020      	b.n	800701a <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2224      	movs	r2, #36	; 0x24
 8006fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f023 030c 	bic.w	r3, r3, #12
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_TE;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f043 0308 	orr.w	r3, r3, #8
 8006ffe:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2220      	movs	r2, #32
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	bc80      	pop	{r7}
 8007022:	4770      	bx	lr

08007024 <HAL_HalfDuplex_EnableReceiver>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 800702c:	2300      	movs	r3, #0
 800702e:	60fb      	str	r3, [r7, #12]

  /* Process Locked */
  __HAL_LOCK(huart);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007036:	2b01      	cmp	r3, #1
 8007038:	d101      	bne.n	800703e <HAL_HalfDuplex_EnableReceiver+0x1a>
 800703a:	2302      	movs	r3, #2
 800703c:	e020      	b.n	8007080 <HAL_HalfDuplex_EnableReceiver+0x5c>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2201      	movs	r2, #1
 8007042:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  huart->gState = HAL_UART_STATE_BUSY;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2224      	movs	r2, #36	; 0x24
 800704a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	60fb      	str	r3, [r7, #12]

  /* Clear TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_TE | USART_CR1_RE));
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f023 030c 	bic.w	r3, r3, #12
 800705c:	60fb      	str	r3, [r7, #12]

  /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
  tmpreg |= (uint32_t)USART_CR1_RE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f043 0304 	orr.w	r3, r3, #4
 8007064:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	60da      	str	r2, [r3, #12]

  huart->gState = HAL_UART_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3714      	adds	r7, #20
 8007084:	46bd      	mov	sp, r7
 8007086:	bc80      	pop	{r7}
 8007088:	4770      	bx	lr

0800708a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b090      	sub	sp, #64	; 0x40
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	603b      	str	r3, [r7, #0]
 8007096:	4613      	mov	r3, r2
 8007098:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800709a:	e050      	b.n	800713e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800709c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800709e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070a2:	d04c      	beq.n	800713e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80070a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <UART_WaitOnFlagUntilTimeout+0x30>
 80070aa:	f7fd f87d 	bl	80041a8 <HAL_GetTick>
 80070ae:	4602      	mov	r2, r0
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d241      	bcs.n	800713e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	330c      	adds	r3, #12
 80070c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c4:	e853 3f00 	ldrex	r3, [r3]
 80070c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	330c      	adds	r3, #12
 80070d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80070da:	637a      	str	r2, [r7, #52]	; 0x34
 80070dc:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070e2:	e841 2300 	strex	r3, r2, [r1]
 80070e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1e5      	bne.n	80070ba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	3314      	adds	r3, #20
 80070f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	e853 3f00 	ldrex	r3, [r3]
 80070fc:	613b      	str	r3, [r7, #16]
   return(result);
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	63bb      	str	r3, [r7, #56]	; 0x38
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	3314      	adds	r3, #20
 800710c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800710e:	623a      	str	r2, [r7, #32]
 8007110:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007112:	69f9      	ldr	r1, [r7, #28]
 8007114:	6a3a      	ldr	r2, [r7, #32]
 8007116:	e841 2300 	strex	r3, r2, [r1]
 800711a:	61bb      	str	r3, [r7, #24]
   return(result);
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1e5      	bne.n	80070ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2220      	movs	r2, #32
 8007126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	2220      	movs	r2, #32
 800712e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800713a:	2303      	movs	r3, #3
 800713c:	e00f      	b.n	800715e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	4013      	ands	r3, r2
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	429a      	cmp	r2, r3
 800714c:	bf0c      	ite	eq
 800714e:	2301      	moveq	r3, #1
 8007150:	2300      	movne	r3, #0
 8007152:	b2db      	uxtb	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	79fb      	ldrb	r3, [r7, #7]
 8007158:	429a      	cmp	r2, r3
 800715a:	d09f      	beq.n	800709c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3740      	adds	r7, #64	; 0x40
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}

08007166 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007166:	b480      	push	{r7}
 8007168:	b085      	sub	sp, #20
 800716a:	af00      	add	r7, sp, #0
 800716c:	60f8      	str	r0, [r7, #12]
 800716e:	60b9      	str	r1, [r7, #8]
 8007170:	4613      	mov	r3, r2
 8007172:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	88fa      	ldrh	r2, [r7, #6]
 800717e:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	88fa      	ldrh	r2, [r7, #6]
 8007184:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2222      	movs	r2, #34	; 0x22
 8007190:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d007      	beq.n	80071ac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	68da      	ldr	r2, [r3, #12]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071aa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	695a      	ldr	r2, [r3, #20]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f042 0201 	orr.w	r2, r2, #1
 80071ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68da      	ldr	r2, [r3, #12]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f042 0220 	orr.w	r2, r2, #32
 80071ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3714      	adds	r7, #20
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bc80      	pop	{r7}
 80071d6:	4770      	bx	lr

080071d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80071d8:	b480      	push	{r7}
 80071da:	b095      	sub	sp, #84	; 0x54
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	330c      	adds	r3, #12
 80071e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ea:	e853 3f00 	ldrex	r3, [r3]
 80071ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80071f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80071f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	330c      	adds	r3, #12
 80071fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007200:	643a      	str	r2, [r7, #64]	; 0x40
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007204:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007206:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007208:	e841 2300 	strex	r3, r2, [r1]
 800720c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800720e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e5      	bne.n	80071e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3314      	adds	r3, #20
 800721a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	6a3b      	ldr	r3, [r7, #32]
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	61fb      	str	r3, [r7, #28]
   return(result);
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	f023 0301 	bic.w	r3, r3, #1
 800722a:	64bb      	str	r3, [r7, #72]	; 0x48
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	3314      	adds	r3, #20
 8007232:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007234:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007236:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007238:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800723a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800723c:	e841 2300 	strex	r3, r2, [r1]
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1e5      	bne.n	8007214 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800724c:	2b01      	cmp	r3, #1
 800724e:	d119      	bne.n	8007284 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	330c      	adds	r3, #12
 8007256:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	e853 3f00 	ldrex	r3, [r3]
 800725e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f023 0310 	bic.w	r3, r3, #16
 8007266:	647b      	str	r3, [r7, #68]	; 0x44
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	330c      	adds	r3, #12
 800726e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007270:	61ba      	str	r2, [r7, #24]
 8007272:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007274:	6979      	ldr	r1, [r7, #20]
 8007276:	69ba      	ldr	r2, [r7, #24]
 8007278:	e841 2300 	strex	r3, r2, [r1]
 800727c:	613b      	str	r3, [r7, #16]
   return(result);
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1e5      	bne.n	8007250 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2220      	movs	r2, #32
 8007288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007292:	bf00      	nop
 8007294:	3754      	adds	r7, #84	; 0x54
 8007296:	46bd      	mov	sp, r7
 8007298:	bc80      	pop	{r7}
 800729a:	4770      	bx	lr

0800729c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7ff fe6d 	bl	8006f96 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072bc:	bf00      	nop
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b085      	sub	sp, #20
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b21      	cmp	r3, #33	; 0x21
 80072d6:	d13e      	bne.n	8007356 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e0:	d114      	bne.n	800730c <UART_Transmit_IT+0x48>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d110      	bne.n	800730c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	881b      	ldrh	r3, [r3, #0]
 80072f4:	461a      	mov	r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6a1b      	ldr	r3, [r3, #32]
 8007304:	1c9a      	adds	r2, r3, #2
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	621a      	str	r2, [r3, #32]
 800730a:	e008      	b.n	800731e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a1b      	ldr	r3, [r3, #32]
 8007310:	1c59      	adds	r1, r3, #1
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	6211      	str	r1, [r2, #32]
 8007316:	781a      	ldrb	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007322:	b29b      	uxth	r3, r3
 8007324:	3b01      	subs	r3, #1
 8007326:	b29b      	uxth	r3, r3
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	4619      	mov	r1, r3
 800732c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10f      	bne.n	8007352 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	68da      	ldr	r2, [r3, #12]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007340:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	68da      	ldr	r2, [r3, #12]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007350:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007352:	2300      	movs	r3, #0
 8007354:	e000      	b.n	8007358 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007356:	2302      	movs	r3, #2
  }
}
 8007358:	4618      	mov	r0, r3
 800735a:	3714      	adds	r7, #20
 800735c:	46bd      	mov	sp, r7
 800735e:	bc80      	pop	{r7}
 8007360:	4770      	bx	lr

08007362 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007362:	b580      	push	{r7, lr}
 8007364:	b082      	sub	sp, #8
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68da      	ldr	r2, [r3, #12]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007378:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2220      	movs	r2, #32
 800737e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f7ff fdfe 	bl	8006f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007388:	2300      	movs	r3, #0
}
 800738a:	4618      	mov	r0, r3
 800738c:	3708      	adds	r7, #8
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b08c      	sub	sp, #48	; 0x30
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073a0:	b2db      	uxtb	r3, r3
 80073a2:	2b22      	cmp	r3, #34	; 0x22
 80073a4:	f040 80ae 	bne.w	8007504 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b0:	d117      	bne.n	80073e2 <UART_Receive_IT+0x50>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d113      	bne.n	80073e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80073ba:	2300      	movs	r3, #0
 80073bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	b29b      	uxth	r3, r3
 80073cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073da:	1c9a      	adds	r2, r3, #2
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	629a      	str	r2, [r3, #40]	; 0x28
 80073e0:	e026      	b.n	8007430 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80073e8:	2300      	movs	r3, #0
 80073ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073f4:	d007      	beq.n	8007406 <UART_Receive_IT+0x74>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10a      	bne.n	8007414 <UART_Receive_IT+0x82>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d106      	bne.n	8007414 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	b2da      	uxtb	r2, r3
 800740e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007410:	701a      	strb	r2, [r3, #0]
 8007412:	e008      	b.n	8007426 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007420:	b2da      	uxtb	r2, r3
 8007422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007424:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	1c5a      	adds	r2, r3, #1
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007434:	b29b      	uxth	r3, r3
 8007436:	3b01      	subs	r3, #1
 8007438:	b29b      	uxth	r3, r3
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	4619      	mov	r1, r3
 800743e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007440:	2b00      	cmp	r3, #0
 8007442:	d15d      	bne.n	8007500 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68da      	ldr	r2, [r3, #12]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f022 0220 	bic.w	r2, r2, #32
 8007452:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68da      	ldr	r2, [r3, #12]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007462:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	695a      	ldr	r2, [r3, #20]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f022 0201 	bic.w	r2, r2, #1
 8007472:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007486:	2b01      	cmp	r3, #1
 8007488:	d135      	bne.n	80074f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	330c      	adds	r3, #12
 8007496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	613b      	str	r3, [r7, #16]
   return(result);
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f023 0310 	bic.w	r3, r3, #16
 80074a6:	627b      	str	r3, [r7, #36]	; 0x24
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	330c      	adds	r3, #12
 80074ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b0:	623a      	str	r2, [r7, #32]
 80074b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	69f9      	ldr	r1, [r7, #28]
 80074b6:	6a3a      	ldr	r2, [r7, #32]
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e5      	bne.n	8007490 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0310 	and.w	r3, r3, #16
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d10a      	bne.n	80074e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80074d2:	2300      	movs	r3, #0
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	60fb      	str	r3, [r7, #12]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80074ec:	4619      	mov	r1, r3
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f7ff fd5a 	bl	8006fa8 <HAL_UARTEx_RxEventCallback>
 80074f4:	e002      	b.n	80074fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f7fc f84c 	bl	8003594 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	e002      	b.n	8007506 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007500:	2300      	movs	r3, #0
 8007502:	e000      	b.n	8007506 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007504:	2302      	movs	r3, #2
  }
}
 8007506:	4618      	mov	r0, r3
 8007508:	3730      	adds	r7, #48	; 0x30
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
	...

08007510 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	691b      	ldr	r3, [r3, #16]
 800751e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	430a      	orrs	r2, r1
 800752c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	689a      	ldr	r2, [r3, #8]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	691b      	ldr	r3, [r3, #16]
 8007536:	431a      	orrs	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	695b      	ldr	r3, [r3, #20]
 800753c:	4313      	orrs	r3, r2
 800753e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800754a:	f023 030c 	bic.w	r3, r3, #12
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	6812      	ldr	r2, [r2, #0]
 8007552:	68b9      	ldr	r1, [r7, #8]
 8007554:	430b      	orrs	r3, r1
 8007556:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	699a      	ldr	r2, [r3, #24]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a2c      	ldr	r2, [pc, #176]	; (8007624 <UART_SetConfig+0x114>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d103      	bne.n	8007580 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007578:	f7fd fd52 	bl	8005020 <HAL_RCC_GetPCLK2Freq>
 800757c:	60f8      	str	r0, [r7, #12]
 800757e:	e002      	b.n	8007586 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007580:	f7fd fd3a 	bl	8004ff8 <HAL_RCC_GetPCLK1Freq>
 8007584:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	4613      	mov	r3, r2
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4413      	add	r3, r2
 800758e:	009a      	lsls	r2, r3, #2
 8007590:	441a      	add	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	fbb2 f3f3 	udiv	r3, r2, r3
 800759c:	4a22      	ldr	r2, [pc, #136]	; (8007628 <UART_SetConfig+0x118>)
 800759e:	fba2 2303 	umull	r2, r3, r2, r3
 80075a2:	095b      	lsrs	r3, r3, #5
 80075a4:	0119      	lsls	r1, r3, #4
 80075a6:	68fa      	ldr	r2, [r7, #12]
 80075a8:	4613      	mov	r3, r2
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	4413      	add	r3, r2
 80075ae:	009a      	lsls	r2, r3, #2
 80075b0:	441a      	add	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80075bc:	4b1a      	ldr	r3, [pc, #104]	; (8007628 <UART_SetConfig+0x118>)
 80075be:	fba3 0302 	umull	r0, r3, r3, r2
 80075c2:	095b      	lsrs	r3, r3, #5
 80075c4:	2064      	movs	r0, #100	; 0x64
 80075c6:	fb00 f303 	mul.w	r3, r0, r3
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	011b      	lsls	r3, r3, #4
 80075ce:	3332      	adds	r3, #50	; 0x32
 80075d0:	4a15      	ldr	r2, [pc, #84]	; (8007628 <UART_SetConfig+0x118>)
 80075d2:	fba2 2303 	umull	r2, r3, r2, r3
 80075d6:	095b      	lsrs	r3, r3, #5
 80075d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075dc:	4419      	add	r1, r3
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4613      	mov	r3, r2
 80075e2:	009b      	lsls	r3, r3, #2
 80075e4:	4413      	add	r3, r2
 80075e6:	009a      	lsls	r2, r3, #2
 80075e8:	441a      	add	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80075f4:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <UART_SetConfig+0x118>)
 80075f6:	fba3 0302 	umull	r0, r3, r3, r2
 80075fa:	095b      	lsrs	r3, r3, #5
 80075fc:	2064      	movs	r0, #100	; 0x64
 80075fe:	fb00 f303 	mul.w	r3, r0, r3
 8007602:	1ad3      	subs	r3, r2, r3
 8007604:	011b      	lsls	r3, r3, #4
 8007606:	3332      	adds	r3, #50	; 0x32
 8007608:	4a07      	ldr	r2, [pc, #28]	; (8007628 <UART_SetConfig+0x118>)
 800760a:	fba2 2303 	umull	r2, r3, r2, r3
 800760e:	095b      	lsrs	r3, r3, #5
 8007610:	f003 020f 	and.w	r2, r3, #15
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	440a      	add	r2, r1
 800761a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800761c:	bf00      	nop
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40013800 	.word	0x40013800
 8007628:	51eb851f 	.word	0x51eb851f

0800762c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800762c:	b480      	push	{r7}
 800762e:	b085      	sub	sp, #20
 8007630:	af00      	add	r7, sp, #0
 8007632:	4603      	mov	r3, r0
 8007634:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800763a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800763e:	2b84      	cmp	r3, #132	; 0x84
 8007640:	d005      	beq.n	800764e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007642:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	4413      	add	r3, r2
 800764a:	3303      	adds	r3, #3
 800764c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800764e:	68fb      	ldr	r3, [r7, #12]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	bc80      	pop	{r7}
 8007658:	4770      	bx	lr

0800765a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800765e:	f000 fae7 	bl	8007c30 <vTaskStartScheduler>
  
  return osOK;
 8007662:	2300      	movs	r3, #0
}
 8007664:	4618      	mov	r0, r3
 8007666:	bd80      	pop	{r7, pc}

08007668 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800766a:	b089      	sub	sp, #36	; 0x24
 800766c:	af04      	add	r7, sp, #16
 800766e:	6078      	str	r0, [r7, #4]
 8007670:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	695b      	ldr	r3, [r3, #20]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d020      	beq.n	80076bc <osThreadCreate+0x54>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d01c      	beq.n	80076bc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685c      	ldr	r4, [r3, #4]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	691e      	ldr	r6, [r3, #16]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff ffc9 	bl	800762c <makeFreeRtosPriority>
 800769a:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076a4:	9202      	str	r2, [sp, #8]
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	9100      	str	r1, [sp, #0]
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	4632      	mov	r2, r6
 80076ae:	4629      	mov	r1, r5
 80076b0:	4620      	mov	r0, r4
 80076b2:	f000 f8e8 	bl	8007886 <xTaskCreateStatic>
 80076b6:	4603      	mov	r3, r0
 80076b8:	60fb      	str	r3, [r7, #12]
 80076ba:	e01c      	b.n	80076f6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685c      	ldr	r4, [r3, #4]
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076c8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076d0:	4618      	mov	r0, r3
 80076d2:	f7ff ffab 	bl	800762c <makeFreeRtosPriority>
 80076d6:	4602      	mov	r2, r0
 80076d8:	f107 030c 	add.w	r3, r7, #12
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	9200      	str	r2, [sp, #0]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	4632      	mov	r2, r6
 80076e4:	4629      	mov	r1, r5
 80076e6:	4620      	mov	r0, r4
 80076e8:	f000 f929 	bl	800793e <xTaskCreate>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d001      	beq.n	80076f6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80076f2:	2300      	movs	r3, #0
 80076f4:	e000      	b.n	80076f8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80076f6:	68fb      	ldr	r3, [r7, #12]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3714      	adds	r7, #20
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007700 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <osDelay+0x16>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	e000      	b.n	8007718 <osDelay+0x18>
 8007716:	2301      	movs	r3, #1
 8007718:	4618      	mov	r0, r3
 800771a:	f000 fa55 	bl	8007bc8 <vTaskDelay>
  
  return osOK;
 800771e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f103 0208 	add.w	r2, r3, #8
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f04f 32ff 	mov.w	r2, #4294967295
 8007740:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f103 0208 	add.w	r2, r3, #8
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f103 0208 	add.w	r2, r3, #8
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	bc80      	pop	{r7}
 8007764:	4770      	bx	lr

08007766 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007766:	b480      	push	{r7}
 8007768:	b083      	sub	sp, #12
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2200      	movs	r2, #0
 8007772:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007774:	bf00      	nop
 8007776:	370c      	adds	r7, #12
 8007778:	46bd      	mov	sp, r7
 800777a:	bc80      	pop	{r7}
 800777c:	4770      	bx	lr

0800777e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800777e:	b480      	push	{r7}
 8007780:	b085      	sub	sp, #20
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	68fa      	ldr	r2, [r7, #12]
 8007792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	689a      	ldr	r2, [r3, #8]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	683a      	ldr	r2, [r7, #0]
 80077a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	1c5a      	adds	r2, r3, #1
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	601a      	str	r2, [r3, #0]
}
 80077ba:	bf00      	nop
 80077bc:	3714      	adds	r7, #20
 80077be:	46bd      	mov	sp, r7
 80077c0:	bc80      	pop	{r7}
 80077c2:	4770      	bx	lr

080077c4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077da:	d103      	bne.n	80077e4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	e00c      	b.n	80077fe <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	3308      	adds	r3, #8
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	e002      	b.n	80077f2 <vListInsert+0x2e>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	60fb      	str	r3, [r7, #12]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d2f6      	bcs.n	80077ec <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	685a      	ldr	r2, [r3, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	68fa      	ldr	r2, [r7, #12]
 8007812:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	687a      	ldr	r2, [r7, #4]
 800781e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	601a      	str	r2, [r3, #0]
}
 800782a:	bf00      	nop
 800782c:	3714      	adds	r7, #20
 800782e:	46bd      	mov	sp, r7
 8007830:	bc80      	pop	{r7}
 8007832:	4770      	bx	lr

08007834 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	6892      	ldr	r2, [r2, #8]
 800784a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	689b      	ldr	r3, [r3, #8]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	6852      	ldr	r2, [r2, #4]
 8007854:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	429a      	cmp	r2, r3
 800785e:	d103      	bne.n	8007868 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	689a      	ldr	r2, [r3, #8]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2200      	movs	r2, #0
 800786c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	1e5a      	subs	r2, r3, #1
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	bc80      	pop	{r7}
 8007884:	4770      	bx	lr

08007886 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007886:	b580      	push	{r7, lr}
 8007888:	b08e      	sub	sp, #56	; 0x38
 800788a:	af04      	add	r7, sp, #16
 800788c:	60f8      	str	r0, [r7, #12]
 800788e:	60b9      	str	r1, [r7, #8]
 8007890:	607a      	str	r2, [r7, #4]
 8007892:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10a      	bne.n	80078b0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	f383 8811 	msr	BASEPRI, r3
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	f3bf 8f4f 	dsb	sy
 80078aa:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80078ac:	bf00      	nop
 80078ae:	e7fe      	b.n	80078ae <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10a      	bne.n	80078cc <xTaskCreateStatic+0x46>
	__asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	f383 8811 	msr	BASEPRI, r3
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	61fb      	str	r3, [r7, #28]
}
 80078c8:	bf00      	nop
 80078ca:	e7fe      	b.n	80078ca <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078cc:	23a0      	movs	r3, #160	; 0xa0
 80078ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	2ba0      	cmp	r3, #160	; 0xa0
 80078d4:	d00a      	beq.n	80078ec <xTaskCreateStatic+0x66>
	__asm volatile
 80078d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078da:	f383 8811 	msr	BASEPRI, r3
 80078de:	f3bf 8f6f 	isb	sy
 80078e2:	f3bf 8f4f 	dsb	sy
 80078e6:	61bb      	str	r3, [r7, #24]
}
 80078e8:	bf00      	nop
 80078ea:	e7fe      	b.n	80078ea <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d01e      	beq.n	8007930 <xTaskCreateStatic+0xaa>
 80078f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d01b      	beq.n	8007930 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007900:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007904:	2202      	movs	r2, #2
 8007906:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800790a:	2300      	movs	r3, #0
 800790c:	9303      	str	r3, [sp, #12]
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	9302      	str	r3, [sp, #8]
 8007912:	f107 0314 	add.w	r3, r7, #20
 8007916:	9301      	str	r3, [sp, #4]
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	68b9      	ldr	r1, [r7, #8]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 f850 	bl	80079c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007928:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800792a:	f000 f8e3 	bl	8007af4 <prvAddNewTaskToReadyList>
 800792e:	e001      	b.n	8007934 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007934:	697b      	ldr	r3, [r7, #20]
	}
 8007936:	4618      	mov	r0, r3
 8007938:	3728      	adds	r7, #40	; 0x28
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800793e:	b580      	push	{r7, lr}
 8007940:	b08c      	sub	sp, #48	; 0x30
 8007942:	af04      	add	r7, sp, #16
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	60b9      	str	r1, [r7, #8]
 8007948:	603b      	str	r3, [r7, #0]
 800794a:	4613      	mov	r3, r2
 800794c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800794e:	88fb      	ldrh	r3, [r7, #6]
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fe94 	bl	8008680 <pvPortMalloc>
 8007958:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00e      	beq.n	800797e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007960:	20a0      	movs	r0, #160	; 0xa0
 8007962:	f000 fe8d 	bl	8008680 <pvPortMalloc>
 8007966:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d003      	beq.n	8007976 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	631a      	str	r2, [r3, #48]	; 0x30
 8007974:	e005      	b.n	8007982 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007976:	6978      	ldr	r0, [r7, #20]
 8007978:	f000 ff46 	bl	8008808 <vPortFree>
 800797c:	e001      	b.n	8007982 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800797e:	2300      	movs	r3, #0
 8007980:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d017      	beq.n	80079b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007990:	88fa      	ldrh	r2, [r7, #6]
 8007992:	2300      	movs	r3, #0
 8007994:	9303      	str	r3, [sp, #12]
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	9302      	str	r3, [sp, #8]
 800799a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800799c:	9301      	str	r3, [sp, #4]
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	68b9      	ldr	r1, [r7, #8]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f80e 	bl	80079c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80079ac:	69f8      	ldr	r0, [r7, #28]
 80079ae:	f000 f8a1 	bl	8007af4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079b2:	2301      	movs	r3, #1
 80079b4:	61bb      	str	r3, [r7, #24]
 80079b6:	e002      	b.n	80079be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079b8:	f04f 33ff 	mov.w	r3, #4294967295
 80079bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079be:	69bb      	ldr	r3, [r7, #24]
	}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3720      	adds	r7, #32
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
 80079d4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80079d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079e0:	3b01      	subs	r3, #1
 80079e2:	009b      	lsls	r3, r3, #2
 80079e4:	4413      	add	r3, r2
 80079e6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80079e8:	69bb      	ldr	r3, [r7, #24]
 80079ea:	f023 0307 	bic.w	r3, r3, #7
 80079ee:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	f003 0307 	and.w	r3, r3, #7
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d00a      	beq.n	8007a10 <prvInitialiseNewTask+0x48>
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	617b      	str	r3, [r7, #20]
}
 8007a0c:	bf00      	nop
 8007a0e:	e7fe      	b.n	8007a0e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a10:	2300      	movs	r3, #0
 8007a12:	61fb      	str	r3, [r7, #28]
 8007a14:	e012      	b.n	8007a3c <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a16:	68ba      	ldr	r2, [r7, #8]
 8007a18:	69fb      	ldr	r3, [r7, #28]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	7819      	ldrb	r1, [r3, #0]
 8007a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	4413      	add	r3, r2
 8007a24:	3334      	adds	r3, #52	; 0x34
 8007a26:	460a      	mov	r2, r1
 8007a28:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	4413      	add	r3, r2
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d006      	beq.n	8007a44 <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a36:	69fb      	ldr	r3, [r7, #28]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	61fb      	str	r3, [r7, #28]
 8007a3c:	69fb      	ldr	r3, [r7, #28]
 8007a3e:	2b0f      	cmp	r3, #15
 8007a40:	d9e9      	bls.n	8007a16 <prvInitialiseNewTask+0x4e>
 8007a42:	e000      	b.n	8007a46 <prvInitialiseNewTask+0x7e>
		{
			break;
 8007a44:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a48:	2200      	movs	r2, #0
 8007a4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a50:	2b06      	cmp	r3, #6
 8007a52:	d901      	bls.n	8007a58 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a54:	2306      	movs	r3, #6
 8007a56:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a5c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a62:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a66:	2200      	movs	r2, #0
 8007a68:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff fe79 	bl	8007766 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a76:	3318      	adds	r3, #24
 8007a78:	4618      	mov	r0, r3
 8007a7a:	f7ff fe74 	bl	8007766 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a82:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a86:	f1c3 0207 	rsb	r2, r3, #7
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a92:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a96:	2200      	movs	r2, #0
 8007a98:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa6:	334c      	adds	r3, #76	; 0x4c
 8007aa8:	224c      	movs	r2, #76	; 0x4c
 8007aaa:	2100      	movs	r1, #0
 8007aac:	4618      	mov	r0, r3
 8007aae:	f001 fd42 	bl	8009536 <memset>
 8007ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ab4:	4a0c      	ldr	r2, [pc, #48]	; (8007ae8 <prvInitialiseNewTask+0x120>)
 8007ab6:	651a      	str	r2, [r3, #80]	; 0x50
 8007ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aba:	4a0c      	ldr	r2, [pc, #48]	; (8007aec <prvInitialiseNewTask+0x124>)
 8007abc:	655a      	str	r2, [r3, #84]	; 0x54
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	4a0b      	ldr	r2, [pc, #44]	; (8007af0 <prvInitialiseNewTask+0x128>)
 8007ac2:	659a      	str	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007ac4:	683a      	ldr	r2, [r7, #0]
 8007ac6:	68f9      	ldr	r1, [r7, #12]
 8007ac8:	69b8      	ldr	r0, [r7, #24]
 8007aca:	f000 fc29 	bl	8008320 <pxPortInitialiseStack>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007adc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ade:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ae0:	bf00      	nop
 8007ae2:	3720      	adds	r7, #32
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}
 8007ae8:	2000154c 	.word	0x2000154c
 8007aec:	200015b4 	.word	0x200015b4
 8007af0:	2000161c 	.word	0x2000161c

08007af4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007afc:	f000 fcfe 	bl	80084fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007b00:	4b2a      	ldr	r3, [pc, #168]	; (8007bac <prvAddNewTaskToReadyList+0xb8>)
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	3301      	adds	r3, #1
 8007b06:	4a29      	ldr	r2, [pc, #164]	; (8007bac <prvAddNewTaskToReadyList+0xb8>)
 8007b08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007b0a:	4b29      	ldr	r3, [pc, #164]	; (8007bb0 <prvAddNewTaskToReadyList+0xbc>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d109      	bne.n	8007b26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007b12:	4a27      	ldr	r2, [pc, #156]	; (8007bb0 <prvAddNewTaskToReadyList+0xbc>)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007b18:	4b24      	ldr	r3, [pc, #144]	; (8007bac <prvAddNewTaskToReadyList+0xb8>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d110      	bne.n	8007b42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007b20:	f000 fad2 	bl	80080c8 <prvInitialiseTaskLists>
 8007b24:	e00d      	b.n	8007b42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007b26:	4b23      	ldr	r3, [pc, #140]	; (8007bb4 <prvAddNewTaskToReadyList+0xc0>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d109      	bne.n	8007b42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007b2e:	4b20      	ldr	r3, [pc, #128]	; (8007bb0 <prvAddNewTaskToReadyList+0xbc>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	429a      	cmp	r2, r3
 8007b3a:	d802      	bhi.n	8007b42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b3c:	4a1c      	ldr	r2, [pc, #112]	; (8007bb0 <prvAddNewTaskToReadyList+0xbc>)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b42:	4b1d      	ldr	r3, [pc, #116]	; (8007bb8 <prvAddNewTaskToReadyList+0xc4>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	3301      	adds	r3, #1
 8007b48:	4a1b      	ldr	r2, [pc, #108]	; (8007bb8 <prvAddNewTaskToReadyList+0xc4>)
 8007b4a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b50:	2201      	movs	r2, #1
 8007b52:	409a      	lsls	r2, r3
 8007b54:	4b19      	ldr	r3, [pc, #100]	; (8007bbc <prvAddNewTaskToReadyList+0xc8>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	4a18      	ldr	r2, [pc, #96]	; (8007bbc <prvAddNewTaskToReadyList+0xc8>)
 8007b5c:	6013      	str	r3, [r2, #0]
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4a15      	ldr	r2, [pc, #84]	; (8007bc0 <prvAddNewTaskToReadyList+0xcc>)
 8007b6c:	441a      	add	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3304      	adds	r3, #4
 8007b72:	4619      	mov	r1, r3
 8007b74:	4610      	mov	r0, r2
 8007b76:	f7ff fe02 	bl	800777e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b7a:	f000 fcef 	bl	800855c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b7e:	4b0d      	ldr	r3, [pc, #52]	; (8007bb4 <prvAddNewTaskToReadyList+0xc0>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d00e      	beq.n	8007ba4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b86:	4b0a      	ldr	r3, [pc, #40]	; (8007bb0 <prvAddNewTaskToReadyList+0xbc>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d207      	bcs.n	8007ba4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b94:	4b0b      	ldr	r3, [pc, #44]	; (8007bc4 <prvAddNewTaskToReadyList+0xd0>)
 8007b96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b9a:	601a      	str	r2, [r3, #0]
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ba4:	bf00      	nop
 8007ba6:	3708      	adds	r7, #8
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20000900 	.word	0x20000900
 8007bb0:	20000800 	.word	0x20000800
 8007bb4:	2000090c 	.word	0x2000090c
 8007bb8:	2000091c 	.word	0x2000091c
 8007bbc:	20000908 	.word	0x20000908
 8007bc0:	20000804 	.word	0x20000804
 8007bc4:	e000ed04 	.word	0xe000ed04

08007bc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d017      	beq.n	8007c0a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007bda:	4b13      	ldr	r3, [pc, #76]	; (8007c28 <vTaskDelay+0x60>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00a      	beq.n	8007bf8 <vTaskDelay+0x30>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	60bb      	str	r3, [r7, #8]
}
 8007bf4:	bf00      	nop
 8007bf6:	e7fe      	b.n	8007bf6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bf8:	f000 f884 	bl	8007d04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 fb28 	bl	8008254 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007c04:	f000 f88c 	bl	8007d20 <xTaskResumeAll>
 8007c08:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d107      	bne.n	8007c20 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007c10:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <vTaskDelay+0x64>)
 8007c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c16:	601a      	str	r2, [r3, #0]
 8007c18:	f3bf 8f4f 	dsb	sy
 8007c1c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007c20:	bf00      	nop
 8007c22:	3710      	adds	r7, #16
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}
 8007c28:	20000928 	.word	0x20000928
 8007c2c:	e000ed04 	.word	0xe000ed04

08007c30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b08a      	sub	sp, #40	; 0x28
 8007c34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c3e:	463a      	mov	r2, r7
 8007c40:	1d39      	adds	r1, r7, #4
 8007c42:	f107 0308 	add.w	r3, r7, #8
 8007c46:	4618      	mov	r0, r3
 8007c48:	f7fb f904 	bl	8002e54 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c4c:	6839      	ldr	r1, [r7, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	9202      	str	r2, [sp, #8]
 8007c54:	9301      	str	r3, [sp, #4]
 8007c56:	2300      	movs	r3, #0
 8007c58:	9300      	str	r3, [sp, #0]
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	460a      	mov	r2, r1
 8007c5e:	4921      	ldr	r1, [pc, #132]	; (8007ce4 <vTaskStartScheduler+0xb4>)
 8007c60:	4821      	ldr	r0, [pc, #132]	; (8007ce8 <vTaskStartScheduler+0xb8>)
 8007c62:	f7ff fe10 	bl	8007886 <xTaskCreateStatic>
 8007c66:	4603      	mov	r3, r0
 8007c68:	4a20      	ldr	r2, [pc, #128]	; (8007cec <vTaskStartScheduler+0xbc>)
 8007c6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c6c:	4b1f      	ldr	r3, [pc, #124]	; (8007cec <vTaskStartScheduler+0xbc>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c74:	2301      	movs	r3, #1
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	e001      	b.n	8007c7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	2b01      	cmp	r3, #1
 8007c82:	d11b      	bne.n	8007cbc <vTaskStartScheduler+0x8c>
	__asm volatile
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	613b      	str	r3, [r7, #16]
}
 8007c96:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007c98:	4b15      	ldr	r3, [pc, #84]	; (8007cf0 <vTaskStartScheduler+0xc0>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	334c      	adds	r3, #76	; 0x4c
 8007c9e:	4a15      	ldr	r2, [pc, #84]	; (8007cf4 <vTaskStartScheduler+0xc4>)
 8007ca0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007ca2:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <vTaskStartScheduler+0xc8>)
 8007ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007caa:	4b14      	ldr	r3, [pc, #80]	; (8007cfc <vTaskStartScheduler+0xcc>)
 8007cac:	2201      	movs	r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007cb0:	4b13      	ldr	r3, [pc, #76]	; (8007d00 <vTaskStartScheduler+0xd0>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007cb6:	f000 fbaf 	bl	8008418 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007cba:	e00e      	b.n	8007cda <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc2:	d10a      	bne.n	8007cda <vTaskStartScheduler+0xaa>
	__asm volatile
 8007cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc8:	f383 8811 	msr	BASEPRI, r3
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f3bf 8f4f 	dsb	sy
 8007cd4:	60fb      	str	r3, [r7, #12]
}
 8007cd6:	bf00      	nop
 8007cd8:	e7fe      	b.n	8007cd8 <vTaskStartScheduler+0xa8>
}
 8007cda:	bf00      	nop
 8007cdc:	3718      	adds	r7, #24
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
 8007ce2:	bf00      	nop
 8007ce4:	0800ba90 	.word	0x0800ba90
 8007ce8:	08008099 	.word	0x08008099
 8007cec:	20000924 	.word	0x20000924
 8007cf0:	20000800 	.word	0x20000800
 8007cf4:	20000068 	.word	0x20000068
 8007cf8:	20000920 	.word	0x20000920
 8007cfc:	2000090c 	.word	0x2000090c
 8007d00:	20000904 	.word	0x20000904

08007d04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007d04:	b480      	push	{r7}
 8007d06:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007d08:	4b04      	ldr	r3, [pc, #16]	; (8007d1c <vTaskSuspendAll+0x18>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	4a03      	ldr	r2, [pc, #12]	; (8007d1c <vTaskSuspendAll+0x18>)
 8007d10:	6013      	str	r3, [r2, #0]
}
 8007d12:	bf00      	nop
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bc80      	pop	{r7}
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	20000928 	.word	0x20000928

08007d20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007d26:	2300      	movs	r3, #0
 8007d28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007d2e:	4b41      	ldr	r3, [pc, #260]	; (8007e34 <xTaskResumeAll+0x114>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10a      	bne.n	8007d4c <xTaskResumeAll+0x2c>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	603b      	str	r3, [r7, #0]
}
 8007d48:	bf00      	nop
 8007d4a:	e7fe      	b.n	8007d4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d4c:	f000 fbd6 	bl	80084fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d50:	4b38      	ldr	r3, [pc, #224]	; (8007e34 <xTaskResumeAll+0x114>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	4a37      	ldr	r2, [pc, #220]	; (8007e34 <xTaskResumeAll+0x114>)
 8007d58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d5a:	4b36      	ldr	r3, [pc, #216]	; (8007e34 <xTaskResumeAll+0x114>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d161      	bne.n	8007e26 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d62:	4b35      	ldr	r3, [pc, #212]	; (8007e38 <xTaskResumeAll+0x118>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d05d      	beq.n	8007e26 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d6a:	e02e      	b.n	8007dca <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007d6c:	4b33      	ldr	r3, [pc, #204]	; (8007e3c <xTaskResumeAll+0x11c>)
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	68db      	ldr	r3, [r3, #12]
 8007d72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	3318      	adds	r3, #24
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7ff fd5b 	bl	8007834 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	3304      	adds	r3, #4
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7ff fd56 	bl	8007834 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	409a      	lsls	r2, r3
 8007d90:	4b2b      	ldr	r3, [pc, #172]	; (8007e40 <xTaskResumeAll+0x120>)
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	4a2a      	ldr	r2, [pc, #168]	; (8007e40 <xTaskResumeAll+0x120>)
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9e:	4613      	mov	r3, r2
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	009b      	lsls	r3, r3, #2
 8007da6:	4a27      	ldr	r2, [pc, #156]	; (8007e44 <xTaskResumeAll+0x124>)
 8007da8:	441a      	add	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	3304      	adds	r3, #4
 8007dae:	4619      	mov	r1, r3
 8007db0:	4610      	mov	r0, r2
 8007db2:	f7ff fce4 	bl	800777e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dba:	4b23      	ldr	r3, [pc, #140]	; (8007e48 <xTaskResumeAll+0x128>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d302      	bcc.n	8007dca <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007dc4:	4b21      	ldr	r3, [pc, #132]	; (8007e4c <xTaskResumeAll+0x12c>)
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007dca:	4b1c      	ldr	r3, [pc, #112]	; (8007e3c <xTaskResumeAll+0x11c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1cc      	bne.n	8007d6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007dd8:	f000 fa18 	bl	800820c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007ddc:	4b1c      	ldr	r3, [pc, #112]	; (8007e50 <xTaskResumeAll+0x130>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d010      	beq.n	8007e0a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007de8:	f000 f836 	bl	8007e58 <xTaskIncrementTick>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d002      	beq.n	8007df8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007df2:	4b16      	ldr	r3, [pc, #88]	; (8007e4c <xTaskResumeAll+0x12c>)
 8007df4:	2201      	movs	r2, #1
 8007df6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1f1      	bne.n	8007de8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007e04:	4b12      	ldr	r3, [pc, #72]	; (8007e50 <xTaskResumeAll+0x130>)
 8007e06:	2200      	movs	r2, #0
 8007e08:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007e0a:	4b10      	ldr	r3, [pc, #64]	; (8007e4c <xTaskResumeAll+0x12c>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d009      	beq.n	8007e26 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007e12:	2301      	movs	r3, #1
 8007e14:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007e16:	4b0f      	ldr	r3, [pc, #60]	; (8007e54 <xTaskResumeAll+0x134>)
 8007e18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e1c:	601a      	str	r2, [r3, #0]
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e26:	f000 fb99 	bl	800855c <vPortExitCritical>

	return xAlreadyYielded;
 8007e2a:	68bb      	ldr	r3, [r7, #8]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	20000928 	.word	0x20000928
 8007e38:	20000900 	.word	0x20000900
 8007e3c:	200008c0 	.word	0x200008c0
 8007e40:	20000908 	.word	0x20000908
 8007e44:	20000804 	.word	0x20000804
 8007e48:	20000800 	.word	0x20000800
 8007e4c:	20000914 	.word	0x20000914
 8007e50:	20000910 	.word	0x20000910
 8007e54:	e000ed04 	.word	0xe000ed04

08007e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e62:	4b51      	ldr	r3, [pc, #324]	; (8007fa8 <xTaskIncrementTick+0x150>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f040 808d 	bne.w	8007f86 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e6c:	4b4f      	ldr	r3, [pc, #316]	; (8007fac <xTaskIncrementTick+0x154>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3301      	adds	r3, #1
 8007e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e74:	4a4d      	ldr	r2, [pc, #308]	; (8007fac <xTaskIncrementTick+0x154>)
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d120      	bne.n	8007ec2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e80:	4b4b      	ldr	r3, [pc, #300]	; (8007fb0 <xTaskIncrementTick+0x158>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d00a      	beq.n	8007ea0 <xTaskIncrementTick+0x48>
	__asm volatile
 8007e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e8e:	f383 8811 	msr	BASEPRI, r3
 8007e92:	f3bf 8f6f 	isb	sy
 8007e96:	f3bf 8f4f 	dsb	sy
 8007e9a:	603b      	str	r3, [r7, #0]
}
 8007e9c:	bf00      	nop
 8007e9e:	e7fe      	b.n	8007e9e <xTaskIncrementTick+0x46>
 8007ea0:	4b43      	ldr	r3, [pc, #268]	; (8007fb0 <xTaskIncrementTick+0x158>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	60fb      	str	r3, [r7, #12]
 8007ea6:	4b43      	ldr	r3, [pc, #268]	; (8007fb4 <xTaskIncrementTick+0x15c>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a41      	ldr	r2, [pc, #260]	; (8007fb0 <xTaskIncrementTick+0x158>)
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	4a41      	ldr	r2, [pc, #260]	; (8007fb4 <xTaskIncrementTick+0x15c>)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	6013      	str	r3, [r2, #0]
 8007eb4:	4b40      	ldr	r3, [pc, #256]	; (8007fb8 <xTaskIncrementTick+0x160>)
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	3301      	adds	r3, #1
 8007eba:	4a3f      	ldr	r2, [pc, #252]	; (8007fb8 <xTaskIncrementTick+0x160>)
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	f000 f9a5 	bl	800820c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ec2:	4b3e      	ldr	r3, [pc, #248]	; (8007fbc <xTaskIncrementTick+0x164>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	693a      	ldr	r2, [r7, #16]
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d34d      	bcc.n	8007f68 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ecc:	4b38      	ldr	r3, [pc, #224]	; (8007fb0 <xTaskIncrementTick+0x158>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <xTaskIncrementTick+0x82>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e000      	b.n	8007edc <xTaskIncrementTick+0x84>
 8007eda:	2300      	movs	r3, #0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d004      	beq.n	8007eea <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ee0:	4b36      	ldr	r3, [pc, #216]	; (8007fbc <xTaskIncrementTick+0x164>)
 8007ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ee6:	601a      	str	r2, [r3, #0]
					break;
 8007ee8:	e03e      	b.n	8007f68 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007eea:	4b31      	ldr	r3, [pc, #196]	; (8007fb0 <xTaskIncrementTick+0x158>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	68db      	ldr	r3, [r3, #12]
 8007ef2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d203      	bcs.n	8007f0a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007f02:	4a2e      	ldr	r2, [pc, #184]	; (8007fbc <xTaskIncrementTick+0x164>)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6013      	str	r3, [r2, #0]
						break;
 8007f08:	e02e      	b.n	8007f68 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	3304      	adds	r3, #4
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff fc90 	bl	8007834 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d004      	beq.n	8007f26 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	3318      	adds	r3, #24
 8007f20:	4618      	mov	r0, r3
 8007f22:	f7ff fc87 	bl	8007834 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	409a      	lsls	r2, r3
 8007f2e:	4b24      	ldr	r3, [pc, #144]	; (8007fc0 <xTaskIncrementTick+0x168>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	4a22      	ldr	r2, [pc, #136]	; (8007fc0 <xTaskIncrementTick+0x168>)
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f3c:	4613      	mov	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	4413      	add	r3, r2
 8007f42:	009b      	lsls	r3, r3, #2
 8007f44:	4a1f      	ldr	r2, [pc, #124]	; (8007fc4 <xTaskIncrementTick+0x16c>)
 8007f46:	441a      	add	r2, r3
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	3304      	adds	r3, #4
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	4610      	mov	r0, r2
 8007f50:	f7ff fc15 	bl	800777e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f58:	4b1b      	ldr	r3, [pc, #108]	; (8007fc8 <xTaskIncrementTick+0x170>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d3b4      	bcc.n	8007ecc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f62:	2301      	movs	r3, #1
 8007f64:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f66:	e7b1      	b.n	8007ecc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f68:	4b17      	ldr	r3, [pc, #92]	; (8007fc8 <xTaskIncrementTick+0x170>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f6e:	4915      	ldr	r1, [pc, #84]	; (8007fc4 <xTaskIncrementTick+0x16c>)
 8007f70:	4613      	mov	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	4413      	add	r3, r2
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d907      	bls.n	8007f90 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007f80:	2301      	movs	r3, #1
 8007f82:	617b      	str	r3, [r7, #20]
 8007f84:	e004      	b.n	8007f90 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007f86:	4b11      	ldr	r3, [pc, #68]	; (8007fcc <xTaskIncrementTick+0x174>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	4a0f      	ldr	r2, [pc, #60]	; (8007fcc <xTaskIncrementTick+0x174>)
 8007f8e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007f90:	4b0f      	ldr	r3, [pc, #60]	; (8007fd0 <xTaskIncrementTick+0x178>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007f9c:	697b      	ldr	r3, [r7, #20]
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3718      	adds	r7, #24
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	20000928 	.word	0x20000928
 8007fac:	20000904 	.word	0x20000904
 8007fb0:	200008b8 	.word	0x200008b8
 8007fb4:	200008bc 	.word	0x200008bc
 8007fb8:	20000918 	.word	0x20000918
 8007fbc:	20000920 	.word	0x20000920
 8007fc0:	20000908 	.word	0x20000908
 8007fc4:	20000804 	.word	0x20000804
 8007fc8:	20000800 	.word	0x20000800
 8007fcc:	20000910 	.word	0x20000910
 8007fd0:	20000914 	.word	0x20000914

08007fd4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b087      	sub	sp, #28
 8007fd8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007fda:	4b29      	ldr	r3, [pc, #164]	; (8008080 <vTaskSwitchContext+0xac>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d003      	beq.n	8007fea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007fe2:	4b28      	ldr	r3, [pc, #160]	; (8008084 <vTaskSwitchContext+0xb0>)
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007fe8:	e044      	b.n	8008074 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007fea:	4b26      	ldr	r3, [pc, #152]	; (8008084 <vTaskSwitchContext+0xb0>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007ff0:	4b25      	ldr	r3, [pc, #148]	; (8008088 <vTaskSwitchContext+0xb4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	fab3 f383 	clz	r3, r3
 8007ffc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007ffe:	7afb      	ldrb	r3, [r7, #11]
 8008000:	f1c3 031f 	rsb	r3, r3, #31
 8008004:	617b      	str	r3, [r7, #20]
 8008006:	4921      	ldr	r1, [pc, #132]	; (800808c <vTaskSwitchContext+0xb8>)
 8008008:	697a      	ldr	r2, [r7, #20]
 800800a:	4613      	mov	r3, r2
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	440b      	add	r3, r1
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d10a      	bne.n	8008030 <vTaskSwitchContext+0x5c>
	__asm volatile
 800801a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800801e:	f383 8811 	msr	BASEPRI, r3
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	f3bf 8f4f 	dsb	sy
 800802a:	607b      	str	r3, [r7, #4]
}
 800802c:	bf00      	nop
 800802e:	e7fe      	b.n	800802e <vTaskSwitchContext+0x5a>
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	4613      	mov	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	4413      	add	r3, r2
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	4a14      	ldr	r2, [pc, #80]	; (800808c <vTaskSwitchContext+0xb8>)
 800803c:	4413      	add	r3, r2
 800803e:	613b      	str	r3, [r7, #16]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	685b      	ldr	r3, [r3, #4]
 8008044:	685a      	ldr	r2, [r3, #4]
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	605a      	str	r2, [r3, #4]
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	685a      	ldr	r2, [r3, #4]
 800804e:	693b      	ldr	r3, [r7, #16]
 8008050:	3308      	adds	r3, #8
 8008052:	429a      	cmp	r2, r3
 8008054:	d104      	bne.n	8008060 <vTaskSwitchContext+0x8c>
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	605a      	str	r2, [r3, #4]
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	68db      	ldr	r3, [r3, #12]
 8008066:	4a0a      	ldr	r2, [pc, #40]	; (8008090 <vTaskSwitchContext+0xbc>)
 8008068:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800806a:	4b09      	ldr	r3, [pc, #36]	; (8008090 <vTaskSwitchContext+0xbc>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	334c      	adds	r3, #76	; 0x4c
 8008070:	4a08      	ldr	r2, [pc, #32]	; (8008094 <vTaskSwitchContext+0xc0>)
 8008072:	6013      	str	r3, [r2, #0]
}
 8008074:	bf00      	nop
 8008076:	371c      	adds	r7, #28
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	20000928 	.word	0x20000928
 8008084:	20000914 	.word	0x20000914
 8008088:	20000908 	.word	0x20000908
 800808c:	20000804 	.word	0x20000804
 8008090:	20000800 	.word	0x20000800
 8008094:	20000068 	.word	0x20000068

08008098 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b082      	sub	sp, #8
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080a0:	f000 f852 	bl	8008148 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080a4:	4b06      	ldr	r3, [pc, #24]	; (80080c0 <prvIdleTask+0x28>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d9f9      	bls.n	80080a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80080ac:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <prvIdleTask+0x2c>)
 80080ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80080bc:	e7f0      	b.n	80080a0 <prvIdleTask+0x8>
 80080be:	bf00      	nop
 80080c0:	20000804 	.word	0x20000804
 80080c4:	e000ed04 	.word	0xe000ed04

080080c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080ce:	2300      	movs	r3, #0
 80080d0:	607b      	str	r3, [r7, #4]
 80080d2:	e00c      	b.n	80080ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4a12      	ldr	r2, [pc, #72]	; (8008128 <prvInitialiseTaskLists+0x60>)
 80080e0:	4413      	add	r3, r2
 80080e2:	4618      	mov	r0, r3
 80080e4:	f7ff fb20 	bl	8007728 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3301      	adds	r3, #1
 80080ec:	607b      	str	r3, [r7, #4]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2b06      	cmp	r3, #6
 80080f2:	d9ef      	bls.n	80080d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80080f4:	480d      	ldr	r0, [pc, #52]	; (800812c <prvInitialiseTaskLists+0x64>)
 80080f6:	f7ff fb17 	bl	8007728 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80080fa:	480d      	ldr	r0, [pc, #52]	; (8008130 <prvInitialiseTaskLists+0x68>)
 80080fc:	f7ff fb14 	bl	8007728 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008100:	480c      	ldr	r0, [pc, #48]	; (8008134 <prvInitialiseTaskLists+0x6c>)
 8008102:	f7ff fb11 	bl	8007728 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008106:	480c      	ldr	r0, [pc, #48]	; (8008138 <prvInitialiseTaskLists+0x70>)
 8008108:	f7ff fb0e 	bl	8007728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800810c:	480b      	ldr	r0, [pc, #44]	; (800813c <prvInitialiseTaskLists+0x74>)
 800810e:	f7ff fb0b 	bl	8007728 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008112:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <prvInitialiseTaskLists+0x78>)
 8008114:	4a05      	ldr	r2, [pc, #20]	; (800812c <prvInitialiseTaskLists+0x64>)
 8008116:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008118:	4b0a      	ldr	r3, [pc, #40]	; (8008144 <prvInitialiseTaskLists+0x7c>)
 800811a:	4a05      	ldr	r2, [pc, #20]	; (8008130 <prvInitialiseTaskLists+0x68>)
 800811c:	601a      	str	r2, [r3, #0]
}
 800811e:	bf00      	nop
 8008120:	3708      	adds	r7, #8
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	20000804 	.word	0x20000804
 800812c:	20000890 	.word	0x20000890
 8008130:	200008a4 	.word	0x200008a4
 8008134:	200008c0 	.word	0x200008c0
 8008138:	200008d4 	.word	0x200008d4
 800813c:	200008ec 	.word	0x200008ec
 8008140:	200008b8 	.word	0x200008b8
 8008144:	200008bc 	.word	0x200008bc

08008148 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800814e:	e019      	b.n	8008184 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008150:	f000 f9d4 	bl	80084fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008154:	4b10      	ldr	r3, [pc, #64]	; (8008198 <prvCheckTasksWaitingTermination+0x50>)
 8008156:	68db      	ldr	r3, [r3, #12]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	3304      	adds	r3, #4
 8008160:	4618      	mov	r0, r3
 8008162:	f7ff fb67 	bl	8007834 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008166:	4b0d      	ldr	r3, [pc, #52]	; (800819c <prvCheckTasksWaitingTermination+0x54>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	3b01      	subs	r3, #1
 800816c:	4a0b      	ldr	r2, [pc, #44]	; (800819c <prvCheckTasksWaitingTermination+0x54>)
 800816e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008170:	4b0b      	ldr	r3, [pc, #44]	; (80081a0 <prvCheckTasksWaitingTermination+0x58>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	3b01      	subs	r3, #1
 8008176:	4a0a      	ldr	r2, [pc, #40]	; (80081a0 <prvCheckTasksWaitingTermination+0x58>)
 8008178:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800817a:	f000 f9ef 	bl	800855c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f810 	bl	80081a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008184:	4b06      	ldr	r3, [pc, #24]	; (80081a0 <prvCheckTasksWaitingTermination+0x58>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d1e1      	bne.n	8008150 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800818c:	bf00      	nop
 800818e:	bf00      	nop
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	200008d4 	.word	0x200008d4
 800819c:	20000900 	.word	0x20000900
 80081a0:	200008e8 	.word	0x200008e8

080081a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	334c      	adds	r3, #76	; 0x4c
 80081b0:	4618      	mov	r0, r3
 80081b2:	f001 f9dd 	bl	8009570 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d108      	bne.n	80081d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c4:	4618      	mov	r0, r3
 80081c6:	f000 fb1f 	bl	8008808 <vPortFree>
				vPortFree( pxTCB );
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fb1c 	bl	8008808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80081d0:	e018      	b.n	8008204 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d103      	bne.n	80081e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f000 fb13 	bl	8008808 <vPortFree>
	}
 80081e2:	e00f      	b.n	8008204 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d00a      	beq.n	8008204 <prvDeleteTCB+0x60>
	__asm volatile
 80081ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f2:	f383 8811 	msr	BASEPRI, r3
 80081f6:	f3bf 8f6f 	isb	sy
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	60fb      	str	r3, [r7, #12]
}
 8008200:	bf00      	nop
 8008202:	e7fe      	b.n	8008202 <prvDeleteTCB+0x5e>
	}
 8008204:	bf00      	nop
 8008206:	3710      	adds	r7, #16
 8008208:	46bd      	mov	sp, r7
 800820a:	bd80      	pop	{r7, pc}

0800820c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800820c:	b480      	push	{r7}
 800820e:	b083      	sub	sp, #12
 8008210:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008212:	4b0e      	ldr	r3, [pc, #56]	; (800824c <prvResetNextTaskUnblockTime+0x40>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <prvResetNextTaskUnblockTime+0x14>
 800821c:	2301      	movs	r3, #1
 800821e:	e000      	b.n	8008222 <prvResetNextTaskUnblockTime+0x16>
 8008220:	2300      	movs	r3, #0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d004      	beq.n	8008230 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008226:	4b0a      	ldr	r3, [pc, #40]	; (8008250 <prvResetNextTaskUnblockTime+0x44>)
 8008228:	f04f 32ff 	mov.w	r2, #4294967295
 800822c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800822e:	e008      	b.n	8008242 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008230:	4b06      	ldr	r3, [pc, #24]	; (800824c <prvResetNextTaskUnblockTime+0x40>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	4a04      	ldr	r2, [pc, #16]	; (8008250 <prvResetNextTaskUnblockTime+0x44>)
 8008240:	6013      	str	r3, [r2, #0]
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	bc80      	pop	{r7}
 800824a:	4770      	bx	lr
 800824c:	200008b8 	.word	0x200008b8
 8008250:	20000920 	.word	0x20000920

08008254 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800825e:	4b29      	ldr	r3, [pc, #164]	; (8008304 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008264:	4b28      	ldr	r3, [pc, #160]	; (8008308 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	3304      	adds	r3, #4
 800826a:	4618      	mov	r0, r3
 800826c:	f7ff fae2 	bl	8007834 <uxListRemove>
 8008270:	4603      	mov	r3, r0
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10b      	bne.n	800828e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8008276:	4b24      	ldr	r3, [pc, #144]	; (8008308 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827c:	2201      	movs	r2, #1
 800827e:	fa02 f303 	lsl.w	r3, r2, r3
 8008282:	43da      	mvns	r2, r3
 8008284:	4b21      	ldr	r3, [pc, #132]	; (800830c <prvAddCurrentTaskToDelayedList+0xb8>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4013      	ands	r3, r2
 800828a:	4a20      	ldr	r2, [pc, #128]	; (800830c <prvAddCurrentTaskToDelayedList+0xb8>)
 800828c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008294:	d10a      	bne.n	80082ac <prvAddCurrentTaskToDelayedList+0x58>
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d007      	beq.n	80082ac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800829c:	4b1a      	ldr	r3, [pc, #104]	; (8008308 <prvAddCurrentTaskToDelayedList+0xb4>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3304      	adds	r3, #4
 80082a2:	4619      	mov	r1, r3
 80082a4:	481a      	ldr	r0, [pc, #104]	; (8008310 <prvAddCurrentTaskToDelayedList+0xbc>)
 80082a6:	f7ff fa6a 	bl	800777e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082aa:	e026      	b.n	80082fa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4413      	add	r3, r2
 80082b2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082b4:	4b14      	ldr	r3, [pc, #80]	; (8008308 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68ba      	ldr	r2, [r7, #8]
 80082ba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d209      	bcs.n	80082d8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082c4:	4b13      	ldr	r3, [pc, #76]	; (8008314 <prvAddCurrentTaskToDelayedList+0xc0>)
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	4b0f      	ldr	r3, [pc, #60]	; (8008308 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	3304      	adds	r3, #4
 80082ce:	4619      	mov	r1, r3
 80082d0:	4610      	mov	r0, r2
 80082d2:	f7ff fa77 	bl	80077c4 <vListInsert>
}
 80082d6:	e010      	b.n	80082fa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082d8:	4b0f      	ldr	r3, [pc, #60]	; (8008318 <prvAddCurrentTaskToDelayedList+0xc4>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	4b0a      	ldr	r3, [pc, #40]	; (8008308 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3304      	adds	r3, #4
 80082e2:	4619      	mov	r1, r3
 80082e4:	4610      	mov	r0, r2
 80082e6:	f7ff fa6d 	bl	80077c4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082ea:	4b0c      	ldr	r3, [pc, #48]	; (800831c <prvAddCurrentTaskToDelayedList+0xc8>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	429a      	cmp	r2, r3
 80082f2:	d202      	bcs.n	80082fa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80082f4:	4a09      	ldr	r2, [pc, #36]	; (800831c <prvAddCurrentTaskToDelayedList+0xc8>)
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6013      	str	r3, [r2, #0]
}
 80082fa:	bf00      	nop
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	20000904 	.word	0x20000904
 8008308:	20000800 	.word	0x20000800
 800830c:	20000908 	.word	0x20000908
 8008310:	200008ec 	.word	0x200008ec
 8008314:	200008bc 	.word	0x200008bc
 8008318:	200008b8 	.word	0x200008b8
 800831c:	20000920 	.word	0x20000920

08008320 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008320:	b480      	push	{r7}
 8008322:	b085      	sub	sp, #20
 8008324:	af00      	add	r7, sp, #0
 8008326:	60f8      	str	r0, [r7, #12]
 8008328:	60b9      	str	r1, [r7, #8]
 800832a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	3b04      	subs	r3, #4
 8008330:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008338:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	3b04      	subs	r3, #4
 800833e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f023 0201 	bic.w	r2, r3, #1
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3b04      	subs	r3, #4
 800834e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008350:	4a08      	ldr	r2, [pc, #32]	; (8008374 <pxPortInitialiseStack+0x54>)
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	3b14      	subs	r3, #20
 800835a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	3b20      	subs	r3, #32
 8008366:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008368:	68fb      	ldr	r3, [r7, #12]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3714      	adds	r7, #20
 800836e:	46bd      	mov	sp, r7
 8008370:	bc80      	pop	{r7}
 8008372:	4770      	bx	lr
 8008374:	08008379 	.word	0x08008379

08008378 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008378:	b480      	push	{r7}
 800837a:	b085      	sub	sp, #20
 800837c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800837e:	2300      	movs	r3, #0
 8008380:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008382:	4b12      	ldr	r3, [pc, #72]	; (80083cc <prvTaskExitError+0x54>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f1b3 3fff 	cmp.w	r3, #4294967295
 800838a:	d00a      	beq.n	80083a2 <prvTaskExitError+0x2a>
	__asm volatile
 800838c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008390:	f383 8811 	msr	BASEPRI, r3
 8008394:	f3bf 8f6f 	isb	sy
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	60fb      	str	r3, [r7, #12]
}
 800839e:	bf00      	nop
 80083a0:	e7fe      	b.n	80083a0 <prvTaskExitError+0x28>
	__asm volatile
 80083a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a6:	f383 8811 	msr	BASEPRI, r3
 80083aa:	f3bf 8f6f 	isb	sy
 80083ae:	f3bf 8f4f 	dsb	sy
 80083b2:	60bb      	str	r3, [r7, #8]
}
 80083b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80083b6:	bf00      	nop
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0fc      	beq.n	80083b8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80083be:	bf00      	nop
 80083c0:	bf00      	nop
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bc80      	pop	{r7}
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	2000000c 	.word	0x2000000c

080083d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <pxCurrentTCBConst2>)
 80083d2:	6819      	ldr	r1, [r3, #0]
 80083d4:	6808      	ldr	r0, [r1, #0]
 80083d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80083da:	f380 8809 	msr	PSP, r0
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f04f 0000 	mov.w	r0, #0
 80083e6:	f380 8811 	msr	BASEPRI, r0
 80083ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80083ee:	4770      	bx	lr

080083f0 <pxCurrentTCBConst2>:
 80083f0:	20000800 	.word	0x20000800
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083f4:	bf00      	nop
 80083f6:	bf00      	nop

080083f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80083f8:	4806      	ldr	r0, [pc, #24]	; (8008414 <prvPortStartFirstTask+0x1c>)
 80083fa:	6800      	ldr	r0, [r0, #0]
 80083fc:	6800      	ldr	r0, [r0, #0]
 80083fe:	f380 8808 	msr	MSP, r0
 8008402:	b662      	cpsie	i
 8008404:	b661      	cpsie	f
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	f3bf 8f6f 	isb	sy
 800840e:	df00      	svc	0
 8008410:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008412:	bf00      	nop
 8008414:	e000ed08 	.word	0xe000ed08

08008418 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800841e:	4b32      	ldr	r3, [pc, #200]	; (80084e8 <xPortStartScheduler+0xd0>)
 8008420:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	b2db      	uxtb	r3, r3
 8008428:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	22ff      	movs	r2, #255	; 0xff
 800842e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008438:	78fb      	ldrb	r3, [r7, #3]
 800843a:	b2db      	uxtb	r3, r3
 800843c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008440:	b2da      	uxtb	r2, r3
 8008442:	4b2a      	ldr	r3, [pc, #168]	; (80084ec <xPortStartScheduler+0xd4>)
 8008444:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008446:	4b2a      	ldr	r3, [pc, #168]	; (80084f0 <xPortStartScheduler+0xd8>)
 8008448:	2207      	movs	r2, #7
 800844a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800844c:	e009      	b.n	8008462 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800844e:	4b28      	ldr	r3, [pc, #160]	; (80084f0 <xPortStartScheduler+0xd8>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	3b01      	subs	r3, #1
 8008454:	4a26      	ldr	r2, [pc, #152]	; (80084f0 <xPortStartScheduler+0xd8>)
 8008456:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008458:	78fb      	ldrb	r3, [r7, #3]
 800845a:	b2db      	uxtb	r3, r3
 800845c:	005b      	lsls	r3, r3, #1
 800845e:	b2db      	uxtb	r3, r3
 8008460:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008462:	78fb      	ldrb	r3, [r7, #3]
 8008464:	b2db      	uxtb	r3, r3
 8008466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846a:	2b80      	cmp	r3, #128	; 0x80
 800846c:	d0ef      	beq.n	800844e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800846e:	4b20      	ldr	r3, [pc, #128]	; (80084f0 <xPortStartScheduler+0xd8>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f1c3 0307 	rsb	r3, r3, #7
 8008476:	2b04      	cmp	r3, #4
 8008478:	d00a      	beq.n	8008490 <xPortStartScheduler+0x78>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	60bb      	str	r3, [r7, #8]
}
 800848c:	bf00      	nop
 800848e:	e7fe      	b.n	800848e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008490:	4b17      	ldr	r3, [pc, #92]	; (80084f0 <xPortStartScheduler+0xd8>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	021b      	lsls	r3, r3, #8
 8008496:	4a16      	ldr	r2, [pc, #88]	; (80084f0 <xPortStartScheduler+0xd8>)
 8008498:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800849a:	4b15      	ldr	r3, [pc, #84]	; (80084f0 <xPortStartScheduler+0xd8>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084a2:	4a13      	ldr	r2, [pc, #76]	; (80084f0 <xPortStartScheduler+0xd8>)
 80084a4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	b2da      	uxtb	r2, r3
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084ae:	4b11      	ldr	r3, [pc, #68]	; (80084f4 <xPortStartScheduler+0xdc>)
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a10      	ldr	r2, [pc, #64]	; (80084f4 <xPortStartScheduler+0xdc>)
 80084b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084b8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084ba:	4b0e      	ldr	r3, [pc, #56]	; (80084f4 <xPortStartScheduler+0xdc>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a0d      	ldr	r2, [pc, #52]	; (80084f4 <xPortStartScheduler+0xdc>)
 80084c0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80084c4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084c6:	f000 f8b9 	bl	800863c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084ca:	4b0b      	ldr	r3, [pc, #44]	; (80084f8 <xPortStartScheduler+0xe0>)
 80084cc:	2200      	movs	r2, #0
 80084ce:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80084d0:	f7ff ff92 	bl	80083f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084d4:	f7ff fd7e 	bl	8007fd4 <vTaskSwitchContext>
	prvTaskExitError();
 80084d8:	f7ff ff4e 	bl	8008378 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084dc:	2300      	movs	r3, #0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	e000e400 	.word	0xe000e400
 80084ec:	2000092c 	.word	0x2000092c
 80084f0:	20000930 	.word	0x20000930
 80084f4:	e000ed20 	.word	0xe000ed20
 80084f8:	2000000c 	.word	0x2000000c

080084fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084fc:	b480      	push	{r7}
 80084fe:	b083      	sub	sp, #12
 8008500:	af00      	add	r7, sp, #0
	__asm volatile
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	607b      	str	r3, [r7, #4]
}
 8008514:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008516:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <vPortEnterCritical+0x58>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	3301      	adds	r3, #1
 800851c:	4a0d      	ldr	r2, [pc, #52]	; (8008554 <vPortEnterCritical+0x58>)
 800851e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008520:	4b0c      	ldr	r3, [pc, #48]	; (8008554 <vPortEnterCritical+0x58>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d10f      	bne.n	8008548 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008528:	4b0b      	ldr	r3, [pc, #44]	; (8008558 <vPortEnterCritical+0x5c>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <vPortEnterCritical+0x4c>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	603b      	str	r3, [r7, #0]
}
 8008544:	bf00      	nop
 8008546:	e7fe      	b.n	8008546 <vPortEnterCritical+0x4a>
	}
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	bc80      	pop	{r7}
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	2000000c 	.word	0x2000000c
 8008558:	e000ed04 	.word	0xe000ed04

0800855c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008562:	4b11      	ldr	r3, [pc, #68]	; (80085a8 <vPortExitCritical+0x4c>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d10a      	bne.n	8008580 <vPortExitCritical+0x24>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	607b      	str	r3, [r7, #4]
}
 800857c:	bf00      	nop
 800857e:	e7fe      	b.n	800857e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008580:	4b09      	ldr	r3, [pc, #36]	; (80085a8 <vPortExitCritical+0x4c>)
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	3b01      	subs	r3, #1
 8008586:	4a08      	ldr	r2, [pc, #32]	; (80085a8 <vPortExitCritical+0x4c>)
 8008588:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800858a:	4b07      	ldr	r3, [pc, #28]	; (80085a8 <vPortExitCritical+0x4c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d105      	bne.n	800859e <vPortExitCritical+0x42>
 8008592:	2300      	movs	r3, #0
 8008594:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800859c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800859e:	bf00      	nop
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bc80      	pop	{r7}
 80085a6:	4770      	bx	lr
 80085a8:	2000000c 	.word	0x2000000c
 80085ac:	00000000 	.word	0x00000000

080085b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80085b0:	f3ef 8009 	mrs	r0, PSP
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	4b0d      	ldr	r3, [pc, #52]	; (80085f0 <pxCurrentTCBConst>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085c0:	6010      	str	r0, [r2, #0]
 80085c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80085c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80085ca:	f380 8811 	msr	BASEPRI, r0
 80085ce:	f7ff fd01 	bl	8007fd4 <vTaskSwitchContext>
 80085d2:	f04f 0000 	mov.w	r0, #0
 80085d6:	f380 8811 	msr	BASEPRI, r0
 80085da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80085de:	6819      	ldr	r1, [r3, #0]
 80085e0:	6808      	ldr	r0, [r1, #0]
 80085e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80085e6:	f380 8809 	msr	PSP, r0
 80085ea:	f3bf 8f6f 	isb	sy
 80085ee:	4770      	bx	lr

080085f0 <pxCurrentTCBConst>:
 80085f0:	20000800 	.word	0x20000800
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop

080085f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	607b      	str	r3, [r7, #4]
}
 8008610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008612:	f7ff fc21 	bl	8007e58 <xTaskIncrementTick>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800861c:	4b06      	ldr	r3, [pc, #24]	; (8008638 <SysTick_Handler+0x40>)
 800861e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	2300      	movs	r3, #0
 8008626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	f383 8811 	msr	BASEPRI, r3
}
 800862e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008630:	bf00      	nop
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	e000ed04 	.word	0xe000ed04

0800863c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800863c:	b480      	push	{r7}
 800863e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008640:	4b0a      	ldr	r3, [pc, #40]	; (800866c <vPortSetupTimerInterrupt+0x30>)
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008646:	4b0a      	ldr	r3, [pc, #40]	; (8008670 <vPortSetupTimerInterrupt+0x34>)
 8008648:	2200      	movs	r2, #0
 800864a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <vPortSetupTimerInterrupt+0x38>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a09      	ldr	r2, [pc, #36]	; (8008678 <vPortSetupTimerInterrupt+0x3c>)
 8008652:	fba2 2303 	umull	r2, r3, r2, r3
 8008656:	099b      	lsrs	r3, r3, #6
 8008658:	4a08      	ldr	r2, [pc, #32]	; (800867c <vPortSetupTimerInterrupt+0x40>)
 800865a:	3b01      	subs	r3, #1
 800865c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800865e:	4b03      	ldr	r3, [pc, #12]	; (800866c <vPortSetupTimerInterrupt+0x30>)
 8008660:	2207      	movs	r2, #7
 8008662:	601a      	str	r2, [r3, #0]
}
 8008664:	bf00      	nop
 8008666:	46bd      	mov	sp, r7
 8008668:	bc80      	pop	{r7}
 800866a:	4770      	bx	lr
 800866c:	e000e010 	.word	0xe000e010
 8008670:	e000e018 	.word	0xe000e018
 8008674:	20000000 	.word	0x20000000
 8008678:	10624dd3 	.word	0x10624dd3
 800867c:	e000e014 	.word	0xe000e014

08008680 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b08a      	sub	sp, #40	; 0x28
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008688:	2300      	movs	r3, #0
 800868a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800868c:	f7ff fb3a 	bl	8007d04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008690:	4b58      	ldr	r3, [pc, #352]	; (80087f4 <pvPortMalloc+0x174>)
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008698:	f000 f910 	bl	80088bc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800869c:	4b56      	ldr	r3, [pc, #344]	; (80087f8 <pvPortMalloc+0x178>)
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4013      	ands	r3, r2
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f040 808e 	bne.w	80087c6 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d01d      	beq.n	80086ec <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80086b0:	2208      	movs	r2, #8
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4413      	add	r3, r2
 80086b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f003 0307 	and.w	r3, r3, #7
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d014      	beq.n	80086ec <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f023 0307 	bic.w	r3, r3, #7
 80086c8:	3308      	adds	r3, #8
 80086ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00a      	beq.n	80086ec <pvPortMalloc+0x6c>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	617b      	str	r3, [r7, #20]
}
 80086e8:	bf00      	nop
 80086ea:	e7fe      	b.n	80086ea <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d069      	beq.n	80087c6 <pvPortMalloc+0x146>
 80086f2:	4b42      	ldr	r3, [pc, #264]	; (80087fc <pvPortMalloc+0x17c>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	687a      	ldr	r2, [r7, #4]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d864      	bhi.n	80087c6 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80086fc:	4b40      	ldr	r3, [pc, #256]	; (8008800 <pvPortMalloc+0x180>)
 80086fe:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008700:	4b3f      	ldr	r3, [pc, #252]	; (8008800 <pvPortMalloc+0x180>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008706:	e004      	b.n	8008712 <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800870c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	429a      	cmp	r2, r3
 800871a:	d903      	bls.n	8008724 <pvPortMalloc+0xa4>
 800871c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1f1      	bne.n	8008708 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008724:	4b33      	ldr	r3, [pc, #204]	; (80087f4 <pvPortMalloc+0x174>)
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872a:	429a      	cmp	r2, r3
 800872c:	d04b      	beq.n	80087c6 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800872e:	6a3b      	ldr	r3, [r7, #32]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2208      	movs	r2, #8
 8008734:	4413      	add	r3, r2
 8008736:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	681a      	ldr	r2, [r3, #0]
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	1ad2      	subs	r2, r2, r3
 8008748:	2308      	movs	r3, #8
 800874a:	005b      	lsls	r3, r3, #1
 800874c:	429a      	cmp	r2, r3
 800874e:	d91f      	bls.n	8008790 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008750:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4413      	add	r3, r2
 8008756:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	f003 0307 	and.w	r3, r3, #7
 800875e:	2b00      	cmp	r3, #0
 8008760:	d00a      	beq.n	8008778 <pvPortMalloc+0xf8>
	__asm volatile
 8008762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008766:	f383 8811 	msr	BASEPRI, r3
 800876a:	f3bf 8f6f 	isb	sy
 800876e:	f3bf 8f4f 	dsb	sy
 8008772:	613b      	str	r3, [r7, #16]
}
 8008774:	bf00      	nop
 8008776:	e7fe      	b.n	8008776 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	1ad2      	subs	r2, r2, r3
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800878a:	69b8      	ldr	r0, [r7, #24]
 800878c:	f000 f8f8 	bl	8008980 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008790:	4b1a      	ldr	r3, [pc, #104]	; (80087fc <pvPortMalloc+0x17c>)
 8008792:	681a      	ldr	r2, [r3, #0]
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	4a18      	ldr	r2, [pc, #96]	; (80087fc <pvPortMalloc+0x17c>)
 800879c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800879e:	4b17      	ldr	r3, [pc, #92]	; (80087fc <pvPortMalloc+0x17c>)
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	4b18      	ldr	r3, [pc, #96]	; (8008804 <pvPortMalloc+0x184>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d203      	bcs.n	80087b2 <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80087aa:	4b14      	ldr	r3, [pc, #80]	; (80087fc <pvPortMalloc+0x17c>)
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a15      	ldr	r2, [pc, #84]	; (8008804 <pvPortMalloc+0x184>)
 80087b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80087b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b4:	685a      	ldr	r2, [r3, #4]
 80087b6:	4b10      	ldr	r3, [pc, #64]	; (80087f8 <pvPortMalloc+0x178>)
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	431a      	orrs	r2, r3
 80087bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	2200      	movs	r2, #0
 80087c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80087c6:	f7ff faab 	bl	8007d20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	f003 0307 	and.w	r3, r3, #7
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00a      	beq.n	80087ea <pvPortMalloc+0x16a>
	__asm volatile
 80087d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	60fb      	str	r3, [r7, #12]
}
 80087e6:	bf00      	nop
 80087e8:	e7fe      	b.n	80087e8 <pvPortMalloc+0x168>
	return pvReturn;
 80087ea:	69fb      	ldr	r3, [r7, #28]
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3728      	adds	r7, #40	; 0x28
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	2000153c 	.word	0x2000153c
 80087f8:	20001548 	.word	0x20001548
 80087fc:	20001540 	.word	0x20001540
 8008800:	20001534 	.word	0x20001534
 8008804:	20001544 	.word	0x20001544

08008808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d048      	beq.n	80088ac <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800881a:	2308      	movs	r3, #8
 800881c:	425b      	negs	r3, r3
 800881e:	697a      	ldr	r2, [r7, #20]
 8008820:	4413      	add	r3, r2
 8008822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	4b21      	ldr	r3, [pc, #132]	; (80088b4 <vPortFree+0xac>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4013      	ands	r3, r2
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10a      	bne.n	800884c <vPortFree+0x44>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	60fb      	str	r3, [r7, #12]
}
 8008848:	bf00      	nop
 800884a:	e7fe      	b.n	800884a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00a      	beq.n	800886a <vPortFree+0x62>
	__asm volatile
 8008854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008858:	f383 8811 	msr	BASEPRI, r3
 800885c:	f3bf 8f6f 	isb	sy
 8008860:	f3bf 8f4f 	dsb	sy
 8008864:	60bb      	str	r3, [r7, #8]
}
 8008866:	bf00      	nop
 8008868:	e7fe      	b.n	8008868 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	685a      	ldr	r2, [r3, #4]
 800886e:	4b11      	ldr	r3, [pc, #68]	; (80088b4 <vPortFree+0xac>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4013      	ands	r3, r2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d019      	beq.n	80088ac <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008878:	693b      	ldr	r3, [r7, #16]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d115      	bne.n	80088ac <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	685a      	ldr	r2, [r3, #4]
 8008884:	4b0b      	ldr	r3, [pc, #44]	; (80088b4 <vPortFree+0xac>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	43db      	mvns	r3, r3
 800888a:	401a      	ands	r2, r3
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008890:	f7ff fa38 	bl	8007d04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	4b07      	ldr	r3, [pc, #28]	; (80088b8 <vPortFree+0xb0>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4413      	add	r3, r2
 800889e:	4a06      	ldr	r2, [pc, #24]	; (80088b8 <vPortFree+0xb0>)
 80088a0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80088a2:	6938      	ldr	r0, [r7, #16]
 80088a4:	f000 f86c 	bl	8008980 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80088a8:	f7ff fa3a 	bl	8007d20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80088ac:	bf00      	nop
 80088ae:	3718      	adds	r7, #24
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}
 80088b4:	20001548 	.word	0x20001548
 80088b8:	20001540 	.word	0x20001540

080088bc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80088c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80088c6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80088c8:	4b27      	ldr	r3, [pc, #156]	; (8008968 <prvHeapInit+0xac>)
 80088ca:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f003 0307 	and.w	r3, r3, #7
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d00c      	beq.n	80088f0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	3307      	adds	r3, #7
 80088da:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 0307 	bic.w	r3, r3, #7
 80088e2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80088e4:	68ba      	ldr	r2, [r7, #8]
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	4a1f      	ldr	r2, [pc, #124]	; (8008968 <prvHeapInit+0xac>)
 80088ec:	4413      	add	r3, r2
 80088ee:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088f4:	4a1d      	ldr	r2, [pc, #116]	; (800896c <prvHeapInit+0xb0>)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088fa:	4b1c      	ldr	r3, [pc, #112]	; (800896c <prvHeapInit+0xb0>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	4413      	add	r3, r2
 8008906:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008908:	2208      	movs	r2, #8
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	1a9b      	subs	r3, r3, r2
 800890e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f023 0307 	bic.w	r3, r3, #7
 8008916:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4a15      	ldr	r2, [pc, #84]	; (8008970 <prvHeapInit+0xb4>)
 800891c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800891e:	4b14      	ldr	r3, [pc, #80]	; (8008970 <prvHeapInit+0xb4>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2200      	movs	r2, #0
 8008924:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008926:	4b12      	ldr	r3, [pc, #72]	; (8008970 <prvHeapInit+0xb4>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2200      	movs	r2, #0
 800892c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008932:	683b      	ldr	r3, [r7, #0]
 8008934:	68fa      	ldr	r2, [r7, #12]
 8008936:	1ad2      	subs	r2, r2, r3
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800893c:	4b0c      	ldr	r3, [pc, #48]	; (8008970 <prvHeapInit+0xb4>)
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	4a0a      	ldr	r2, [pc, #40]	; (8008974 <prvHeapInit+0xb8>)
 800894a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	4a09      	ldr	r2, [pc, #36]	; (8008978 <prvHeapInit+0xbc>)
 8008952:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008954:	4b09      	ldr	r3, [pc, #36]	; (800897c <prvHeapInit+0xc0>)
 8008956:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800895a:	601a      	str	r2, [r3, #0]
}
 800895c:	bf00      	nop
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	bc80      	pop	{r7}
 8008964:	4770      	bx	lr
 8008966:	bf00      	nop
 8008968:	20000934 	.word	0x20000934
 800896c:	20001534 	.word	0x20001534
 8008970:	2000153c 	.word	0x2000153c
 8008974:	20001544 	.word	0x20001544
 8008978:	20001540 	.word	0x20001540
 800897c:	20001548 	.word	0x20001548

08008980 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008980:	b480      	push	{r7}
 8008982:	b085      	sub	sp, #20
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008988:	4b27      	ldr	r3, [pc, #156]	; (8008a28 <prvInsertBlockIntoFreeList+0xa8>)
 800898a:	60fb      	str	r3, [r7, #12]
 800898c:	e002      	b.n	8008994 <prvInsertBlockIntoFreeList+0x14>
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	429a      	cmp	r2, r3
 800899c:	d8f7      	bhi.n	800898e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	4413      	add	r3, r2
 80089aa:	687a      	ldr	r2, [r7, #4]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d108      	bne.n	80089c2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	685b      	ldr	r3, [r3, #4]
 80089b8:	441a      	add	r2, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	441a      	add	r2, r3
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d118      	bne.n	8008a08 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	4b14      	ldr	r3, [pc, #80]	; (8008a2c <prvInsertBlockIntoFreeList+0xac>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	429a      	cmp	r2, r3
 80089e0:	d00d      	beq.n	80089fe <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685a      	ldr	r2, [r3, #4]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	441a      	add	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681a      	ldr	r2, [r3, #0]
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	e008      	b.n	8008a10 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089fe:	4b0b      	ldr	r3, [pc, #44]	; (8008a2c <prvInsertBlockIntoFreeList+0xac>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	601a      	str	r2, [r3, #0]
 8008a06:	e003      	b.n	8008a10 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	429a      	cmp	r2, r3
 8008a16:	d002      	beq.n	8008a1e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008a1e:	bf00      	nop
 8008a20:	3714      	adds	r7, #20
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bc80      	pop	{r7}
 8008a26:	4770      	bx	lr
 8008a28:	20001534 	.word	0x20001534
 8008a2c:	2000153c 	.word	0x2000153c

08008a30 <__cvt>:
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a36:	461f      	mov	r7, r3
 8008a38:	bfbb      	ittet	lt
 8008a3a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008a3e:	461f      	movlt	r7, r3
 8008a40:	2300      	movge	r3, #0
 8008a42:	232d      	movlt	r3, #45	; 0x2d
 8008a44:	b088      	sub	sp, #32
 8008a46:	4614      	mov	r4, r2
 8008a48:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a4a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008a4c:	7013      	strb	r3, [r2, #0]
 8008a4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008a50:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008a54:	f023 0820 	bic.w	r8, r3, #32
 8008a58:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a5c:	d005      	beq.n	8008a6a <__cvt+0x3a>
 8008a5e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008a62:	d100      	bne.n	8008a66 <__cvt+0x36>
 8008a64:	3501      	adds	r5, #1
 8008a66:	2302      	movs	r3, #2
 8008a68:	e000      	b.n	8008a6c <__cvt+0x3c>
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	aa07      	add	r2, sp, #28
 8008a6e:	9204      	str	r2, [sp, #16]
 8008a70:	aa06      	add	r2, sp, #24
 8008a72:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008a76:	e9cd 3500 	strd	r3, r5, [sp]
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	463b      	mov	r3, r7
 8008a7e:	f000 fed7 	bl	8009830 <_dtoa_r>
 8008a82:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008a86:	4606      	mov	r6, r0
 8008a88:	d102      	bne.n	8008a90 <__cvt+0x60>
 8008a8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a8c:	07db      	lsls	r3, r3, #31
 8008a8e:	d522      	bpl.n	8008ad6 <__cvt+0xa6>
 8008a90:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008a94:	eb06 0905 	add.w	r9, r6, r5
 8008a98:	d110      	bne.n	8008abc <__cvt+0x8c>
 8008a9a:	7833      	ldrb	r3, [r6, #0]
 8008a9c:	2b30      	cmp	r3, #48	; 0x30
 8008a9e:	d10a      	bne.n	8008ab6 <__cvt+0x86>
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	4639      	mov	r1, r7
 8008aa8:	f7f7 ff7e 	bl	80009a8 <__aeabi_dcmpeq>
 8008aac:	b918      	cbnz	r0, 8008ab6 <__cvt+0x86>
 8008aae:	f1c5 0501 	rsb	r5, r5, #1
 8008ab2:	f8ca 5000 	str.w	r5, [sl]
 8008ab6:	f8da 3000 	ldr.w	r3, [sl]
 8008aba:	4499      	add	r9, r3
 8008abc:	2200      	movs	r2, #0
 8008abe:	2300      	movs	r3, #0
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	4639      	mov	r1, r7
 8008ac4:	f7f7 ff70 	bl	80009a8 <__aeabi_dcmpeq>
 8008ac8:	b108      	cbz	r0, 8008ace <__cvt+0x9e>
 8008aca:	f8cd 901c 	str.w	r9, [sp, #28]
 8008ace:	2230      	movs	r2, #48	; 0x30
 8008ad0:	9b07      	ldr	r3, [sp, #28]
 8008ad2:	454b      	cmp	r3, r9
 8008ad4:	d307      	bcc.n	8008ae6 <__cvt+0xb6>
 8008ad6:	4630      	mov	r0, r6
 8008ad8:	9b07      	ldr	r3, [sp, #28]
 8008ada:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008adc:	1b9b      	subs	r3, r3, r6
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	b008      	add	sp, #32
 8008ae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ae6:	1c59      	adds	r1, r3, #1
 8008ae8:	9107      	str	r1, [sp, #28]
 8008aea:	701a      	strb	r2, [r3, #0]
 8008aec:	e7f0      	b.n	8008ad0 <__cvt+0xa0>

08008aee <__exponent>:
 8008aee:	4603      	mov	r3, r0
 8008af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008af2:	2900      	cmp	r1, #0
 8008af4:	f803 2b02 	strb.w	r2, [r3], #2
 8008af8:	bfb6      	itet	lt
 8008afa:	222d      	movlt	r2, #45	; 0x2d
 8008afc:	222b      	movge	r2, #43	; 0x2b
 8008afe:	4249      	neglt	r1, r1
 8008b00:	2909      	cmp	r1, #9
 8008b02:	7042      	strb	r2, [r0, #1]
 8008b04:	dd2a      	ble.n	8008b5c <__exponent+0x6e>
 8008b06:	f10d 0207 	add.w	r2, sp, #7
 8008b0a:	4617      	mov	r7, r2
 8008b0c:	260a      	movs	r6, #10
 8008b0e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008b12:	4694      	mov	ip, r2
 8008b14:	fb06 1415 	mls	r4, r6, r5, r1
 8008b18:	3430      	adds	r4, #48	; 0x30
 8008b1a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008b1e:	460c      	mov	r4, r1
 8008b20:	2c63      	cmp	r4, #99	; 0x63
 8008b22:	4629      	mov	r1, r5
 8008b24:	f102 32ff 	add.w	r2, r2, #4294967295
 8008b28:	dcf1      	bgt.n	8008b0e <__exponent+0x20>
 8008b2a:	3130      	adds	r1, #48	; 0x30
 8008b2c:	f1ac 0402 	sub.w	r4, ip, #2
 8008b30:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008b34:	4622      	mov	r2, r4
 8008b36:	1c41      	adds	r1, r0, #1
 8008b38:	42ba      	cmp	r2, r7
 8008b3a:	d30a      	bcc.n	8008b52 <__exponent+0x64>
 8008b3c:	f10d 0209 	add.w	r2, sp, #9
 8008b40:	eba2 020c 	sub.w	r2, r2, ip
 8008b44:	42bc      	cmp	r4, r7
 8008b46:	bf88      	it	hi
 8008b48:	2200      	movhi	r2, #0
 8008b4a:	4413      	add	r3, r2
 8008b4c:	1a18      	subs	r0, r3, r0
 8008b4e:	b003      	add	sp, #12
 8008b50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b52:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008b56:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008b5a:	e7ed      	b.n	8008b38 <__exponent+0x4a>
 8008b5c:	2330      	movs	r3, #48	; 0x30
 8008b5e:	3130      	adds	r1, #48	; 0x30
 8008b60:	7083      	strb	r3, [r0, #2]
 8008b62:	70c1      	strb	r1, [r0, #3]
 8008b64:	1d03      	adds	r3, r0, #4
 8008b66:	e7f1      	b.n	8008b4c <__exponent+0x5e>

08008b68 <_printf_float>:
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	b091      	sub	sp, #68	; 0x44
 8008b6e:	460c      	mov	r4, r1
 8008b70:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008b74:	4616      	mov	r6, r2
 8008b76:	461f      	mov	r7, r3
 8008b78:	4605      	mov	r5, r0
 8008b7a:	f000 fce5 	bl	8009548 <_localeconv_r>
 8008b7e:	6803      	ldr	r3, [r0, #0]
 8008b80:	4618      	mov	r0, r3
 8008b82:	9309      	str	r3, [sp, #36]	; 0x24
 8008b84:	f7f7 fae4 	bl	8000150 <strlen>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	930e      	str	r3, [sp, #56]	; 0x38
 8008b8c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b90:	900a      	str	r0, [sp, #40]	; 0x28
 8008b92:	3307      	adds	r3, #7
 8008b94:	f023 0307 	bic.w	r3, r3, #7
 8008b98:	f103 0208 	add.w	r2, r3, #8
 8008b9c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008ba0:	f8d4 b000 	ldr.w	fp, [r4]
 8008ba4:	f8c8 2000 	str.w	r2, [r8]
 8008ba8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008bac:	4652      	mov	r2, sl
 8008bae:	4643      	mov	r3, r8
 8008bb0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008bb4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008bb8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bba:	f04f 32ff 	mov.w	r2, #4294967295
 8008bbe:	4650      	mov	r0, sl
 8008bc0:	4b9c      	ldr	r3, [pc, #624]	; (8008e34 <_printf_float+0x2cc>)
 8008bc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bc4:	f7f7 ff22 	bl	8000a0c <__aeabi_dcmpun>
 8008bc8:	bb70      	cbnz	r0, 8008c28 <_printf_float+0xc0>
 8008bca:	f04f 32ff 	mov.w	r2, #4294967295
 8008bce:	4650      	mov	r0, sl
 8008bd0:	4b98      	ldr	r3, [pc, #608]	; (8008e34 <_printf_float+0x2cc>)
 8008bd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008bd4:	f7f7 fefc 	bl	80009d0 <__aeabi_dcmple>
 8008bd8:	bb30      	cbnz	r0, 8008c28 <_printf_float+0xc0>
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4650      	mov	r0, sl
 8008be0:	4641      	mov	r1, r8
 8008be2:	f7f7 feeb 	bl	80009bc <__aeabi_dcmplt>
 8008be6:	b110      	cbz	r0, 8008bee <_printf_float+0x86>
 8008be8:	232d      	movs	r3, #45	; 0x2d
 8008bea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bee:	4a92      	ldr	r2, [pc, #584]	; (8008e38 <_printf_float+0x2d0>)
 8008bf0:	4b92      	ldr	r3, [pc, #584]	; (8008e3c <_printf_float+0x2d4>)
 8008bf2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008bf6:	bf94      	ite	ls
 8008bf8:	4690      	movls	r8, r2
 8008bfa:	4698      	movhi	r8, r3
 8008bfc:	2303      	movs	r3, #3
 8008bfe:	f04f 0a00 	mov.w	sl, #0
 8008c02:	6123      	str	r3, [r4, #16]
 8008c04:	f02b 0304 	bic.w	r3, fp, #4
 8008c08:	6023      	str	r3, [r4, #0]
 8008c0a:	4633      	mov	r3, r6
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	4628      	mov	r0, r5
 8008c10:	9700      	str	r7, [sp, #0]
 8008c12:	aa0f      	add	r2, sp, #60	; 0x3c
 8008c14:	f000 f9d6 	bl	8008fc4 <_printf_common>
 8008c18:	3001      	adds	r0, #1
 8008c1a:	f040 8090 	bne.w	8008d3e <_printf_float+0x1d6>
 8008c1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c22:	b011      	add	sp, #68	; 0x44
 8008c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c28:	4652      	mov	r2, sl
 8008c2a:	4643      	mov	r3, r8
 8008c2c:	4650      	mov	r0, sl
 8008c2e:	4641      	mov	r1, r8
 8008c30:	f7f7 feec 	bl	8000a0c <__aeabi_dcmpun>
 8008c34:	b148      	cbz	r0, 8008c4a <_printf_float+0xe2>
 8008c36:	f1b8 0f00 	cmp.w	r8, #0
 8008c3a:	bfb8      	it	lt
 8008c3c:	232d      	movlt	r3, #45	; 0x2d
 8008c3e:	4a80      	ldr	r2, [pc, #512]	; (8008e40 <_printf_float+0x2d8>)
 8008c40:	bfb8      	it	lt
 8008c42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008c46:	4b7f      	ldr	r3, [pc, #508]	; (8008e44 <_printf_float+0x2dc>)
 8008c48:	e7d3      	b.n	8008bf2 <_printf_float+0x8a>
 8008c4a:	6863      	ldr	r3, [r4, #4]
 8008c4c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008c50:	1c5a      	adds	r2, r3, #1
 8008c52:	d142      	bne.n	8008cda <_printf_float+0x172>
 8008c54:	2306      	movs	r3, #6
 8008c56:	6063      	str	r3, [r4, #4]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	9206      	str	r2, [sp, #24]
 8008c5c:	aa0e      	add	r2, sp, #56	; 0x38
 8008c5e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008c62:	aa0d      	add	r2, sp, #52	; 0x34
 8008c64:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008c68:	9203      	str	r2, [sp, #12]
 8008c6a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8008c6e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008c72:	6023      	str	r3, [r4, #0]
 8008c74:	6863      	ldr	r3, [r4, #4]
 8008c76:	4652      	mov	r2, sl
 8008c78:	9300      	str	r3, [sp, #0]
 8008c7a:	4628      	mov	r0, r5
 8008c7c:	4643      	mov	r3, r8
 8008c7e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008c80:	f7ff fed6 	bl	8008a30 <__cvt>
 8008c84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c86:	4680      	mov	r8, r0
 8008c88:	2947      	cmp	r1, #71	; 0x47
 8008c8a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008c8c:	d108      	bne.n	8008ca0 <_printf_float+0x138>
 8008c8e:	1cc8      	adds	r0, r1, #3
 8008c90:	db02      	blt.n	8008c98 <_printf_float+0x130>
 8008c92:	6863      	ldr	r3, [r4, #4]
 8008c94:	4299      	cmp	r1, r3
 8008c96:	dd40      	ble.n	8008d1a <_printf_float+0x1b2>
 8008c98:	f1a9 0902 	sub.w	r9, r9, #2
 8008c9c:	fa5f f989 	uxtb.w	r9, r9
 8008ca0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008ca4:	d81f      	bhi.n	8008ce6 <_printf_float+0x17e>
 8008ca6:	464a      	mov	r2, r9
 8008ca8:	3901      	subs	r1, #1
 8008caa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008cae:	910d      	str	r1, [sp, #52]	; 0x34
 8008cb0:	f7ff ff1d 	bl	8008aee <__exponent>
 8008cb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cb6:	4682      	mov	sl, r0
 8008cb8:	1813      	adds	r3, r2, r0
 8008cba:	2a01      	cmp	r2, #1
 8008cbc:	6123      	str	r3, [r4, #16]
 8008cbe:	dc02      	bgt.n	8008cc6 <_printf_float+0x15e>
 8008cc0:	6822      	ldr	r2, [r4, #0]
 8008cc2:	07d2      	lsls	r2, r2, #31
 8008cc4:	d501      	bpl.n	8008cca <_printf_float+0x162>
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	6123      	str	r3, [r4, #16]
 8008cca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d09b      	beq.n	8008c0a <_printf_float+0xa2>
 8008cd2:	232d      	movs	r3, #45	; 0x2d
 8008cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd8:	e797      	b.n	8008c0a <_printf_float+0xa2>
 8008cda:	2947      	cmp	r1, #71	; 0x47
 8008cdc:	d1bc      	bne.n	8008c58 <_printf_float+0xf0>
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1ba      	bne.n	8008c58 <_printf_float+0xf0>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e7b7      	b.n	8008c56 <_printf_float+0xee>
 8008ce6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008cea:	d118      	bne.n	8008d1e <_printf_float+0x1b6>
 8008cec:	2900      	cmp	r1, #0
 8008cee:	6863      	ldr	r3, [r4, #4]
 8008cf0:	dd0b      	ble.n	8008d0a <_printf_float+0x1a2>
 8008cf2:	6121      	str	r1, [r4, #16]
 8008cf4:	b913      	cbnz	r3, 8008cfc <_printf_float+0x194>
 8008cf6:	6822      	ldr	r2, [r4, #0]
 8008cf8:	07d0      	lsls	r0, r2, #31
 8008cfa:	d502      	bpl.n	8008d02 <_printf_float+0x19a>
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	440b      	add	r3, r1
 8008d00:	6123      	str	r3, [r4, #16]
 8008d02:	f04f 0a00 	mov.w	sl, #0
 8008d06:	65a1      	str	r1, [r4, #88]	; 0x58
 8008d08:	e7df      	b.n	8008cca <_printf_float+0x162>
 8008d0a:	b913      	cbnz	r3, 8008d12 <_printf_float+0x1aa>
 8008d0c:	6822      	ldr	r2, [r4, #0]
 8008d0e:	07d2      	lsls	r2, r2, #31
 8008d10:	d501      	bpl.n	8008d16 <_printf_float+0x1ae>
 8008d12:	3302      	adds	r3, #2
 8008d14:	e7f4      	b.n	8008d00 <_printf_float+0x198>
 8008d16:	2301      	movs	r3, #1
 8008d18:	e7f2      	b.n	8008d00 <_printf_float+0x198>
 8008d1a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008d1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008d20:	4299      	cmp	r1, r3
 8008d22:	db05      	blt.n	8008d30 <_printf_float+0x1c8>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	6121      	str	r1, [r4, #16]
 8008d28:	07d8      	lsls	r0, r3, #31
 8008d2a:	d5ea      	bpl.n	8008d02 <_printf_float+0x19a>
 8008d2c:	1c4b      	adds	r3, r1, #1
 8008d2e:	e7e7      	b.n	8008d00 <_printf_float+0x198>
 8008d30:	2900      	cmp	r1, #0
 8008d32:	bfcc      	ite	gt
 8008d34:	2201      	movgt	r2, #1
 8008d36:	f1c1 0202 	rsble	r2, r1, #2
 8008d3a:	4413      	add	r3, r2
 8008d3c:	e7e0      	b.n	8008d00 <_printf_float+0x198>
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	055a      	lsls	r2, r3, #21
 8008d42:	d407      	bmi.n	8008d54 <_printf_float+0x1ec>
 8008d44:	6923      	ldr	r3, [r4, #16]
 8008d46:	4642      	mov	r2, r8
 8008d48:	4631      	mov	r1, r6
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	47b8      	blx	r7
 8008d4e:	3001      	adds	r0, #1
 8008d50:	d12b      	bne.n	8008daa <_printf_float+0x242>
 8008d52:	e764      	b.n	8008c1e <_printf_float+0xb6>
 8008d54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008d58:	f240 80dd 	bls.w	8008f16 <_printf_float+0x3ae>
 8008d5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008d60:	2200      	movs	r2, #0
 8008d62:	2300      	movs	r3, #0
 8008d64:	f7f7 fe20 	bl	80009a8 <__aeabi_dcmpeq>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	d033      	beq.n	8008dd4 <_printf_float+0x26c>
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	4631      	mov	r1, r6
 8008d70:	4628      	mov	r0, r5
 8008d72:	4a35      	ldr	r2, [pc, #212]	; (8008e48 <_printf_float+0x2e0>)
 8008d74:	47b8      	blx	r7
 8008d76:	3001      	adds	r0, #1
 8008d78:	f43f af51 	beq.w	8008c1e <_printf_float+0xb6>
 8008d7c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008d80:	429a      	cmp	r2, r3
 8008d82:	db02      	blt.n	8008d8a <_printf_float+0x222>
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	07d8      	lsls	r0, r3, #31
 8008d88:	d50f      	bpl.n	8008daa <_printf_float+0x242>
 8008d8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008d8e:	4631      	mov	r1, r6
 8008d90:	4628      	mov	r0, r5
 8008d92:	47b8      	blx	r7
 8008d94:	3001      	adds	r0, #1
 8008d96:	f43f af42 	beq.w	8008c1e <_printf_float+0xb6>
 8008d9a:	f04f 0800 	mov.w	r8, #0
 8008d9e:	f104 091a 	add.w	r9, r4, #26
 8008da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008da4:	3b01      	subs	r3, #1
 8008da6:	4543      	cmp	r3, r8
 8008da8:	dc09      	bgt.n	8008dbe <_printf_float+0x256>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	079b      	lsls	r3, r3, #30
 8008dae:	f100 8104 	bmi.w	8008fba <_printf_float+0x452>
 8008db2:	68e0      	ldr	r0, [r4, #12]
 8008db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008db6:	4298      	cmp	r0, r3
 8008db8:	bfb8      	it	lt
 8008dba:	4618      	movlt	r0, r3
 8008dbc:	e731      	b.n	8008c22 <_printf_float+0xba>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	464a      	mov	r2, r9
 8008dc2:	4631      	mov	r1, r6
 8008dc4:	4628      	mov	r0, r5
 8008dc6:	47b8      	blx	r7
 8008dc8:	3001      	adds	r0, #1
 8008dca:	f43f af28 	beq.w	8008c1e <_printf_float+0xb6>
 8008dce:	f108 0801 	add.w	r8, r8, #1
 8008dd2:	e7e6      	b.n	8008da2 <_printf_float+0x23a>
 8008dd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	dc38      	bgt.n	8008e4c <_printf_float+0x2e4>
 8008dda:	2301      	movs	r3, #1
 8008ddc:	4631      	mov	r1, r6
 8008dde:	4628      	mov	r0, r5
 8008de0:	4a19      	ldr	r2, [pc, #100]	; (8008e48 <_printf_float+0x2e0>)
 8008de2:	47b8      	blx	r7
 8008de4:	3001      	adds	r0, #1
 8008de6:	f43f af1a 	beq.w	8008c1e <_printf_float+0xb6>
 8008dea:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008dee:	4313      	orrs	r3, r2
 8008df0:	d102      	bne.n	8008df8 <_printf_float+0x290>
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	07d9      	lsls	r1, r3, #31
 8008df6:	d5d8      	bpl.n	8008daa <_printf_float+0x242>
 8008df8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	4628      	mov	r0, r5
 8008e00:	47b8      	blx	r7
 8008e02:	3001      	adds	r0, #1
 8008e04:	f43f af0b 	beq.w	8008c1e <_printf_float+0xb6>
 8008e08:	f04f 0900 	mov.w	r9, #0
 8008e0c:	f104 0a1a 	add.w	sl, r4, #26
 8008e10:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e12:	425b      	negs	r3, r3
 8008e14:	454b      	cmp	r3, r9
 8008e16:	dc01      	bgt.n	8008e1c <_printf_float+0x2b4>
 8008e18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008e1a:	e794      	b.n	8008d46 <_printf_float+0x1de>
 8008e1c:	2301      	movs	r3, #1
 8008e1e:	4652      	mov	r2, sl
 8008e20:	4631      	mov	r1, r6
 8008e22:	4628      	mov	r0, r5
 8008e24:	47b8      	blx	r7
 8008e26:	3001      	adds	r0, #1
 8008e28:	f43f aef9 	beq.w	8008c1e <_printf_float+0xb6>
 8008e2c:	f109 0901 	add.w	r9, r9, #1
 8008e30:	e7ee      	b.n	8008e10 <_printf_float+0x2a8>
 8008e32:	bf00      	nop
 8008e34:	7fefffff 	.word	0x7fefffff
 8008e38:	0800bac2 	.word	0x0800bac2
 8008e3c:	0800bac6 	.word	0x0800bac6
 8008e40:	0800baca 	.word	0x0800baca
 8008e44:	0800bace 	.word	0x0800bace
 8008e48:	0800bad2 	.word	0x0800bad2
 8008e4c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008e4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008e50:	429a      	cmp	r2, r3
 8008e52:	bfa8      	it	ge
 8008e54:	461a      	movge	r2, r3
 8008e56:	2a00      	cmp	r2, #0
 8008e58:	4691      	mov	r9, r2
 8008e5a:	dc37      	bgt.n	8008ecc <_printf_float+0x364>
 8008e5c:	f04f 0b00 	mov.w	fp, #0
 8008e60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e64:	f104 021a 	add.w	r2, r4, #26
 8008e68:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008e6c:	ebaa 0309 	sub.w	r3, sl, r9
 8008e70:	455b      	cmp	r3, fp
 8008e72:	dc33      	bgt.n	8008edc <_printf_float+0x374>
 8008e74:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	db3b      	blt.n	8008ef4 <_printf_float+0x38c>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	07da      	lsls	r2, r3, #31
 8008e80:	d438      	bmi.n	8008ef4 <_printf_float+0x38c>
 8008e82:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8008e86:	eba2 0903 	sub.w	r9, r2, r3
 8008e8a:	eba2 020a 	sub.w	r2, r2, sl
 8008e8e:	4591      	cmp	r9, r2
 8008e90:	bfa8      	it	ge
 8008e92:	4691      	movge	r9, r2
 8008e94:	f1b9 0f00 	cmp.w	r9, #0
 8008e98:	dc34      	bgt.n	8008f04 <_printf_float+0x39c>
 8008e9a:	f04f 0800 	mov.w	r8, #0
 8008e9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ea2:	f104 0a1a 	add.w	sl, r4, #26
 8008ea6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8008eaa:	1a9b      	subs	r3, r3, r2
 8008eac:	eba3 0309 	sub.w	r3, r3, r9
 8008eb0:	4543      	cmp	r3, r8
 8008eb2:	f77f af7a 	ble.w	8008daa <_printf_float+0x242>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4652      	mov	r2, sl
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	47b8      	blx	r7
 8008ec0:	3001      	adds	r0, #1
 8008ec2:	f43f aeac 	beq.w	8008c1e <_printf_float+0xb6>
 8008ec6:	f108 0801 	add.w	r8, r8, #1
 8008eca:	e7ec      	b.n	8008ea6 <_printf_float+0x33e>
 8008ecc:	4613      	mov	r3, r2
 8008ece:	4631      	mov	r1, r6
 8008ed0:	4642      	mov	r2, r8
 8008ed2:	4628      	mov	r0, r5
 8008ed4:	47b8      	blx	r7
 8008ed6:	3001      	adds	r0, #1
 8008ed8:	d1c0      	bne.n	8008e5c <_printf_float+0x2f4>
 8008eda:	e6a0      	b.n	8008c1e <_printf_float+0xb6>
 8008edc:	2301      	movs	r3, #1
 8008ede:	4631      	mov	r1, r6
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	920b      	str	r2, [sp, #44]	; 0x2c
 8008ee4:	47b8      	blx	r7
 8008ee6:	3001      	adds	r0, #1
 8008ee8:	f43f ae99 	beq.w	8008c1e <_printf_float+0xb6>
 8008eec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008eee:	f10b 0b01 	add.w	fp, fp, #1
 8008ef2:	e7b9      	b.n	8008e68 <_printf_float+0x300>
 8008ef4:	4631      	mov	r1, r6
 8008ef6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008efa:	4628      	mov	r0, r5
 8008efc:	47b8      	blx	r7
 8008efe:	3001      	adds	r0, #1
 8008f00:	d1bf      	bne.n	8008e82 <_printf_float+0x31a>
 8008f02:	e68c      	b.n	8008c1e <_printf_float+0xb6>
 8008f04:	464b      	mov	r3, r9
 8008f06:	4631      	mov	r1, r6
 8008f08:	4628      	mov	r0, r5
 8008f0a:	eb08 020a 	add.w	r2, r8, sl
 8008f0e:	47b8      	blx	r7
 8008f10:	3001      	adds	r0, #1
 8008f12:	d1c2      	bne.n	8008e9a <_printf_float+0x332>
 8008f14:	e683      	b.n	8008c1e <_printf_float+0xb6>
 8008f16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f18:	2a01      	cmp	r2, #1
 8008f1a:	dc01      	bgt.n	8008f20 <_printf_float+0x3b8>
 8008f1c:	07db      	lsls	r3, r3, #31
 8008f1e:	d539      	bpl.n	8008f94 <_printf_float+0x42c>
 8008f20:	2301      	movs	r3, #1
 8008f22:	4642      	mov	r2, r8
 8008f24:	4631      	mov	r1, r6
 8008f26:	4628      	mov	r0, r5
 8008f28:	47b8      	blx	r7
 8008f2a:	3001      	adds	r0, #1
 8008f2c:	f43f ae77 	beq.w	8008c1e <_printf_float+0xb6>
 8008f30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f34:	4631      	mov	r1, r6
 8008f36:	4628      	mov	r0, r5
 8008f38:	47b8      	blx	r7
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	f43f ae6f 	beq.w	8008c1e <_printf_float+0xb6>
 8008f40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008f44:	2200      	movs	r2, #0
 8008f46:	2300      	movs	r3, #0
 8008f48:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8008f4c:	f7f7 fd2c 	bl	80009a8 <__aeabi_dcmpeq>
 8008f50:	b9d8      	cbnz	r0, 8008f8a <_printf_float+0x422>
 8008f52:	f109 33ff 	add.w	r3, r9, #4294967295
 8008f56:	f108 0201 	add.w	r2, r8, #1
 8008f5a:	4631      	mov	r1, r6
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	47b8      	blx	r7
 8008f60:	3001      	adds	r0, #1
 8008f62:	d10e      	bne.n	8008f82 <_printf_float+0x41a>
 8008f64:	e65b      	b.n	8008c1e <_printf_float+0xb6>
 8008f66:	2301      	movs	r3, #1
 8008f68:	464a      	mov	r2, r9
 8008f6a:	4631      	mov	r1, r6
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	47b8      	blx	r7
 8008f70:	3001      	adds	r0, #1
 8008f72:	f43f ae54 	beq.w	8008c1e <_printf_float+0xb6>
 8008f76:	f108 0801 	add.w	r8, r8, #1
 8008f7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f7c:	3b01      	subs	r3, #1
 8008f7e:	4543      	cmp	r3, r8
 8008f80:	dcf1      	bgt.n	8008f66 <_printf_float+0x3fe>
 8008f82:	4653      	mov	r3, sl
 8008f84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008f88:	e6de      	b.n	8008d48 <_printf_float+0x1e0>
 8008f8a:	f04f 0800 	mov.w	r8, #0
 8008f8e:	f104 091a 	add.w	r9, r4, #26
 8008f92:	e7f2      	b.n	8008f7a <_printf_float+0x412>
 8008f94:	2301      	movs	r3, #1
 8008f96:	4642      	mov	r2, r8
 8008f98:	e7df      	b.n	8008f5a <_printf_float+0x3f2>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	464a      	mov	r2, r9
 8008f9e:	4631      	mov	r1, r6
 8008fa0:	4628      	mov	r0, r5
 8008fa2:	47b8      	blx	r7
 8008fa4:	3001      	adds	r0, #1
 8008fa6:	f43f ae3a 	beq.w	8008c1e <_printf_float+0xb6>
 8008faa:	f108 0801 	add.w	r8, r8, #1
 8008fae:	68e3      	ldr	r3, [r4, #12]
 8008fb0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008fb2:	1a5b      	subs	r3, r3, r1
 8008fb4:	4543      	cmp	r3, r8
 8008fb6:	dcf0      	bgt.n	8008f9a <_printf_float+0x432>
 8008fb8:	e6fb      	b.n	8008db2 <_printf_float+0x24a>
 8008fba:	f04f 0800 	mov.w	r8, #0
 8008fbe:	f104 0919 	add.w	r9, r4, #25
 8008fc2:	e7f4      	b.n	8008fae <_printf_float+0x446>

08008fc4 <_printf_common>:
 8008fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc8:	4616      	mov	r6, r2
 8008fca:	4699      	mov	r9, r3
 8008fcc:	688a      	ldr	r2, [r1, #8]
 8008fce:	690b      	ldr	r3, [r1, #16]
 8008fd0:	4607      	mov	r7, r0
 8008fd2:	4293      	cmp	r3, r2
 8008fd4:	bfb8      	it	lt
 8008fd6:	4613      	movlt	r3, r2
 8008fd8:	6033      	str	r3, [r6, #0]
 8008fda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008fde:	460c      	mov	r4, r1
 8008fe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008fe4:	b10a      	cbz	r2, 8008fea <_printf_common+0x26>
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	6033      	str	r3, [r6, #0]
 8008fea:	6823      	ldr	r3, [r4, #0]
 8008fec:	0699      	lsls	r1, r3, #26
 8008fee:	bf42      	ittt	mi
 8008ff0:	6833      	ldrmi	r3, [r6, #0]
 8008ff2:	3302      	addmi	r3, #2
 8008ff4:	6033      	strmi	r3, [r6, #0]
 8008ff6:	6825      	ldr	r5, [r4, #0]
 8008ff8:	f015 0506 	ands.w	r5, r5, #6
 8008ffc:	d106      	bne.n	800900c <_printf_common+0x48>
 8008ffe:	f104 0a19 	add.w	sl, r4, #25
 8009002:	68e3      	ldr	r3, [r4, #12]
 8009004:	6832      	ldr	r2, [r6, #0]
 8009006:	1a9b      	subs	r3, r3, r2
 8009008:	42ab      	cmp	r3, r5
 800900a:	dc2b      	bgt.n	8009064 <_printf_common+0xa0>
 800900c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009010:	1e13      	subs	r3, r2, #0
 8009012:	6822      	ldr	r2, [r4, #0]
 8009014:	bf18      	it	ne
 8009016:	2301      	movne	r3, #1
 8009018:	0692      	lsls	r2, r2, #26
 800901a:	d430      	bmi.n	800907e <_printf_common+0xba>
 800901c:	4649      	mov	r1, r9
 800901e:	4638      	mov	r0, r7
 8009020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009024:	47c0      	blx	r8
 8009026:	3001      	adds	r0, #1
 8009028:	d023      	beq.n	8009072 <_printf_common+0xae>
 800902a:	6823      	ldr	r3, [r4, #0]
 800902c:	6922      	ldr	r2, [r4, #16]
 800902e:	f003 0306 	and.w	r3, r3, #6
 8009032:	2b04      	cmp	r3, #4
 8009034:	bf14      	ite	ne
 8009036:	2500      	movne	r5, #0
 8009038:	6833      	ldreq	r3, [r6, #0]
 800903a:	f04f 0600 	mov.w	r6, #0
 800903e:	bf08      	it	eq
 8009040:	68e5      	ldreq	r5, [r4, #12]
 8009042:	f104 041a 	add.w	r4, r4, #26
 8009046:	bf08      	it	eq
 8009048:	1aed      	subeq	r5, r5, r3
 800904a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800904e:	bf08      	it	eq
 8009050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009054:	4293      	cmp	r3, r2
 8009056:	bfc4      	itt	gt
 8009058:	1a9b      	subgt	r3, r3, r2
 800905a:	18ed      	addgt	r5, r5, r3
 800905c:	42b5      	cmp	r5, r6
 800905e:	d11a      	bne.n	8009096 <_printf_common+0xd2>
 8009060:	2000      	movs	r0, #0
 8009062:	e008      	b.n	8009076 <_printf_common+0xb2>
 8009064:	2301      	movs	r3, #1
 8009066:	4652      	mov	r2, sl
 8009068:	4649      	mov	r1, r9
 800906a:	4638      	mov	r0, r7
 800906c:	47c0      	blx	r8
 800906e:	3001      	adds	r0, #1
 8009070:	d103      	bne.n	800907a <_printf_common+0xb6>
 8009072:	f04f 30ff 	mov.w	r0, #4294967295
 8009076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907a:	3501      	adds	r5, #1
 800907c:	e7c1      	b.n	8009002 <_printf_common+0x3e>
 800907e:	2030      	movs	r0, #48	; 0x30
 8009080:	18e1      	adds	r1, r4, r3
 8009082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009086:	1c5a      	adds	r2, r3, #1
 8009088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800908c:	4422      	add	r2, r4
 800908e:	3302      	adds	r3, #2
 8009090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009094:	e7c2      	b.n	800901c <_printf_common+0x58>
 8009096:	2301      	movs	r3, #1
 8009098:	4622      	mov	r2, r4
 800909a:	4649      	mov	r1, r9
 800909c:	4638      	mov	r0, r7
 800909e:	47c0      	blx	r8
 80090a0:	3001      	adds	r0, #1
 80090a2:	d0e6      	beq.n	8009072 <_printf_common+0xae>
 80090a4:	3601      	adds	r6, #1
 80090a6:	e7d9      	b.n	800905c <_printf_common+0x98>

080090a8 <_printf_i>:
 80090a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80090ac:	7e0f      	ldrb	r7, [r1, #24]
 80090ae:	4691      	mov	r9, r2
 80090b0:	2f78      	cmp	r7, #120	; 0x78
 80090b2:	4680      	mov	r8, r0
 80090b4:	460c      	mov	r4, r1
 80090b6:	469a      	mov	sl, r3
 80090b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80090ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80090be:	d807      	bhi.n	80090d0 <_printf_i+0x28>
 80090c0:	2f62      	cmp	r7, #98	; 0x62
 80090c2:	d80a      	bhi.n	80090da <_printf_i+0x32>
 80090c4:	2f00      	cmp	r7, #0
 80090c6:	f000 80d5 	beq.w	8009274 <_printf_i+0x1cc>
 80090ca:	2f58      	cmp	r7, #88	; 0x58
 80090cc:	f000 80c1 	beq.w	8009252 <_printf_i+0x1aa>
 80090d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80090d8:	e03a      	b.n	8009150 <_printf_i+0xa8>
 80090da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80090de:	2b15      	cmp	r3, #21
 80090e0:	d8f6      	bhi.n	80090d0 <_printf_i+0x28>
 80090e2:	a101      	add	r1, pc, #4	; (adr r1, 80090e8 <_printf_i+0x40>)
 80090e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80090e8:	08009141 	.word	0x08009141
 80090ec:	08009155 	.word	0x08009155
 80090f0:	080090d1 	.word	0x080090d1
 80090f4:	080090d1 	.word	0x080090d1
 80090f8:	080090d1 	.word	0x080090d1
 80090fc:	080090d1 	.word	0x080090d1
 8009100:	08009155 	.word	0x08009155
 8009104:	080090d1 	.word	0x080090d1
 8009108:	080090d1 	.word	0x080090d1
 800910c:	080090d1 	.word	0x080090d1
 8009110:	080090d1 	.word	0x080090d1
 8009114:	0800925b 	.word	0x0800925b
 8009118:	08009181 	.word	0x08009181
 800911c:	08009215 	.word	0x08009215
 8009120:	080090d1 	.word	0x080090d1
 8009124:	080090d1 	.word	0x080090d1
 8009128:	0800927d 	.word	0x0800927d
 800912c:	080090d1 	.word	0x080090d1
 8009130:	08009181 	.word	0x08009181
 8009134:	080090d1 	.word	0x080090d1
 8009138:	080090d1 	.word	0x080090d1
 800913c:	0800921d 	.word	0x0800921d
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	1d1a      	adds	r2, r3, #4
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	602a      	str	r2, [r5, #0]
 8009148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800914c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009150:	2301      	movs	r3, #1
 8009152:	e0a0      	b.n	8009296 <_printf_i+0x1ee>
 8009154:	6820      	ldr	r0, [r4, #0]
 8009156:	682b      	ldr	r3, [r5, #0]
 8009158:	0607      	lsls	r7, r0, #24
 800915a:	f103 0104 	add.w	r1, r3, #4
 800915e:	6029      	str	r1, [r5, #0]
 8009160:	d501      	bpl.n	8009166 <_printf_i+0xbe>
 8009162:	681e      	ldr	r6, [r3, #0]
 8009164:	e003      	b.n	800916e <_printf_i+0xc6>
 8009166:	0646      	lsls	r6, r0, #25
 8009168:	d5fb      	bpl.n	8009162 <_printf_i+0xba>
 800916a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800916e:	2e00      	cmp	r6, #0
 8009170:	da03      	bge.n	800917a <_printf_i+0xd2>
 8009172:	232d      	movs	r3, #45	; 0x2d
 8009174:	4276      	negs	r6, r6
 8009176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800917a:	230a      	movs	r3, #10
 800917c:	4859      	ldr	r0, [pc, #356]	; (80092e4 <_printf_i+0x23c>)
 800917e:	e012      	b.n	80091a6 <_printf_i+0xfe>
 8009180:	682b      	ldr	r3, [r5, #0]
 8009182:	6820      	ldr	r0, [r4, #0]
 8009184:	1d19      	adds	r1, r3, #4
 8009186:	6029      	str	r1, [r5, #0]
 8009188:	0605      	lsls	r5, r0, #24
 800918a:	d501      	bpl.n	8009190 <_printf_i+0xe8>
 800918c:	681e      	ldr	r6, [r3, #0]
 800918e:	e002      	b.n	8009196 <_printf_i+0xee>
 8009190:	0641      	lsls	r1, r0, #25
 8009192:	d5fb      	bpl.n	800918c <_printf_i+0xe4>
 8009194:	881e      	ldrh	r6, [r3, #0]
 8009196:	2f6f      	cmp	r7, #111	; 0x6f
 8009198:	bf0c      	ite	eq
 800919a:	2308      	moveq	r3, #8
 800919c:	230a      	movne	r3, #10
 800919e:	4851      	ldr	r0, [pc, #324]	; (80092e4 <_printf_i+0x23c>)
 80091a0:	2100      	movs	r1, #0
 80091a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80091a6:	6865      	ldr	r5, [r4, #4]
 80091a8:	2d00      	cmp	r5, #0
 80091aa:	bfa8      	it	ge
 80091ac:	6821      	ldrge	r1, [r4, #0]
 80091ae:	60a5      	str	r5, [r4, #8]
 80091b0:	bfa4      	itt	ge
 80091b2:	f021 0104 	bicge.w	r1, r1, #4
 80091b6:	6021      	strge	r1, [r4, #0]
 80091b8:	b90e      	cbnz	r6, 80091be <_printf_i+0x116>
 80091ba:	2d00      	cmp	r5, #0
 80091bc:	d04b      	beq.n	8009256 <_printf_i+0x1ae>
 80091be:	4615      	mov	r5, r2
 80091c0:	fbb6 f1f3 	udiv	r1, r6, r3
 80091c4:	fb03 6711 	mls	r7, r3, r1, r6
 80091c8:	5dc7      	ldrb	r7, [r0, r7]
 80091ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80091ce:	4637      	mov	r7, r6
 80091d0:	42bb      	cmp	r3, r7
 80091d2:	460e      	mov	r6, r1
 80091d4:	d9f4      	bls.n	80091c0 <_printf_i+0x118>
 80091d6:	2b08      	cmp	r3, #8
 80091d8:	d10b      	bne.n	80091f2 <_printf_i+0x14a>
 80091da:	6823      	ldr	r3, [r4, #0]
 80091dc:	07de      	lsls	r6, r3, #31
 80091de:	d508      	bpl.n	80091f2 <_printf_i+0x14a>
 80091e0:	6923      	ldr	r3, [r4, #16]
 80091e2:	6861      	ldr	r1, [r4, #4]
 80091e4:	4299      	cmp	r1, r3
 80091e6:	bfde      	ittt	le
 80091e8:	2330      	movle	r3, #48	; 0x30
 80091ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 80091ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 80091f2:	1b52      	subs	r2, r2, r5
 80091f4:	6122      	str	r2, [r4, #16]
 80091f6:	464b      	mov	r3, r9
 80091f8:	4621      	mov	r1, r4
 80091fa:	4640      	mov	r0, r8
 80091fc:	f8cd a000 	str.w	sl, [sp]
 8009200:	aa03      	add	r2, sp, #12
 8009202:	f7ff fedf 	bl	8008fc4 <_printf_common>
 8009206:	3001      	adds	r0, #1
 8009208:	d14a      	bne.n	80092a0 <_printf_i+0x1f8>
 800920a:	f04f 30ff 	mov.w	r0, #4294967295
 800920e:	b004      	add	sp, #16
 8009210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009214:	6823      	ldr	r3, [r4, #0]
 8009216:	f043 0320 	orr.w	r3, r3, #32
 800921a:	6023      	str	r3, [r4, #0]
 800921c:	2778      	movs	r7, #120	; 0x78
 800921e:	4832      	ldr	r0, [pc, #200]	; (80092e8 <_printf_i+0x240>)
 8009220:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	6829      	ldr	r1, [r5, #0]
 8009228:	061f      	lsls	r7, r3, #24
 800922a:	f851 6b04 	ldr.w	r6, [r1], #4
 800922e:	d402      	bmi.n	8009236 <_printf_i+0x18e>
 8009230:	065f      	lsls	r7, r3, #25
 8009232:	bf48      	it	mi
 8009234:	b2b6      	uxthmi	r6, r6
 8009236:	07df      	lsls	r7, r3, #31
 8009238:	bf48      	it	mi
 800923a:	f043 0320 	orrmi.w	r3, r3, #32
 800923e:	6029      	str	r1, [r5, #0]
 8009240:	bf48      	it	mi
 8009242:	6023      	strmi	r3, [r4, #0]
 8009244:	b91e      	cbnz	r6, 800924e <_printf_i+0x1a6>
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	f023 0320 	bic.w	r3, r3, #32
 800924c:	6023      	str	r3, [r4, #0]
 800924e:	2310      	movs	r3, #16
 8009250:	e7a6      	b.n	80091a0 <_printf_i+0xf8>
 8009252:	4824      	ldr	r0, [pc, #144]	; (80092e4 <_printf_i+0x23c>)
 8009254:	e7e4      	b.n	8009220 <_printf_i+0x178>
 8009256:	4615      	mov	r5, r2
 8009258:	e7bd      	b.n	80091d6 <_printf_i+0x12e>
 800925a:	682b      	ldr	r3, [r5, #0]
 800925c:	6826      	ldr	r6, [r4, #0]
 800925e:	1d18      	adds	r0, r3, #4
 8009260:	6961      	ldr	r1, [r4, #20]
 8009262:	6028      	str	r0, [r5, #0]
 8009264:	0635      	lsls	r5, r6, #24
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	d501      	bpl.n	800926e <_printf_i+0x1c6>
 800926a:	6019      	str	r1, [r3, #0]
 800926c:	e002      	b.n	8009274 <_printf_i+0x1cc>
 800926e:	0670      	lsls	r0, r6, #25
 8009270:	d5fb      	bpl.n	800926a <_printf_i+0x1c2>
 8009272:	8019      	strh	r1, [r3, #0]
 8009274:	2300      	movs	r3, #0
 8009276:	4615      	mov	r5, r2
 8009278:	6123      	str	r3, [r4, #16]
 800927a:	e7bc      	b.n	80091f6 <_printf_i+0x14e>
 800927c:	682b      	ldr	r3, [r5, #0]
 800927e:	2100      	movs	r1, #0
 8009280:	1d1a      	adds	r2, r3, #4
 8009282:	602a      	str	r2, [r5, #0]
 8009284:	681d      	ldr	r5, [r3, #0]
 8009286:	6862      	ldr	r2, [r4, #4]
 8009288:	4628      	mov	r0, r5
 800928a:	f000 fa2a 	bl	80096e2 <memchr>
 800928e:	b108      	cbz	r0, 8009294 <_printf_i+0x1ec>
 8009290:	1b40      	subs	r0, r0, r5
 8009292:	6060      	str	r0, [r4, #4]
 8009294:	6863      	ldr	r3, [r4, #4]
 8009296:	6123      	str	r3, [r4, #16]
 8009298:	2300      	movs	r3, #0
 800929a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800929e:	e7aa      	b.n	80091f6 <_printf_i+0x14e>
 80092a0:	462a      	mov	r2, r5
 80092a2:	4649      	mov	r1, r9
 80092a4:	4640      	mov	r0, r8
 80092a6:	6923      	ldr	r3, [r4, #16]
 80092a8:	47d0      	blx	sl
 80092aa:	3001      	adds	r0, #1
 80092ac:	d0ad      	beq.n	800920a <_printf_i+0x162>
 80092ae:	6823      	ldr	r3, [r4, #0]
 80092b0:	079b      	lsls	r3, r3, #30
 80092b2:	d413      	bmi.n	80092dc <_printf_i+0x234>
 80092b4:	68e0      	ldr	r0, [r4, #12]
 80092b6:	9b03      	ldr	r3, [sp, #12]
 80092b8:	4298      	cmp	r0, r3
 80092ba:	bfb8      	it	lt
 80092bc:	4618      	movlt	r0, r3
 80092be:	e7a6      	b.n	800920e <_printf_i+0x166>
 80092c0:	2301      	movs	r3, #1
 80092c2:	4632      	mov	r2, r6
 80092c4:	4649      	mov	r1, r9
 80092c6:	4640      	mov	r0, r8
 80092c8:	47d0      	blx	sl
 80092ca:	3001      	adds	r0, #1
 80092cc:	d09d      	beq.n	800920a <_printf_i+0x162>
 80092ce:	3501      	adds	r5, #1
 80092d0:	68e3      	ldr	r3, [r4, #12]
 80092d2:	9903      	ldr	r1, [sp, #12]
 80092d4:	1a5b      	subs	r3, r3, r1
 80092d6:	42ab      	cmp	r3, r5
 80092d8:	dcf2      	bgt.n	80092c0 <_printf_i+0x218>
 80092da:	e7eb      	b.n	80092b4 <_printf_i+0x20c>
 80092dc:	2500      	movs	r5, #0
 80092de:	f104 0619 	add.w	r6, r4, #25
 80092e2:	e7f5      	b.n	80092d0 <_printf_i+0x228>
 80092e4:	0800bad4 	.word	0x0800bad4
 80092e8:	0800bae5 	.word	0x0800bae5

080092ec <std>:
 80092ec:	2300      	movs	r3, #0
 80092ee:	b510      	push	{r4, lr}
 80092f0:	4604      	mov	r4, r0
 80092f2:	e9c0 3300 	strd	r3, r3, [r0]
 80092f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092fa:	6083      	str	r3, [r0, #8]
 80092fc:	8181      	strh	r1, [r0, #12]
 80092fe:	6643      	str	r3, [r0, #100]	; 0x64
 8009300:	81c2      	strh	r2, [r0, #14]
 8009302:	6183      	str	r3, [r0, #24]
 8009304:	4619      	mov	r1, r3
 8009306:	2208      	movs	r2, #8
 8009308:	305c      	adds	r0, #92	; 0x5c
 800930a:	f000 f914 	bl	8009536 <memset>
 800930e:	4b0d      	ldr	r3, [pc, #52]	; (8009344 <std+0x58>)
 8009310:	6224      	str	r4, [r4, #32]
 8009312:	6263      	str	r3, [r4, #36]	; 0x24
 8009314:	4b0c      	ldr	r3, [pc, #48]	; (8009348 <std+0x5c>)
 8009316:	62a3      	str	r3, [r4, #40]	; 0x28
 8009318:	4b0c      	ldr	r3, [pc, #48]	; (800934c <std+0x60>)
 800931a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800931c:	4b0c      	ldr	r3, [pc, #48]	; (8009350 <std+0x64>)
 800931e:	6323      	str	r3, [r4, #48]	; 0x30
 8009320:	4b0c      	ldr	r3, [pc, #48]	; (8009354 <std+0x68>)
 8009322:	429c      	cmp	r4, r3
 8009324:	d006      	beq.n	8009334 <std+0x48>
 8009326:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800932a:	4294      	cmp	r4, r2
 800932c:	d002      	beq.n	8009334 <std+0x48>
 800932e:	33d0      	adds	r3, #208	; 0xd0
 8009330:	429c      	cmp	r4, r3
 8009332:	d105      	bne.n	8009340 <std+0x54>
 8009334:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800933c:	f000 b9ce 	b.w	80096dc <__retarget_lock_init_recursive>
 8009340:	bd10      	pop	{r4, pc}
 8009342:	bf00      	nop
 8009344:	080094b1 	.word	0x080094b1
 8009348:	080094d3 	.word	0x080094d3
 800934c:	0800950b 	.word	0x0800950b
 8009350:	0800952f 	.word	0x0800952f
 8009354:	2000154c 	.word	0x2000154c

08009358 <stdio_exit_handler>:
 8009358:	4a02      	ldr	r2, [pc, #8]	; (8009364 <stdio_exit_handler+0xc>)
 800935a:	4903      	ldr	r1, [pc, #12]	; (8009368 <stdio_exit_handler+0x10>)
 800935c:	4803      	ldr	r0, [pc, #12]	; (800936c <stdio_exit_handler+0x14>)
 800935e:	f000 b869 	b.w	8009434 <_fwalk_sglue>
 8009362:	bf00      	nop
 8009364:	20000010 	.word	0x20000010
 8009368:	0800b095 	.word	0x0800b095
 800936c:	2000001c 	.word	0x2000001c

08009370 <cleanup_stdio>:
 8009370:	6841      	ldr	r1, [r0, #4]
 8009372:	4b0c      	ldr	r3, [pc, #48]	; (80093a4 <cleanup_stdio+0x34>)
 8009374:	b510      	push	{r4, lr}
 8009376:	4299      	cmp	r1, r3
 8009378:	4604      	mov	r4, r0
 800937a:	d001      	beq.n	8009380 <cleanup_stdio+0x10>
 800937c:	f001 fe8a 	bl	800b094 <_fflush_r>
 8009380:	68a1      	ldr	r1, [r4, #8]
 8009382:	4b09      	ldr	r3, [pc, #36]	; (80093a8 <cleanup_stdio+0x38>)
 8009384:	4299      	cmp	r1, r3
 8009386:	d002      	beq.n	800938e <cleanup_stdio+0x1e>
 8009388:	4620      	mov	r0, r4
 800938a:	f001 fe83 	bl	800b094 <_fflush_r>
 800938e:	68e1      	ldr	r1, [r4, #12]
 8009390:	4b06      	ldr	r3, [pc, #24]	; (80093ac <cleanup_stdio+0x3c>)
 8009392:	4299      	cmp	r1, r3
 8009394:	d004      	beq.n	80093a0 <cleanup_stdio+0x30>
 8009396:	4620      	mov	r0, r4
 8009398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800939c:	f001 be7a 	b.w	800b094 <_fflush_r>
 80093a0:	bd10      	pop	{r4, pc}
 80093a2:	bf00      	nop
 80093a4:	2000154c 	.word	0x2000154c
 80093a8:	200015b4 	.word	0x200015b4
 80093ac:	2000161c 	.word	0x2000161c

080093b0 <global_stdio_init.part.0>:
 80093b0:	b510      	push	{r4, lr}
 80093b2:	4b0b      	ldr	r3, [pc, #44]	; (80093e0 <global_stdio_init.part.0+0x30>)
 80093b4:	4c0b      	ldr	r4, [pc, #44]	; (80093e4 <global_stdio_init.part.0+0x34>)
 80093b6:	4a0c      	ldr	r2, [pc, #48]	; (80093e8 <global_stdio_init.part.0+0x38>)
 80093b8:	4620      	mov	r0, r4
 80093ba:	601a      	str	r2, [r3, #0]
 80093bc:	2104      	movs	r1, #4
 80093be:	2200      	movs	r2, #0
 80093c0:	f7ff ff94 	bl	80092ec <std>
 80093c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80093c8:	2201      	movs	r2, #1
 80093ca:	2109      	movs	r1, #9
 80093cc:	f7ff ff8e 	bl	80092ec <std>
 80093d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80093d4:	2202      	movs	r2, #2
 80093d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093da:	2112      	movs	r1, #18
 80093dc:	f7ff bf86 	b.w	80092ec <std>
 80093e0:	20001684 	.word	0x20001684
 80093e4:	2000154c 	.word	0x2000154c
 80093e8:	08009359 	.word	0x08009359

080093ec <__sfp_lock_acquire>:
 80093ec:	4801      	ldr	r0, [pc, #4]	; (80093f4 <__sfp_lock_acquire+0x8>)
 80093ee:	f000 b976 	b.w	80096de <__retarget_lock_acquire_recursive>
 80093f2:	bf00      	nop
 80093f4:	2000168d 	.word	0x2000168d

080093f8 <__sfp_lock_release>:
 80093f8:	4801      	ldr	r0, [pc, #4]	; (8009400 <__sfp_lock_release+0x8>)
 80093fa:	f000 b971 	b.w	80096e0 <__retarget_lock_release_recursive>
 80093fe:	bf00      	nop
 8009400:	2000168d 	.word	0x2000168d

08009404 <__sinit>:
 8009404:	b510      	push	{r4, lr}
 8009406:	4604      	mov	r4, r0
 8009408:	f7ff fff0 	bl	80093ec <__sfp_lock_acquire>
 800940c:	6a23      	ldr	r3, [r4, #32]
 800940e:	b11b      	cbz	r3, 8009418 <__sinit+0x14>
 8009410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009414:	f7ff bff0 	b.w	80093f8 <__sfp_lock_release>
 8009418:	4b04      	ldr	r3, [pc, #16]	; (800942c <__sinit+0x28>)
 800941a:	6223      	str	r3, [r4, #32]
 800941c:	4b04      	ldr	r3, [pc, #16]	; (8009430 <__sinit+0x2c>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1f5      	bne.n	8009410 <__sinit+0xc>
 8009424:	f7ff ffc4 	bl	80093b0 <global_stdio_init.part.0>
 8009428:	e7f2      	b.n	8009410 <__sinit+0xc>
 800942a:	bf00      	nop
 800942c:	08009371 	.word	0x08009371
 8009430:	20001684 	.word	0x20001684

08009434 <_fwalk_sglue>:
 8009434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009438:	4607      	mov	r7, r0
 800943a:	4688      	mov	r8, r1
 800943c:	4614      	mov	r4, r2
 800943e:	2600      	movs	r6, #0
 8009440:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009444:	f1b9 0901 	subs.w	r9, r9, #1
 8009448:	d505      	bpl.n	8009456 <_fwalk_sglue+0x22>
 800944a:	6824      	ldr	r4, [r4, #0]
 800944c:	2c00      	cmp	r4, #0
 800944e:	d1f7      	bne.n	8009440 <_fwalk_sglue+0xc>
 8009450:	4630      	mov	r0, r6
 8009452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009456:	89ab      	ldrh	r3, [r5, #12]
 8009458:	2b01      	cmp	r3, #1
 800945a:	d907      	bls.n	800946c <_fwalk_sglue+0x38>
 800945c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009460:	3301      	adds	r3, #1
 8009462:	d003      	beq.n	800946c <_fwalk_sglue+0x38>
 8009464:	4629      	mov	r1, r5
 8009466:	4638      	mov	r0, r7
 8009468:	47c0      	blx	r8
 800946a:	4306      	orrs	r6, r0
 800946c:	3568      	adds	r5, #104	; 0x68
 800946e:	e7e9      	b.n	8009444 <_fwalk_sglue+0x10>

08009470 <siprintf>:
 8009470:	b40e      	push	{r1, r2, r3}
 8009472:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009476:	b500      	push	{lr}
 8009478:	b09c      	sub	sp, #112	; 0x70
 800947a:	ab1d      	add	r3, sp, #116	; 0x74
 800947c:	9002      	str	r0, [sp, #8]
 800947e:	9006      	str	r0, [sp, #24]
 8009480:	9107      	str	r1, [sp, #28]
 8009482:	9104      	str	r1, [sp, #16]
 8009484:	4808      	ldr	r0, [pc, #32]	; (80094a8 <siprintf+0x38>)
 8009486:	4909      	ldr	r1, [pc, #36]	; (80094ac <siprintf+0x3c>)
 8009488:	f853 2b04 	ldr.w	r2, [r3], #4
 800948c:	9105      	str	r1, [sp, #20]
 800948e:	6800      	ldr	r0, [r0, #0]
 8009490:	a902      	add	r1, sp, #8
 8009492:	9301      	str	r3, [sp, #4]
 8009494:	f001 fc7e 	bl	800ad94 <_svfiprintf_r>
 8009498:	2200      	movs	r2, #0
 800949a:	9b02      	ldr	r3, [sp, #8]
 800949c:	701a      	strb	r2, [r3, #0]
 800949e:	b01c      	add	sp, #112	; 0x70
 80094a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80094a4:	b003      	add	sp, #12
 80094a6:	4770      	bx	lr
 80094a8:	20000068 	.word	0x20000068
 80094ac:	ffff0208 	.word	0xffff0208

080094b0 <__sread>:
 80094b0:	b510      	push	{r4, lr}
 80094b2:	460c      	mov	r4, r1
 80094b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094b8:	f000 f8c2 	bl	8009640 <_read_r>
 80094bc:	2800      	cmp	r0, #0
 80094be:	bfab      	itete	ge
 80094c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094c2:	89a3      	ldrhlt	r3, [r4, #12]
 80094c4:	181b      	addge	r3, r3, r0
 80094c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094ca:	bfac      	ite	ge
 80094cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80094ce:	81a3      	strhlt	r3, [r4, #12]
 80094d0:	bd10      	pop	{r4, pc}

080094d2 <__swrite>:
 80094d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094d6:	461f      	mov	r7, r3
 80094d8:	898b      	ldrh	r3, [r1, #12]
 80094da:	4605      	mov	r5, r0
 80094dc:	05db      	lsls	r3, r3, #23
 80094de:	460c      	mov	r4, r1
 80094e0:	4616      	mov	r6, r2
 80094e2:	d505      	bpl.n	80094f0 <__swrite+0x1e>
 80094e4:	2302      	movs	r3, #2
 80094e6:	2200      	movs	r2, #0
 80094e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094ec:	f000 f896 	bl	800961c <_lseek_r>
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	4632      	mov	r2, r6
 80094f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80094f8:	81a3      	strh	r3, [r4, #12]
 80094fa:	4628      	mov	r0, r5
 80094fc:	463b      	mov	r3, r7
 80094fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009506:	f000 b8ad 	b.w	8009664 <_write_r>

0800950a <__sseek>:
 800950a:	b510      	push	{r4, lr}
 800950c:	460c      	mov	r4, r1
 800950e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009512:	f000 f883 	bl	800961c <_lseek_r>
 8009516:	1c43      	adds	r3, r0, #1
 8009518:	89a3      	ldrh	r3, [r4, #12]
 800951a:	bf15      	itete	ne
 800951c:	6560      	strne	r0, [r4, #84]	; 0x54
 800951e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009526:	81a3      	strheq	r3, [r4, #12]
 8009528:	bf18      	it	ne
 800952a:	81a3      	strhne	r3, [r4, #12]
 800952c:	bd10      	pop	{r4, pc}

0800952e <__sclose>:
 800952e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009532:	f000 b80d 	b.w	8009550 <_close_r>

08009536 <memset>:
 8009536:	4603      	mov	r3, r0
 8009538:	4402      	add	r2, r0
 800953a:	4293      	cmp	r3, r2
 800953c:	d100      	bne.n	8009540 <memset+0xa>
 800953e:	4770      	bx	lr
 8009540:	f803 1b01 	strb.w	r1, [r3], #1
 8009544:	e7f9      	b.n	800953a <memset+0x4>
	...

08009548 <_localeconv_r>:
 8009548:	4800      	ldr	r0, [pc, #0]	; (800954c <_localeconv_r+0x4>)
 800954a:	4770      	bx	lr
 800954c:	2000015c 	.word	0x2000015c

08009550 <_close_r>:
 8009550:	b538      	push	{r3, r4, r5, lr}
 8009552:	2300      	movs	r3, #0
 8009554:	4d05      	ldr	r5, [pc, #20]	; (800956c <_close_r+0x1c>)
 8009556:	4604      	mov	r4, r0
 8009558:	4608      	mov	r0, r1
 800955a:	602b      	str	r3, [r5, #0]
 800955c:	f7fa fd6a 	bl	8004034 <_close>
 8009560:	1c43      	adds	r3, r0, #1
 8009562:	d102      	bne.n	800956a <_close_r+0x1a>
 8009564:	682b      	ldr	r3, [r5, #0]
 8009566:	b103      	cbz	r3, 800956a <_close_r+0x1a>
 8009568:	6023      	str	r3, [r4, #0]
 800956a:	bd38      	pop	{r3, r4, r5, pc}
 800956c:	20001688 	.word	0x20001688

08009570 <_reclaim_reent>:
 8009570:	4b29      	ldr	r3, [pc, #164]	; (8009618 <_reclaim_reent+0xa8>)
 8009572:	b570      	push	{r4, r5, r6, lr}
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4604      	mov	r4, r0
 8009578:	4283      	cmp	r3, r0
 800957a:	d04b      	beq.n	8009614 <_reclaim_reent+0xa4>
 800957c:	69c3      	ldr	r3, [r0, #28]
 800957e:	b143      	cbz	r3, 8009592 <_reclaim_reent+0x22>
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d144      	bne.n	8009610 <_reclaim_reent+0xa0>
 8009586:	69e3      	ldr	r3, [r4, #28]
 8009588:	6819      	ldr	r1, [r3, #0]
 800958a:	b111      	cbz	r1, 8009592 <_reclaim_reent+0x22>
 800958c:	4620      	mov	r0, r4
 800958e:	f000 ff33 	bl	800a3f8 <_free_r>
 8009592:	6961      	ldr	r1, [r4, #20]
 8009594:	b111      	cbz	r1, 800959c <_reclaim_reent+0x2c>
 8009596:	4620      	mov	r0, r4
 8009598:	f000 ff2e 	bl	800a3f8 <_free_r>
 800959c:	69e1      	ldr	r1, [r4, #28]
 800959e:	b111      	cbz	r1, 80095a6 <_reclaim_reent+0x36>
 80095a0:	4620      	mov	r0, r4
 80095a2:	f000 ff29 	bl	800a3f8 <_free_r>
 80095a6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80095a8:	b111      	cbz	r1, 80095b0 <_reclaim_reent+0x40>
 80095aa:	4620      	mov	r0, r4
 80095ac:	f000 ff24 	bl	800a3f8 <_free_r>
 80095b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095b2:	b111      	cbz	r1, 80095ba <_reclaim_reent+0x4a>
 80095b4:	4620      	mov	r0, r4
 80095b6:	f000 ff1f 	bl	800a3f8 <_free_r>
 80095ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80095bc:	b111      	cbz	r1, 80095c4 <_reclaim_reent+0x54>
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 ff1a 	bl	800a3f8 <_free_r>
 80095c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80095c6:	b111      	cbz	r1, 80095ce <_reclaim_reent+0x5e>
 80095c8:	4620      	mov	r0, r4
 80095ca:	f000 ff15 	bl	800a3f8 <_free_r>
 80095ce:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80095d0:	b111      	cbz	r1, 80095d8 <_reclaim_reent+0x68>
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 ff10 	bl	800a3f8 <_free_r>
 80095d8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80095da:	b111      	cbz	r1, 80095e2 <_reclaim_reent+0x72>
 80095dc:	4620      	mov	r0, r4
 80095de:	f000 ff0b 	bl	800a3f8 <_free_r>
 80095e2:	6a23      	ldr	r3, [r4, #32]
 80095e4:	b1b3      	cbz	r3, 8009614 <_reclaim_reent+0xa4>
 80095e6:	4620      	mov	r0, r4
 80095e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80095ec:	4718      	bx	r3
 80095ee:	5949      	ldr	r1, [r1, r5]
 80095f0:	b941      	cbnz	r1, 8009604 <_reclaim_reent+0x94>
 80095f2:	3504      	adds	r5, #4
 80095f4:	69e3      	ldr	r3, [r4, #28]
 80095f6:	2d80      	cmp	r5, #128	; 0x80
 80095f8:	68d9      	ldr	r1, [r3, #12]
 80095fa:	d1f8      	bne.n	80095ee <_reclaim_reent+0x7e>
 80095fc:	4620      	mov	r0, r4
 80095fe:	f000 fefb 	bl	800a3f8 <_free_r>
 8009602:	e7c0      	b.n	8009586 <_reclaim_reent+0x16>
 8009604:	680e      	ldr	r6, [r1, #0]
 8009606:	4620      	mov	r0, r4
 8009608:	f000 fef6 	bl	800a3f8 <_free_r>
 800960c:	4631      	mov	r1, r6
 800960e:	e7ef      	b.n	80095f0 <_reclaim_reent+0x80>
 8009610:	2500      	movs	r5, #0
 8009612:	e7ef      	b.n	80095f4 <_reclaim_reent+0x84>
 8009614:	bd70      	pop	{r4, r5, r6, pc}
 8009616:	bf00      	nop
 8009618:	20000068 	.word	0x20000068

0800961c <_lseek_r>:
 800961c:	b538      	push	{r3, r4, r5, lr}
 800961e:	4604      	mov	r4, r0
 8009620:	4608      	mov	r0, r1
 8009622:	4611      	mov	r1, r2
 8009624:	2200      	movs	r2, #0
 8009626:	4d05      	ldr	r5, [pc, #20]	; (800963c <_lseek_r+0x20>)
 8009628:	602a      	str	r2, [r5, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	f7fa fd26 	bl	800407c <_lseek>
 8009630:	1c43      	adds	r3, r0, #1
 8009632:	d102      	bne.n	800963a <_lseek_r+0x1e>
 8009634:	682b      	ldr	r3, [r5, #0]
 8009636:	b103      	cbz	r3, 800963a <_lseek_r+0x1e>
 8009638:	6023      	str	r3, [r4, #0]
 800963a:	bd38      	pop	{r3, r4, r5, pc}
 800963c:	20001688 	.word	0x20001688

08009640 <_read_r>:
 8009640:	b538      	push	{r3, r4, r5, lr}
 8009642:	4604      	mov	r4, r0
 8009644:	4608      	mov	r0, r1
 8009646:	4611      	mov	r1, r2
 8009648:	2200      	movs	r2, #0
 800964a:	4d05      	ldr	r5, [pc, #20]	; (8009660 <_read_r+0x20>)
 800964c:	602a      	str	r2, [r5, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	f7fa fcb7 	bl	8003fc2 <_read>
 8009654:	1c43      	adds	r3, r0, #1
 8009656:	d102      	bne.n	800965e <_read_r+0x1e>
 8009658:	682b      	ldr	r3, [r5, #0]
 800965a:	b103      	cbz	r3, 800965e <_read_r+0x1e>
 800965c:	6023      	str	r3, [r4, #0]
 800965e:	bd38      	pop	{r3, r4, r5, pc}
 8009660:	20001688 	.word	0x20001688

08009664 <_write_r>:
 8009664:	b538      	push	{r3, r4, r5, lr}
 8009666:	4604      	mov	r4, r0
 8009668:	4608      	mov	r0, r1
 800966a:	4611      	mov	r1, r2
 800966c:	2200      	movs	r2, #0
 800966e:	4d05      	ldr	r5, [pc, #20]	; (8009684 <_write_r+0x20>)
 8009670:	602a      	str	r2, [r5, #0]
 8009672:	461a      	mov	r2, r3
 8009674:	f7fa fcc2 	bl	8003ffc <_write>
 8009678:	1c43      	adds	r3, r0, #1
 800967a:	d102      	bne.n	8009682 <_write_r+0x1e>
 800967c:	682b      	ldr	r3, [r5, #0]
 800967e:	b103      	cbz	r3, 8009682 <_write_r+0x1e>
 8009680:	6023      	str	r3, [r4, #0]
 8009682:	bd38      	pop	{r3, r4, r5, pc}
 8009684:	20001688 	.word	0x20001688

08009688 <__errno>:
 8009688:	4b01      	ldr	r3, [pc, #4]	; (8009690 <__errno+0x8>)
 800968a:	6818      	ldr	r0, [r3, #0]
 800968c:	4770      	bx	lr
 800968e:	bf00      	nop
 8009690:	20000068 	.word	0x20000068

08009694 <__libc_init_array>:
 8009694:	b570      	push	{r4, r5, r6, lr}
 8009696:	2600      	movs	r6, #0
 8009698:	4d0c      	ldr	r5, [pc, #48]	; (80096cc <__libc_init_array+0x38>)
 800969a:	4c0d      	ldr	r4, [pc, #52]	; (80096d0 <__libc_init_array+0x3c>)
 800969c:	1b64      	subs	r4, r4, r5
 800969e:	10a4      	asrs	r4, r4, #2
 80096a0:	42a6      	cmp	r6, r4
 80096a2:	d109      	bne.n	80096b8 <__libc_init_array+0x24>
 80096a4:	f002 f888 	bl	800b7b8 <_init>
 80096a8:	2600      	movs	r6, #0
 80096aa:	4d0a      	ldr	r5, [pc, #40]	; (80096d4 <__libc_init_array+0x40>)
 80096ac:	4c0a      	ldr	r4, [pc, #40]	; (80096d8 <__libc_init_array+0x44>)
 80096ae:	1b64      	subs	r4, r4, r5
 80096b0:	10a4      	asrs	r4, r4, #2
 80096b2:	42a6      	cmp	r6, r4
 80096b4:	d105      	bne.n	80096c2 <__libc_init_array+0x2e>
 80096b6:	bd70      	pop	{r4, r5, r6, pc}
 80096b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096bc:	4798      	blx	r3
 80096be:	3601      	adds	r6, #1
 80096c0:	e7ee      	b.n	80096a0 <__libc_init_array+0xc>
 80096c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096c6:	4798      	blx	r3
 80096c8:	3601      	adds	r6, #1
 80096ca:	e7f2      	b.n	80096b2 <__libc_init_array+0x1e>
 80096cc:	0800be34 	.word	0x0800be34
 80096d0:	0800be34 	.word	0x0800be34
 80096d4:	0800be34 	.word	0x0800be34
 80096d8:	0800be3c 	.word	0x0800be3c

080096dc <__retarget_lock_init_recursive>:
 80096dc:	4770      	bx	lr

080096de <__retarget_lock_acquire_recursive>:
 80096de:	4770      	bx	lr

080096e0 <__retarget_lock_release_recursive>:
 80096e0:	4770      	bx	lr

080096e2 <memchr>:
 80096e2:	4603      	mov	r3, r0
 80096e4:	b510      	push	{r4, lr}
 80096e6:	b2c9      	uxtb	r1, r1
 80096e8:	4402      	add	r2, r0
 80096ea:	4293      	cmp	r3, r2
 80096ec:	4618      	mov	r0, r3
 80096ee:	d101      	bne.n	80096f4 <memchr+0x12>
 80096f0:	2000      	movs	r0, #0
 80096f2:	e003      	b.n	80096fc <memchr+0x1a>
 80096f4:	7804      	ldrb	r4, [r0, #0]
 80096f6:	3301      	adds	r3, #1
 80096f8:	428c      	cmp	r4, r1
 80096fa:	d1f6      	bne.n	80096ea <memchr+0x8>
 80096fc:	bd10      	pop	{r4, pc}

080096fe <memcpy>:
 80096fe:	440a      	add	r2, r1
 8009700:	4291      	cmp	r1, r2
 8009702:	f100 33ff 	add.w	r3, r0, #4294967295
 8009706:	d100      	bne.n	800970a <memcpy+0xc>
 8009708:	4770      	bx	lr
 800970a:	b510      	push	{r4, lr}
 800970c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009710:	4291      	cmp	r1, r2
 8009712:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009716:	d1f9      	bne.n	800970c <memcpy+0xe>
 8009718:	bd10      	pop	{r4, pc}

0800971a <quorem>:
 800971a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971e:	6903      	ldr	r3, [r0, #16]
 8009720:	690c      	ldr	r4, [r1, #16]
 8009722:	4607      	mov	r7, r0
 8009724:	42a3      	cmp	r3, r4
 8009726:	db7f      	blt.n	8009828 <quorem+0x10e>
 8009728:	3c01      	subs	r4, #1
 800972a:	f100 0514 	add.w	r5, r0, #20
 800972e:	f101 0814 	add.w	r8, r1, #20
 8009732:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009736:	9301      	str	r3, [sp, #4]
 8009738:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800973c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009740:	3301      	adds	r3, #1
 8009742:	429a      	cmp	r2, r3
 8009744:	fbb2 f6f3 	udiv	r6, r2, r3
 8009748:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800974c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009750:	d331      	bcc.n	80097b6 <quorem+0x9c>
 8009752:	f04f 0e00 	mov.w	lr, #0
 8009756:	4640      	mov	r0, r8
 8009758:	46ac      	mov	ip, r5
 800975a:	46f2      	mov	sl, lr
 800975c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009760:	b293      	uxth	r3, r2
 8009762:	fb06 e303 	mla	r3, r6, r3, lr
 8009766:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800976a:	0c1a      	lsrs	r2, r3, #16
 800976c:	b29b      	uxth	r3, r3
 800976e:	fb06 220e 	mla	r2, r6, lr, r2
 8009772:	ebaa 0303 	sub.w	r3, sl, r3
 8009776:	f8dc a000 	ldr.w	sl, [ip]
 800977a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800977e:	fa1f fa8a 	uxth.w	sl, sl
 8009782:	4453      	add	r3, sl
 8009784:	f8dc a000 	ldr.w	sl, [ip]
 8009788:	b292      	uxth	r2, r2
 800978a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800978e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009792:	b29b      	uxth	r3, r3
 8009794:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009798:	4581      	cmp	r9, r0
 800979a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800979e:	f84c 3b04 	str.w	r3, [ip], #4
 80097a2:	d2db      	bcs.n	800975c <quorem+0x42>
 80097a4:	f855 300b 	ldr.w	r3, [r5, fp]
 80097a8:	b92b      	cbnz	r3, 80097b6 <quorem+0x9c>
 80097aa:	9b01      	ldr	r3, [sp, #4]
 80097ac:	3b04      	subs	r3, #4
 80097ae:	429d      	cmp	r5, r3
 80097b0:	461a      	mov	r2, r3
 80097b2:	d32d      	bcc.n	8009810 <quorem+0xf6>
 80097b4:	613c      	str	r4, [r7, #16]
 80097b6:	4638      	mov	r0, r7
 80097b8:	f001 f994 	bl	800aae4 <__mcmp>
 80097bc:	2800      	cmp	r0, #0
 80097be:	db23      	blt.n	8009808 <quorem+0xee>
 80097c0:	4629      	mov	r1, r5
 80097c2:	2000      	movs	r0, #0
 80097c4:	3601      	adds	r6, #1
 80097c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80097ca:	f8d1 c000 	ldr.w	ip, [r1]
 80097ce:	b293      	uxth	r3, r2
 80097d0:	1ac3      	subs	r3, r0, r3
 80097d2:	0c12      	lsrs	r2, r2, #16
 80097d4:	fa1f f08c 	uxth.w	r0, ip
 80097d8:	4403      	add	r3, r0
 80097da:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80097de:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097e2:	b29b      	uxth	r3, r3
 80097e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097e8:	45c1      	cmp	r9, r8
 80097ea:	ea4f 4022 	mov.w	r0, r2, asr #16
 80097ee:	f841 3b04 	str.w	r3, [r1], #4
 80097f2:	d2e8      	bcs.n	80097c6 <quorem+0xac>
 80097f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097fc:	b922      	cbnz	r2, 8009808 <quorem+0xee>
 80097fe:	3b04      	subs	r3, #4
 8009800:	429d      	cmp	r5, r3
 8009802:	461a      	mov	r2, r3
 8009804:	d30a      	bcc.n	800981c <quorem+0x102>
 8009806:	613c      	str	r4, [r7, #16]
 8009808:	4630      	mov	r0, r6
 800980a:	b003      	add	sp, #12
 800980c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009810:	6812      	ldr	r2, [r2, #0]
 8009812:	3b04      	subs	r3, #4
 8009814:	2a00      	cmp	r2, #0
 8009816:	d1cd      	bne.n	80097b4 <quorem+0x9a>
 8009818:	3c01      	subs	r4, #1
 800981a:	e7c8      	b.n	80097ae <quorem+0x94>
 800981c:	6812      	ldr	r2, [r2, #0]
 800981e:	3b04      	subs	r3, #4
 8009820:	2a00      	cmp	r2, #0
 8009822:	d1f0      	bne.n	8009806 <quorem+0xec>
 8009824:	3c01      	subs	r4, #1
 8009826:	e7eb      	b.n	8009800 <quorem+0xe6>
 8009828:	2000      	movs	r0, #0
 800982a:	e7ee      	b.n	800980a <quorem+0xf0>
 800982c:	0000      	movs	r0, r0
	...

08009830 <_dtoa_r>:
 8009830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009834:	4616      	mov	r6, r2
 8009836:	461f      	mov	r7, r3
 8009838:	69c4      	ldr	r4, [r0, #28]
 800983a:	b099      	sub	sp, #100	; 0x64
 800983c:	4605      	mov	r5, r0
 800983e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009842:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009846:	b974      	cbnz	r4, 8009866 <_dtoa_r+0x36>
 8009848:	2010      	movs	r0, #16
 800984a:	f000 fe1d 	bl	800a488 <malloc>
 800984e:	4602      	mov	r2, r0
 8009850:	61e8      	str	r0, [r5, #28]
 8009852:	b920      	cbnz	r0, 800985e <_dtoa_r+0x2e>
 8009854:	21ef      	movs	r1, #239	; 0xef
 8009856:	4bac      	ldr	r3, [pc, #688]	; (8009b08 <_dtoa_r+0x2d8>)
 8009858:	48ac      	ldr	r0, [pc, #688]	; (8009b0c <_dtoa_r+0x2dc>)
 800985a:	f001 fc6d 	bl	800b138 <__assert_func>
 800985e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009862:	6004      	str	r4, [r0, #0]
 8009864:	60c4      	str	r4, [r0, #12]
 8009866:	69eb      	ldr	r3, [r5, #28]
 8009868:	6819      	ldr	r1, [r3, #0]
 800986a:	b151      	cbz	r1, 8009882 <_dtoa_r+0x52>
 800986c:	685a      	ldr	r2, [r3, #4]
 800986e:	2301      	movs	r3, #1
 8009870:	4093      	lsls	r3, r2
 8009872:	604a      	str	r2, [r1, #4]
 8009874:	608b      	str	r3, [r1, #8]
 8009876:	4628      	mov	r0, r5
 8009878:	f000 fefa 	bl	800a670 <_Bfree>
 800987c:	2200      	movs	r2, #0
 800987e:	69eb      	ldr	r3, [r5, #28]
 8009880:	601a      	str	r2, [r3, #0]
 8009882:	1e3b      	subs	r3, r7, #0
 8009884:	bfaf      	iteee	ge
 8009886:	2300      	movge	r3, #0
 8009888:	2201      	movlt	r2, #1
 800988a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800988e:	9305      	strlt	r3, [sp, #20]
 8009890:	bfa8      	it	ge
 8009892:	f8c8 3000 	strge.w	r3, [r8]
 8009896:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800989a:	4b9d      	ldr	r3, [pc, #628]	; (8009b10 <_dtoa_r+0x2e0>)
 800989c:	bfb8      	it	lt
 800989e:	f8c8 2000 	strlt.w	r2, [r8]
 80098a2:	ea33 0309 	bics.w	r3, r3, r9
 80098a6:	d119      	bne.n	80098dc <_dtoa_r+0xac>
 80098a8:	f242 730f 	movw	r3, #9999	; 0x270f
 80098ac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80098ae:	6013      	str	r3, [r2, #0]
 80098b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098b4:	4333      	orrs	r3, r6
 80098b6:	f000 8589 	beq.w	800a3cc <_dtoa_r+0xb9c>
 80098ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098bc:	b953      	cbnz	r3, 80098d4 <_dtoa_r+0xa4>
 80098be:	4b95      	ldr	r3, [pc, #596]	; (8009b14 <_dtoa_r+0x2e4>)
 80098c0:	e023      	b.n	800990a <_dtoa_r+0xda>
 80098c2:	4b95      	ldr	r3, [pc, #596]	; (8009b18 <_dtoa_r+0x2e8>)
 80098c4:	9303      	str	r3, [sp, #12]
 80098c6:	3308      	adds	r3, #8
 80098c8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80098ca:	6013      	str	r3, [r2, #0]
 80098cc:	9803      	ldr	r0, [sp, #12]
 80098ce:	b019      	add	sp, #100	; 0x64
 80098d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098d4:	4b8f      	ldr	r3, [pc, #572]	; (8009b14 <_dtoa_r+0x2e4>)
 80098d6:	9303      	str	r3, [sp, #12]
 80098d8:	3303      	adds	r3, #3
 80098da:	e7f5      	b.n	80098c8 <_dtoa_r+0x98>
 80098dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80098e0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80098e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80098e8:	2200      	movs	r2, #0
 80098ea:	2300      	movs	r3, #0
 80098ec:	f7f7 f85c 	bl	80009a8 <__aeabi_dcmpeq>
 80098f0:	4680      	mov	r8, r0
 80098f2:	b160      	cbz	r0, 800990e <_dtoa_r+0xde>
 80098f4:	2301      	movs	r3, #1
 80098f6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80098f8:	6013      	str	r3, [r2, #0]
 80098fa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f000 8562 	beq.w	800a3c6 <_dtoa_r+0xb96>
 8009902:	4b86      	ldr	r3, [pc, #536]	; (8009b1c <_dtoa_r+0x2ec>)
 8009904:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009906:	6013      	str	r3, [r2, #0]
 8009908:	3b01      	subs	r3, #1
 800990a:	9303      	str	r3, [sp, #12]
 800990c:	e7de      	b.n	80098cc <_dtoa_r+0x9c>
 800990e:	ab16      	add	r3, sp, #88	; 0x58
 8009910:	9301      	str	r3, [sp, #4]
 8009912:	ab17      	add	r3, sp, #92	; 0x5c
 8009914:	9300      	str	r3, [sp, #0]
 8009916:	4628      	mov	r0, r5
 8009918:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800991c:	f001 f98a 	bl	800ac34 <__d2b>
 8009920:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009924:	4682      	mov	sl, r0
 8009926:	2c00      	cmp	r4, #0
 8009928:	d07e      	beq.n	8009a28 <_dtoa_r+0x1f8>
 800992a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800992e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009930:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8009934:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009938:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800993c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8009940:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009944:	4619      	mov	r1, r3
 8009946:	2200      	movs	r2, #0
 8009948:	4b75      	ldr	r3, [pc, #468]	; (8009b20 <_dtoa_r+0x2f0>)
 800994a:	f7f6 fc0d 	bl	8000168 <__aeabi_dsub>
 800994e:	a368      	add	r3, pc, #416	; (adr r3, 8009af0 <_dtoa_r+0x2c0>)
 8009950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009954:	f7f6 fdc0 	bl	80004d8 <__aeabi_dmul>
 8009958:	a367      	add	r3, pc, #412	; (adr r3, 8009af8 <_dtoa_r+0x2c8>)
 800995a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800995e:	f7f6 fc05 	bl	800016c <__adddf3>
 8009962:	4606      	mov	r6, r0
 8009964:	4620      	mov	r0, r4
 8009966:	460f      	mov	r7, r1
 8009968:	f7f6 fd4c 	bl	8000404 <__aeabi_i2d>
 800996c:	a364      	add	r3, pc, #400	; (adr r3, 8009b00 <_dtoa_r+0x2d0>)
 800996e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009972:	f7f6 fdb1 	bl	80004d8 <__aeabi_dmul>
 8009976:	4602      	mov	r2, r0
 8009978:	460b      	mov	r3, r1
 800997a:	4630      	mov	r0, r6
 800997c:	4639      	mov	r1, r7
 800997e:	f7f6 fbf5 	bl	800016c <__adddf3>
 8009982:	4606      	mov	r6, r0
 8009984:	460f      	mov	r7, r1
 8009986:	f7f7 f857 	bl	8000a38 <__aeabi_d2iz>
 800998a:	2200      	movs	r2, #0
 800998c:	4683      	mov	fp, r0
 800998e:	2300      	movs	r3, #0
 8009990:	4630      	mov	r0, r6
 8009992:	4639      	mov	r1, r7
 8009994:	f7f7 f812 	bl	80009bc <__aeabi_dcmplt>
 8009998:	b148      	cbz	r0, 80099ae <_dtoa_r+0x17e>
 800999a:	4658      	mov	r0, fp
 800999c:	f7f6 fd32 	bl	8000404 <__aeabi_i2d>
 80099a0:	4632      	mov	r2, r6
 80099a2:	463b      	mov	r3, r7
 80099a4:	f7f7 f800 	bl	80009a8 <__aeabi_dcmpeq>
 80099a8:	b908      	cbnz	r0, 80099ae <_dtoa_r+0x17e>
 80099aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099ae:	f1bb 0f16 	cmp.w	fp, #22
 80099b2:	d857      	bhi.n	8009a64 <_dtoa_r+0x234>
 80099b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80099b8:	4b5a      	ldr	r3, [pc, #360]	; (8009b24 <_dtoa_r+0x2f4>)
 80099ba:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80099be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c2:	f7f6 fffb 	bl	80009bc <__aeabi_dcmplt>
 80099c6:	2800      	cmp	r0, #0
 80099c8:	d04e      	beq.n	8009a68 <_dtoa_r+0x238>
 80099ca:	2300      	movs	r3, #0
 80099cc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80099d2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80099d4:	1b1b      	subs	r3, r3, r4
 80099d6:	1e5a      	subs	r2, r3, #1
 80099d8:	bf46      	itte	mi
 80099da:	f1c3 0901 	rsbmi	r9, r3, #1
 80099de:	2300      	movmi	r3, #0
 80099e0:	f04f 0900 	movpl.w	r9, #0
 80099e4:	9209      	str	r2, [sp, #36]	; 0x24
 80099e6:	bf48      	it	mi
 80099e8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80099ea:	f1bb 0f00 	cmp.w	fp, #0
 80099ee:	db3d      	blt.n	8009a6c <_dtoa_r+0x23c>
 80099f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099f2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80099f6:	445b      	add	r3, fp
 80099f8:	9309      	str	r3, [sp, #36]	; 0x24
 80099fa:	2300      	movs	r3, #0
 80099fc:	930a      	str	r3, [sp, #40]	; 0x28
 80099fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a00:	2b09      	cmp	r3, #9
 8009a02:	d867      	bhi.n	8009ad4 <_dtoa_r+0x2a4>
 8009a04:	2b05      	cmp	r3, #5
 8009a06:	bfc4      	itt	gt
 8009a08:	3b04      	subgt	r3, #4
 8009a0a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8009a0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009a0e:	bfc8      	it	gt
 8009a10:	2400      	movgt	r4, #0
 8009a12:	f1a3 0302 	sub.w	r3, r3, #2
 8009a16:	bfd8      	it	le
 8009a18:	2401      	movle	r4, #1
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	f200 8086 	bhi.w	8009b2c <_dtoa_r+0x2fc>
 8009a20:	e8df f003 	tbb	[pc, r3]
 8009a24:	5637392c 	.word	0x5637392c
 8009a28:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8009a2c:	441c      	add	r4, r3
 8009a2e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8009a32:	2b20      	cmp	r3, #32
 8009a34:	bfc1      	itttt	gt
 8009a36:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009a3a:	fa09 f903 	lslgt.w	r9, r9, r3
 8009a3e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8009a42:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009a46:	bfd6      	itet	le
 8009a48:	f1c3 0320 	rsble	r3, r3, #32
 8009a4c:	ea49 0003 	orrgt.w	r0, r9, r3
 8009a50:	fa06 f003 	lslle.w	r0, r6, r3
 8009a54:	f7f6 fcc6 	bl	80003e4 <__aeabi_ui2d>
 8009a58:	2201      	movs	r2, #1
 8009a5a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009a5e:	3c01      	subs	r4, #1
 8009a60:	9213      	str	r2, [sp, #76]	; 0x4c
 8009a62:	e76f      	b.n	8009944 <_dtoa_r+0x114>
 8009a64:	2301      	movs	r3, #1
 8009a66:	e7b3      	b.n	80099d0 <_dtoa_r+0x1a0>
 8009a68:	900f      	str	r0, [sp, #60]	; 0x3c
 8009a6a:	e7b2      	b.n	80099d2 <_dtoa_r+0x1a2>
 8009a6c:	f1cb 0300 	rsb	r3, fp, #0
 8009a70:	930a      	str	r3, [sp, #40]	; 0x28
 8009a72:	2300      	movs	r3, #0
 8009a74:	eba9 090b 	sub.w	r9, r9, fp
 8009a78:	930e      	str	r3, [sp, #56]	; 0x38
 8009a7a:	e7c0      	b.n	80099fe <_dtoa_r+0x1ce>
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	dc55      	bgt.n	8009b32 <_dtoa_r+0x302>
 8009a86:	2301      	movs	r3, #1
 8009a88:	461a      	mov	r2, r3
 8009a8a:	9306      	str	r3, [sp, #24]
 8009a8c:	9308      	str	r3, [sp, #32]
 8009a8e:	9223      	str	r2, [sp, #140]	; 0x8c
 8009a90:	e00b      	b.n	8009aaa <_dtoa_r+0x27a>
 8009a92:	2301      	movs	r3, #1
 8009a94:	e7f3      	b.n	8009a7e <_dtoa_r+0x24e>
 8009a96:	2300      	movs	r3, #0
 8009a98:	930b      	str	r3, [sp, #44]	; 0x2c
 8009a9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009a9c:	445b      	add	r3, fp
 8009a9e:	9306      	str	r3, [sp, #24]
 8009aa0:	3301      	adds	r3, #1
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	9308      	str	r3, [sp, #32]
 8009aa6:	bfb8      	it	lt
 8009aa8:	2301      	movlt	r3, #1
 8009aaa:	2100      	movs	r1, #0
 8009aac:	2204      	movs	r2, #4
 8009aae:	69e8      	ldr	r0, [r5, #28]
 8009ab0:	f102 0614 	add.w	r6, r2, #20
 8009ab4:	429e      	cmp	r6, r3
 8009ab6:	d940      	bls.n	8009b3a <_dtoa_r+0x30a>
 8009ab8:	6041      	str	r1, [r0, #4]
 8009aba:	4628      	mov	r0, r5
 8009abc:	f000 fd98 	bl	800a5f0 <_Balloc>
 8009ac0:	9003      	str	r0, [sp, #12]
 8009ac2:	2800      	cmp	r0, #0
 8009ac4:	d13c      	bne.n	8009b40 <_dtoa_r+0x310>
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	f240 11af 	movw	r1, #431	; 0x1af
 8009acc:	4b16      	ldr	r3, [pc, #88]	; (8009b28 <_dtoa_r+0x2f8>)
 8009ace:	e6c3      	b.n	8009858 <_dtoa_r+0x28>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e7e1      	b.n	8009a98 <_dtoa_r+0x268>
 8009ad4:	2401      	movs	r4, #1
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	940b      	str	r4, [sp, #44]	; 0x2c
 8009ada:	9322      	str	r3, [sp, #136]	; 0x88
 8009adc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	9306      	str	r3, [sp, #24]
 8009ae4:	9308      	str	r3, [sp, #32]
 8009ae6:	2312      	movs	r3, #18
 8009ae8:	e7d1      	b.n	8009a8e <_dtoa_r+0x25e>
 8009aea:	bf00      	nop
 8009aec:	f3af 8000 	nop.w
 8009af0:	636f4361 	.word	0x636f4361
 8009af4:	3fd287a7 	.word	0x3fd287a7
 8009af8:	8b60c8b3 	.word	0x8b60c8b3
 8009afc:	3fc68a28 	.word	0x3fc68a28
 8009b00:	509f79fb 	.word	0x509f79fb
 8009b04:	3fd34413 	.word	0x3fd34413
 8009b08:	0800bb03 	.word	0x0800bb03
 8009b0c:	0800bb1a 	.word	0x0800bb1a
 8009b10:	7ff00000 	.word	0x7ff00000
 8009b14:	0800baff 	.word	0x0800baff
 8009b18:	0800baf6 	.word	0x0800baf6
 8009b1c:	0800bad3 	.word	0x0800bad3
 8009b20:	3ff80000 	.word	0x3ff80000
 8009b24:	0800bc08 	.word	0x0800bc08
 8009b28:	0800bb72 	.word	0x0800bb72
 8009b2c:	2301      	movs	r3, #1
 8009b2e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b30:	e7d4      	b.n	8009adc <_dtoa_r+0x2ac>
 8009b32:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009b34:	9306      	str	r3, [sp, #24]
 8009b36:	9308      	str	r3, [sp, #32]
 8009b38:	e7b7      	b.n	8009aaa <_dtoa_r+0x27a>
 8009b3a:	3101      	adds	r1, #1
 8009b3c:	0052      	lsls	r2, r2, #1
 8009b3e:	e7b7      	b.n	8009ab0 <_dtoa_r+0x280>
 8009b40:	69eb      	ldr	r3, [r5, #28]
 8009b42:	9a03      	ldr	r2, [sp, #12]
 8009b44:	601a      	str	r2, [r3, #0]
 8009b46:	9b08      	ldr	r3, [sp, #32]
 8009b48:	2b0e      	cmp	r3, #14
 8009b4a:	f200 80a8 	bhi.w	8009c9e <_dtoa_r+0x46e>
 8009b4e:	2c00      	cmp	r4, #0
 8009b50:	f000 80a5 	beq.w	8009c9e <_dtoa_r+0x46e>
 8009b54:	f1bb 0f00 	cmp.w	fp, #0
 8009b58:	dd34      	ble.n	8009bc4 <_dtoa_r+0x394>
 8009b5a:	4b9a      	ldr	r3, [pc, #616]	; (8009dc4 <_dtoa_r+0x594>)
 8009b5c:	f00b 020f 	and.w	r2, fp, #15
 8009b60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009b68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009b6c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009b70:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009b74:	d016      	beq.n	8009ba4 <_dtoa_r+0x374>
 8009b76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009b7a:	4b93      	ldr	r3, [pc, #588]	; (8009dc8 <_dtoa_r+0x598>)
 8009b7c:	2703      	movs	r7, #3
 8009b7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b82:	f7f6 fdd3 	bl	800072c <__aeabi_ddiv>
 8009b86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b8a:	f004 040f 	and.w	r4, r4, #15
 8009b8e:	4e8e      	ldr	r6, [pc, #568]	; (8009dc8 <_dtoa_r+0x598>)
 8009b90:	b954      	cbnz	r4, 8009ba8 <_dtoa_r+0x378>
 8009b92:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009b96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b9a:	f7f6 fdc7 	bl	800072c <__aeabi_ddiv>
 8009b9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ba2:	e029      	b.n	8009bf8 <_dtoa_r+0x3c8>
 8009ba4:	2702      	movs	r7, #2
 8009ba6:	e7f2      	b.n	8009b8e <_dtoa_r+0x35e>
 8009ba8:	07e1      	lsls	r1, r4, #31
 8009baa:	d508      	bpl.n	8009bbe <_dtoa_r+0x38e>
 8009bac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009bb0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009bb4:	f7f6 fc90 	bl	80004d8 <__aeabi_dmul>
 8009bb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009bbc:	3701      	adds	r7, #1
 8009bbe:	1064      	asrs	r4, r4, #1
 8009bc0:	3608      	adds	r6, #8
 8009bc2:	e7e5      	b.n	8009b90 <_dtoa_r+0x360>
 8009bc4:	f000 80a5 	beq.w	8009d12 <_dtoa_r+0x4e2>
 8009bc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009bcc:	f1cb 0400 	rsb	r4, fp, #0
 8009bd0:	4b7c      	ldr	r3, [pc, #496]	; (8009dc4 <_dtoa_r+0x594>)
 8009bd2:	f004 020f 	and.w	r2, r4, #15
 8009bd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bde:	f7f6 fc7b 	bl	80004d8 <__aeabi_dmul>
 8009be2:	2702      	movs	r7, #2
 8009be4:	2300      	movs	r3, #0
 8009be6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bea:	4e77      	ldr	r6, [pc, #476]	; (8009dc8 <_dtoa_r+0x598>)
 8009bec:	1124      	asrs	r4, r4, #4
 8009bee:	2c00      	cmp	r4, #0
 8009bf0:	f040 8084 	bne.w	8009cfc <_dtoa_r+0x4cc>
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d1d2      	bne.n	8009b9e <_dtoa_r+0x36e>
 8009bf8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009bfc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009c00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 8087 	beq.w	8009d16 <_dtoa_r+0x4e6>
 8009c08:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	4b6f      	ldr	r3, [pc, #444]	; (8009dcc <_dtoa_r+0x59c>)
 8009c10:	f7f6 fed4 	bl	80009bc <__aeabi_dcmplt>
 8009c14:	2800      	cmp	r0, #0
 8009c16:	d07e      	beq.n	8009d16 <_dtoa_r+0x4e6>
 8009c18:	9b08      	ldr	r3, [sp, #32]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d07b      	beq.n	8009d16 <_dtoa_r+0x4e6>
 8009c1e:	9b06      	ldr	r3, [sp, #24]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	dd38      	ble.n	8009c96 <_dtoa_r+0x466>
 8009c24:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009c28:	2200      	movs	r2, #0
 8009c2a:	4b69      	ldr	r3, [pc, #420]	; (8009dd0 <_dtoa_r+0x5a0>)
 8009c2c:	f7f6 fc54 	bl	80004d8 <__aeabi_dmul>
 8009c30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c34:	9c06      	ldr	r4, [sp, #24]
 8009c36:	f10b 38ff 	add.w	r8, fp, #4294967295
 8009c3a:	3701      	adds	r7, #1
 8009c3c:	4638      	mov	r0, r7
 8009c3e:	f7f6 fbe1 	bl	8000404 <__aeabi_i2d>
 8009c42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c46:	f7f6 fc47 	bl	80004d8 <__aeabi_dmul>
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	4b61      	ldr	r3, [pc, #388]	; (8009dd4 <_dtoa_r+0x5a4>)
 8009c4e:	f7f6 fa8d 	bl	800016c <__adddf3>
 8009c52:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009c56:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009c5a:	9611      	str	r6, [sp, #68]	; 0x44
 8009c5c:	2c00      	cmp	r4, #0
 8009c5e:	d15d      	bne.n	8009d1c <_dtoa_r+0x4ec>
 8009c60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c64:	2200      	movs	r2, #0
 8009c66:	4b5c      	ldr	r3, [pc, #368]	; (8009dd8 <_dtoa_r+0x5a8>)
 8009c68:	f7f6 fa7e 	bl	8000168 <__aeabi_dsub>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	460b      	mov	r3, r1
 8009c70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c74:	4633      	mov	r3, r6
 8009c76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c78:	f7f6 febe 	bl	80009f8 <__aeabi_dcmpgt>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	f040 8295 	bne.w	800a1ac <_dtoa_r+0x97c>
 8009c82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c86:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009c88:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009c8c:	f7f6 fe96 	bl	80009bc <__aeabi_dcmplt>
 8009c90:	2800      	cmp	r0, #0
 8009c92:	f040 8289 	bne.w	800a1a8 <_dtoa_r+0x978>
 8009c96:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8009c9a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c9e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	f2c0 8151 	blt.w	8009f48 <_dtoa_r+0x718>
 8009ca6:	f1bb 0f0e 	cmp.w	fp, #14
 8009caa:	f300 814d 	bgt.w	8009f48 <_dtoa_r+0x718>
 8009cae:	4b45      	ldr	r3, [pc, #276]	; (8009dc4 <_dtoa_r+0x594>)
 8009cb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009cb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009cb8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8009cbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f280 80da 	bge.w	8009e78 <_dtoa_r+0x648>
 8009cc4:	9b08      	ldr	r3, [sp, #32]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f300 80d6 	bgt.w	8009e78 <_dtoa_r+0x648>
 8009ccc:	f040 826b 	bne.w	800a1a6 <_dtoa_r+0x976>
 8009cd0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	4b40      	ldr	r3, [pc, #256]	; (8009dd8 <_dtoa_r+0x5a8>)
 8009cd8:	f7f6 fbfe 	bl	80004d8 <__aeabi_dmul>
 8009cdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009ce0:	f7f6 fe80 	bl	80009e4 <__aeabi_dcmpge>
 8009ce4:	9c08      	ldr	r4, [sp, #32]
 8009ce6:	4626      	mov	r6, r4
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	f040 8241 	bne.w	800a170 <_dtoa_r+0x940>
 8009cee:	2331      	movs	r3, #49	; 0x31
 8009cf0:	9f03      	ldr	r7, [sp, #12]
 8009cf2:	f10b 0b01 	add.w	fp, fp, #1
 8009cf6:	f807 3b01 	strb.w	r3, [r7], #1
 8009cfa:	e23d      	b.n	800a178 <_dtoa_r+0x948>
 8009cfc:	07e2      	lsls	r2, r4, #31
 8009cfe:	d505      	bpl.n	8009d0c <_dtoa_r+0x4dc>
 8009d00:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d04:	f7f6 fbe8 	bl	80004d8 <__aeabi_dmul>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	3701      	adds	r7, #1
 8009d0c:	1064      	asrs	r4, r4, #1
 8009d0e:	3608      	adds	r6, #8
 8009d10:	e76d      	b.n	8009bee <_dtoa_r+0x3be>
 8009d12:	2702      	movs	r7, #2
 8009d14:	e770      	b.n	8009bf8 <_dtoa_r+0x3c8>
 8009d16:	46d8      	mov	r8, fp
 8009d18:	9c08      	ldr	r4, [sp, #32]
 8009d1a:	e78f      	b.n	8009c3c <_dtoa_r+0x40c>
 8009d1c:	9903      	ldr	r1, [sp, #12]
 8009d1e:	4b29      	ldr	r3, [pc, #164]	; (8009dc4 <_dtoa_r+0x594>)
 8009d20:	4421      	add	r1, r4
 8009d22:	9112      	str	r1, [sp, #72]	; 0x48
 8009d24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d26:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d2a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8009d2e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d32:	2900      	cmp	r1, #0
 8009d34:	d054      	beq.n	8009de0 <_dtoa_r+0x5b0>
 8009d36:	2000      	movs	r0, #0
 8009d38:	4928      	ldr	r1, [pc, #160]	; (8009ddc <_dtoa_r+0x5ac>)
 8009d3a:	f7f6 fcf7 	bl	800072c <__aeabi_ddiv>
 8009d3e:	463b      	mov	r3, r7
 8009d40:	4632      	mov	r2, r6
 8009d42:	f7f6 fa11 	bl	8000168 <__aeabi_dsub>
 8009d46:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009d4a:	9f03      	ldr	r7, [sp, #12]
 8009d4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d50:	f7f6 fe72 	bl	8000a38 <__aeabi_d2iz>
 8009d54:	4604      	mov	r4, r0
 8009d56:	f7f6 fb55 	bl	8000404 <__aeabi_i2d>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d62:	f7f6 fa01 	bl	8000168 <__aeabi_dsub>
 8009d66:	4602      	mov	r2, r0
 8009d68:	460b      	mov	r3, r1
 8009d6a:	3430      	adds	r4, #48	; 0x30
 8009d6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d74:	f807 4b01 	strb.w	r4, [r7], #1
 8009d78:	f7f6 fe20 	bl	80009bc <__aeabi_dcmplt>
 8009d7c:	2800      	cmp	r0, #0
 8009d7e:	d173      	bne.n	8009e68 <_dtoa_r+0x638>
 8009d80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d84:	2000      	movs	r0, #0
 8009d86:	4911      	ldr	r1, [pc, #68]	; (8009dcc <_dtoa_r+0x59c>)
 8009d88:	f7f6 f9ee 	bl	8000168 <__aeabi_dsub>
 8009d8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009d90:	f7f6 fe14 	bl	80009bc <__aeabi_dcmplt>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	f040 80b6 	bne.w	8009f06 <_dtoa_r+0x6d6>
 8009d9a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009d9c:	429f      	cmp	r7, r3
 8009d9e:	f43f af7a 	beq.w	8009c96 <_dtoa_r+0x466>
 8009da2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009da6:	2200      	movs	r2, #0
 8009da8:	4b09      	ldr	r3, [pc, #36]	; (8009dd0 <_dtoa_r+0x5a0>)
 8009daa:	f7f6 fb95 	bl	80004d8 <__aeabi_dmul>
 8009dae:	2200      	movs	r2, #0
 8009db0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009db4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009db8:	4b05      	ldr	r3, [pc, #20]	; (8009dd0 <_dtoa_r+0x5a0>)
 8009dba:	f7f6 fb8d 	bl	80004d8 <__aeabi_dmul>
 8009dbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009dc2:	e7c3      	b.n	8009d4c <_dtoa_r+0x51c>
 8009dc4:	0800bc08 	.word	0x0800bc08
 8009dc8:	0800bbe0 	.word	0x0800bbe0
 8009dcc:	3ff00000 	.word	0x3ff00000
 8009dd0:	40240000 	.word	0x40240000
 8009dd4:	401c0000 	.word	0x401c0000
 8009dd8:	40140000 	.word	0x40140000
 8009ddc:	3fe00000 	.word	0x3fe00000
 8009de0:	4630      	mov	r0, r6
 8009de2:	4639      	mov	r1, r7
 8009de4:	f7f6 fb78 	bl	80004d8 <__aeabi_dmul>
 8009de8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009dea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009dee:	9c03      	ldr	r4, [sp, #12]
 8009df0:	9314      	str	r3, [sp, #80]	; 0x50
 8009df2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009df6:	f7f6 fe1f 	bl	8000a38 <__aeabi_d2iz>
 8009dfa:	9015      	str	r0, [sp, #84]	; 0x54
 8009dfc:	f7f6 fb02 	bl	8000404 <__aeabi_i2d>
 8009e00:	4602      	mov	r2, r0
 8009e02:	460b      	mov	r3, r1
 8009e04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e08:	f7f6 f9ae 	bl	8000168 <__aeabi_dsub>
 8009e0c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e0e:	4606      	mov	r6, r0
 8009e10:	3330      	adds	r3, #48	; 0x30
 8009e12:	f804 3b01 	strb.w	r3, [r4], #1
 8009e16:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009e18:	460f      	mov	r7, r1
 8009e1a:	429c      	cmp	r4, r3
 8009e1c:	f04f 0200 	mov.w	r2, #0
 8009e20:	d124      	bne.n	8009e6c <_dtoa_r+0x63c>
 8009e22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009e26:	4baf      	ldr	r3, [pc, #700]	; (800a0e4 <_dtoa_r+0x8b4>)
 8009e28:	f7f6 f9a0 	bl	800016c <__adddf3>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	460b      	mov	r3, r1
 8009e30:	4630      	mov	r0, r6
 8009e32:	4639      	mov	r1, r7
 8009e34:	f7f6 fde0 	bl	80009f8 <__aeabi_dcmpgt>
 8009e38:	2800      	cmp	r0, #0
 8009e3a:	d163      	bne.n	8009f04 <_dtoa_r+0x6d4>
 8009e3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009e40:	2000      	movs	r0, #0
 8009e42:	49a8      	ldr	r1, [pc, #672]	; (800a0e4 <_dtoa_r+0x8b4>)
 8009e44:	f7f6 f990 	bl	8000168 <__aeabi_dsub>
 8009e48:	4602      	mov	r2, r0
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	4639      	mov	r1, r7
 8009e50:	f7f6 fdb4 	bl	80009bc <__aeabi_dcmplt>
 8009e54:	2800      	cmp	r0, #0
 8009e56:	f43f af1e 	beq.w	8009c96 <_dtoa_r+0x466>
 8009e5a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009e5c:	1e7b      	subs	r3, r7, #1
 8009e5e:	9314      	str	r3, [sp, #80]	; 0x50
 8009e60:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009e64:	2b30      	cmp	r3, #48	; 0x30
 8009e66:	d0f8      	beq.n	8009e5a <_dtoa_r+0x62a>
 8009e68:	46c3      	mov	fp, r8
 8009e6a:	e03b      	b.n	8009ee4 <_dtoa_r+0x6b4>
 8009e6c:	4b9e      	ldr	r3, [pc, #632]	; (800a0e8 <_dtoa_r+0x8b8>)
 8009e6e:	f7f6 fb33 	bl	80004d8 <__aeabi_dmul>
 8009e72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e76:	e7bc      	b.n	8009df2 <_dtoa_r+0x5c2>
 8009e78:	9f03      	ldr	r7, [sp, #12]
 8009e7a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009e7e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e82:	4640      	mov	r0, r8
 8009e84:	4649      	mov	r1, r9
 8009e86:	f7f6 fc51 	bl	800072c <__aeabi_ddiv>
 8009e8a:	f7f6 fdd5 	bl	8000a38 <__aeabi_d2iz>
 8009e8e:	4604      	mov	r4, r0
 8009e90:	f7f6 fab8 	bl	8000404 <__aeabi_i2d>
 8009e94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e98:	f7f6 fb1e 	bl	80004d8 <__aeabi_dmul>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	4640      	mov	r0, r8
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	f7f6 f960 	bl	8000168 <__aeabi_dsub>
 8009ea8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8009eac:	f807 6b01 	strb.w	r6, [r7], #1
 8009eb0:	9e03      	ldr	r6, [sp, #12]
 8009eb2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8009eb6:	1bbe      	subs	r6, r7, r6
 8009eb8:	45b4      	cmp	ip, r6
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	d136      	bne.n	8009f2e <_dtoa_r+0x6fe>
 8009ec0:	f7f6 f954 	bl	800016c <__adddf3>
 8009ec4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ec8:	4680      	mov	r8, r0
 8009eca:	4689      	mov	r9, r1
 8009ecc:	f7f6 fd94 	bl	80009f8 <__aeabi_dcmpgt>
 8009ed0:	bb58      	cbnz	r0, 8009f2a <_dtoa_r+0x6fa>
 8009ed2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ed6:	4640      	mov	r0, r8
 8009ed8:	4649      	mov	r1, r9
 8009eda:	f7f6 fd65 	bl	80009a8 <__aeabi_dcmpeq>
 8009ede:	b108      	cbz	r0, 8009ee4 <_dtoa_r+0x6b4>
 8009ee0:	07e3      	lsls	r3, r4, #31
 8009ee2:	d422      	bmi.n	8009f2a <_dtoa_r+0x6fa>
 8009ee4:	4651      	mov	r1, sl
 8009ee6:	4628      	mov	r0, r5
 8009ee8:	f000 fbc2 	bl	800a670 <_Bfree>
 8009eec:	2300      	movs	r3, #0
 8009eee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ef0:	703b      	strb	r3, [r7, #0]
 8009ef2:	f10b 0301 	add.w	r3, fp, #1
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f43f ace6 	beq.w	80098cc <_dtoa_r+0x9c>
 8009f00:	601f      	str	r7, [r3, #0]
 8009f02:	e4e3      	b.n	80098cc <_dtoa_r+0x9c>
 8009f04:	4627      	mov	r7, r4
 8009f06:	463b      	mov	r3, r7
 8009f08:	461f      	mov	r7, r3
 8009f0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f0e:	2a39      	cmp	r2, #57	; 0x39
 8009f10:	d107      	bne.n	8009f22 <_dtoa_r+0x6f2>
 8009f12:	9a03      	ldr	r2, [sp, #12]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d1f7      	bne.n	8009f08 <_dtoa_r+0x6d8>
 8009f18:	2230      	movs	r2, #48	; 0x30
 8009f1a:	9903      	ldr	r1, [sp, #12]
 8009f1c:	f108 0801 	add.w	r8, r8, #1
 8009f20:	700a      	strb	r2, [r1, #0]
 8009f22:	781a      	ldrb	r2, [r3, #0]
 8009f24:	3201      	adds	r2, #1
 8009f26:	701a      	strb	r2, [r3, #0]
 8009f28:	e79e      	b.n	8009e68 <_dtoa_r+0x638>
 8009f2a:	46d8      	mov	r8, fp
 8009f2c:	e7eb      	b.n	8009f06 <_dtoa_r+0x6d6>
 8009f2e:	2200      	movs	r2, #0
 8009f30:	4b6d      	ldr	r3, [pc, #436]	; (800a0e8 <_dtoa_r+0x8b8>)
 8009f32:	f7f6 fad1 	bl	80004d8 <__aeabi_dmul>
 8009f36:	2200      	movs	r2, #0
 8009f38:	2300      	movs	r3, #0
 8009f3a:	4680      	mov	r8, r0
 8009f3c:	4689      	mov	r9, r1
 8009f3e:	f7f6 fd33 	bl	80009a8 <__aeabi_dcmpeq>
 8009f42:	2800      	cmp	r0, #0
 8009f44:	d09b      	beq.n	8009e7e <_dtoa_r+0x64e>
 8009f46:	e7cd      	b.n	8009ee4 <_dtoa_r+0x6b4>
 8009f48:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f4a:	2a00      	cmp	r2, #0
 8009f4c:	f000 80c4 	beq.w	800a0d8 <_dtoa_r+0x8a8>
 8009f50:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009f52:	2a01      	cmp	r2, #1
 8009f54:	f300 80a8 	bgt.w	800a0a8 <_dtoa_r+0x878>
 8009f58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f5a:	2a00      	cmp	r2, #0
 8009f5c:	f000 80a0 	beq.w	800a0a0 <_dtoa_r+0x870>
 8009f60:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009f64:	464f      	mov	r7, r9
 8009f66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f6a:	2101      	movs	r1, #1
 8009f6c:	441a      	add	r2, r3
 8009f6e:	4628      	mov	r0, r5
 8009f70:	4499      	add	r9, r3
 8009f72:	9209      	str	r2, [sp, #36]	; 0x24
 8009f74:	f000 fc32 	bl	800a7dc <__i2b>
 8009f78:	4606      	mov	r6, r0
 8009f7a:	b15f      	cbz	r7, 8009f94 <_dtoa_r+0x764>
 8009f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	dd08      	ble.n	8009f94 <_dtoa_r+0x764>
 8009f82:	42bb      	cmp	r3, r7
 8009f84:	bfa8      	it	ge
 8009f86:	463b      	movge	r3, r7
 8009f88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f8a:	eba9 0903 	sub.w	r9, r9, r3
 8009f8e:	1aff      	subs	r7, r7, r3
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	9309      	str	r3, [sp, #36]	; 0x24
 8009f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f96:	b1f3      	cbz	r3, 8009fd6 <_dtoa_r+0x7a6>
 8009f98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 80a0 	beq.w	800a0e0 <_dtoa_r+0x8b0>
 8009fa0:	2c00      	cmp	r4, #0
 8009fa2:	dd10      	ble.n	8009fc6 <_dtoa_r+0x796>
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4622      	mov	r2, r4
 8009fa8:	4628      	mov	r0, r5
 8009faa:	f000 fcd5 	bl	800a958 <__pow5mult>
 8009fae:	4652      	mov	r2, sl
 8009fb0:	4601      	mov	r1, r0
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	f000 fc27 	bl	800a808 <__multiply>
 8009fba:	4680      	mov	r8, r0
 8009fbc:	4651      	mov	r1, sl
 8009fbe:	4628      	mov	r0, r5
 8009fc0:	f000 fb56 	bl	800a670 <_Bfree>
 8009fc4:	46c2      	mov	sl, r8
 8009fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fc8:	1b1a      	subs	r2, r3, r4
 8009fca:	d004      	beq.n	8009fd6 <_dtoa_r+0x7a6>
 8009fcc:	4651      	mov	r1, sl
 8009fce:	4628      	mov	r0, r5
 8009fd0:	f000 fcc2 	bl	800a958 <__pow5mult>
 8009fd4:	4682      	mov	sl, r0
 8009fd6:	2101      	movs	r1, #1
 8009fd8:	4628      	mov	r0, r5
 8009fda:	f000 fbff 	bl	800a7dc <__i2b>
 8009fde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fe0:	4604      	mov	r4, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	f340 8082 	ble.w	800a0ec <_dtoa_r+0x8bc>
 8009fe8:	461a      	mov	r2, r3
 8009fea:	4601      	mov	r1, r0
 8009fec:	4628      	mov	r0, r5
 8009fee:	f000 fcb3 	bl	800a958 <__pow5mult>
 8009ff2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009ff4:	4604      	mov	r4, r0
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	dd7b      	ble.n	800a0f2 <_dtoa_r+0x8c2>
 8009ffa:	f04f 0800 	mov.w	r8, #0
 8009ffe:	6923      	ldr	r3, [r4, #16]
 800a000:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a004:	6918      	ldr	r0, [r3, #16]
 800a006:	f000 fb9b 	bl	800a740 <__hi0bits>
 800a00a:	f1c0 0020 	rsb	r0, r0, #32
 800a00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a010:	4418      	add	r0, r3
 800a012:	f010 001f 	ands.w	r0, r0, #31
 800a016:	f000 8092 	beq.w	800a13e <_dtoa_r+0x90e>
 800a01a:	f1c0 0320 	rsb	r3, r0, #32
 800a01e:	2b04      	cmp	r3, #4
 800a020:	f340 8085 	ble.w	800a12e <_dtoa_r+0x8fe>
 800a024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a026:	f1c0 001c 	rsb	r0, r0, #28
 800a02a:	4403      	add	r3, r0
 800a02c:	4481      	add	r9, r0
 800a02e:	4407      	add	r7, r0
 800a030:	9309      	str	r3, [sp, #36]	; 0x24
 800a032:	f1b9 0f00 	cmp.w	r9, #0
 800a036:	dd05      	ble.n	800a044 <_dtoa_r+0x814>
 800a038:	4651      	mov	r1, sl
 800a03a:	464a      	mov	r2, r9
 800a03c:	4628      	mov	r0, r5
 800a03e:	f000 fce5 	bl	800aa0c <__lshift>
 800a042:	4682      	mov	sl, r0
 800a044:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a046:	2b00      	cmp	r3, #0
 800a048:	dd05      	ble.n	800a056 <_dtoa_r+0x826>
 800a04a:	4621      	mov	r1, r4
 800a04c:	461a      	mov	r2, r3
 800a04e:	4628      	mov	r0, r5
 800a050:	f000 fcdc 	bl	800aa0c <__lshift>
 800a054:	4604      	mov	r4, r0
 800a056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d072      	beq.n	800a142 <_dtoa_r+0x912>
 800a05c:	4621      	mov	r1, r4
 800a05e:	4650      	mov	r0, sl
 800a060:	f000 fd40 	bl	800aae4 <__mcmp>
 800a064:	2800      	cmp	r0, #0
 800a066:	da6c      	bge.n	800a142 <_dtoa_r+0x912>
 800a068:	2300      	movs	r3, #0
 800a06a:	4651      	mov	r1, sl
 800a06c:	220a      	movs	r2, #10
 800a06e:	4628      	mov	r0, r5
 800a070:	f000 fb20 	bl	800a6b4 <__multadd>
 800a074:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a076:	4682      	mov	sl, r0
 800a078:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	f000 81ac 	beq.w	800a3da <_dtoa_r+0xbaa>
 800a082:	2300      	movs	r3, #0
 800a084:	4631      	mov	r1, r6
 800a086:	220a      	movs	r2, #10
 800a088:	4628      	mov	r0, r5
 800a08a:	f000 fb13 	bl	800a6b4 <__multadd>
 800a08e:	9b06      	ldr	r3, [sp, #24]
 800a090:	4606      	mov	r6, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	f300 8093 	bgt.w	800a1be <_dtoa_r+0x98e>
 800a098:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a09a:	2b02      	cmp	r3, #2
 800a09c:	dc59      	bgt.n	800a152 <_dtoa_r+0x922>
 800a09e:	e08e      	b.n	800a1be <_dtoa_r+0x98e>
 800a0a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a0a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a0a6:	e75d      	b.n	8009f64 <_dtoa_r+0x734>
 800a0a8:	9b08      	ldr	r3, [sp, #32]
 800a0aa:	1e5c      	subs	r4, r3, #1
 800a0ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ae:	42a3      	cmp	r3, r4
 800a0b0:	bfbf      	itttt	lt
 800a0b2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a0b4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a0b6:	1ae3      	sublt	r3, r4, r3
 800a0b8:	18d2      	addlt	r2, r2, r3
 800a0ba:	bfa8      	it	ge
 800a0bc:	1b1c      	subge	r4, r3, r4
 800a0be:	9b08      	ldr	r3, [sp, #32]
 800a0c0:	bfbe      	ittt	lt
 800a0c2:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a0c4:	920e      	strlt	r2, [sp, #56]	; 0x38
 800a0c6:	2400      	movlt	r4, #0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	bfb5      	itete	lt
 800a0cc:	eba9 0703 	sublt.w	r7, r9, r3
 800a0d0:	464f      	movge	r7, r9
 800a0d2:	2300      	movlt	r3, #0
 800a0d4:	9b08      	ldrge	r3, [sp, #32]
 800a0d6:	e747      	b.n	8009f68 <_dtoa_r+0x738>
 800a0d8:	464f      	mov	r7, r9
 800a0da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a0dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a0de:	e74c      	b.n	8009f7a <_dtoa_r+0x74a>
 800a0e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a0e2:	e773      	b.n	8009fcc <_dtoa_r+0x79c>
 800a0e4:	3fe00000 	.word	0x3fe00000
 800a0e8:	40240000 	.word	0x40240000
 800a0ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	dc18      	bgt.n	800a124 <_dtoa_r+0x8f4>
 800a0f2:	9b04      	ldr	r3, [sp, #16]
 800a0f4:	b9b3      	cbnz	r3, 800a124 <_dtoa_r+0x8f4>
 800a0f6:	9b05      	ldr	r3, [sp, #20]
 800a0f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0fc:	b993      	cbnz	r3, 800a124 <_dtoa_r+0x8f4>
 800a0fe:	9b05      	ldr	r3, [sp, #20]
 800a100:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a104:	0d1b      	lsrs	r3, r3, #20
 800a106:	051b      	lsls	r3, r3, #20
 800a108:	b17b      	cbz	r3, 800a12a <_dtoa_r+0x8fa>
 800a10a:	f04f 0801 	mov.w	r8, #1
 800a10e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a110:	f109 0901 	add.w	r9, r9, #1
 800a114:	3301      	adds	r3, #1
 800a116:	9309      	str	r3, [sp, #36]	; 0x24
 800a118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f47f af6f 	bne.w	8009ffe <_dtoa_r+0x7ce>
 800a120:	2001      	movs	r0, #1
 800a122:	e774      	b.n	800a00e <_dtoa_r+0x7de>
 800a124:	f04f 0800 	mov.w	r8, #0
 800a128:	e7f6      	b.n	800a118 <_dtoa_r+0x8e8>
 800a12a:	4698      	mov	r8, r3
 800a12c:	e7f4      	b.n	800a118 <_dtoa_r+0x8e8>
 800a12e:	d080      	beq.n	800a032 <_dtoa_r+0x802>
 800a130:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a132:	331c      	adds	r3, #28
 800a134:	441a      	add	r2, r3
 800a136:	4499      	add	r9, r3
 800a138:	441f      	add	r7, r3
 800a13a:	9209      	str	r2, [sp, #36]	; 0x24
 800a13c:	e779      	b.n	800a032 <_dtoa_r+0x802>
 800a13e:	4603      	mov	r3, r0
 800a140:	e7f6      	b.n	800a130 <_dtoa_r+0x900>
 800a142:	9b08      	ldr	r3, [sp, #32]
 800a144:	2b00      	cmp	r3, #0
 800a146:	dc34      	bgt.n	800a1b2 <_dtoa_r+0x982>
 800a148:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	dd31      	ble.n	800a1b2 <_dtoa_r+0x982>
 800a14e:	9b08      	ldr	r3, [sp, #32]
 800a150:	9306      	str	r3, [sp, #24]
 800a152:	9b06      	ldr	r3, [sp, #24]
 800a154:	b963      	cbnz	r3, 800a170 <_dtoa_r+0x940>
 800a156:	4621      	mov	r1, r4
 800a158:	2205      	movs	r2, #5
 800a15a:	4628      	mov	r0, r5
 800a15c:	f000 faaa 	bl	800a6b4 <__multadd>
 800a160:	4601      	mov	r1, r0
 800a162:	4604      	mov	r4, r0
 800a164:	4650      	mov	r0, sl
 800a166:	f000 fcbd 	bl	800aae4 <__mcmp>
 800a16a:	2800      	cmp	r0, #0
 800a16c:	f73f adbf 	bgt.w	8009cee <_dtoa_r+0x4be>
 800a170:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a172:	9f03      	ldr	r7, [sp, #12]
 800a174:	ea6f 0b03 	mvn.w	fp, r3
 800a178:	f04f 0800 	mov.w	r8, #0
 800a17c:	4621      	mov	r1, r4
 800a17e:	4628      	mov	r0, r5
 800a180:	f000 fa76 	bl	800a670 <_Bfree>
 800a184:	2e00      	cmp	r6, #0
 800a186:	f43f aead 	beq.w	8009ee4 <_dtoa_r+0x6b4>
 800a18a:	f1b8 0f00 	cmp.w	r8, #0
 800a18e:	d005      	beq.n	800a19c <_dtoa_r+0x96c>
 800a190:	45b0      	cmp	r8, r6
 800a192:	d003      	beq.n	800a19c <_dtoa_r+0x96c>
 800a194:	4641      	mov	r1, r8
 800a196:	4628      	mov	r0, r5
 800a198:	f000 fa6a 	bl	800a670 <_Bfree>
 800a19c:	4631      	mov	r1, r6
 800a19e:	4628      	mov	r0, r5
 800a1a0:	f000 fa66 	bl	800a670 <_Bfree>
 800a1a4:	e69e      	b.n	8009ee4 <_dtoa_r+0x6b4>
 800a1a6:	2400      	movs	r4, #0
 800a1a8:	4626      	mov	r6, r4
 800a1aa:	e7e1      	b.n	800a170 <_dtoa_r+0x940>
 800a1ac:	46c3      	mov	fp, r8
 800a1ae:	4626      	mov	r6, r4
 800a1b0:	e59d      	b.n	8009cee <_dtoa_r+0x4be>
 800a1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	f000 80c8 	beq.w	800a34a <_dtoa_r+0xb1a>
 800a1ba:	9b08      	ldr	r3, [sp, #32]
 800a1bc:	9306      	str	r3, [sp, #24]
 800a1be:	2f00      	cmp	r7, #0
 800a1c0:	dd05      	ble.n	800a1ce <_dtoa_r+0x99e>
 800a1c2:	4631      	mov	r1, r6
 800a1c4:	463a      	mov	r2, r7
 800a1c6:	4628      	mov	r0, r5
 800a1c8:	f000 fc20 	bl	800aa0c <__lshift>
 800a1cc:	4606      	mov	r6, r0
 800a1ce:	f1b8 0f00 	cmp.w	r8, #0
 800a1d2:	d05b      	beq.n	800a28c <_dtoa_r+0xa5c>
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	6871      	ldr	r1, [r6, #4]
 800a1d8:	f000 fa0a 	bl	800a5f0 <_Balloc>
 800a1dc:	4607      	mov	r7, r0
 800a1de:	b928      	cbnz	r0, 800a1ec <_dtoa_r+0x9bc>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a1e6:	4b81      	ldr	r3, [pc, #516]	; (800a3ec <_dtoa_r+0xbbc>)
 800a1e8:	f7ff bb36 	b.w	8009858 <_dtoa_r+0x28>
 800a1ec:	6932      	ldr	r2, [r6, #16]
 800a1ee:	f106 010c 	add.w	r1, r6, #12
 800a1f2:	3202      	adds	r2, #2
 800a1f4:	0092      	lsls	r2, r2, #2
 800a1f6:	300c      	adds	r0, #12
 800a1f8:	f7ff fa81 	bl	80096fe <memcpy>
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	4639      	mov	r1, r7
 800a200:	4628      	mov	r0, r5
 800a202:	f000 fc03 	bl	800aa0c <__lshift>
 800a206:	46b0      	mov	r8, r6
 800a208:	4606      	mov	r6, r0
 800a20a:	9b03      	ldr	r3, [sp, #12]
 800a20c:	9a03      	ldr	r2, [sp, #12]
 800a20e:	3301      	adds	r3, #1
 800a210:	9308      	str	r3, [sp, #32]
 800a212:	9b06      	ldr	r3, [sp, #24]
 800a214:	4413      	add	r3, r2
 800a216:	930b      	str	r3, [sp, #44]	; 0x2c
 800a218:	9b04      	ldr	r3, [sp, #16]
 800a21a:	f003 0301 	and.w	r3, r3, #1
 800a21e:	930a      	str	r3, [sp, #40]	; 0x28
 800a220:	9b08      	ldr	r3, [sp, #32]
 800a222:	4621      	mov	r1, r4
 800a224:	3b01      	subs	r3, #1
 800a226:	4650      	mov	r0, sl
 800a228:	9304      	str	r3, [sp, #16]
 800a22a:	f7ff fa76 	bl	800971a <quorem>
 800a22e:	4641      	mov	r1, r8
 800a230:	9006      	str	r0, [sp, #24]
 800a232:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a236:	4650      	mov	r0, sl
 800a238:	f000 fc54 	bl	800aae4 <__mcmp>
 800a23c:	4632      	mov	r2, r6
 800a23e:	9009      	str	r0, [sp, #36]	; 0x24
 800a240:	4621      	mov	r1, r4
 800a242:	4628      	mov	r0, r5
 800a244:	f000 fc6a 	bl	800ab1c <__mdiff>
 800a248:	68c2      	ldr	r2, [r0, #12]
 800a24a:	4607      	mov	r7, r0
 800a24c:	bb02      	cbnz	r2, 800a290 <_dtoa_r+0xa60>
 800a24e:	4601      	mov	r1, r0
 800a250:	4650      	mov	r0, sl
 800a252:	f000 fc47 	bl	800aae4 <__mcmp>
 800a256:	4602      	mov	r2, r0
 800a258:	4639      	mov	r1, r7
 800a25a:	4628      	mov	r0, r5
 800a25c:	920c      	str	r2, [sp, #48]	; 0x30
 800a25e:	f000 fa07 	bl	800a670 <_Bfree>
 800a262:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a264:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a266:	9f08      	ldr	r7, [sp, #32]
 800a268:	ea43 0102 	orr.w	r1, r3, r2
 800a26c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a26e:	4319      	orrs	r1, r3
 800a270:	d110      	bne.n	800a294 <_dtoa_r+0xa64>
 800a272:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a276:	d029      	beq.n	800a2cc <_dtoa_r+0xa9c>
 800a278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	dd02      	ble.n	800a284 <_dtoa_r+0xa54>
 800a27e:	9b06      	ldr	r3, [sp, #24]
 800a280:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800a284:	9b04      	ldr	r3, [sp, #16]
 800a286:	f883 9000 	strb.w	r9, [r3]
 800a28a:	e777      	b.n	800a17c <_dtoa_r+0x94c>
 800a28c:	4630      	mov	r0, r6
 800a28e:	e7ba      	b.n	800a206 <_dtoa_r+0x9d6>
 800a290:	2201      	movs	r2, #1
 800a292:	e7e1      	b.n	800a258 <_dtoa_r+0xa28>
 800a294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a296:	2b00      	cmp	r3, #0
 800a298:	db04      	blt.n	800a2a4 <_dtoa_r+0xa74>
 800a29a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800a29c:	430b      	orrs	r3, r1
 800a29e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a2a0:	430b      	orrs	r3, r1
 800a2a2:	d120      	bne.n	800a2e6 <_dtoa_r+0xab6>
 800a2a4:	2a00      	cmp	r2, #0
 800a2a6:	dded      	ble.n	800a284 <_dtoa_r+0xa54>
 800a2a8:	4651      	mov	r1, sl
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	f000 fbad 	bl	800aa0c <__lshift>
 800a2b2:	4621      	mov	r1, r4
 800a2b4:	4682      	mov	sl, r0
 800a2b6:	f000 fc15 	bl	800aae4 <__mcmp>
 800a2ba:	2800      	cmp	r0, #0
 800a2bc:	dc03      	bgt.n	800a2c6 <_dtoa_r+0xa96>
 800a2be:	d1e1      	bne.n	800a284 <_dtoa_r+0xa54>
 800a2c0:	f019 0f01 	tst.w	r9, #1
 800a2c4:	d0de      	beq.n	800a284 <_dtoa_r+0xa54>
 800a2c6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2ca:	d1d8      	bne.n	800a27e <_dtoa_r+0xa4e>
 800a2cc:	2339      	movs	r3, #57	; 0x39
 800a2ce:	9a04      	ldr	r2, [sp, #16]
 800a2d0:	7013      	strb	r3, [r2, #0]
 800a2d2:	463b      	mov	r3, r7
 800a2d4:	461f      	mov	r7, r3
 800a2d6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800a2da:	3b01      	subs	r3, #1
 800a2dc:	2a39      	cmp	r2, #57	; 0x39
 800a2de:	d06b      	beq.n	800a3b8 <_dtoa_r+0xb88>
 800a2e0:	3201      	adds	r2, #1
 800a2e2:	701a      	strb	r2, [r3, #0]
 800a2e4:	e74a      	b.n	800a17c <_dtoa_r+0x94c>
 800a2e6:	2a00      	cmp	r2, #0
 800a2e8:	dd07      	ble.n	800a2fa <_dtoa_r+0xaca>
 800a2ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a2ee:	d0ed      	beq.n	800a2cc <_dtoa_r+0xa9c>
 800a2f0:	9a04      	ldr	r2, [sp, #16]
 800a2f2:	f109 0301 	add.w	r3, r9, #1
 800a2f6:	7013      	strb	r3, [r2, #0]
 800a2f8:	e740      	b.n	800a17c <_dtoa_r+0x94c>
 800a2fa:	9b08      	ldr	r3, [sp, #32]
 800a2fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2fe:	f803 9c01 	strb.w	r9, [r3, #-1]
 800a302:	4293      	cmp	r3, r2
 800a304:	d042      	beq.n	800a38c <_dtoa_r+0xb5c>
 800a306:	4651      	mov	r1, sl
 800a308:	2300      	movs	r3, #0
 800a30a:	220a      	movs	r2, #10
 800a30c:	4628      	mov	r0, r5
 800a30e:	f000 f9d1 	bl	800a6b4 <__multadd>
 800a312:	45b0      	cmp	r8, r6
 800a314:	4682      	mov	sl, r0
 800a316:	f04f 0300 	mov.w	r3, #0
 800a31a:	f04f 020a 	mov.w	r2, #10
 800a31e:	4641      	mov	r1, r8
 800a320:	4628      	mov	r0, r5
 800a322:	d107      	bne.n	800a334 <_dtoa_r+0xb04>
 800a324:	f000 f9c6 	bl	800a6b4 <__multadd>
 800a328:	4680      	mov	r8, r0
 800a32a:	4606      	mov	r6, r0
 800a32c:	9b08      	ldr	r3, [sp, #32]
 800a32e:	3301      	adds	r3, #1
 800a330:	9308      	str	r3, [sp, #32]
 800a332:	e775      	b.n	800a220 <_dtoa_r+0x9f0>
 800a334:	f000 f9be 	bl	800a6b4 <__multadd>
 800a338:	4631      	mov	r1, r6
 800a33a:	4680      	mov	r8, r0
 800a33c:	2300      	movs	r3, #0
 800a33e:	220a      	movs	r2, #10
 800a340:	4628      	mov	r0, r5
 800a342:	f000 f9b7 	bl	800a6b4 <__multadd>
 800a346:	4606      	mov	r6, r0
 800a348:	e7f0      	b.n	800a32c <_dtoa_r+0xafc>
 800a34a:	9b08      	ldr	r3, [sp, #32]
 800a34c:	9306      	str	r3, [sp, #24]
 800a34e:	9f03      	ldr	r7, [sp, #12]
 800a350:	4621      	mov	r1, r4
 800a352:	4650      	mov	r0, sl
 800a354:	f7ff f9e1 	bl	800971a <quorem>
 800a358:	9b03      	ldr	r3, [sp, #12]
 800a35a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a35e:	f807 9b01 	strb.w	r9, [r7], #1
 800a362:	1afa      	subs	r2, r7, r3
 800a364:	9b06      	ldr	r3, [sp, #24]
 800a366:	4293      	cmp	r3, r2
 800a368:	dd07      	ble.n	800a37a <_dtoa_r+0xb4a>
 800a36a:	4651      	mov	r1, sl
 800a36c:	2300      	movs	r3, #0
 800a36e:	220a      	movs	r2, #10
 800a370:	4628      	mov	r0, r5
 800a372:	f000 f99f 	bl	800a6b4 <__multadd>
 800a376:	4682      	mov	sl, r0
 800a378:	e7ea      	b.n	800a350 <_dtoa_r+0xb20>
 800a37a:	9b06      	ldr	r3, [sp, #24]
 800a37c:	f04f 0800 	mov.w	r8, #0
 800a380:	2b00      	cmp	r3, #0
 800a382:	bfcc      	ite	gt
 800a384:	461f      	movgt	r7, r3
 800a386:	2701      	movle	r7, #1
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	441f      	add	r7, r3
 800a38c:	4651      	mov	r1, sl
 800a38e:	2201      	movs	r2, #1
 800a390:	4628      	mov	r0, r5
 800a392:	f000 fb3b 	bl	800aa0c <__lshift>
 800a396:	4621      	mov	r1, r4
 800a398:	4682      	mov	sl, r0
 800a39a:	f000 fba3 	bl	800aae4 <__mcmp>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	dc97      	bgt.n	800a2d2 <_dtoa_r+0xaa2>
 800a3a2:	d102      	bne.n	800a3aa <_dtoa_r+0xb7a>
 800a3a4:	f019 0f01 	tst.w	r9, #1
 800a3a8:	d193      	bne.n	800a2d2 <_dtoa_r+0xaa2>
 800a3aa:	463b      	mov	r3, r7
 800a3ac:	461f      	mov	r7, r3
 800a3ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3b2:	2a30      	cmp	r2, #48	; 0x30
 800a3b4:	d0fa      	beq.n	800a3ac <_dtoa_r+0xb7c>
 800a3b6:	e6e1      	b.n	800a17c <_dtoa_r+0x94c>
 800a3b8:	9a03      	ldr	r2, [sp, #12]
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d18a      	bne.n	800a2d4 <_dtoa_r+0xaa4>
 800a3be:	2331      	movs	r3, #49	; 0x31
 800a3c0:	f10b 0b01 	add.w	fp, fp, #1
 800a3c4:	e797      	b.n	800a2f6 <_dtoa_r+0xac6>
 800a3c6:	4b0a      	ldr	r3, [pc, #40]	; (800a3f0 <_dtoa_r+0xbc0>)
 800a3c8:	f7ff ba9f 	b.w	800990a <_dtoa_r+0xda>
 800a3cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f47f aa77 	bne.w	80098c2 <_dtoa_r+0x92>
 800a3d4:	4b07      	ldr	r3, [pc, #28]	; (800a3f4 <_dtoa_r+0xbc4>)
 800a3d6:	f7ff ba98 	b.w	800990a <_dtoa_r+0xda>
 800a3da:	9b06      	ldr	r3, [sp, #24]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	dcb6      	bgt.n	800a34e <_dtoa_r+0xb1e>
 800a3e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	f73f aeb5 	bgt.w	800a152 <_dtoa_r+0x922>
 800a3e8:	e7b1      	b.n	800a34e <_dtoa_r+0xb1e>
 800a3ea:	bf00      	nop
 800a3ec:	0800bb72 	.word	0x0800bb72
 800a3f0:	0800bad2 	.word	0x0800bad2
 800a3f4:	0800baf6 	.word	0x0800baf6

0800a3f8 <_free_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4605      	mov	r5, r0
 800a3fc:	2900      	cmp	r1, #0
 800a3fe:	d040      	beq.n	800a482 <_free_r+0x8a>
 800a400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a404:	1f0c      	subs	r4, r1, #4
 800a406:	2b00      	cmp	r3, #0
 800a408:	bfb8      	it	lt
 800a40a:	18e4      	addlt	r4, r4, r3
 800a40c:	f000 f8e4 	bl	800a5d8 <__malloc_lock>
 800a410:	4a1c      	ldr	r2, [pc, #112]	; (800a484 <_free_r+0x8c>)
 800a412:	6813      	ldr	r3, [r2, #0]
 800a414:	b933      	cbnz	r3, 800a424 <_free_r+0x2c>
 800a416:	6063      	str	r3, [r4, #4]
 800a418:	6014      	str	r4, [r2, #0]
 800a41a:	4628      	mov	r0, r5
 800a41c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a420:	f000 b8e0 	b.w	800a5e4 <__malloc_unlock>
 800a424:	42a3      	cmp	r3, r4
 800a426:	d908      	bls.n	800a43a <_free_r+0x42>
 800a428:	6820      	ldr	r0, [r4, #0]
 800a42a:	1821      	adds	r1, r4, r0
 800a42c:	428b      	cmp	r3, r1
 800a42e:	bf01      	itttt	eq
 800a430:	6819      	ldreq	r1, [r3, #0]
 800a432:	685b      	ldreq	r3, [r3, #4]
 800a434:	1809      	addeq	r1, r1, r0
 800a436:	6021      	streq	r1, [r4, #0]
 800a438:	e7ed      	b.n	800a416 <_free_r+0x1e>
 800a43a:	461a      	mov	r2, r3
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	b10b      	cbz	r3, 800a444 <_free_r+0x4c>
 800a440:	42a3      	cmp	r3, r4
 800a442:	d9fa      	bls.n	800a43a <_free_r+0x42>
 800a444:	6811      	ldr	r1, [r2, #0]
 800a446:	1850      	adds	r0, r2, r1
 800a448:	42a0      	cmp	r0, r4
 800a44a:	d10b      	bne.n	800a464 <_free_r+0x6c>
 800a44c:	6820      	ldr	r0, [r4, #0]
 800a44e:	4401      	add	r1, r0
 800a450:	1850      	adds	r0, r2, r1
 800a452:	4283      	cmp	r3, r0
 800a454:	6011      	str	r1, [r2, #0]
 800a456:	d1e0      	bne.n	800a41a <_free_r+0x22>
 800a458:	6818      	ldr	r0, [r3, #0]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	4408      	add	r0, r1
 800a45e:	6010      	str	r0, [r2, #0]
 800a460:	6053      	str	r3, [r2, #4]
 800a462:	e7da      	b.n	800a41a <_free_r+0x22>
 800a464:	d902      	bls.n	800a46c <_free_r+0x74>
 800a466:	230c      	movs	r3, #12
 800a468:	602b      	str	r3, [r5, #0]
 800a46a:	e7d6      	b.n	800a41a <_free_r+0x22>
 800a46c:	6820      	ldr	r0, [r4, #0]
 800a46e:	1821      	adds	r1, r4, r0
 800a470:	428b      	cmp	r3, r1
 800a472:	bf01      	itttt	eq
 800a474:	6819      	ldreq	r1, [r3, #0]
 800a476:	685b      	ldreq	r3, [r3, #4]
 800a478:	1809      	addeq	r1, r1, r0
 800a47a:	6021      	streq	r1, [r4, #0]
 800a47c:	6063      	str	r3, [r4, #4]
 800a47e:	6054      	str	r4, [r2, #4]
 800a480:	e7cb      	b.n	800a41a <_free_r+0x22>
 800a482:	bd38      	pop	{r3, r4, r5, pc}
 800a484:	20001690 	.word	0x20001690

0800a488 <malloc>:
 800a488:	4b02      	ldr	r3, [pc, #8]	; (800a494 <malloc+0xc>)
 800a48a:	4601      	mov	r1, r0
 800a48c:	6818      	ldr	r0, [r3, #0]
 800a48e:	f000 b823 	b.w	800a4d8 <_malloc_r>
 800a492:	bf00      	nop
 800a494:	20000068 	.word	0x20000068

0800a498 <sbrk_aligned>:
 800a498:	b570      	push	{r4, r5, r6, lr}
 800a49a:	4e0e      	ldr	r6, [pc, #56]	; (800a4d4 <sbrk_aligned+0x3c>)
 800a49c:	460c      	mov	r4, r1
 800a49e:	6831      	ldr	r1, [r6, #0]
 800a4a0:	4605      	mov	r5, r0
 800a4a2:	b911      	cbnz	r1, 800a4aa <sbrk_aligned+0x12>
 800a4a4:	f000 fe38 	bl	800b118 <_sbrk_r>
 800a4a8:	6030      	str	r0, [r6, #0]
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	4628      	mov	r0, r5
 800a4ae:	f000 fe33 	bl	800b118 <_sbrk_r>
 800a4b2:	1c43      	adds	r3, r0, #1
 800a4b4:	d00a      	beq.n	800a4cc <sbrk_aligned+0x34>
 800a4b6:	1cc4      	adds	r4, r0, #3
 800a4b8:	f024 0403 	bic.w	r4, r4, #3
 800a4bc:	42a0      	cmp	r0, r4
 800a4be:	d007      	beq.n	800a4d0 <sbrk_aligned+0x38>
 800a4c0:	1a21      	subs	r1, r4, r0
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	f000 fe28 	bl	800b118 <_sbrk_r>
 800a4c8:	3001      	adds	r0, #1
 800a4ca:	d101      	bne.n	800a4d0 <sbrk_aligned+0x38>
 800a4cc:	f04f 34ff 	mov.w	r4, #4294967295
 800a4d0:	4620      	mov	r0, r4
 800a4d2:	bd70      	pop	{r4, r5, r6, pc}
 800a4d4:	20001694 	.word	0x20001694

0800a4d8 <_malloc_r>:
 800a4d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4dc:	1ccd      	adds	r5, r1, #3
 800a4de:	f025 0503 	bic.w	r5, r5, #3
 800a4e2:	3508      	adds	r5, #8
 800a4e4:	2d0c      	cmp	r5, #12
 800a4e6:	bf38      	it	cc
 800a4e8:	250c      	movcc	r5, #12
 800a4ea:	2d00      	cmp	r5, #0
 800a4ec:	4607      	mov	r7, r0
 800a4ee:	db01      	blt.n	800a4f4 <_malloc_r+0x1c>
 800a4f0:	42a9      	cmp	r1, r5
 800a4f2:	d905      	bls.n	800a500 <_malloc_r+0x28>
 800a4f4:	230c      	movs	r3, #12
 800a4f6:	2600      	movs	r6, #0
 800a4f8:	603b      	str	r3, [r7, #0]
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a500:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a5d4 <_malloc_r+0xfc>
 800a504:	f000 f868 	bl	800a5d8 <__malloc_lock>
 800a508:	f8d8 3000 	ldr.w	r3, [r8]
 800a50c:	461c      	mov	r4, r3
 800a50e:	bb5c      	cbnz	r4, 800a568 <_malloc_r+0x90>
 800a510:	4629      	mov	r1, r5
 800a512:	4638      	mov	r0, r7
 800a514:	f7ff ffc0 	bl	800a498 <sbrk_aligned>
 800a518:	1c43      	adds	r3, r0, #1
 800a51a:	4604      	mov	r4, r0
 800a51c:	d155      	bne.n	800a5ca <_malloc_r+0xf2>
 800a51e:	f8d8 4000 	ldr.w	r4, [r8]
 800a522:	4626      	mov	r6, r4
 800a524:	2e00      	cmp	r6, #0
 800a526:	d145      	bne.n	800a5b4 <_malloc_r+0xdc>
 800a528:	2c00      	cmp	r4, #0
 800a52a:	d048      	beq.n	800a5be <_malloc_r+0xe6>
 800a52c:	6823      	ldr	r3, [r4, #0]
 800a52e:	4631      	mov	r1, r6
 800a530:	4638      	mov	r0, r7
 800a532:	eb04 0903 	add.w	r9, r4, r3
 800a536:	f000 fdef 	bl	800b118 <_sbrk_r>
 800a53a:	4581      	cmp	r9, r0
 800a53c:	d13f      	bne.n	800a5be <_malloc_r+0xe6>
 800a53e:	6821      	ldr	r1, [r4, #0]
 800a540:	4638      	mov	r0, r7
 800a542:	1a6d      	subs	r5, r5, r1
 800a544:	4629      	mov	r1, r5
 800a546:	f7ff ffa7 	bl	800a498 <sbrk_aligned>
 800a54a:	3001      	adds	r0, #1
 800a54c:	d037      	beq.n	800a5be <_malloc_r+0xe6>
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	442b      	add	r3, r5
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	f8d8 3000 	ldr.w	r3, [r8]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d038      	beq.n	800a5ce <_malloc_r+0xf6>
 800a55c:	685a      	ldr	r2, [r3, #4]
 800a55e:	42a2      	cmp	r2, r4
 800a560:	d12b      	bne.n	800a5ba <_malloc_r+0xe2>
 800a562:	2200      	movs	r2, #0
 800a564:	605a      	str	r2, [r3, #4]
 800a566:	e00f      	b.n	800a588 <_malloc_r+0xb0>
 800a568:	6822      	ldr	r2, [r4, #0]
 800a56a:	1b52      	subs	r2, r2, r5
 800a56c:	d41f      	bmi.n	800a5ae <_malloc_r+0xd6>
 800a56e:	2a0b      	cmp	r2, #11
 800a570:	d917      	bls.n	800a5a2 <_malloc_r+0xca>
 800a572:	1961      	adds	r1, r4, r5
 800a574:	42a3      	cmp	r3, r4
 800a576:	6025      	str	r5, [r4, #0]
 800a578:	bf18      	it	ne
 800a57a:	6059      	strne	r1, [r3, #4]
 800a57c:	6863      	ldr	r3, [r4, #4]
 800a57e:	bf08      	it	eq
 800a580:	f8c8 1000 	streq.w	r1, [r8]
 800a584:	5162      	str	r2, [r4, r5]
 800a586:	604b      	str	r3, [r1, #4]
 800a588:	4638      	mov	r0, r7
 800a58a:	f104 060b 	add.w	r6, r4, #11
 800a58e:	f000 f829 	bl	800a5e4 <__malloc_unlock>
 800a592:	f026 0607 	bic.w	r6, r6, #7
 800a596:	1d23      	adds	r3, r4, #4
 800a598:	1af2      	subs	r2, r6, r3
 800a59a:	d0ae      	beq.n	800a4fa <_malloc_r+0x22>
 800a59c:	1b9b      	subs	r3, r3, r6
 800a59e:	50a3      	str	r3, [r4, r2]
 800a5a0:	e7ab      	b.n	800a4fa <_malloc_r+0x22>
 800a5a2:	42a3      	cmp	r3, r4
 800a5a4:	6862      	ldr	r2, [r4, #4]
 800a5a6:	d1dd      	bne.n	800a564 <_malloc_r+0x8c>
 800a5a8:	f8c8 2000 	str.w	r2, [r8]
 800a5ac:	e7ec      	b.n	800a588 <_malloc_r+0xb0>
 800a5ae:	4623      	mov	r3, r4
 800a5b0:	6864      	ldr	r4, [r4, #4]
 800a5b2:	e7ac      	b.n	800a50e <_malloc_r+0x36>
 800a5b4:	4634      	mov	r4, r6
 800a5b6:	6876      	ldr	r6, [r6, #4]
 800a5b8:	e7b4      	b.n	800a524 <_malloc_r+0x4c>
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	e7cc      	b.n	800a558 <_malloc_r+0x80>
 800a5be:	230c      	movs	r3, #12
 800a5c0:	4638      	mov	r0, r7
 800a5c2:	603b      	str	r3, [r7, #0]
 800a5c4:	f000 f80e 	bl	800a5e4 <__malloc_unlock>
 800a5c8:	e797      	b.n	800a4fa <_malloc_r+0x22>
 800a5ca:	6025      	str	r5, [r4, #0]
 800a5cc:	e7dc      	b.n	800a588 <_malloc_r+0xb0>
 800a5ce:	605b      	str	r3, [r3, #4]
 800a5d0:	deff      	udf	#255	; 0xff
 800a5d2:	bf00      	nop
 800a5d4:	20001690 	.word	0x20001690

0800a5d8 <__malloc_lock>:
 800a5d8:	4801      	ldr	r0, [pc, #4]	; (800a5e0 <__malloc_lock+0x8>)
 800a5da:	f7ff b880 	b.w	80096de <__retarget_lock_acquire_recursive>
 800a5de:	bf00      	nop
 800a5e0:	2000168c 	.word	0x2000168c

0800a5e4 <__malloc_unlock>:
 800a5e4:	4801      	ldr	r0, [pc, #4]	; (800a5ec <__malloc_unlock+0x8>)
 800a5e6:	f7ff b87b 	b.w	80096e0 <__retarget_lock_release_recursive>
 800a5ea:	bf00      	nop
 800a5ec:	2000168c 	.word	0x2000168c

0800a5f0 <_Balloc>:
 800a5f0:	b570      	push	{r4, r5, r6, lr}
 800a5f2:	69c6      	ldr	r6, [r0, #28]
 800a5f4:	4604      	mov	r4, r0
 800a5f6:	460d      	mov	r5, r1
 800a5f8:	b976      	cbnz	r6, 800a618 <_Balloc+0x28>
 800a5fa:	2010      	movs	r0, #16
 800a5fc:	f7ff ff44 	bl	800a488 <malloc>
 800a600:	4602      	mov	r2, r0
 800a602:	61e0      	str	r0, [r4, #28]
 800a604:	b920      	cbnz	r0, 800a610 <_Balloc+0x20>
 800a606:	216b      	movs	r1, #107	; 0x6b
 800a608:	4b17      	ldr	r3, [pc, #92]	; (800a668 <_Balloc+0x78>)
 800a60a:	4818      	ldr	r0, [pc, #96]	; (800a66c <_Balloc+0x7c>)
 800a60c:	f000 fd94 	bl	800b138 <__assert_func>
 800a610:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a614:	6006      	str	r6, [r0, #0]
 800a616:	60c6      	str	r6, [r0, #12]
 800a618:	69e6      	ldr	r6, [r4, #28]
 800a61a:	68f3      	ldr	r3, [r6, #12]
 800a61c:	b183      	cbz	r3, 800a640 <_Balloc+0x50>
 800a61e:	69e3      	ldr	r3, [r4, #28]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a626:	b9b8      	cbnz	r0, 800a658 <_Balloc+0x68>
 800a628:	2101      	movs	r1, #1
 800a62a:	fa01 f605 	lsl.w	r6, r1, r5
 800a62e:	1d72      	adds	r2, r6, #5
 800a630:	4620      	mov	r0, r4
 800a632:	0092      	lsls	r2, r2, #2
 800a634:	f000 fd9e 	bl	800b174 <_calloc_r>
 800a638:	b160      	cbz	r0, 800a654 <_Balloc+0x64>
 800a63a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a63e:	e00e      	b.n	800a65e <_Balloc+0x6e>
 800a640:	2221      	movs	r2, #33	; 0x21
 800a642:	2104      	movs	r1, #4
 800a644:	4620      	mov	r0, r4
 800a646:	f000 fd95 	bl	800b174 <_calloc_r>
 800a64a:	69e3      	ldr	r3, [r4, #28]
 800a64c:	60f0      	str	r0, [r6, #12]
 800a64e:	68db      	ldr	r3, [r3, #12]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1e4      	bne.n	800a61e <_Balloc+0x2e>
 800a654:	2000      	movs	r0, #0
 800a656:	bd70      	pop	{r4, r5, r6, pc}
 800a658:	6802      	ldr	r2, [r0, #0]
 800a65a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a65e:	2300      	movs	r3, #0
 800a660:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a664:	e7f7      	b.n	800a656 <_Balloc+0x66>
 800a666:	bf00      	nop
 800a668:	0800bb03 	.word	0x0800bb03
 800a66c:	0800bb83 	.word	0x0800bb83

0800a670 <_Bfree>:
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	69c6      	ldr	r6, [r0, #28]
 800a674:	4605      	mov	r5, r0
 800a676:	460c      	mov	r4, r1
 800a678:	b976      	cbnz	r6, 800a698 <_Bfree+0x28>
 800a67a:	2010      	movs	r0, #16
 800a67c:	f7ff ff04 	bl	800a488 <malloc>
 800a680:	4602      	mov	r2, r0
 800a682:	61e8      	str	r0, [r5, #28]
 800a684:	b920      	cbnz	r0, 800a690 <_Bfree+0x20>
 800a686:	218f      	movs	r1, #143	; 0x8f
 800a688:	4b08      	ldr	r3, [pc, #32]	; (800a6ac <_Bfree+0x3c>)
 800a68a:	4809      	ldr	r0, [pc, #36]	; (800a6b0 <_Bfree+0x40>)
 800a68c:	f000 fd54 	bl	800b138 <__assert_func>
 800a690:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a694:	6006      	str	r6, [r0, #0]
 800a696:	60c6      	str	r6, [r0, #12]
 800a698:	b13c      	cbz	r4, 800a6aa <_Bfree+0x3a>
 800a69a:	69eb      	ldr	r3, [r5, #28]
 800a69c:	6862      	ldr	r2, [r4, #4]
 800a69e:	68db      	ldr	r3, [r3, #12]
 800a6a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6a4:	6021      	str	r1, [r4, #0]
 800a6a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6aa:	bd70      	pop	{r4, r5, r6, pc}
 800a6ac:	0800bb03 	.word	0x0800bb03
 800a6b0:	0800bb83 	.word	0x0800bb83

0800a6b4 <__multadd>:
 800a6b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b8:	4607      	mov	r7, r0
 800a6ba:	460c      	mov	r4, r1
 800a6bc:	461e      	mov	r6, r3
 800a6be:	2000      	movs	r0, #0
 800a6c0:	690d      	ldr	r5, [r1, #16]
 800a6c2:	f101 0c14 	add.w	ip, r1, #20
 800a6c6:	f8dc 3000 	ldr.w	r3, [ip]
 800a6ca:	3001      	adds	r0, #1
 800a6cc:	b299      	uxth	r1, r3
 800a6ce:	fb02 6101 	mla	r1, r2, r1, r6
 800a6d2:	0c1e      	lsrs	r6, r3, #16
 800a6d4:	0c0b      	lsrs	r3, r1, #16
 800a6d6:	fb02 3306 	mla	r3, r2, r6, r3
 800a6da:	b289      	uxth	r1, r1
 800a6dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a6e0:	4285      	cmp	r5, r0
 800a6e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a6e6:	f84c 1b04 	str.w	r1, [ip], #4
 800a6ea:	dcec      	bgt.n	800a6c6 <__multadd+0x12>
 800a6ec:	b30e      	cbz	r6, 800a732 <__multadd+0x7e>
 800a6ee:	68a3      	ldr	r3, [r4, #8]
 800a6f0:	42ab      	cmp	r3, r5
 800a6f2:	dc19      	bgt.n	800a728 <__multadd+0x74>
 800a6f4:	6861      	ldr	r1, [r4, #4]
 800a6f6:	4638      	mov	r0, r7
 800a6f8:	3101      	adds	r1, #1
 800a6fa:	f7ff ff79 	bl	800a5f0 <_Balloc>
 800a6fe:	4680      	mov	r8, r0
 800a700:	b928      	cbnz	r0, 800a70e <__multadd+0x5a>
 800a702:	4602      	mov	r2, r0
 800a704:	21ba      	movs	r1, #186	; 0xba
 800a706:	4b0c      	ldr	r3, [pc, #48]	; (800a738 <__multadd+0x84>)
 800a708:	480c      	ldr	r0, [pc, #48]	; (800a73c <__multadd+0x88>)
 800a70a:	f000 fd15 	bl	800b138 <__assert_func>
 800a70e:	6922      	ldr	r2, [r4, #16]
 800a710:	f104 010c 	add.w	r1, r4, #12
 800a714:	3202      	adds	r2, #2
 800a716:	0092      	lsls	r2, r2, #2
 800a718:	300c      	adds	r0, #12
 800a71a:	f7fe fff0 	bl	80096fe <memcpy>
 800a71e:	4621      	mov	r1, r4
 800a720:	4638      	mov	r0, r7
 800a722:	f7ff ffa5 	bl	800a670 <_Bfree>
 800a726:	4644      	mov	r4, r8
 800a728:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a72c:	3501      	adds	r5, #1
 800a72e:	615e      	str	r6, [r3, #20]
 800a730:	6125      	str	r5, [r4, #16]
 800a732:	4620      	mov	r0, r4
 800a734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a738:	0800bb72 	.word	0x0800bb72
 800a73c:	0800bb83 	.word	0x0800bb83

0800a740 <__hi0bits>:
 800a740:	0c02      	lsrs	r2, r0, #16
 800a742:	0412      	lsls	r2, r2, #16
 800a744:	4603      	mov	r3, r0
 800a746:	b9ca      	cbnz	r2, 800a77c <__hi0bits+0x3c>
 800a748:	0403      	lsls	r3, r0, #16
 800a74a:	2010      	movs	r0, #16
 800a74c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a750:	bf04      	itt	eq
 800a752:	021b      	lsleq	r3, r3, #8
 800a754:	3008      	addeq	r0, #8
 800a756:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a75a:	bf04      	itt	eq
 800a75c:	011b      	lsleq	r3, r3, #4
 800a75e:	3004      	addeq	r0, #4
 800a760:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a764:	bf04      	itt	eq
 800a766:	009b      	lsleq	r3, r3, #2
 800a768:	3002      	addeq	r0, #2
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	db05      	blt.n	800a77a <__hi0bits+0x3a>
 800a76e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800a772:	f100 0001 	add.w	r0, r0, #1
 800a776:	bf08      	it	eq
 800a778:	2020      	moveq	r0, #32
 800a77a:	4770      	bx	lr
 800a77c:	2000      	movs	r0, #0
 800a77e:	e7e5      	b.n	800a74c <__hi0bits+0xc>

0800a780 <__lo0bits>:
 800a780:	6803      	ldr	r3, [r0, #0]
 800a782:	4602      	mov	r2, r0
 800a784:	f013 0007 	ands.w	r0, r3, #7
 800a788:	d00b      	beq.n	800a7a2 <__lo0bits+0x22>
 800a78a:	07d9      	lsls	r1, r3, #31
 800a78c:	d421      	bmi.n	800a7d2 <__lo0bits+0x52>
 800a78e:	0798      	lsls	r0, r3, #30
 800a790:	bf49      	itett	mi
 800a792:	085b      	lsrmi	r3, r3, #1
 800a794:	089b      	lsrpl	r3, r3, #2
 800a796:	2001      	movmi	r0, #1
 800a798:	6013      	strmi	r3, [r2, #0]
 800a79a:	bf5c      	itt	pl
 800a79c:	2002      	movpl	r0, #2
 800a79e:	6013      	strpl	r3, [r2, #0]
 800a7a0:	4770      	bx	lr
 800a7a2:	b299      	uxth	r1, r3
 800a7a4:	b909      	cbnz	r1, 800a7aa <__lo0bits+0x2a>
 800a7a6:	2010      	movs	r0, #16
 800a7a8:	0c1b      	lsrs	r3, r3, #16
 800a7aa:	b2d9      	uxtb	r1, r3
 800a7ac:	b909      	cbnz	r1, 800a7b2 <__lo0bits+0x32>
 800a7ae:	3008      	adds	r0, #8
 800a7b0:	0a1b      	lsrs	r3, r3, #8
 800a7b2:	0719      	lsls	r1, r3, #28
 800a7b4:	bf04      	itt	eq
 800a7b6:	091b      	lsreq	r3, r3, #4
 800a7b8:	3004      	addeq	r0, #4
 800a7ba:	0799      	lsls	r1, r3, #30
 800a7bc:	bf04      	itt	eq
 800a7be:	089b      	lsreq	r3, r3, #2
 800a7c0:	3002      	addeq	r0, #2
 800a7c2:	07d9      	lsls	r1, r3, #31
 800a7c4:	d403      	bmi.n	800a7ce <__lo0bits+0x4e>
 800a7c6:	085b      	lsrs	r3, r3, #1
 800a7c8:	f100 0001 	add.w	r0, r0, #1
 800a7cc:	d003      	beq.n	800a7d6 <__lo0bits+0x56>
 800a7ce:	6013      	str	r3, [r2, #0]
 800a7d0:	4770      	bx	lr
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	4770      	bx	lr
 800a7d6:	2020      	movs	r0, #32
 800a7d8:	4770      	bx	lr
	...

0800a7dc <__i2b>:
 800a7dc:	b510      	push	{r4, lr}
 800a7de:	460c      	mov	r4, r1
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	f7ff ff05 	bl	800a5f0 <_Balloc>
 800a7e6:	4602      	mov	r2, r0
 800a7e8:	b928      	cbnz	r0, 800a7f6 <__i2b+0x1a>
 800a7ea:	f240 1145 	movw	r1, #325	; 0x145
 800a7ee:	4b04      	ldr	r3, [pc, #16]	; (800a800 <__i2b+0x24>)
 800a7f0:	4804      	ldr	r0, [pc, #16]	; (800a804 <__i2b+0x28>)
 800a7f2:	f000 fca1 	bl	800b138 <__assert_func>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	6144      	str	r4, [r0, #20]
 800a7fa:	6103      	str	r3, [r0, #16]
 800a7fc:	bd10      	pop	{r4, pc}
 800a7fe:	bf00      	nop
 800a800:	0800bb72 	.word	0x0800bb72
 800a804:	0800bb83 	.word	0x0800bb83

0800a808 <__multiply>:
 800a808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a80c:	4691      	mov	r9, r2
 800a80e:	690a      	ldr	r2, [r1, #16]
 800a810:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a814:	460c      	mov	r4, r1
 800a816:	429a      	cmp	r2, r3
 800a818:	bfbe      	ittt	lt
 800a81a:	460b      	movlt	r3, r1
 800a81c:	464c      	movlt	r4, r9
 800a81e:	4699      	movlt	r9, r3
 800a820:	6927      	ldr	r7, [r4, #16]
 800a822:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a826:	68a3      	ldr	r3, [r4, #8]
 800a828:	6861      	ldr	r1, [r4, #4]
 800a82a:	eb07 060a 	add.w	r6, r7, sl
 800a82e:	42b3      	cmp	r3, r6
 800a830:	b085      	sub	sp, #20
 800a832:	bfb8      	it	lt
 800a834:	3101      	addlt	r1, #1
 800a836:	f7ff fedb 	bl	800a5f0 <_Balloc>
 800a83a:	b930      	cbnz	r0, 800a84a <__multiply+0x42>
 800a83c:	4602      	mov	r2, r0
 800a83e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a842:	4b43      	ldr	r3, [pc, #268]	; (800a950 <__multiply+0x148>)
 800a844:	4843      	ldr	r0, [pc, #268]	; (800a954 <__multiply+0x14c>)
 800a846:	f000 fc77 	bl	800b138 <__assert_func>
 800a84a:	f100 0514 	add.w	r5, r0, #20
 800a84e:	462b      	mov	r3, r5
 800a850:	2200      	movs	r2, #0
 800a852:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a856:	4543      	cmp	r3, r8
 800a858:	d321      	bcc.n	800a89e <__multiply+0x96>
 800a85a:	f104 0314 	add.w	r3, r4, #20
 800a85e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a862:	f109 0314 	add.w	r3, r9, #20
 800a866:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a86a:	9202      	str	r2, [sp, #8]
 800a86c:	1b3a      	subs	r2, r7, r4
 800a86e:	3a15      	subs	r2, #21
 800a870:	f022 0203 	bic.w	r2, r2, #3
 800a874:	3204      	adds	r2, #4
 800a876:	f104 0115 	add.w	r1, r4, #21
 800a87a:	428f      	cmp	r7, r1
 800a87c:	bf38      	it	cc
 800a87e:	2204      	movcc	r2, #4
 800a880:	9201      	str	r2, [sp, #4]
 800a882:	9a02      	ldr	r2, [sp, #8]
 800a884:	9303      	str	r3, [sp, #12]
 800a886:	429a      	cmp	r2, r3
 800a888:	d80c      	bhi.n	800a8a4 <__multiply+0x9c>
 800a88a:	2e00      	cmp	r6, #0
 800a88c:	dd03      	ble.n	800a896 <__multiply+0x8e>
 800a88e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a892:	2b00      	cmp	r3, #0
 800a894:	d05a      	beq.n	800a94c <__multiply+0x144>
 800a896:	6106      	str	r6, [r0, #16]
 800a898:	b005      	add	sp, #20
 800a89a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89e:	f843 2b04 	str.w	r2, [r3], #4
 800a8a2:	e7d8      	b.n	800a856 <__multiply+0x4e>
 800a8a4:	f8b3 a000 	ldrh.w	sl, [r3]
 800a8a8:	f1ba 0f00 	cmp.w	sl, #0
 800a8ac:	d023      	beq.n	800a8f6 <__multiply+0xee>
 800a8ae:	46a9      	mov	r9, r5
 800a8b0:	f04f 0c00 	mov.w	ip, #0
 800a8b4:	f104 0e14 	add.w	lr, r4, #20
 800a8b8:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a8bc:	f8d9 1000 	ldr.w	r1, [r9]
 800a8c0:	fa1f fb82 	uxth.w	fp, r2
 800a8c4:	b289      	uxth	r1, r1
 800a8c6:	fb0a 110b 	mla	r1, sl, fp, r1
 800a8ca:	4461      	add	r1, ip
 800a8cc:	f8d9 c000 	ldr.w	ip, [r9]
 800a8d0:	0c12      	lsrs	r2, r2, #16
 800a8d2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a8d6:	fb0a c202 	mla	r2, sl, r2, ip
 800a8da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a8de:	b289      	uxth	r1, r1
 800a8e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a8e4:	4577      	cmp	r7, lr
 800a8e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a8ea:	f849 1b04 	str.w	r1, [r9], #4
 800a8ee:	d8e3      	bhi.n	800a8b8 <__multiply+0xb0>
 800a8f0:	9a01      	ldr	r2, [sp, #4]
 800a8f2:	f845 c002 	str.w	ip, [r5, r2]
 800a8f6:	9a03      	ldr	r2, [sp, #12]
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a8fe:	f1b9 0f00 	cmp.w	r9, #0
 800a902:	d021      	beq.n	800a948 <__multiply+0x140>
 800a904:	46ae      	mov	lr, r5
 800a906:	f04f 0a00 	mov.w	sl, #0
 800a90a:	6829      	ldr	r1, [r5, #0]
 800a90c:	f104 0c14 	add.w	ip, r4, #20
 800a910:	f8bc b000 	ldrh.w	fp, [ip]
 800a914:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a918:	b289      	uxth	r1, r1
 800a91a:	fb09 220b 	mla	r2, r9, fp, r2
 800a91e:	4452      	add	r2, sl
 800a920:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a924:	f84e 1b04 	str.w	r1, [lr], #4
 800a928:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a92c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a930:	f8be 1000 	ldrh.w	r1, [lr]
 800a934:	4567      	cmp	r7, ip
 800a936:	fb09 110a 	mla	r1, r9, sl, r1
 800a93a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a93e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a942:	d8e5      	bhi.n	800a910 <__multiply+0x108>
 800a944:	9a01      	ldr	r2, [sp, #4]
 800a946:	50a9      	str	r1, [r5, r2]
 800a948:	3504      	adds	r5, #4
 800a94a:	e79a      	b.n	800a882 <__multiply+0x7a>
 800a94c:	3e01      	subs	r6, #1
 800a94e:	e79c      	b.n	800a88a <__multiply+0x82>
 800a950:	0800bb72 	.word	0x0800bb72
 800a954:	0800bb83 	.word	0x0800bb83

0800a958 <__pow5mult>:
 800a958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a95c:	4615      	mov	r5, r2
 800a95e:	f012 0203 	ands.w	r2, r2, #3
 800a962:	4606      	mov	r6, r0
 800a964:	460f      	mov	r7, r1
 800a966:	d007      	beq.n	800a978 <__pow5mult+0x20>
 800a968:	4c25      	ldr	r4, [pc, #148]	; (800aa00 <__pow5mult+0xa8>)
 800a96a:	3a01      	subs	r2, #1
 800a96c:	2300      	movs	r3, #0
 800a96e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a972:	f7ff fe9f 	bl	800a6b4 <__multadd>
 800a976:	4607      	mov	r7, r0
 800a978:	10ad      	asrs	r5, r5, #2
 800a97a:	d03d      	beq.n	800a9f8 <__pow5mult+0xa0>
 800a97c:	69f4      	ldr	r4, [r6, #28]
 800a97e:	b97c      	cbnz	r4, 800a9a0 <__pow5mult+0x48>
 800a980:	2010      	movs	r0, #16
 800a982:	f7ff fd81 	bl	800a488 <malloc>
 800a986:	4602      	mov	r2, r0
 800a988:	61f0      	str	r0, [r6, #28]
 800a98a:	b928      	cbnz	r0, 800a998 <__pow5mult+0x40>
 800a98c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a990:	4b1c      	ldr	r3, [pc, #112]	; (800aa04 <__pow5mult+0xac>)
 800a992:	481d      	ldr	r0, [pc, #116]	; (800aa08 <__pow5mult+0xb0>)
 800a994:	f000 fbd0 	bl	800b138 <__assert_func>
 800a998:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a99c:	6004      	str	r4, [r0, #0]
 800a99e:	60c4      	str	r4, [r0, #12]
 800a9a0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a9a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9a8:	b94c      	cbnz	r4, 800a9be <__pow5mult+0x66>
 800a9aa:	f240 2171 	movw	r1, #625	; 0x271
 800a9ae:	4630      	mov	r0, r6
 800a9b0:	f7ff ff14 	bl	800a7dc <__i2b>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9bc:	6003      	str	r3, [r0, #0]
 800a9be:	f04f 0900 	mov.w	r9, #0
 800a9c2:	07eb      	lsls	r3, r5, #31
 800a9c4:	d50a      	bpl.n	800a9dc <__pow5mult+0x84>
 800a9c6:	4639      	mov	r1, r7
 800a9c8:	4622      	mov	r2, r4
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f7ff ff1c 	bl	800a808 <__multiply>
 800a9d0:	4680      	mov	r8, r0
 800a9d2:	4639      	mov	r1, r7
 800a9d4:	4630      	mov	r0, r6
 800a9d6:	f7ff fe4b 	bl	800a670 <_Bfree>
 800a9da:	4647      	mov	r7, r8
 800a9dc:	106d      	asrs	r5, r5, #1
 800a9de:	d00b      	beq.n	800a9f8 <__pow5mult+0xa0>
 800a9e0:	6820      	ldr	r0, [r4, #0]
 800a9e2:	b938      	cbnz	r0, 800a9f4 <__pow5mult+0x9c>
 800a9e4:	4622      	mov	r2, r4
 800a9e6:	4621      	mov	r1, r4
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f7ff ff0d 	bl	800a808 <__multiply>
 800a9ee:	6020      	str	r0, [r4, #0]
 800a9f0:	f8c0 9000 	str.w	r9, [r0]
 800a9f4:	4604      	mov	r4, r0
 800a9f6:	e7e4      	b.n	800a9c2 <__pow5mult+0x6a>
 800a9f8:	4638      	mov	r0, r7
 800a9fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9fe:	bf00      	nop
 800aa00:	0800bcd0 	.word	0x0800bcd0
 800aa04:	0800bb03 	.word	0x0800bb03
 800aa08:	0800bb83 	.word	0x0800bb83

0800aa0c <__lshift>:
 800aa0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa10:	460c      	mov	r4, r1
 800aa12:	4607      	mov	r7, r0
 800aa14:	4691      	mov	r9, r2
 800aa16:	6923      	ldr	r3, [r4, #16]
 800aa18:	6849      	ldr	r1, [r1, #4]
 800aa1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa1e:	68a3      	ldr	r3, [r4, #8]
 800aa20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa24:	f108 0601 	add.w	r6, r8, #1
 800aa28:	42b3      	cmp	r3, r6
 800aa2a:	db0b      	blt.n	800aa44 <__lshift+0x38>
 800aa2c:	4638      	mov	r0, r7
 800aa2e:	f7ff fddf 	bl	800a5f0 <_Balloc>
 800aa32:	4605      	mov	r5, r0
 800aa34:	b948      	cbnz	r0, 800aa4a <__lshift+0x3e>
 800aa36:	4602      	mov	r2, r0
 800aa38:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800aa3c:	4b27      	ldr	r3, [pc, #156]	; (800aadc <__lshift+0xd0>)
 800aa3e:	4828      	ldr	r0, [pc, #160]	; (800aae0 <__lshift+0xd4>)
 800aa40:	f000 fb7a 	bl	800b138 <__assert_func>
 800aa44:	3101      	adds	r1, #1
 800aa46:	005b      	lsls	r3, r3, #1
 800aa48:	e7ee      	b.n	800aa28 <__lshift+0x1c>
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	f100 0114 	add.w	r1, r0, #20
 800aa50:	f100 0210 	add.w	r2, r0, #16
 800aa54:	4618      	mov	r0, r3
 800aa56:	4553      	cmp	r3, sl
 800aa58:	db33      	blt.n	800aac2 <__lshift+0xb6>
 800aa5a:	6920      	ldr	r0, [r4, #16]
 800aa5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa60:	f104 0314 	add.w	r3, r4, #20
 800aa64:	f019 091f 	ands.w	r9, r9, #31
 800aa68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa70:	d02b      	beq.n	800aaca <__lshift+0xbe>
 800aa72:	468a      	mov	sl, r1
 800aa74:	2200      	movs	r2, #0
 800aa76:	f1c9 0e20 	rsb	lr, r9, #32
 800aa7a:	6818      	ldr	r0, [r3, #0]
 800aa7c:	fa00 f009 	lsl.w	r0, r0, r9
 800aa80:	4310      	orrs	r0, r2
 800aa82:	f84a 0b04 	str.w	r0, [sl], #4
 800aa86:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa8a:	459c      	cmp	ip, r3
 800aa8c:	fa22 f20e 	lsr.w	r2, r2, lr
 800aa90:	d8f3      	bhi.n	800aa7a <__lshift+0x6e>
 800aa92:	ebac 0304 	sub.w	r3, ip, r4
 800aa96:	3b15      	subs	r3, #21
 800aa98:	f023 0303 	bic.w	r3, r3, #3
 800aa9c:	3304      	adds	r3, #4
 800aa9e:	f104 0015 	add.w	r0, r4, #21
 800aaa2:	4584      	cmp	ip, r0
 800aaa4:	bf38      	it	cc
 800aaa6:	2304      	movcc	r3, #4
 800aaa8:	50ca      	str	r2, [r1, r3]
 800aaaa:	b10a      	cbz	r2, 800aab0 <__lshift+0xa4>
 800aaac:	f108 0602 	add.w	r6, r8, #2
 800aab0:	3e01      	subs	r6, #1
 800aab2:	4638      	mov	r0, r7
 800aab4:	4621      	mov	r1, r4
 800aab6:	612e      	str	r6, [r5, #16]
 800aab8:	f7ff fdda 	bl	800a670 <_Bfree>
 800aabc:	4628      	mov	r0, r5
 800aabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aac2:	f842 0f04 	str.w	r0, [r2, #4]!
 800aac6:	3301      	adds	r3, #1
 800aac8:	e7c5      	b.n	800aa56 <__lshift+0x4a>
 800aaca:	3904      	subs	r1, #4
 800aacc:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad0:	459c      	cmp	ip, r3
 800aad2:	f841 2f04 	str.w	r2, [r1, #4]!
 800aad6:	d8f9      	bhi.n	800aacc <__lshift+0xc0>
 800aad8:	e7ea      	b.n	800aab0 <__lshift+0xa4>
 800aada:	bf00      	nop
 800aadc:	0800bb72 	.word	0x0800bb72
 800aae0:	0800bb83 	.word	0x0800bb83

0800aae4 <__mcmp>:
 800aae4:	4603      	mov	r3, r0
 800aae6:	690a      	ldr	r2, [r1, #16]
 800aae8:	6900      	ldr	r0, [r0, #16]
 800aaea:	b530      	push	{r4, r5, lr}
 800aaec:	1a80      	subs	r0, r0, r2
 800aaee:	d10d      	bne.n	800ab0c <__mcmp+0x28>
 800aaf0:	3314      	adds	r3, #20
 800aaf2:	3114      	adds	r1, #20
 800aaf4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aaf8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aafc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab04:	4295      	cmp	r5, r2
 800ab06:	d002      	beq.n	800ab0e <__mcmp+0x2a>
 800ab08:	d304      	bcc.n	800ab14 <__mcmp+0x30>
 800ab0a:	2001      	movs	r0, #1
 800ab0c:	bd30      	pop	{r4, r5, pc}
 800ab0e:	42a3      	cmp	r3, r4
 800ab10:	d3f4      	bcc.n	800aafc <__mcmp+0x18>
 800ab12:	e7fb      	b.n	800ab0c <__mcmp+0x28>
 800ab14:	f04f 30ff 	mov.w	r0, #4294967295
 800ab18:	e7f8      	b.n	800ab0c <__mcmp+0x28>
	...

0800ab1c <__mdiff>:
 800ab1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab20:	460d      	mov	r5, r1
 800ab22:	4607      	mov	r7, r0
 800ab24:	4611      	mov	r1, r2
 800ab26:	4628      	mov	r0, r5
 800ab28:	4614      	mov	r4, r2
 800ab2a:	f7ff ffdb 	bl	800aae4 <__mcmp>
 800ab2e:	1e06      	subs	r6, r0, #0
 800ab30:	d111      	bne.n	800ab56 <__mdiff+0x3a>
 800ab32:	4631      	mov	r1, r6
 800ab34:	4638      	mov	r0, r7
 800ab36:	f7ff fd5b 	bl	800a5f0 <_Balloc>
 800ab3a:	4602      	mov	r2, r0
 800ab3c:	b928      	cbnz	r0, 800ab4a <__mdiff+0x2e>
 800ab3e:	f240 2137 	movw	r1, #567	; 0x237
 800ab42:	4b3a      	ldr	r3, [pc, #232]	; (800ac2c <__mdiff+0x110>)
 800ab44:	483a      	ldr	r0, [pc, #232]	; (800ac30 <__mdiff+0x114>)
 800ab46:	f000 faf7 	bl	800b138 <__assert_func>
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ab50:	4610      	mov	r0, r2
 800ab52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab56:	bfa4      	itt	ge
 800ab58:	4623      	movge	r3, r4
 800ab5a:	462c      	movge	r4, r5
 800ab5c:	4638      	mov	r0, r7
 800ab5e:	6861      	ldr	r1, [r4, #4]
 800ab60:	bfa6      	itte	ge
 800ab62:	461d      	movge	r5, r3
 800ab64:	2600      	movge	r6, #0
 800ab66:	2601      	movlt	r6, #1
 800ab68:	f7ff fd42 	bl	800a5f0 <_Balloc>
 800ab6c:	4602      	mov	r2, r0
 800ab6e:	b918      	cbnz	r0, 800ab78 <__mdiff+0x5c>
 800ab70:	f240 2145 	movw	r1, #581	; 0x245
 800ab74:	4b2d      	ldr	r3, [pc, #180]	; (800ac2c <__mdiff+0x110>)
 800ab76:	e7e5      	b.n	800ab44 <__mdiff+0x28>
 800ab78:	f102 0814 	add.w	r8, r2, #20
 800ab7c:	46c2      	mov	sl, r8
 800ab7e:	f04f 0c00 	mov.w	ip, #0
 800ab82:	6927      	ldr	r7, [r4, #16]
 800ab84:	60c6      	str	r6, [r0, #12]
 800ab86:	692e      	ldr	r6, [r5, #16]
 800ab88:	f104 0014 	add.w	r0, r4, #20
 800ab8c:	f105 0914 	add.w	r9, r5, #20
 800ab90:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800ab94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ab98:	3410      	adds	r4, #16
 800ab9a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ab9e:	f859 3b04 	ldr.w	r3, [r9], #4
 800aba2:	fa1f f18b 	uxth.w	r1, fp
 800aba6:	4461      	add	r1, ip
 800aba8:	fa1f fc83 	uxth.w	ip, r3
 800abac:	0c1b      	lsrs	r3, r3, #16
 800abae:	eba1 010c 	sub.w	r1, r1, ip
 800abb2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800abb6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800abba:	b289      	uxth	r1, r1
 800abbc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800abc0:	454e      	cmp	r6, r9
 800abc2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800abc6:	f84a 1b04 	str.w	r1, [sl], #4
 800abca:	d8e6      	bhi.n	800ab9a <__mdiff+0x7e>
 800abcc:	1b73      	subs	r3, r6, r5
 800abce:	3b15      	subs	r3, #21
 800abd0:	f023 0303 	bic.w	r3, r3, #3
 800abd4:	3515      	adds	r5, #21
 800abd6:	3304      	adds	r3, #4
 800abd8:	42ae      	cmp	r6, r5
 800abda:	bf38      	it	cc
 800abdc:	2304      	movcc	r3, #4
 800abde:	4418      	add	r0, r3
 800abe0:	4443      	add	r3, r8
 800abe2:	461e      	mov	r6, r3
 800abe4:	4605      	mov	r5, r0
 800abe6:	4575      	cmp	r5, lr
 800abe8:	d30e      	bcc.n	800ac08 <__mdiff+0xec>
 800abea:	f10e 0103 	add.w	r1, lr, #3
 800abee:	1a09      	subs	r1, r1, r0
 800abf0:	f021 0103 	bic.w	r1, r1, #3
 800abf4:	3803      	subs	r0, #3
 800abf6:	4586      	cmp	lr, r0
 800abf8:	bf38      	it	cc
 800abfa:	2100      	movcc	r1, #0
 800abfc:	440b      	add	r3, r1
 800abfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac02:	b189      	cbz	r1, 800ac28 <__mdiff+0x10c>
 800ac04:	6117      	str	r7, [r2, #16]
 800ac06:	e7a3      	b.n	800ab50 <__mdiff+0x34>
 800ac08:	f855 8b04 	ldr.w	r8, [r5], #4
 800ac0c:	fa1f f188 	uxth.w	r1, r8
 800ac10:	4461      	add	r1, ip
 800ac12:	140c      	asrs	r4, r1, #16
 800ac14:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac18:	b289      	uxth	r1, r1
 800ac1a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ac1e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800ac22:	f846 1b04 	str.w	r1, [r6], #4
 800ac26:	e7de      	b.n	800abe6 <__mdiff+0xca>
 800ac28:	3f01      	subs	r7, #1
 800ac2a:	e7e8      	b.n	800abfe <__mdiff+0xe2>
 800ac2c:	0800bb72 	.word	0x0800bb72
 800ac30:	0800bb83 	.word	0x0800bb83

0800ac34 <__d2b>:
 800ac34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac36:	2101      	movs	r1, #1
 800ac38:	4617      	mov	r7, r2
 800ac3a:	461c      	mov	r4, r3
 800ac3c:	9e08      	ldr	r6, [sp, #32]
 800ac3e:	f7ff fcd7 	bl	800a5f0 <_Balloc>
 800ac42:	4605      	mov	r5, r0
 800ac44:	b930      	cbnz	r0, 800ac54 <__d2b+0x20>
 800ac46:	4602      	mov	r2, r0
 800ac48:	f240 310f 	movw	r1, #783	; 0x30f
 800ac4c:	4b22      	ldr	r3, [pc, #136]	; (800acd8 <__d2b+0xa4>)
 800ac4e:	4823      	ldr	r0, [pc, #140]	; (800acdc <__d2b+0xa8>)
 800ac50:	f000 fa72 	bl	800b138 <__assert_func>
 800ac54:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800ac58:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800ac5c:	bb24      	cbnz	r4, 800aca8 <__d2b+0x74>
 800ac5e:	2f00      	cmp	r7, #0
 800ac60:	9301      	str	r3, [sp, #4]
 800ac62:	d026      	beq.n	800acb2 <__d2b+0x7e>
 800ac64:	4668      	mov	r0, sp
 800ac66:	9700      	str	r7, [sp, #0]
 800ac68:	f7ff fd8a 	bl	800a780 <__lo0bits>
 800ac6c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ac70:	b1e8      	cbz	r0, 800acae <__d2b+0x7a>
 800ac72:	f1c0 0320 	rsb	r3, r0, #32
 800ac76:	fa02 f303 	lsl.w	r3, r2, r3
 800ac7a:	430b      	orrs	r3, r1
 800ac7c:	40c2      	lsrs	r2, r0
 800ac7e:	616b      	str	r3, [r5, #20]
 800ac80:	9201      	str	r2, [sp, #4]
 800ac82:	9b01      	ldr	r3, [sp, #4]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	bf14      	ite	ne
 800ac88:	2102      	movne	r1, #2
 800ac8a:	2101      	moveq	r1, #1
 800ac8c:	61ab      	str	r3, [r5, #24]
 800ac8e:	6129      	str	r1, [r5, #16]
 800ac90:	b1bc      	cbz	r4, 800acc2 <__d2b+0x8e>
 800ac92:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ac96:	4404      	add	r4, r0
 800ac98:	6034      	str	r4, [r6, #0]
 800ac9a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ac9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca0:	6018      	str	r0, [r3, #0]
 800aca2:	4628      	mov	r0, r5
 800aca4:	b003      	add	sp, #12
 800aca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800acac:	e7d7      	b.n	800ac5e <__d2b+0x2a>
 800acae:	6169      	str	r1, [r5, #20]
 800acb0:	e7e7      	b.n	800ac82 <__d2b+0x4e>
 800acb2:	a801      	add	r0, sp, #4
 800acb4:	f7ff fd64 	bl	800a780 <__lo0bits>
 800acb8:	9b01      	ldr	r3, [sp, #4]
 800acba:	2101      	movs	r1, #1
 800acbc:	616b      	str	r3, [r5, #20]
 800acbe:	3020      	adds	r0, #32
 800acc0:	e7e5      	b.n	800ac8e <__d2b+0x5a>
 800acc2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800acc6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800acca:	6030      	str	r0, [r6, #0]
 800accc:	6918      	ldr	r0, [r3, #16]
 800acce:	f7ff fd37 	bl	800a740 <__hi0bits>
 800acd2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800acd6:	e7e2      	b.n	800ac9e <__d2b+0x6a>
 800acd8:	0800bb72 	.word	0x0800bb72
 800acdc:	0800bb83 	.word	0x0800bb83

0800ace0 <__ssputs_r>:
 800ace0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ace4:	461f      	mov	r7, r3
 800ace6:	688e      	ldr	r6, [r1, #8]
 800ace8:	4682      	mov	sl, r0
 800acea:	42be      	cmp	r6, r7
 800acec:	460c      	mov	r4, r1
 800acee:	4690      	mov	r8, r2
 800acf0:	680b      	ldr	r3, [r1, #0]
 800acf2:	d82c      	bhi.n	800ad4e <__ssputs_r+0x6e>
 800acf4:	898a      	ldrh	r2, [r1, #12]
 800acf6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acfa:	d026      	beq.n	800ad4a <__ssputs_r+0x6a>
 800acfc:	6965      	ldr	r5, [r4, #20]
 800acfe:	6909      	ldr	r1, [r1, #16]
 800ad00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad04:	eba3 0901 	sub.w	r9, r3, r1
 800ad08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad0c:	1c7b      	adds	r3, r7, #1
 800ad0e:	444b      	add	r3, r9
 800ad10:	106d      	asrs	r5, r5, #1
 800ad12:	429d      	cmp	r5, r3
 800ad14:	bf38      	it	cc
 800ad16:	461d      	movcc	r5, r3
 800ad18:	0553      	lsls	r3, r2, #21
 800ad1a:	d527      	bpl.n	800ad6c <__ssputs_r+0x8c>
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	f7ff fbdb 	bl	800a4d8 <_malloc_r>
 800ad22:	4606      	mov	r6, r0
 800ad24:	b360      	cbz	r0, 800ad80 <__ssputs_r+0xa0>
 800ad26:	464a      	mov	r2, r9
 800ad28:	6921      	ldr	r1, [r4, #16]
 800ad2a:	f7fe fce8 	bl	80096fe <memcpy>
 800ad2e:	89a3      	ldrh	r3, [r4, #12]
 800ad30:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad38:	81a3      	strh	r3, [r4, #12]
 800ad3a:	6126      	str	r6, [r4, #16]
 800ad3c:	444e      	add	r6, r9
 800ad3e:	6026      	str	r6, [r4, #0]
 800ad40:	463e      	mov	r6, r7
 800ad42:	6165      	str	r5, [r4, #20]
 800ad44:	eba5 0509 	sub.w	r5, r5, r9
 800ad48:	60a5      	str	r5, [r4, #8]
 800ad4a:	42be      	cmp	r6, r7
 800ad4c:	d900      	bls.n	800ad50 <__ssputs_r+0x70>
 800ad4e:	463e      	mov	r6, r7
 800ad50:	4632      	mov	r2, r6
 800ad52:	4641      	mov	r1, r8
 800ad54:	6820      	ldr	r0, [r4, #0]
 800ad56:	f000 f9c5 	bl	800b0e4 <memmove>
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	68a3      	ldr	r3, [r4, #8]
 800ad5e:	1b9b      	subs	r3, r3, r6
 800ad60:	60a3      	str	r3, [r4, #8]
 800ad62:	6823      	ldr	r3, [r4, #0]
 800ad64:	4433      	add	r3, r6
 800ad66:	6023      	str	r3, [r4, #0]
 800ad68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad6c:	462a      	mov	r2, r5
 800ad6e:	f000 fa27 	bl	800b1c0 <_realloc_r>
 800ad72:	4606      	mov	r6, r0
 800ad74:	2800      	cmp	r0, #0
 800ad76:	d1e0      	bne.n	800ad3a <__ssputs_r+0x5a>
 800ad78:	4650      	mov	r0, sl
 800ad7a:	6921      	ldr	r1, [r4, #16]
 800ad7c:	f7ff fb3c 	bl	800a3f8 <_free_r>
 800ad80:	230c      	movs	r3, #12
 800ad82:	f8ca 3000 	str.w	r3, [sl]
 800ad86:	89a3      	ldrh	r3, [r4, #12]
 800ad88:	f04f 30ff 	mov.w	r0, #4294967295
 800ad8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad90:	81a3      	strh	r3, [r4, #12]
 800ad92:	e7e9      	b.n	800ad68 <__ssputs_r+0x88>

0800ad94 <_svfiprintf_r>:
 800ad94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad98:	4698      	mov	r8, r3
 800ad9a:	898b      	ldrh	r3, [r1, #12]
 800ad9c:	4607      	mov	r7, r0
 800ad9e:	061b      	lsls	r3, r3, #24
 800ada0:	460d      	mov	r5, r1
 800ada2:	4614      	mov	r4, r2
 800ada4:	b09d      	sub	sp, #116	; 0x74
 800ada6:	d50e      	bpl.n	800adc6 <_svfiprintf_r+0x32>
 800ada8:	690b      	ldr	r3, [r1, #16]
 800adaa:	b963      	cbnz	r3, 800adc6 <_svfiprintf_r+0x32>
 800adac:	2140      	movs	r1, #64	; 0x40
 800adae:	f7ff fb93 	bl	800a4d8 <_malloc_r>
 800adb2:	6028      	str	r0, [r5, #0]
 800adb4:	6128      	str	r0, [r5, #16]
 800adb6:	b920      	cbnz	r0, 800adc2 <_svfiprintf_r+0x2e>
 800adb8:	230c      	movs	r3, #12
 800adba:	603b      	str	r3, [r7, #0]
 800adbc:	f04f 30ff 	mov.w	r0, #4294967295
 800adc0:	e0d0      	b.n	800af64 <_svfiprintf_r+0x1d0>
 800adc2:	2340      	movs	r3, #64	; 0x40
 800adc4:	616b      	str	r3, [r5, #20]
 800adc6:	2300      	movs	r3, #0
 800adc8:	9309      	str	r3, [sp, #36]	; 0x24
 800adca:	2320      	movs	r3, #32
 800adcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800add0:	2330      	movs	r3, #48	; 0x30
 800add2:	f04f 0901 	mov.w	r9, #1
 800add6:	f8cd 800c 	str.w	r8, [sp, #12]
 800adda:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800af7c <_svfiprintf_r+0x1e8>
 800adde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ade2:	4623      	mov	r3, r4
 800ade4:	469a      	mov	sl, r3
 800ade6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adea:	b10a      	cbz	r2, 800adf0 <_svfiprintf_r+0x5c>
 800adec:	2a25      	cmp	r2, #37	; 0x25
 800adee:	d1f9      	bne.n	800ade4 <_svfiprintf_r+0x50>
 800adf0:	ebba 0b04 	subs.w	fp, sl, r4
 800adf4:	d00b      	beq.n	800ae0e <_svfiprintf_r+0x7a>
 800adf6:	465b      	mov	r3, fp
 800adf8:	4622      	mov	r2, r4
 800adfa:	4629      	mov	r1, r5
 800adfc:	4638      	mov	r0, r7
 800adfe:	f7ff ff6f 	bl	800ace0 <__ssputs_r>
 800ae02:	3001      	adds	r0, #1
 800ae04:	f000 80a9 	beq.w	800af5a <_svfiprintf_r+0x1c6>
 800ae08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae0a:	445a      	add	r2, fp
 800ae0c:	9209      	str	r2, [sp, #36]	; 0x24
 800ae0e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	f000 80a1 	beq.w	800af5a <_svfiprintf_r+0x1c6>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae22:	f10a 0a01 	add.w	sl, sl, #1
 800ae26:	9304      	str	r3, [sp, #16]
 800ae28:	9307      	str	r3, [sp, #28]
 800ae2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae2e:	931a      	str	r3, [sp, #104]	; 0x68
 800ae30:	4654      	mov	r4, sl
 800ae32:	2205      	movs	r2, #5
 800ae34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae38:	4850      	ldr	r0, [pc, #320]	; (800af7c <_svfiprintf_r+0x1e8>)
 800ae3a:	f7fe fc52 	bl	80096e2 <memchr>
 800ae3e:	9a04      	ldr	r2, [sp, #16]
 800ae40:	b9d8      	cbnz	r0, 800ae7a <_svfiprintf_r+0xe6>
 800ae42:	06d0      	lsls	r0, r2, #27
 800ae44:	bf44      	itt	mi
 800ae46:	2320      	movmi	r3, #32
 800ae48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae4c:	0711      	lsls	r1, r2, #28
 800ae4e:	bf44      	itt	mi
 800ae50:	232b      	movmi	r3, #43	; 0x2b
 800ae52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae56:	f89a 3000 	ldrb.w	r3, [sl]
 800ae5a:	2b2a      	cmp	r3, #42	; 0x2a
 800ae5c:	d015      	beq.n	800ae8a <_svfiprintf_r+0xf6>
 800ae5e:	4654      	mov	r4, sl
 800ae60:	2000      	movs	r0, #0
 800ae62:	f04f 0c0a 	mov.w	ip, #10
 800ae66:	9a07      	ldr	r2, [sp, #28]
 800ae68:	4621      	mov	r1, r4
 800ae6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae6e:	3b30      	subs	r3, #48	; 0x30
 800ae70:	2b09      	cmp	r3, #9
 800ae72:	d94d      	bls.n	800af10 <_svfiprintf_r+0x17c>
 800ae74:	b1b0      	cbz	r0, 800aea4 <_svfiprintf_r+0x110>
 800ae76:	9207      	str	r2, [sp, #28]
 800ae78:	e014      	b.n	800aea4 <_svfiprintf_r+0x110>
 800ae7a:	eba0 0308 	sub.w	r3, r0, r8
 800ae7e:	fa09 f303 	lsl.w	r3, r9, r3
 800ae82:	4313      	orrs	r3, r2
 800ae84:	46a2      	mov	sl, r4
 800ae86:	9304      	str	r3, [sp, #16]
 800ae88:	e7d2      	b.n	800ae30 <_svfiprintf_r+0x9c>
 800ae8a:	9b03      	ldr	r3, [sp, #12]
 800ae8c:	1d19      	adds	r1, r3, #4
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	9103      	str	r1, [sp, #12]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	bfbb      	ittet	lt
 800ae96:	425b      	neglt	r3, r3
 800ae98:	f042 0202 	orrlt.w	r2, r2, #2
 800ae9c:	9307      	strge	r3, [sp, #28]
 800ae9e:	9307      	strlt	r3, [sp, #28]
 800aea0:	bfb8      	it	lt
 800aea2:	9204      	strlt	r2, [sp, #16]
 800aea4:	7823      	ldrb	r3, [r4, #0]
 800aea6:	2b2e      	cmp	r3, #46	; 0x2e
 800aea8:	d10c      	bne.n	800aec4 <_svfiprintf_r+0x130>
 800aeaa:	7863      	ldrb	r3, [r4, #1]
 800aeac:	2b2a      	cmp	r3, #42	; 0x2a
 800aeae:	d134      	bne.n	800af1a <_svfiprintf_r+0x186>
 800aeb0:	9b03      	ldr	r3, [sp, #12]
 800aeb2:	3402      	adds	r4, #2
 800aeb4:	1d1a      	adds	r2, r3, #4
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	9203      	str	r2, [sp, #12]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	bfb8      	it	lt
 800aebe:	f04f 33ff 	movlt.w	r3, #4294967295
 800aec2:	9305      	str	r3, [sp, #20]
 800aec4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800af80 <_svfiprintf_r+0x1ec>
 800aec8:	2203      	movs	r2, #3
 800aeca:	4650      	mov	r0, sl
 800aecc:	7821      	ldrb	r1, [r4, #0]
 800aece:	f7fe fc08 	bl	80096e2 <memchr>
 800aed2:	b138      	cbz	r0, 800aee4 <_svfiprintf_r+0x150>
 800aed4:	2240      	movs	r2, #64	; 0x40
 800aed6:	9b04      	ldr	r3, [sp, #16]
 800aed8:	eba0 000a 	sub.w	r0, r0, sl
 800aedc:	4082      	lsls	r2, r0
 800aede:	4313      	orrs	r3, r2
 800aee0:	3401      	adds	r4, #1
 800aee2:	9304      	str	r3, [sp, #16]
 800aee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aee8:	2206      	movs	r2, #6
 800aeea:	4826      	ldr	r0, [pc, #152]	; (800af84 <_svfiprintf_r+0x1f0>)
 800aeec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aef0:	f7fe fbf7 	bl	80096e2 <memchr>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	d038      	beq.n	800af6a <_svfiprintf_r+0x1d6>
 800aef8:	4b23      	ldr	r3, [pc, #140]	; (800af88 <_svfiprintf_r+0x1f4>)
 800aefa:	bb1b      	cbnz	r3, 800af44 <_svfiprintf_r+0x1b0>
 800aefc:	9b03      	ldr	r3, [sp, #12]
 800aefe:	3307      	adds	r3, #7
 800af00:	f023 0307 	bic.w	r3, r3, #7
 800af04:	3308      	adds	r3, #8
 800af06:	9303      	str	r3, [sp, #12]
 800af08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af0a:	4433      	add	r3, r6
 800af0c:	9309      	str	r3, [sp, #36]	; 0x24
 800af0e:	e768      	b.n	800ade2 <_svfiprintf_r+0x4e>
 800af10:	460c      	mov	r4, r1
 800af12:	2001      	movs	r0, #1
 800af14:	fb0c 3202 	mla	r2, ip, r2, r3
 800af18:	e7a6      	b.n	800ae68 <_svfiprintf_r+0xd4>
 800af1a:	2300      	movs	r3, #0
 800af1c:	f04f 0c0a 	mov.w	ip, #10
 800af20:	4619      	mov	r1, r3
 800af22:	3401      	adds	r4, #1
 800af24:	9305      	str	r3, [sp, #20]
 800af26:	4620      	mov	r0, r4
 800af28:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af2c:	3a30      	subs	r2, #48	; 0x30
 800af2e:	2a09      	cmp	r2, #9
 800af30:	d903      	bls.n	800af3a <_svfiprintf_r+0x1a6>
 800af32:	2b00      	cmp	r3, #0
 800af34:	d0c6      	beq.n	800aec4 <_svfiprintf_r+0x130>
 800af36:	9105      	str	r1, [sp, #20]
 800af38:	e7c4      	b.n	800aec4 <_svfiprintf_r+0x130>
 800af3a:	4604      	mov	r4, r0
 800af3c:	2301      	movs	r3, #1
 800af3e:	fb0c 2101 	mla	r1, ip, r1, r2
 800af42:	e7f0      	b.n	800af26 <_svfiprintf_r+0x192>
 800af44:	ab03      	add	r3, sp, #12
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	462a      	mov	r2, r5
 800af4a:	4638      	mov	r0, r7
 800af4c:	4b0f      	ldr	r3, [pc, #60]	; (800af8c <_svfiprintf_r+0x1f8>)
 800af4e:	a904      	add	r1, sp, #16
 800af50:	f7fd fe0a 	bl	8008b68 <_printf_float>
 800af54:	1c42      	adds	r2, r0, #1
 800af56:	4606      	mov	r6, r0
 800af58:	d1d6      	bne.n	800af08 <_svfiprintf_r+0x174>
 800af5a:	89ab      	ldrh	r3, [r5, #12]
 800af5c:	065b      	lsls	r3, r3, #25
 800af5e:	f53f af2d 	bmi.w	800adbc <_svfiprintf_r+0x28>
 800af62:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af64:	b01d      	add	sp, #116	; 0x74
 800af66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af6a:	ab03      	add	r3, sp, #12
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	462a      	mov	r2, r5
 800af70:	4638      	mov	r0, r7
 800af72:	4b06      	ldr	r3, [pc, #24]	; (800af8c <_svfiprintf_r+0x1f8>)
 800af74:	a904      	add	r1, sp, #16
 800af76:	f7fe f897 	bl	80090a8 <_printf_i>
 800af7a:	e7eb      	b.n	800af54 <_svfiprintf_r+0x1c0>
 800af7c:	0800bcdc 	.word	0x0800bcdc
 800af80:	0800bce2 	.word	0x0800bce2
 800af84:	0800bce6 	.word	0x0800bce6
 800af88:	08008b69 	.word	0x08008b69
 800af8c:	0800ace1 	.word	0x0800ace1

0800af90 <__sflush_r>:
 800af90:	898a      	ldrh	r2, [r1, #12]
 800af92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af94:	4605      	mov	r5, r0
 800af96:	0710      	lsls	r0, r2, #28
 800af98:	460c      	mov	r4, r1
 800af9a:	d457      	bmi.n	800b04c <__sflush_r+0xbc>
 800af9c:	684b      	ldr	r3, [r1, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	dc04      	bgt.n	800afac <__sflush_r+0x1c>
 800afa2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	dc01      	bgt.n	800afac <__sflush_r+0x1c>
 800afa8:	2000      	movs	r0, #0
 800afaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afae:	2e00      	cmp	r6, #0
 800afb0:	d0fa      	beq.n	800afa8 <__sflush_r+0x18>
 800afb2:	2300      	movs	r3, #0
 800afb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800afb8:	682f      	ldr	r7, [r5, #0]
 800afba:	6a21      	ldr	r1, [r4, #32]
 800afbc:	602b      	str	r3, [r5, #0]
 800afbe:	d032      	beq.n	800b026 <__sflush_r+0x96>
 800afc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	075a      	lsls	r2, r3, #29
 800afc6:	d505      	bpl.n	800afd4 <__sflush_r+0x44>
 800afc8:	6863      	ldr	r3, [r4, #4]
 800afca:	1ac0      	subs	r0, r0, r3
 800afcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afce:	b10b      	cbz	r3, 800afd4 <__sflush_r+0x44>
 800afd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800afd2:	1ac0      	subs	r0, r0, r3
 800afd4:	2300      	movs	r3, #0
 800afd6:	4602      	mov	r2, r0
 800afd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800afda:	4628      	mov	r0, r5
 800afdc:	6a21      	ldr	r1, [r4, #32]
 800afde:	47b0      	blx	r6
 800afe0:	1c43      	adds	r3, r0, #1
 800afe2:	89a3      	ldrh	r3, [r4, #12]
 800afe4:	d106      	bne.n	800aff4 <__sflush_r+0x64>
 800afe6:	6829      	ldr	r1, [r5, #0]
 800afe8:	291d      	cmp	r1, #29
 800afea:	d82b      	bhi.n	800b044 <__sflush_r+0xb4>
 800afec:	4a28      	ldr	r2, [pc, #160]	; (800b090 <__sflush_r+0x100>)
 800afee:	410a      	asrs	r2, r1
 800aff0:	07d6      	lsls	r6, r2, #31
 800aff2:	d427      	bmi.n	800b044 <__sflush_r+0xb4>
 800aff4:	2200      	movs	r2, #0
 800aff6:	6062      	str	r2, [r4, #4]
 800aff8:	6922      	ldr	r2, [r4, #16]
 800affa:	04d9      	lsls	r1, r3, #19
 800affc:	6022      	str	r2, [r4, #0]
 800affe:	d504      	bpl.n	800b00a <__sflush_r+0x7a>
 800b000:	1c42      	adds	r2, r0, #1
 800b002:	d101      	bne.n	800b008 <__sflush_r+0x78>
 800b004:	682b      	ldr	r3, [r5, #0]
 800b006:	b903      	cbnz	r3, 800b00a <__sflush_r+0x7a>
 800b008:	6560      	str	r0, [r4, #84]	; 0x54
 800b00a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b00c:	602f      	str	r7, [r5, #0]
 800b00e:	2900      	cmp	r1, #0
 800b010:	d0ca      	beq.n	800afa8 <__sflush_r+0x18>
 800b012:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b016:	4299      	cmp	r1, r3
 800b018:	d002      	beq.n	800b020 <__sflush_r+0x90>
 800b01a:	4628      	mov	r0, r5
 800b01c:	f7ff f9ec 	bl	800a3f8 <_free_r>
 800b020:	2000      	movs	r0, #0
 800b022:	6360      	str	r0, [r4, #52]	; 0x34
 800b024:	e7c1      	b.n	800afaa <__sflush_r+0x1a>
 800b026:	2301      	movs	r3, #1
 800b028:	4628      	mov	r0, r5
 800b02a:	47b0      	blx	r6
 800b02c:	1c41      	adds	r1, r0, #1
 800b02e:	d1c8      	bne.n	800afc2 <__sflush_r+0x32>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d0c5      	beq.n	800afc2 <__sflush_r+0x32>
 800b036:	2b1d      	cmp	r3, #29
 800b038:	d001      	beq.n	800b03e <__sflush_r+0xae>
 800b03a:	2b16      	cmp	r3, #22
 800b03c:	d101      	bne.n	800b042 <__sflush_r+0xb2>
 800b03e:	602f      	str	r7, [r5, #0]
 800b040:	e7b2      	b.n	800afa8 <__sflush_r+0x18>
 800b042:	89a3      	ldrh	r3, [r4, #12]
 800b044:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b048:	81a3      	strh	r3, [r4, #12]
 800b04a:	e7ae      	b.n	800afaa <__sflush_r+0x1a>
 800b04c:	690f      	ldr	r7, [r1, #16]
 800b04e:	2f00      	cmp	r7, #0
 800b050:	d0aa      	beq.n	800afa8 <__sflush_r+0x18>
 800b052:	0793      	lsls	r3, r2, #30
 800b054:	bf18      	it	ne
 800b056:	2300      	movne	r3, #0
 800b058:	680e      	ldr	r6, [r1, #0]
 800b05a:	bf08      	it	eq
 800b05c:	694b      	ldreq	r3, [r1, #20]
 800b05e:	1bf6      	subs	r6, r6, r7
 800b060:	600f      	str	r7, [r1, #0]
 800b062:	608b      	str	r3, [r1, #8]
 800b064:	2e00      	cmp	r6, #0
 800b066:	dd9f      	ble.n	800afa8 <__sflush_r+0x18>
 800b068:	4633      	mov	r3, r6
 800b06a:	463a      	mov	r2, r7
 800b06c:	4628      	mov	r0, r5
 800b06e:	6a21      	ldr	r1, [r4, #32]
 800b070:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800b074:	47e0      	blx	ip
 800b076:	2800      	cmp	r0, #0
 800b078:	dc06      	bgt.n	800b088 <__sflush_r+0xf8>
 800b07a:	89a3      	ldrh	r3, [r4, #12]
 800b07c:	f04f 30ff 	mov.w	r0, #4294967295
 800b080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b084:	81a3      	strh	r3, [r4, #12]
 800b086:	e790      	b.n	800afaa <__sflush_r+0x1a>
 800b088:	4407      	add	r7, r0
 800b08a:	1a36      	subs	r6, r6, r0
 800b08c:	e7ea      	b.n	800b064 <__sflush_r+0xd4>
 800b08e:	bf00      	nop
 800b090:	dfbffffe 	.word	0xdfbffffe

0800b094 <_fflush_r>:
 800b094:	b538      	push	{r3, r4, r5, lr}
 800b096:	690b      	ldr	r3, [r1, #16]
 800b098:	4605      	mov	r5, r0
 800b09a:	460c      	mov	r4, r1
 800b09c:	b913      	cbnz	r3, 800b0a4 <_fflush_r+0x10>
 800b09e:	2500      	movs	r5, #0
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	b118      	cbz	r0, 800b0ae <_fflush_r+0x1a>
 800b0a6:	6a03      	ldr	r3, [r0, #32]
 800b0a8:	b90b      	cbnz	r3, 800b0ae <_fflush_r+0x1a>
 800b0aa:	f7fe f9ab 	bl	8009404 <__sinit>
 800b0ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d0f3      	beq.n	800b09e <_fflush_r+0xa>
 800b0b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0b8:	07d0      	lsls	r0, r2, #31
 800b0ba:	d404      	bmi.n	800b0c6 <_fflush_r+0x32>
 800b0bc:	0599      	lsls	r1, r3, #22
 800b0be:	d402      	bmi.n	800b0c6 <_fflush_r+0x32>
 800b0c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0c2:	f7fe fb0c 	bl	80096de <__retarget_lock_acquire_recursive>
 800b0c6:	4628      	mov	r0, r5
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	f7ff ff61 	bl	800af90 <__sflush_r>
 800b0ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b0d0:	4605      	mov	r5, r0
 800b0d2:	07da      	lsls	r2, r3, #31
 800b0d4:	d4e4      	bmi.n	800b0a0 <_fflush_r+0xc>
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	059b      	lsls	r3, r3, #22
 800b0da:	d4e1      	bmi.n	800b0a0 <_fflush_r+0xc>
 800b0dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b0de:	f7fe faff 	bl	80096e0 <__retarget_lock_release_recursive>
 800b0e2:	e7dd      	b.n	800b0a0 <_fflush_r+0xc>

0800b0e4 <memmove>:
 800b0e4:	4288      	cmp	r0, r1
 800b0e6:	b510      	push	{r4, lr}
 800b0e8:	eb01 0402 	add.w	r4, r1, r2
 800b0ec:	d902      	bls.n	800b0f4 <memmove+0x10>
 800b0ee:	4284      	cmp	r4, r0
 800b0f0:	4623      	mov	r3, r4
 800b0f2:	d807      	bhi.n	800b104 <memmove+0x20>
 800b0f4:	1e43      	subs	r3, r0, #1
 800b0f6:	42a1      	cmp	r1, r4
 800b0f8:	d008      	beq.n	800b10c <memmove+0x28>
 800b0fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b0fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b102:	e7f8      	b.n	800b0f6 <memmove+0x12>
 800b104:	4601      	mov	r1, r0
 800b106:	4402      	add	r2, r0
 800b108:	428a      	cmp	r2, r1
 800b10a:	d100      	bne.n	800b10e <memmove+0x2a>
 800b10c:	bd10      	pop	{r4, pc}
 800b10e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b116:	e7f7      	b.n	800b108 <memmove+0x24>

0800b118 <_sbrk_r>:
 800b118:	b538      	push	{r3, r4, r5, lr}
 800b11a:	2300      	movs	r3, #0
 800b11c:	4d05      	ldr	r5, [pc, #20]	; (800b134 <_sbrk_r+0x1c>)
 800b11e:	4604      	mov	r4, r0
 800b120:	4608      	mov	r0, r1
 800b122:	602b      	str	r3, [r5, #0]
 800b124:	f7f8 ffb6 	bl	8004094 <_sbrk>
 800b128:	1c43      	adds	r3, r0, #1
 800b12a:	d102      	bne.n	800b132 <_sbrk_r+0x1a>
 800b12c:	682b      	ldr	r3, [r5, #0]
 800b12e:	b103      	cbz	r3, 800b132 <_sbrk_r+0x1a>
 800b130:	6023      	str	r3, [r4, #0]
 800b132:	bd38      	pop	{r3, r4, r5, pc}
 800b134:	20001688 	.word	0x20001688

0800b138 <__assert_func>:
 800b138:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b13a:	4614      	mov	r4, r2
 800b13c:	461a      	mov	r2, r3
 800b13e:	4b09      	ldr	r3, [pc, #36]	; (800b164 <__assert_func+0x2c>)
 800b140:	4605      	mov	r5, r0
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	68d8      	ldr	r0, [r3, #12]
 800b146:	b14c      	cbz	r4, 800b15c <__assert_func+0x24>
 800b148:	4b07      	ldr	r3, [pc, #28]	; (800b168 <__assert_func+0x30>)
 800b14a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b14e:	9100      	str	r1, [sp, #0]
 800b150:	462b      	mov	r3, r5
 800b152:	4906      	ldr	r1, [pc, #24]	; (800b16c <__assert_func+0x34>)
 800b154:	f000 f870 	bl	800b238 <fiprintf>
 800b158:	f000 f880 	bl	800b25c <abort>
 800b15c:	4b04      	ldr	r3, [pc, #16]	; (800b170 <__assert_func+0x38>)
 800b15e:	461c      	mov	r4, r3
 800b160:	e7f3      	b.n	800b14a <__assert_func+0x12>
 800b162:	bf00      	nop
 800b164:	20000068 	.word	0x20000068
 800b168:	0800bcf7 	.word	0x0800bcf7
 800b16c:	0800bd04 	.word	0x0800bd04
 800b170:	0800bd32 	.word	0x0800bd32

0800b174 <_calloc_r>:
 800b174:	b570      	push	{r4, r5, r6, lr}
 800b176:	fba1 5402 	umull	r5, r4, r1, r2
 800b17a:	b934      	cbnz	r4, 800b18a <_calloc_r+0x16>
 800b17c:	4629      	mov	r1, r5
 800b17e:	f7ff f9ab 	bl	800a4d8 <_malloc_r>
 800b182:	4606      	mov	r6, r0
 800b184:	b928      	cbnz	r0, 800b192 <_calloc_r+0x1e>
 800b186:	4630      	mov	r0, r6
 800b188:	bd70      	pop	{r4, r5, r6, pc}
 800b18a:	220c      	movs	r2, #12
 800b18c:	2600      	movs	r6, #0
 800b18e:	6002      	str	r2, [r0, #0]
 800b190:	e7f9      	b.n	800b186 <_calloc_r+0x12>
 800b192:	462a      	mov	r2, r5
 800b194:	4621      	mov	r1, r4
 800b196:	f7fe f9ce 	bl	8009536 <memset>
 800b19a:	e7f4      	b.n	800b186 <_calloc_r+0x12>

0800b19c <__ascii_mbtowc>:
 800b19c:	b082      	sub	sp, #8
 800b19e:	b901      	cbnz	r1, 800b1a2 <__ascii_mbtowc+0x6>
 800b1a0:	a901      	add	r1, sp, #4
 800b1a2:	b142      	cbz	r2, 800b1b6 <__ascii_mbtowc+0x1a>
 800b1a4:	b14b      	cbz	r3, 800b1ba <__ascii_mbtowc+0x1e>
 800b1a6:	7813      	ldrb	r3, [r2, #0]
 800b1a8:	600b      	str	r3, [r1, #0]
 800b1aa:	7812      	ldrb	r2, [r2, #0]
 800b1ac:	1e10      	subs	r0, r2, #0
 800b1ae:	bf18      	it	ne
 800b1b0:	2001      	movne	r0, #1
 800b1b2:	b002      	add	sp, #8
 800b1b4:	4770      	bx	lr
 800b1b6:	4610      	mov	r0, r2
 800b1b8:	e7fb      	b.n	800b1b2 <__ascii_mbtowc+0x16>
 800b1ba:	f06f 0001 	mvn.w	r0, #1
 800b1be:	e7f8      	b.n	800b1b2 <__ascii_mbtowc+0x16>

0800b1c0 <_realloc_r>:
 800b1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1c4:	4680      	mov	r8, r0
 800b1c6:	4614      	mov	r4, r2
 800b1c8:	460e      	mov	r6, r1
 800b1ca:	b921      	cbnz	r1, 800b1d6 <_realloc_r+0x16>
 800b1cc:	4611      	mov	r1, r2
 800b1ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b1d2:	f7ff b981 	b.w	800a4d8 <_malloc_r>
 800b1d6:	b92a      	cbnz	r2, 800b1e4 <_realloc_r+0x24>
 800b1d8:	f7ff f90e 	bl	800a3f8 <_free_r>
 800b1dc:	4625      	mov	r5, r4
 800b1de:	4628      	mov	r0, r5
 800b1e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1e4:	f000 f841 	bl	800b26a <_malloc_usable_size_r>
 800b1e8:	4284      	cmp	r4, r0
 800b1ea:	4607      	mov	r7, r0
 800b1ec:	d802      	bhi.n	800b1f4 <_realloc_r+0x34>
 800b1ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b1f2:	d812      	bhi.n	800b21a <_realloc_r+0x5a>
 800b1f4:	4621      	mov	r1, r4
 800b1f6:	4640      	mov	r0, r8
 800b1f8:	f7ff f96e 	bl	800a4d8 <_malloc_r>
 800b1fc:	4605      	mov	r5, r0
 800b1fe:	2800      	cmp	r0, #0
 800b200:	d0ed      	beq.n	800b1de <_realloc_r+0x1e>
 800b202:	42bc      	cmp	r4, r7
 800b204:	4622      	mov	r2, r4
 800b206:	4631      	mov	r1, r6
 800b208:	bf28      	it	cs
 800b20a:	463a      	movcs	r2, r7
 800b20c:	f7fe fa77 	bl	80096fe <memcpy>
 800b210:	4631      	mov	r1, r6
 800b212:	4640      	mov	r0, r8
 800b214:	f7ff f8f0 	bl	800a3f8 <_free_r>
 800b218:	e7e1      	b.n	800b1de <_realloc_r+0x1e>
 800b21a:	4635      	mov	r5, r6
 800b21c:	e7df      	b.n	800b1de <_realloc_r+0x1e>

0800b21e <__ascii_wctomb>:
 800b21e:	4603      	mov	r3, r0
 800b220:	4608      	mov	r0, r1
 800b222:	b141      	cbz	r1, 800b236 <__ascii_wctomb+0x18>
 800b224:	2aff      	cmp	r2, #255	; 0xff
 800b226:	d904      	bls.n	800b232 <__ascii_wctomb+0x14>
 800b228:	228a      	movs	r2, #138	; 0x8a
 800b22a:	f04f 30ff 	mov.w	r0, #4294967295
 800b22e:	601a      	str	r2, [r3, #0]
 800b230:	4770      	bx	lr
 800b232:	2001      	movs	r0, #1
 800b234:	700a      	strb	r2, [r1, #0]
 800b236:	4770      	bx	lr

0800b238 <fiprintf>:
 800b238:	b40e      	push	{r1, r2, r3}
 800b23a:	b503      	push	{r0, r1, lr}
 800b23c:	4601      	mov	r1, r0
 800b23e:	ab03      	add	r3, sp, #12
 800b240:	4805      	ldr	r0, [pc, #20]	; (800b258 <fiprintf+0x20>)
 800b242:	f853 2b04 	ldr.w	r2, [r3], #4
 800b246:	6800      	ldr	r0, [r0, #0]
 800b248:	9301      	str	r3, [sp, #4]
 800b24a:	f000 f83d 	bl	800b2c8 <_vfiprintf_r>
 800b24e:	b002      	add	sp, #8
 800b250:	f85d eb04 	ldr.w	lr, [sp], #4
 800b254:	b003      	add	sp, #12
 800b256:	4770      	bx	lr
 800b258:	20000068 	.word	0x20000068

0800b25c <abort>:
 800b25c:	2006      	movs	r0, #6
 800b25e:	b508      	push	{r3, lr}
 800b260:	f000 fa0a 	bl	800b678 <raise>
 800b264:	2001      	movs	r0, #1
 800b266:	f7f8 fea2 	bl	8003fae <_exit>

0800b26a <_malloc_usable_size_r>:
 800b26a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b26e:	1f18      	subs	r0, r3, #4
 800b270:	2b00      	cmp	r3, #0
 800b272:	bfbc      	itt	lt
 800b274:	580b      	ldrlt	r3, [r1, r0]
 800b276:	18c0      	addlt	r0, r0, r3
 800b278:	4770      	bx	lr

0800b27a <__sfputc_r>:
 800b27a:	6893      	ldr	r3, [r2, #8]
 800b27c:	b410      	push	{r4}
 800b27e:	3b01      	subs	r3, #1
 800b280:	2b00      	cmp	r3, #0
 800b282:	6093      	str	r3, [r2, #8]
 800b284:	da07      	bge.n	800b296 <__sfputc_r+0x1c>
 800b286:	6994      	ldr	r4, [r2, #24]
 800b288:	42a3      	cmp	r3, r4
 800b28a:	db01      	blt.n	800b290 <__sfputc_r+0x16>
 800b28c:	290a      	cmp	r1, #10
 800b28e:	d102      	bne.n	800b296 <__sfputc_r+0x1c>
 800b290:	bc10      	pop	{r4}
 800b292:	f000 b933 	b.w	800b4fc <__swbuf_r>
 800b296:	6813      	ldr	r3, [r2, #0]
 800b298:	1c58      	adds	r0, r3, #1
 800b29a:	6010      	str	r0, [r2, #0]
 800b29c:	7019      	strb	r1, [r3, #0]
 800b29e:	4608      	mov	r0, r1
 800b2a0:	bc10      	pop	{r4}
 800b2a2:	4770      	bx	lr

0800b2a4 <__sfputs_r>:
 800b2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a6:	4606      	mov	r6, r0
 800b2a8:	460f      	mov	r7, r1
 800b2aa:	4614      	mov	r4, r2
 800b2ac:	18d5      	adds	r5, r2, r3
 800b2ae:	42ac      	cmp	r4, r5
 800b2b0:	d101      	bne.n	800b2b6 <__sfputs_r+0x12>
 800b2b2:	2000      	movs	r0, #0
 800b2b4:	e007      	b.n	800b2c6 <__sfputs_r+0x22>
 800b2b6:	463a      	mov	r2, r7
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2be:	f7ff ffdc 	bl	800b27a <__sfputc_r>
 800b2c2:	1c43      	adds	r3, r0, #1
 800b2c4:	d1f3      	bne.n	800b2ae <__sfputs_r+0xa>
 800b2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b2c8 <_vfiprintf_r>:
 800b2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2cc:	460d      	mov	r5, r1
 800b2ce:	4614      	mov	r4, r2
 800b2d0:	4698      	mov	r8, r3
 800b2d2:	4606      	mov	r6, r0
 800b2d4:	b09d      	sub	sp, #116	; 0x74
 800b2d6:	b118      	cbz	r0, 800b2e0 <_vfiprintf_r+0x18>
 800b2d8:	6a03      	ldr	r3, [r0, #32]
 800b2da:	b90b      	cbnz	r3, 800b2e0 <_vfiprintf_r+0x18>
 800b2dc:	f7fe f892 	bl	8009404 <__sinit>
 800b2e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b2e2:	07d9      	lsls	r1, r3, #31
 800b2e4:	d405      	bmi.n	800b2f2 <_vfiprintf_r+0x2a>
 800b2e6:	89ab      	ldrh	r3, [r5, #12]
 800b2e8:	059a      	lsls	r2, r3, #22
 800b2ea:	d402      	bmi.n	800b2f2 <_vfiprintf_r+0x2a>
 800b2ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2ee:	f7fe f9f6 	bl	80096de <__retarget_lock_acquire_recursive>
 800b2f2:	89ab      	ldrh	r3, [r5, #12]
 800b2f4:	071b      	lsls	r3, r3, #28
 800b2f6:	d501      	bpl.n	800b2fc <_vfiprintf_r+0x34>
 800b2f8:	692b      	ldr	r3, [r5, #16]
 800b2fa:	b99b      	cbnz	r3, 800b324 <_vfiprintf_r+0x5c>
 800b2fc:	4629      	mov	r1, r5
 800b2fe:	4630      	mov	r0, r6
 800b300:	f000 f93a 	bl	800b578 <__swsetup_r>
 800b304:	b170      	cbz	r0, 800b324 <_vfiprintf_r+0x5c>
 800b306:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b308:	07dc      	lsls	r4, r3, #31
 800b30a:	d504      	bpl.n	800b316 <_vfiprintf_r+0x4e>
 800b30c:	f04f 30ff 	mov.w	r0, #4294967295
 800b310:	b01d      	add	sp, #116	; 0x74
 800b312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b316:	89ab      	ldrh	r3, [r5, #12]
 800b318:	0598      	lsls	r0, r3, #22
 800b31a:	d4f7      	bmi.n	800b30c <_vfiprintf_r+0x44>
 800b31c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b31e:	f7fe f9df 	bl	80096e0 <__retarget_lock_release_recursive>
 800b322:	e7f3      	b.n	800b30c <_vfiprintf_r+0x44>
 800b324:	2300      	movs	r3, #0
 800b326:	9309      	str	r3, [sp, #36]	; 0x24
 800b328:	2320      	movs	r3, #32
 800b32a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b32e:	2330      	movs	r3, #48	; 0x30
 800b330:	f04f 0901 	mov.w	r9, #1
 800b334:	f8cd 800c 	str.w	r8, [sp, #12]
 800b338:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800b4e8 <_vfiprintf_r+0x220>
 800b33c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b340:	4623      	mov	r3, r4
 800b342:	469a      	mov	sl, r3
 800b344:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b348:	b10a      	cbz	r2, 800b34e <_vfiprintf_r+0x86>
 800b34a:	2a25      	cmp	r2, #37	; 0x25
 800b34c:	d1f9      	bne.n	800b342 <_vfiprintf_r+0x7a>
 800b34e:	ebba 0b04 	subs.w	fp, sl, r4
 800b352:	d00b      	beq.n	800b36c <_vfiprintf_r+0xa4>
 800b354:	465b      	mov	r3, fp
 800b356:	4622      	mov	r2, r4
 800b358:	4629      	mov	r1, r5
 800b35a:	4630      	mov	r0, r6
 800b35c:	f7ff ffa2 	bl	800b2a4 <__sfputs_r>
 800b360:	3001      	adds	r0, #1
 800b362:	f000 80a9 	beq.w	800b4b8 <_vfiprintf_r+0x1f0>
 800b366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b368:	445a      	add	r2, fp
 800b36a:	9209      	str	r2, [sp, #36]	; 0x24
 800b36c:	f89a 3000 	ldrb.w	r3, [sl]
 800b370:	2b00      	cmp	r3, #0
 800b372:	f000 80a1 	beq.w	800b4b8 <_vfiprintf_r+0x1f0>
 800b376:	2300      	movs	r3, #0
 800b378:	f04f 32ff 	mov.w	r2, #4294967295
 800b37c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b380:	f10a 0a01 	add.w	sl, sl, #1
 800b384:	9304      	str	r3, [sp, #16]
 800b386:	9307      	str	r3, [sp, #28]
 800b388:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b38c:	931a      	str	r3, [sp, #104]	; 0x68
 800b38e:	4654      	mov	r4, sl
 800b390:	2205      	movs	r2, #5
 800b392:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b396:	4854      	ldr	r0, [pc, #336]	; (800b4e8 <_vfiprintf_r+0x220>)
 800b398:	f7fe f9a3 	bl	80096e2 <memchr>
 800b39c:	9a04      	ldr	r2, [sp, #16]
 800b39e:	b9d8      	cbnz	r0, 800b3d8 <_vfiprintf_r+0x110>
 800b3a0:	06d1      	lsls	r1, r2, #27
 800b3a2:	bf44      	itt	mi
 800b3a4:	2320      	movmi	r3, #32
 800b3a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3aa:	0713      	lsls	r3, r2, #28
 800b3ac:	bf44      	itt	mi
 800b3ae:	232b      	movmi	r3, #43	; 0x2b
 800b3b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b3b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b3b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b3ba:	d015      	beq.n	800b3e8 <_vfiprintf_r+0x120>
 800b3bc:	4654      	mov	r4, sl
 800b3be:	2000      	movs	r0, #0
 800b3c0:	f04f 0c0a 	mov.w	ip, #10
 800b3c4:	9a07      	ldr	r2, [sp, #28]
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b3cc:	3b30      	subs	r3, #48	; 0x30
 800b3ce:	2b09      	cmp	r3, #9
 800b3d0:	d94d      	bls.n	800b46e <_vfiprintf_r+0x1a6>
 800b3d2:	b1b0      	cbz	r0, 800b402 <_vfiprintf_r+0x13a>
 800b3d4:	9207      	str	r2, [sp, #28]
 800b3d6:	e014      	b.n	800b402 <_vfiprintf_r+0x13a>
 800b3d8:	eba0 0308 	sub.w	r3, r0, r8
 800b3dc:	fa09 f303 	lsl.w	r3, r9, r3
 800b3e0:	4313      	orrs	r3, r2
 800b3e2:	46a2      	mov	sl, r4
 800b3e4:	9304      	str	r3, [sp, #16]
 800b3e6:	e7d2      	b.n	800b38e <_vfiprintf_r+0xc6>
 800b3e8:	9b03      	ldr	r3, [sp, #12]
 800b3ea:	1d19      	adds	r1, r3, #4
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	9103      	str	r1, [sp, #12]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	bfbb      	ittet	lt
 800b3f4:	425b      	neglt	r3, r3
 800b3f6:	f042 0202 	orrlt.w	r2, r2, #2
 800b3fa:	9307      	strge	r3, [sp, #28]
 800b3fc:	9307      	strlt	r3, [sp, #28]
 800b3fe:	bfb8      	it	lt
 800b400:	9204      	strlt	r2, [sp, #16]
 800b402:	7823      	ldrb	r3, [r4, #0]
 800b404:	2b2e      	cmp	r3, #46	; 0x2e
 800b406:	d10c      	bne.n	800b422 <_vfiprintf_r+0x15a>
 800b408:	7863      	ldrb	r3, [r4, #1]
 800b40a:	2b2a      	cmp	r3, #42	; 0x2a
 800b40c:	d134      	bne.n	800b478 <_vfiprintf_r+0x1b0>
 800b40e:	9b03      	ldr	r3, [sp, #12]
 800b410:	3402      	adds	r4, #2
 800b412:	1d1a      	adds	r2, r3, #4
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	9203      	str	r2, [sp, #12]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	bfb8      	it	lt
 800b41c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b420:	9305      	str	r3, [sp, #20]
 800b422:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b4ec <_vfiprintf_r+0x224>
 800b426:	2203      	movs	r2, #3
 800b428:	4650      	mov	r0, sl
 800b42a:	7821      	ldrb	r1, [r4, #0]
 800b42c:	f7fe f959 	bl	80096e2 <memchr>
 800b430:	b138      	cbz	r0, 800b442 <_vfiprintf_r+0x17a>
 800b432:	2240      	movs	r2, #64	; 0x40
 800b434:	9b04      	ldr	r3, [sp, #16]
 800b436:	eba0 000a 	sub.w	r0, r0, sl
 800b43a:	4082      	lsls	r2, r0
 800b43c:	4313      	orrs	r3, r2
 800b43e:	3401      	adds	r4, #1
 800b440:	9304      	str	r3, [sp, #16]
 800b442:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b446:	2206      	movs	r2, #6
 800b448:	4829      	ldr	r0, [pc, #164]	; (800b4f0 <_vfiprintf_r+0x228>)
 800b44a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b44e:	f7fe f948 	bl	80096e2 <memchr>
 800b452:	2800      	cmp	r0, #0
 800b454:	d03f      	beq.n	800b4d6 <_vfiprintf_r+0x20e>
 800b456:	4b27      	ldr	r3, [pc, #156]	; (800b4f4 <_vfiprintf_r+0x22c>)
 800b458:	bb1b      	cbnz	r3, 800b4a2 <_vfiprintf_r+0x1da>
 800b45a:	9b03      	ldr	r3, [sp, #12]
 800b45c:	3307      	adds	r3, #7
 800b45e:	f023 0307 	bic.w	r3, r3, #7
 800b462:	3308      	adds	r3, #8
 800b464:	9303      	str	r3, [sp, #12]
 800b466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b468:	443b      	add	r3, r7
 800b46a:	9309      	str	r3, [sp, #36]	; 0x24
 800b46c:	e768      	b.n	800b340 <_vfiprintf_r+0x78>
 800b46e:	460c      	mov	r4, r1
 800b470:	2001      	movs	r0, #1
 800b472:	fb0c 3202 	mla	r2, ip, r2, r3
 800b476:	e7a6      	b.n	800b3c6 <_vfiprintf_r+0xfe>
 800b478:	2300      	movs	r3, #0
 800b47a:	f04f 0c0a 	mov.w	ip, #10
 800b47e:	4619      	mov	r1, r3
 800b480:	3401      	adds	r4, #1
 800b482:	9305      	str	r3, [sp, #20]
 800b484:	4620      	mov	r0, r4
 800b486:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b48a:	3a30      	subs	r2, #48	; 0x30
 800b48c:	2a09      	cmp	r2, #9
 800b48e:	d903      	bls.n	800b498 <_vfiprintf_r+0x1d0>
 800b490:	2b00      	cmp	r3, #0
 800b492:	d0c6      	beq.n	800b422 <_vfiprintf_r+0x15a>
 800b494:	9105      	str	r1, [sp, #20]
 800b496:	e7c4      	b.n	800b422 <_vfiprintf_r+0x15a>
 800b498:	4604      	mov	r4, r0
 800b49a:	2301      	movs	r3, #1
 800b49c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4a0:	e7f0      	b.n	800b484 <_vfiprintf_r+0x1bc>
 800b4a2:	ab03      	add	r3, sp, #12
 800b4a4:	9300      	str	r3, [sp, #0]
 800b4a6:	462a      	mov	r2, r5
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	4b13      	ldr	r3, [pc, #76]	; (800b4f8 <_vfiprintf_r+0x230>)
 800b4ac:	a904      	add	r1, sp, #16
 800b4ae:	f7fd fb5b 	bl	8008b68 <_printf_float>
 800b4b2:	4607      	mov	r7, r0
 800b4b4:	1c78      	adds	r0, r7, #1
 800b4b6:	d1d6      	bne.n	800b466 <_vfiprintf_r+0x19e>
 800b4b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4ba:	07d9      	lsls	r1, r3, #31
 800b4bc:	d405      	bmi.n	800b4ca <_vfiprintf_r+0x202>
 800b4be:	89ab      	ldrh	r3, [r5, #12]
 800b4c0:	059a      	lsls	r2, r3, #22
 800b4c2:	d402      	bmi.n	800b4ca <_vfiprintf_r+0x202>
 800b4c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4c6:	f7fe f90b 	bl	80096e0 <__retarget_lock_release_recursive>
 800b4ca:	89ab      	ldrh	r3, [r5, #12]
 800b4cc:	065b      	lsls	r3, r3, #25
 800b4ce:	f53f af1d 	bmi.w	800b30c <_vfiprintf_r+0x44>
 800b4d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b4d4:	e71c      	b.n	800b310 <_vfiprintf_r+0x48>
 800b4d6:	ab03      	add	r3, sp, #12
 800b4d8:	9300      	str	r3, [sp, #0]
 800b4da:	462a      	mov	r2, r5
 800b4dc:	4630      	mov	r0, r6
 800b4de:	4b06      	ldr	r3, [pc, #24]	; (800b4f8 <_vfiprintf_r+0x230>)
 800b4e0:	a904      	add	r1, sp, #16
 800b4e2:	f7fd fde1 	bl	80090a8 <_printf_i>
 800b4e6:	e7e4      	b.n	800b4b2 <_vfiprintf_r+0x1ea>
 800b4e8:	0800bcdc 	.word	0x0800bcdc
 800b4ec:	0800bce2 	.word	0x0800bce2
 800b4f0:	0800bce6 	.word	0x0800bce6
 800b4f4:	08008b69 	.word	0x08008b69
 800b4f8:	0800b2a5 	.word	0x0800b2a5

0800b4fc <__swbuf_r>:
 800b4fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4fe:	460e      	mov	r6, r1
 800b500:	4614      	mov	r4, r2
 800b502:	4605      	mov	r5, r0
 800b504:	b118      	cbz	r0, 800b50e <__swbuf_r+0x12>
 800b506:	6a03      	ldr	r3, [r0, #32]
 800b508:	b90b      	cbnz	r3, 800b50e <__swbuf_r+0x12>
 800b50a:	f7fd ff7b 	bl	8009404 <__sinit>
 800b50e:	69a3      	ldr	r3, [r4, #24]
 800b510:	60a3      	str	r3, [r4, #8]
 800b512:	89a3      	ldrh	r3, [r4, #12]
 800b514:	071a      	lsls	r2, r3, #28
 800b516:	d525      	bpl.n	800b564 <__swbuf_r+0x68>
 800b518:	6923      	ldr	r3, [r4, #16]
 800b51a:	b31b      	cbz	r3, 800b564 <__swbuf_r+0x68>
 800b51c:	6823      	ldr	r3, [r4, #0]
 800b51e:	6922      	ldr	r2, [r4, #16]
 800b520:	b2f6      	uxtb	r6, r6
 800b522:	1a98      	subs	r0, r3, r2
 800b524:	6963      	ldr	r3, [r4, #20]
 800b526:	4637      	mov	r7, r6
 800b528:	4283      	cmp	r3, r0
 800b52a:	dc04      	bgt.n	800b536 <__swbuf_r+0x3a>
 800b52c:	4621      	mov	r1, r4
 800b52e:	4628      	mov	r0, r5
 800b530:	f7ff fdb0 	bl	800b094 <_fflush_r>
 800b534:	b9e0      	cbnz	r0, 800b570 <__swbuf_r+0x74>
 800b536:	68a3      	ldr	r3, [r4, #8]
 800b538:	3b01      	subs	r3, #1
 800b53a:	60a3      	str	r3, [r4, #8]
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	1c5a      	adds	r2, r3, #1
 800b540:	6022      	str	r2, [r4, #0]
 800b542:	701e      	strb	r6, [r3, #0]
 800b544:	6962      	ldr	r2, [r4, #20]
 800b546:	1c43      	adds	r3, r0, #1
 800b548:	429a      	cmp	r2, r3
 800b54a:	d004      	beq.n	800b556 <__swbuf_r+0x5a>
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	07db      	lsls	r3, r3, #31
 800b550:	d506      	bpl.n	800b560 <__swbuf_r+0x64>
 800b552:	2e0a      	cmp	r6, #10
 800b554:	d104      	bne.n	800b560 <__swbuf_r+0x64>
 800b556:	4621      	mov	r1, r4
 800b558:	4628      	mov	r0, r5
 800b55a:	f7ff fd9b 	bl	800b094 <_fflush_r>
 800b55e:	b938      	cbnz	r0, 800b570 <__swbuf_r+0x74>
 800b560:	4638      	mov	r0, r7
 800b562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b564:	4621      	mov	r1, r4
 800b566:	4628      	mov	r0, r5
 800b568:	f000 f806 	bl	800b578 <__swsetup_r>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d0d5      	beq.n	800b51c <__swbuf_r+0x20>
 800b570:	f04f 37ff 	mov.w	r7, #4294967295
 800b574:	e7f4      	b.n	800b560 <__swbuf_r+0x64>
	...

0800b578 <__swsetup_r>:
 800b578:	b538      	push	{r3, r4, r5, lr}
 800b57a:	4b2a      	ldr	r3, [pc, #168]	; (800b624 <__swsetup_r+0xac>)
 800b57c:	4605      	mov	r5, r0
 800b57e:	6818      	ldr	r0, [r3, #0]
 800b580:	460c      	mov	r4, r1
 800b582:	b118      	cbz	r0, 800b58c <__swsetup_r+0x14>
 800b584:	6a03      	ldr	r3, [r0, #32]
 800b586:	b90b      	cbnz	r3, 800b58c <__swsetup_r+0x14>
 800b588:	f7fd ff3c 	bl	8009404 <__sinit>
 800b58c:	89a3      	ldrh	r3, [r4, #12]
 800b58e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b592:	0718      	lsls	r0, r3, #28
 800b594:	d422      	bmi.n	800b5dc <__swsetup_r+0x64>
 800b596:	06d9      	lsls	r1, r3, #27
 800b598:	d407      	bmi.n	800b5aa <__swsetup_r+0x32>
 800b59a:	2309      	movs	r3, #9
 800b59c:	602b      	str	r3, [r5, #0]
 800b59e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b5a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a6:	81a3      	strh	r3, [r4, #12]
 800b5a8:	e034      	b.n	800b614 <__swsetup_r+0x9c>
 800b5aa:	0758      	lsls	r0, r3, #29
 800b5ac:	d512      	bpl.n	800b5d4 <__swsetup_r+0x5c>
 800b5ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5b0:	b141      	cbz	r1, 800b5c4 <__swsetup_r+0x4c>
 800b5b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b5b6:	4299      	cmp	r1, r3
 800b5b8:	d002      	beq.n	800b5c0 <__swsetup_r+0x48>
 800b5ba:	4628      	mov	r0, r5
 800b5bc:	f7fe ff1c 	bl	800a3f8 <_free_r>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	6363      	str	r3, [r4, #52]	; 0x34
 800b5c4:	89a3      	ldrh	r3, [r4, #12]
 800b5c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5ca:	81a3      	strh	r3, [r4, #12]
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	6063      	str	r3, [r4, #4]
 800b5d0:	6923      	ldr	r3, [r4, #16]
 800b5d2:	6023      	str	r3, [r4, #0]
 800b5d4:	89a3      	ldrh	r3, [r4, #12]
 800b5d6:	f043 0308 	orr.w	r3, r3, #8
 800b5da:	81a3      	strh	r3, [r4, #12]
 800b5dc:	6923      	ldr	r3, [r4, #16]
 800b5de:	b94b      	cbnz	r3, 800b5f4 <__swsetup_r+0x7c>
 800b5e0:	89a3      	ldrh	r3, [r4, #12]
 800b5e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5ea:	d003      	beq.n	800b5f4 <__swsetup_r+0x7c>
 800b5ec:	4621      	mov	r1, r4
 800b5ee:	4628      	mov	r0, r5
 800b5f0:	f000 f883 	bl	800b6fa <__smakebuf_r>
 800b5f4:	89a0      	ldrh	r0, [r4, #12]
 800b5f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5fa:	f010 0301 	ands.w	r3, r0, #1
 800b5fe:	d00a      	beq.n	800b616 <__swsetup_r+0x9e>
 800b600:	2300      	movs	r3, #0
 800b602:	60a3      	str	r3, [r4, #8]
 800b604:	6963      	ldr	r3, [r4, #20]
 800b606:	425b      	negs	r3, r3
 800b608:	61a3      	str	r3, [r4, #24]
 800b60a:	6923      	ldr	r3, [r4, #16]
 800b60c:	b943      	cbnz	r3, 800b620 <__swsetup_r+0xa8>
 800b60e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b612:	d1c4      	bne.n	800b59e <__swsetup_r+0x26>
 800b614:	bd38      	pop	{r3, r4, r5, pc}
 800b616:	0781      	lsls	r1, r0, #30
 800b618:	bf58      	it	pl
 800b61a:	6963      	ldrpl	r3, [r4, #20]
 800b61c:	60a3      	str	r3, [r4, #8]
 800b61e:	e7f4      	b.n	800b60a <__swsetup_r+0x92>
 800b620:	2000      	movs	r0, #0
 800b622:	e7f7      	b.n	800b614 <__swsetup_r+0x9c>
 800b624:	20000068 	.word	0x20000068

0800b628 <_raise_r>:
 800b628:	291f      	cmp	r1, #31
 800b62a:	b538      	push	{r3, r4, r5, lr}
 800b62c:	4604      	mov	r4, r0
 800b62e:	460d      	mov	r5, r1
 800b630:	d904      	bls.n	800b63c <_raise_r+0x14>
 800b632:	2316      	movs	r3, #22
 800b634:	6003      	str	r3, [r0, #0]
 800b636:	f04f 30ff 	mov.w	r0, #4294967295
 800b63a:	bd38      	pop	{r3, r4, r5, pc}
 800b63c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800b63e:	b112      	cbz	r2, 800b646 <_raise_r+0x1e>
 800b640:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b644:	b94b      	cbnz	r3, 800b65a <_raise_r+0x32>
 800b646:	4620      	mov	r0, r4
 800b648:	f000 f830 	bl	800b6ac <_getpid_r>
 800b64c:	462a      	mov	r2, r5
 800b64e:	4601      	mov	r1, r0
 800b650:	4620      	mov	r0, r4
 800b652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b656:	f000 b817 	b.w	800b688 <_kill_r>
 800b65a:	2b01      	cmp	r3, #1
 800b65c:	d00a      	beq.n	800b674 <_raise_r+0x4c>
 800b65e:	1c59      	adds	r1, r3, #1
 800b660:	d103      	bne.n	800b66a <_raise_r+0x42>
 800b662:	2316      	movs	r3, #22
 800b664:	6003      	str	r3, [r0, #0]
 800b666:	2001      	movs	r0, #1
 800b668:	e7e7      	b.n	800b63a <_raise_r+0x12>
 800b66a:	2400      	movs	r4, #0
 800b66c:	4628      	mov	r0, r5
 800b66e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b672:	4798      	blx	r3
 800b674:	2000      	movs	r0, #0
 800b676:	e7e0      	b.n	800b63a <_raise_r+0x12>

0800b678 <raise>:
 800b678:	4b02      	ldr	r3, [pc, #8]	; (800b684 <raise+0xc>)
 800b67a:	4601      	mov	r1, r0
 800b67c:	6818      	ldr	r0, [r3, #0]
 800b67e:	f7ff bfd3 	b.w	800b628 <_raise_r>
 800b682:	bf00      	nop
 800b684:	20000068 	.word	0x20000068

0800b688 <_kill_r>:
 800b688:	b538      	push	{r3, r4, r5, lr}
 800b68a:	2300      	movs	r3, #0
 800b68c:	4d06      	ldr	r5, [pc, #24]	; (800b6a8 <_kill_r+0x20>)
 800b68e:	4604      	mov	r4, r0
 800b690:	4608      	mov	r0, r1
 800b692:	4611      	mov	r1, r2
 800b694:	602b      	str	r3, [r5, #0]
 800b696:	f7f8 fc7a 	bl	8003f8e <_kill>
 800b69a:	1c43      	adds	r3, r0, #1
 800b69c:	d102      	bne.n	800b6a4 <_kill_r+0x1c>
 800b69e:	682b      	ldr	r3, [r5, #0]
 800b6a0:	b103      	cbz	r3, 800b6a4 <_kill_r+0x1c>
 800b6a2:	6023      	str	r3, [r4, #0]
 800b6a4:	bd38      	pop	{r3, r4, r5, pc}
 800b6a6:	bf00      	nop
 800b6a8:	20001688 	.word	0x20001688

0800b6ac <_getpid_r>:
 800b6ac:	f7f8 bc68 	b.w	8003f80 <_getpid>

0800b6b0 <__swhatbuf_r>:
 800b6b0:	b570      	push	{r4, r5, r6, lr}
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b6b8:	4615      	mov	r5, r2
 800b6ba:	2900      	cmp	r1, #0
 800b6bc:	461e      	mov	r6, r3
 800b6be:	b096      	sub	sp, #88	; 0x58
 800b6c0:	da0c      	bge.n	800b6dc <__swhatbuf_r+0x2c>
 800b6c2:	89a3      	ldrh	r3, [r4, #12]
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b6ca:	bf0c      	ite	eq
 800b6cc:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b6d0:	2340      	movne	r3, #64	; 0x40
 800b6d2:	2000      	movs	r0, #0
 800b6d4:	6031      	str	r1, [r6, #0]
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	b016      	add	sp, #88	; 0x58
 800b6da:	bd70      	pop	{r4, r5, r6, pc}
 800b6dc:	466a      	mov	r2, sp
 800b6de:	f000 f849 	bl	800b774 <_fstat_r>
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	dbed      	blt.n	800b6c2 <__swhatbuf_r+0x12>
 800b6e6:	9901      	ldr	r1, [sp, #4]
 800b6e8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b6ec:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b6f0:	4259      	negs	r1, r3
 800b6f2:	4159      	adcs	r1, r3
 800b6f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b6f8:	e7eb      	b.n	800b6d2 <__swhatbuf_r+0x22>

0800b6fa <__smakebuf_r>:
 800b6fa:	898b      	ldrh	r3, [r1, #12]
 800b6fc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b6fe:	079d      	lsls	r5, r3, #30
 800b700:	4606      	mov	r6, r0
 800b702:	460c      	mov	r4, r1
 800b704:	d507      	bpl.n	800b716 <__smakebuf_r+0x1c>
 800b706:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b70a:	6023      	str	r3, [r4, #0]
 800b70c:	6123      	str	r3, [r4, #16]
 800b70e:	2301      	movs	r3, #1
 800b710:	6163      	str	r3, [r4, #20]
 800b712:	b002      	add	sp, #8
 800b714:	bd70      	pop	{r4, r5, r6, pc}
 800b716:	466a      	mov	r2, sp
 800b718:	ab01      	add	r3, sp, #4
 800b71a:	f7ff ffc9 	bl	800b6b0 <__swhatbuf_r>
 800b71e:	9900      	ldr	r1, [sp, #0]
 800b720:	4605      	mov	r5, r0
 800b722:	4630      	mov	r0, r6
 800b724:	f7fe fed8 	bl	800a4d8 <_malloc_r>
 800b728:	b948      	cbnz	r0, 800b73e <__smakebuf_r+0x44>
 800b72a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b72e:	059a      	lsls	r2, r3, #22
 800b730:	d4ef      	bmi.n	800b712 <__smakebuf_r+0x18>
 800b732:	f023 0303 	bic.w	r3, r3, #3
 800b736:	f043 0302 	orr.w	r3, r3, #2
 800b73a:	81a3      	strh	r3, [r4, #12]
 800b73c:	e7e3      	b.n	800b706 <__smakebuf_r+0xc>
 800b73e:	89a3      	ldrh	r3, [r4, #12]
 800b740:	6020      	str	r0, [r4, #0]
 800b742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b746:	81a3      	strh	r3, [r4, #12]
 800b748:	9b00      	ldr	r3, [sp, #0]
 800b74a:	6120      	str	r0, [r4, #16]
 800b74c:	6163      	str	r3, [r4, #20]
 800b74e:	9b01      	ldr	r3, [sp, #4]
 800b750:	b15b      	cbz	r3, 800b76a <__smakebuf_r+0x70>
 800b752:	4630      	mov	r0, r6
 800b754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b758:	f000 f81e 	bl	800b798 <_isatty_r>
 800b75c:	b128      	cbz	r0, 800b76a <__smakebuf_r+0x70>
 800b75e:	89a3      	ldrh	r3, [r4, #12]
 800b760:	f023 0303 	bic.w	r3, r3, #3
 800b764:	f043 0301 	orr.w	r3, r3, #1
 800b768:	81a3      	strh	r3, [r4, #12]
 800b76a:	89a3      	ldrh	r3, [r4, #12]
 800b76c:	431d      	orrs	r5, r3
 800b76e:	81a5      	strh	r5, [r4, #12]
 800b770:	e7cf      	b.n	800b712 <__smakebuf_r+0x18>
	...

0800b774 <_fstat_r>:
 800b774:	b538      	push	{r3, r4, r5, lr}
 800b776:	2300      	movs	r3, #0
 800b778:	4d06      	ldr	r5, [pc, #24]	; (800b794 <_fstat_r+0x20>)
 800b77a:	4604      	mov	r4, r0
 800b77c:	4608      	mov	r0, r1
 800b77e:	4611      	mov	r1, r2
 800b780:	602b      	str	r3, [r5, #0]
 800b782:	f7f8 fc62 	bl	800404a <_fstat>
 800b786:	1c43      	adds	r3, r0, #1
 800b788:	d102      	bne.n	800b790 <_fstat_r+0x1c>
 800b78a:	682b      	ldr	r3, [r5, #0]
 800b78c:	b103      	cbz	r3, 800b790 <_fstat_r+0x1c>
 800b78e:	6023      	str	r3, [r4, #0]
 800b790:	bd38      	pop	{r3, r4, r5, pc}
 800b792:	bf00      	nop
 800b794:	20001688 	.word	0x20001688

0800b798 <_isatty_r>:
 800b798:	b538      	push	{r3, r4, r5, lr}
 800b79a:	2300      	movs	r3, #0
 800b79c:	4d05      	ldr	r5, [pc, #20]	; (800b7b4 <_isatty_r+0x1c>)
 800b79e:	4604      	mov	r4, r0
 800b7a0:	4608      	mov	r0, r1
 800b7a2:	602b      	str	r3, [r5, #0]
 800b7a4:	f7f8 fc60 	bl	8004068 <_isatty>
 800b7a8:	1c43      	adds	r3, r0, #1
 800b7aa:	d102      	bne.n	800b7b2 <_isatty_r+0x1a>
 800b7ac:	682b      	ldr	r3, [r5, #0]
 800b7ae:	b103      	cbz	r3, 800b7b2 <_isatty_r+0x1a>
 800b7b0:	6023      	str	r3, [r4, #0]
 800b7b2:	bd38      	pop	{r3, r4, r5, pc}
 800b7b4:	20001688 	.word	0x20001688

0800b7b8 <_init>:
 800b7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ba:	bf00      	nop
 800b7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7be:	bc08      	pop	{r3}
 800b7c0:	469e      	mov	lr, r3
 800b7c2:	4770      	bx	lr

0800b7c4 <_fini>:
 800b7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c6:	bf00      	nop
 800b7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ca:	bc08      	pop	{r3}
 800b7cc:	469e      	mov	lr, r3
 800b7ce:	4770      	bx	lr
