
2moto1enco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a760  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800a870  0800a870  0001a870  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac8c  0800ac8c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac8c  0800ac8c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac8c  0800ac8c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ac8c  0800ac8c  0001ac8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ac94  0800ac94  0001ac94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800ac98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b8  200001d8  0800ae70  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001690  0800ae70  00021690  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002272b  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000445e  00000000  00000000  0004296f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f0  00000000  00000000  00046dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000127a  00000000  00000000  000485c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e4e7  00000000  00000000  0004983a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000195ea  00000000  00000000  00067d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d7c8  00000000  00000000  0008130b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000752c  00000000  00000000  0011ead4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00126000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a858 	.word	0x0800a858

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800a858 	.word	0x0800a858

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <setCSLine>:
#include "AMT22.h"


void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8001120:	787a      	ldrb	r2, [r7, #1]
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	4619      	mov	r1, r3
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f002 fe36 	bl	8003d98 <HAL_GPIO_WritePin>

}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <spiWriteRead>:


uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af02      	add	r7, sp, #8
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	461a      	mov	r2, r3
 8001140:	460b      	mov	r3, r1
 8001142:	72fb      	strb	r3, [r7, #11]
 8001144:	4613      	mov	r3, r2
 8001146:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 8001148:	893b      	ldrh	r3, [r7, #8]
 800114a:	2200      	movs	r2, #0
 800114c:	4619      	mov	r1, r3
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffde 	bl	8001110 <setCSLine>
	delay(docDelay);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f901 	bl	800135c <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 800115a:	f107 0217 	add.w	r2, r7, #23
 800115e:	f107 010b 	add.w	r1, r7, #11
 8001162:	230a      	movs	r3, #10
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f003 fb31 	bl	80047d0 <HAL_SPI_TransmitReceive>
	delay(docDelay);
 800116e:	2003      	movs	r0, #3
 8001170:	f000 f8f4 	bl	800135c <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 8001174:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001178:	893b      	ldrh	r3, [r7, #8]
 800117a:	4619      	mov	r1, r3
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffc7 	bl	8001110 <setCSLine>
	return data;
 8001182:	7dfb      	ldrb	r3, [r7, #23]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af02      	add	r7, sp, #8
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	460b      	mov	r3, r1
 800119c:	80fb      	strh	r3, [r7, #6]
 800119e:	4613      	mov	r3, r2
 80011a0:	717b      	strb	r3, [r7, #5]

	DWT_Delay_Init();
 80011a2:	f000 f8ed 	bl	8001380 <DWT_Delay_Init>

	uint16_t currentPosition = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	2200      	movs	r2, #0
 80011ae:	9200      	str	r2, [sp, #0]
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	2100      	movs	r1, #0
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f7ff ffbd 	bl	8001134 <spiWriteRead>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b29b      	uxth	r3, r3
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	84fb      	strh	r3, [r7, #38]	; 0x26
	delay(docDelay);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 f8ca 	bl	800135c <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1);
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	2201      	movs	r2, #1
 80011cc:	9200      	str	r2, [sp, #0]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	2100      	movs	r1, #0
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff ffae 	bl	8001134 <spiWriteRead>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011de:	4313      	orrs	r3, r2
 80011e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 0; i < 16; i++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
 80011e6:	e010      	b.n	800120a <getPositionSPI+0x7e>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 80011e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	fa42 f303 	asr.w	r3, r2, r3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	b2d9      	uxtb	r1, r3
 80011f8:	f107 0210 	add.w	r2, r7, #16
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	4413      	add	r3, r2
 8001200:	460a      	mov	r2, r1
 8001202:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	3301      	adds	r3, #1
 8001208:	623b      	str	r3, [r7, #32]
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	ddeb      	ble.n	80011e8 <getPositionSPI+0x5c>
	if ((binaryArray[15]
 8001210:	7ffb      	ldrb	r3, [r7, #31]
 8001212:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001214:	7f7a      	ldrb	r2, [r7, #29]
 8001216:	7efb      	ldrb	r3, [r7, #27]
 8001218:	4053      	eors	r3, r2
 800121a:	b2da      	uxtb	r2, r3
 800121c:	7e7b      	ldrb	r3, [r7, #25]
 800121e:	4053      	eors	r3, r2
 8001220:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001222:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001224:	4053      	eors	r3, r2
 8001226:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001228:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 800122a:	4053      	eors	r3, r2
 800122c:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 800122e:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001230:	4053      	eors	r3, r2
 8001232:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 8001234:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001236:	429a      	cmp	r2, r3
 8001238:	bf0c      	ite	eq
 800123a:	2301      	moveq	r3, #1
 800123c:	2300      	movne	r3, #0
 800123e:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 8001240:	4299      	cmp	r1, r3
 8001242:	d11e      	bne.n	8001282 <getPositionSPI+0xf6>
			&& (binaryArray[14]
 8001244:	7fbb      	ldrb	r3, [r7, #30]
 8001246:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8001248:	7f3a      	ldrb	r2, [r7, #28]
 800124a:	7ebb      	ldrb	r3, [r7, #26]
 800124c:	4053      	eors	r3, r2
 800124e:	b2da      	uxtb	r2, r3
 8001250:	7e3b      	ldrb	r3, [r7, #24]
 8001252:	4053      	eors	r3, r2
 8001254:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8001256:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8001258:	4053      	eors	r3, r2
 800125a:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 800125c:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 800125e:	4053      	eors	r3, r2
 8001260:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8001262:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8001264:	4053      	eors	r3, r2
 8001266:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 8001268:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 800126a:	429a      	cmp	r2, r3
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 8001274:	4299      	cmp	r1, r3
 8001276:	d104      	bne.n	8001282 <getPositionSPI+0xf6>
		currentPosition &= 0x3FFF;
 8001278:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800127a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800127e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001280:	e002      	b.n	8001288 <getPositionSPI+0xfc>
	} else {
		currentPosition = 0xFFFF; //bad position
 8001282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001286:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 8001288:	797b      	ldrb	r3, [r7, #5]
 800128a:	2b0c      	cmp	r3, #12
 800128c:	d107      	bne.n	800129e <getPositionSPI+0x112>
 800128e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001294:	4293      	cmp	r3, r2
 8001296:	d002      	beq.n	800129e <getPositionSPI+0x112>
		currentPosition = currentPosition >> 2;
 8001298:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	84fb      	strh	r3, [r7, #38]	; 0x26
	return currentPosition;
 800129e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <calculateAngle>:
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1);
	delay( docDelayLong + docDelayLong);

}

float calculateAngle(uint16_t encoderValue, uint8_t bitDepth) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	460a      	mov	r2, r1
 80012b2:	80fb      	strh	r3, [r7, #6]
 80012b4:	4613      	mov	r3, r2
 80012b6:	717b      	strb	r3, [r7, #5]
	float angle = 0.0;
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
	if (bitDepth == 12) {
 80012be:	797b      	ldrb	r3, [r7, #5]
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	d11e      	bne.n	8001302 <calculateAngle+0x5a>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_12_BIT;
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fce4 	bl	8000c94 <__aeabi_ui2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f8aa 	bl	8000428 <__aeabi_f2d>
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <calculateAngle+0xa8>)
 80012da:	f7ff f8fd 	bl	80004d8 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <calculateAngle+0xac>)
 80012ec:	f7ff fa1e 	bl	800072c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fbc6 	bl	8000a88 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e020      	b.n	8001344 <calculateAngle+0x9c>
	} else if (bitDepth == 14) {
 8001302:	797b      	ldrb	r3, [r7, #5]
 8001304:	2b0e      	cmp	r3, #14
 8001306:	d11d      	bne.n	8001344 <calculateAngle+0x9c>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_14_BIT;
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fcc2 	bl	8000c94 <__aeabi_ui2f>
 8001310:	4603      	mov	r3, r0
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f888 	bl	8000428 <__aeabi_f2d>
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <calculateAngle+0xa8>)
 800131e:	f7ff f8db 	bl	80004d8 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <calculateAngle+0xb0>)
 8001330:	f7ff f9fc 	bl	800072c <__aeabi_ddiv>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fba4 	bl	8000a88 <__aeabi_d2f>
 8001340:	4603      	mov	r3, r0
 8001342:	60fb      	str	r3, [r7, #12]
	}

	// до 0.2 градусів за документацією
	//angle = roundf(angle * 100.0) / 100.0;
	return angle;
 8001344:	68fb      	ldr	r3, [r7, #12]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40768000 	.word	0x40768000
 8001354:	40b00000 	.word	0x40b00000
 8001358:	40d00000 	.word	0x40d00000

0800135c <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1);
	delay(docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(uint32_t delayTime) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

	DWT_Delay_us(delayTime);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f83b 	bl	80013e0 <DWT_Delay_us>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <startDWT>:

int startDWT(){
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0

	 DWT_Delay_Init();
 8001376:	f000 f803 	bl	8001380 <DWT_Delay_Init>

}
 800137a:	bf00      	nop
 800137c:	4618      	mov	r0, r3
 800137e:	bd80      	pop	{r7, pc}

08001380 <DWT_Delay_Init>:
 */

#include "DWT_Delay.h"

uint32_t DWT_Delay_Init()
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <DWT_Delay_Init+0x58>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <DWT_Delay_Init+0x58>)
 800138a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800138e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <DWT_Delay_Init+0x58>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <DWT_Delay_Init+0x58>)
 8001396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800139a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <DWT_Delay_Init+0x5c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80013ba:	bf00      	nop
    __ASM volatile ("NOP");
 80013bc:	bf00      	nop
    __ASM volatile ("NOP");
 80013be:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80013c8:	2300      	movs	r3, #0
 80013ca:	e000      	b.n	80013ce <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80013cc:	2301      	movs	r3, #1
    }
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000edf0 	.word	0xe000edf0
 80013dc:	e0001000 	.word	0xe0001000

080013e0 <DWT_Delay_us>:

// This Function Provides Delay In Microseconds Using DWT
void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <DWT_Delay_us+0x48>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80013ee:	f003 f8d1 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a0d      	ldr	r2, [pc, #52]	; (800142c <DWT_Delay_us+0x4c>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	0c9b      	lsrs	r3, r3, #18
 80013fc:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8001408:	bf00      	nop
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <DWT_Delay_us+0x48>)
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad2      	subs	r2, r2, r3
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	1acb      	subs	r3, r1, r3
 8001418:	429a      	cmp	r2, r3
 800141a:	d3f6      	bcc.n	800140a <DWT_Delay_us+0x2a>
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e0001000 	.word	0xe0001000
 800142c:	431bde83 	.word	0x431bde83

08001430 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	e9c7 0100 	strd	r0, r1, [r7]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr
	...

08001468 <_ZN7RoboArmC1Ehh>:
#include "RoboArm.h"
//#include "TMC2209.h"

RoboArm::RoboArm(uint8_t defaultAngleT, uint8_t defaultDistanseT) {
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
 8001474:	4613      	mov	r3, r2
 8001476:	70bb      	strb	r3, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	4a2e      	ldr	r2, [pc, #184]	; (8001534 <_ZN7RoboArmC1Ehh+0xcc>)
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2200      	movs	r2, #0
 8001482:	645a      	str	r2, [r3, #68]	; 0x44
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	649a      	str	r2, [r3, #72]	; 0x48
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a2a      	ldr	r2, [pc, #168]	; (8001538 <_ZN7RoboArmC1Ehh+0xd0>)
 800148e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	220e      	movs	r2, #14
 8001494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3370      	adds	r3, #112	; 0x70
 800149c:	4618      	mov	r0, r3
 800149e:	f000 fcef 	bl	8001e80 <_ZN7TMC2209C1Ev>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3398      	adds	r3, #152	; 0x98
 80014a6:	4618      	mov	r0, r3
 80014a8:	f000 fcea 	bl	8001e80 <_ZN7TMC2209C1Ev>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	33c0      	adds	r3, #192	; 0xc0
 80014b0:	4618      	mov	r0, r3
 80014b2:	f000 fce5 	bl	8001e80 <_ZN7TMC2209C1Ev>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2200      	movs	r2, #0
 80014fa:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f04f 0200 	mov.w	r2, #0
 800150e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	defaultAngle = defaultAngleT;
 8001512:	78fb      	ldrb	r3, [r7, #3]
 8001514:	b29a      	uxth	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
	defaultDistanse = defaultDistanseT;
 800151c:	78bb      	ldrb	r3, [r7, #2]
 800151e:	b29a      	uxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2


	startDWT();
 8001526:	f7ff ff24 	bl	8001372 <startDWT>
}
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4618      	mov	r0, r3
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	43200000 	.word	0x43200000
 8001538:	437a0000 	.word	0x437a0000

0800153c <_ZN7RoboArm13EmergencyStopEv>:

int RoboArm::CloseGripper() {
	return 0;
}

int RoboArm::EmergencyStop() {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, GPIO_PIN_SET);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800154c:	2201      	movs	r2, #1
 800154e:	4619      	mov	r1, r3
 8001550:	f002 fc22 	bl	8003d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, GPIO_PIN_SET);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800155c:	2201      	movs	r2, #1
 800155e:	4619      	mov	r1, r3
 8001560:	f002 fc1a 	bl	8003d98 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, GPIO_PIN_SET);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800156e:	2201      	movs	r2, #1
 8001570:	4619      	mov	r1, r3
 8001572:	f002 fc11 	bl	8003d98 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2100      	movs	r1, #0
 800157c:	4618      	mov	r0, r3
 800157e:	f003 fe43 	bl	8005208 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	2104      	movs	r1, #4
 8001588:	4618      	mov	r0, r3
 800158a:	f003 fe3d 	bl	8005208 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_3);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	2108      	movs	r1, #8
 8001594:	4618      	mov	r0, r3
 8001596:	f003 fe37 	bl	8005208 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	4618      	mov	r0, r3
 80015a0:	f003 fd12 	bl	8004fc8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f003 fd0d 	bl	8004fc8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim3M3);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fd08 	bl	8004fc8 <HAL_TIM_Base_Stop_IT>

	return 0;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
	...

080015c4 <_ZN7RoboArm15GetLastPositionEv>:
	return 0;

}
*/

int RoboArm::GetLastPosition() {
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 80015cc:	2300      	movs	r3, #0
 80015ce:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_ang = GetPosEncoders(1);
 80015d0:	2101      	movs	r1, #1
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fa5b 	bl	8001a8e <_ZN7RoboArm14GetPosEncodersEh>
 80015d8:	6138      	str	r0, [r7, #16]
	while(posnowT_ang == 0xFFFF && ++attempts < 3)
 80015da:	e004      	b.n	80015e6 <_ZN7RoboArm15GetLastPositionEv+0x22>
		posnowT_ang = GetPosEncoders(1);
 80015dc:	2101      	movs	r1, #1
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f000 fa55 	bl	8001a8e <_ZN7RoboArm14GetPosEncodersEh>
 80015e4:	6138      	str	r0, [r7, #16]
	while(posnowT_ang == 0xFFFF && ++attempts < 3)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d107      	bne.n	8001600 <_ZN7RoboArm15GetLastPositionEv+0x3c>
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	3301      	adds	r3, #1
 80015f4:	617b      	str	r3, [r7, #20]
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	dc01      	bgt.n	8001600 <_ZN7RoboArm15GetLastPositionEv+0x3c>
 80015fc:	2301      	movs	r3, #1
 80015fe:	e000      	b.n	8001602 <_ZN7RoboArm15GetLastPositionEv+0x3e>
 8001600:	2300      	movs	r3, #0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1ea      	bne.n	80015dc <_ZN7RoboArm15GetLastPositionEv+0x18>
	lastPosAngle_Enc = GetAngleEncoders(posnowT_ang);
 8001606:	6939      	ldr	r1, [r7, #16]
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f000 fa2d 	bl	8001a68 <_ZN7RoboArm16GetAngleEncodersEm>
 800160e:	4602      	mov	r2, r0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	attempts = 0;
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_lin = GetPosEncoders(2);
 800161a:	2102      	movs	r1, #2
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 fa36 	bl	8001a8e <_ZN7RoboArm14GetPosEncodersEh>
 8001622:	60f8      	str	r0, [r7, #12]
	while(posnowT_lin == 0xFFFF && ++attempts < 3)
 8001624:	e004      	b.n	8001630 <_ZN7RoboArm15GetLastPositionEv+0x6c>
		posnowT_lin = GetPosEncoders(2);
 8001626:	2102      	movs	r1, #2
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 fa30 	bl	8001a8e <_ZN7RoboArm14GetPosEncodersEh>
 800162e:	60f8      	str	r0, [r7, #12]
	while(posnowT_lin == 0xFFFF && ++attempts < 3)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001636:	4293      	cmp	r3, r2
 8001638:	d107      	bne.n	800164a <_ZN7RoboArm15GetLastPositionEv+0x86>
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	3301      	adds	r3, #1
 800163e:	617b      	str	r3, [r7, #20]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	2b02      	cmp	r3, #2
 8001644:	dc01      	bgt.n	800164a <_ZN7RoboArm15GetLastPositionEv+0x86>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <_ZN7RoboArm15GetLastPositionEv+0x88>
 800164a:	2300      	movs	r3, #0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1ea      	bne.n	8001626 <_ZN7RoboArm15GetLastPositionEv+0x62>
	float pos = GetAngleEncoders(posnowT_lin);
 8001650:	68f9      	ldr	r1, [r7, #12]
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 fa08 	bl	8001a68 <_ZN7RoboArm16GetAngleEncodersEm>
 8001658:	60b8      	str	r0, [r7, #8]
	lastPosLinear_Enc = pos*distMax/360.0;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	68b9      	ldr	r1, [r7, #8]
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff fb6f 	bl	8000d44 <__aeabi_fmul>
 8001666:	4603      	mov	r3, r0
 8001668:	4906      	ldr	r1, [pc, #24]	; (8001684 <_ZN7RoboArm15GetLastPositionEv+0xc0>)
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fc1e 	bl	8000eac <__aeabi_fdiv>
 8001670:	4603      	mov	r3, r0
 8001672:	461a      	mov	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	return 0;
 800167a:	2300      	movs	r3, #0
}
 800167c:	4618      	mov	r0, r3
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	43b40000 	.word	0x43b40000

08001688 <_ZN7RoboArm11Move2MotorsEff>:

int RoboArm::Move2Motors(float angle, float distance) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b08e      	sub	sp, #56	; 0x38
 800168c:	af00      	add	r7, sp, #0
 800168e:	60f8      	str	r0, [r7, #12]
 8001690:	60b9      	str	r1, [r7, #8]
 8001692:	607a      	str	r2, [r7, #4]

	// TIM1 Х  enc1 -  угол 360  -  8 оборотов движка на 1 оборот энкодера
	// TIM2  Y  enc2 - линейный -  6,4516129 оборотов движка (это целое линейное перемещение с запасом) на 1 оборот энкодера

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2100      	movs	r1, #0
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fdb4 	bl	8005208 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2104      	movs	r1, #4
 80016a6:	4618      	mov	r0, r3
 80016a8:	f003 fdae 	bl	8005208 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim1M1);				// остановили прерывание таймеров
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f003 fc89 	bl	8004fc8 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f003 fc84 	bl	8004fc8 <HAL_TIM_Base_Stop_IT>

	SetEnable(1, false);
 80016c0:	2200      	movs	r2, #0
 80016c2:	2101      	movs	r1, #1
 80016c4:	68f8      	ldr	r0, [r7, #12]
 80016c6:	f000 fba2 	bl	8001e0e <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2102      	movs	r1, #2
 80016ce:	68f8      	ldr	r0, [r7, #12]
 80016d0:	f000 fb9d 	bl	8001e0e <_ZN7RoboArm9SetEnableEtb>

	GetLastPosition(); //update -> lastPosAngle lastPosLinear from ENCODER
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f7ff ff75 	bl	80015c4 <_ZN7RoboArm15GetLastPositionEv>
	float lastPosAngle = ShiftZeroOutputAng(lastPosAngle_Enc);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80016e0:	4619      	mov	r1, r3
 80016e2:	68f8      	ldr	r0, [r7, #12]
 80016e4:	f000 fac4 	bl	8001c70 <_ZN7RoboArm18ShiftZeroOutputAngEf>
 80016e8:	6338      	str	r0, [r7, #48]	; 0x30
	float lastPosLinear = ShiftZeroOutputLin(lastPosLinear_Enc);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 80016f0:	4619      	mov	r1, r3
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	f000 fae0 	bl	8001cb8 <_ZN7RoboArm18ShiftZeroOutputLinEf>
 80016f8:	62f8      	str	r0, [r7, #44]	; 0x2c

	float pos_ang = abs(lastPosAngle - angle);
 80016fa:	68b9      	ldr	r1, [r7, #8]
 80016fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80016fe:	f7ff fa17 	bl	8000b30 <__aeabi_fsub>
 8001702:	4603      	mov	r3, r0
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff fea2 	bl	800144e <_ZSt3absf>
 800170a:	62b8      	str	r0, [r7, #40]	; 0x28
	float inverse_pos_ang = abs(360.0 - pos_ang);
 800170c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800170e:	f7fe fe8b 	bl	8000428 <__aeabi_f2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	f04f 0000 	mov.w	r0, #0
 800171a:	499a      	ldr	r1, [pc, #616]	; (8001984 <_ZN7RoboArm11Move2MotorsEff+0x2fc>)
 800171c:	f7fe fd24 	bl	8000168 <__aeabi_dsub>
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	f7ff fe82 	bl	8001430 <_ZSt3absd>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4610      	mov	r0, r2
 8001732:	4619      	mov	r1, r3
 8001734:	f7ff f9a8 	bl	8000a88 <__aeabi_d2f>
 8001738:	4603      	mov	r3, r0
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
	float actualPosAngle;

	/* виставили в яку сторону ехать мотору*/
	if (inverse_pos_ang < pos_ang) {
 800173c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800173e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001740:	f7ff fc9e 	bl	8001080 <__aeabi_fcmplt>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d021      	beq.n	800178e <_ZN7RoboArm11Move2MotorsEff+0x106>
		actualPosAngle = inverse_pos_ang;
 800174a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800174c:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 800174e:	68b9      	ldr	r1, [r7, #8]
 8001750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001752:	f7ff fc95 	bl	8001080 <__aeabi_fcmplt>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <_ZN7RoboArm11Move2MotorsEff+0xe6>
			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6958      	ldr	r0, [r3, #20]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	8b1b      	ldrh	r3, [r3, #24]
 8001764:	2200      	movs	r2, #0
 8001766:	4619      	mov	r1, r3
 8001768:	f002 fb16 	bl	8003d98 <HAL_GPIO_WritePin>
 800176c:	e030      	b.n	80017d0 <_ZN7RoboArm11Move2MotorsEff+0x148>
//			tmcd_angle.enableInverseMotorDirection();
		} else if (lastPosAngle > angle) {
 800176e:	68b9      	ldr	r1, [r7, #8]
 8001770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001772:	f7ff fca3 	bl	80010bc <__aeabi_fcmpgt>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d029      	beq.n	80017d0 <_ZN7RoboArm11Move2MotorsEff+0x148>
			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6958      	ldr	r0, [r3, #20]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8b1b      	ldrh	r3, [r3, #24]
 8001784:	2201      	movs	r2, #1
 8001786:	4619      	mov	r1, r3
 8001788:	f002 fb06 	bl	8003d98 <HAL_GPIO_WritePin>
 800178c:	e020      	b.n	80017d0 <_ZN7RoboArm11Move2MotorsEff+0x148>
//			tmcd_angle.disableInverseMotorDirection();
		}
	}
	else {
		actualPosAngle = pos_ang;
 800178e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001790:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 8001792:	68b9      	ldr	r1, [r7, #8]
 8001794:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001796:	f7ff fc73 	bl	8001080 <__aeabi_fcmplt>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <_ZN7RoboArm11Move2MotorsEff+0x12a>
			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6958      	ldr	r0, [r3, #20]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8b1b      	ldrh	r3, [r3, #24]
 80017a8:	2201      	movs	r2, #1
 80017aa:	4619      	mov	r1, r3
 80017ac:	f002 faf4 	bl	8003d98 <HAL_GPIO_WritePin>
 80017b0:	e00e      	b.n	80017d0 <_ZN7RoboArm11Move2MotorsEff+0x148>
//			tmcd_angle.disableInverseMotorDirection();
		} else if (lastPosAngle > angle) {
 80017b2:	68b9      	ldr	r1, [r7, #8]
 80017b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017b6:	f7ff fc81 	bl	80010bc <__aeabi_fcmpgt>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d007      	beq.n	80017d0 <_ZN7RoboArm11Move2MotorsEff+0x148>
			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	6958      	ldr	r0, [r3, #20]
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8b1b      	ldrh	r3, [r3, #24]
 80017c8:	2200      	movs	r2, #0
 80017ca:	4619      	mov	r1, r3
 80017cc:	f002 fae4 	bl	8003d98 <HAL_GPIO_WritePin>
//	if (lastPosLinear < distance) {
//		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
//	} else if (lastPosLinear > distance) {
//		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
//	}
	if (lastPosLinear < distance) {
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017d4:	f7ff fc54 	bl	8001080 <__aeabi_fcmplt>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d005      	beq.n	80017ea <_ZN7RoboArm11Move2MotorsEff+0x162>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
			tmcd_linear.enableInverseMotorDirection();
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	3370      	adds	r3, #112	; 0x70
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fc38 	bl	8002058 <_ZN7TMC220927enableInverseMotorDirectionEv>
 80017e8:	e00b      	b.n	8001802 <_ZN7RoboArm11Move2MotorsEff+0x17a>
		} else if (lastPosLinear > distance) {
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017ee:	f7ff fc65 	bl	80010bc <__aeabi_fcmpgt>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d004      	beq.n	8001802 <_ZN7RoboArm11Move2MotorsEff+0x17a>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
			tmcd_linear.disableInverseMotorDirection();
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	3370      	adds	r3, #112	; 0x70
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 fc3b 	bl	8002078 <_ZN7TMC220928disableInverseMotorDirectionEv>
		}

//	actualPosAngle = abs(lastPosAngle - angle);
	float actualPosDistance = abs(lastPosLinear - distance);
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001806:	f7ff f993 	bl	8000b30 <__aeabi_fsub>
 800180a:	4603      	mov	r3, r0
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fe1e 	bl	800144e <_ZSt3absf>
 8001812:	6238      	str	r0, [r7, #32]

	//set microstepping TODO
	anglePsteps = (actualPosAngle * (8 * motorStep * drvMicroSteps)) / 360; //angle to steps
 8001814:	495c      	ldr	r1, [pc, #368]	; (8001988 <_ZN7RoboArm11Move2MotorsEff+0x300>)
 8001816:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001818:	f7ff fa94 	bl	8000d44 <__aeabi_fmul>
 800181c:	4603      	mov	r3, r0
 800181e:	495b      	ldr	r1, [pc, #364]	; (800198c <_ZN7RoboArm11Move2MotorsEff+0x304>)
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fb43 	bl	8000eac <__aeabi_fdiv>
 8001826:	4603      	mov	r3, r0
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff fc51 	bl	80010d0 <__aeabi_f2uiz>
 800182e:	4602      	mov	r2, r0
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	649a      	str	r2, [r3, #72]	; 0x48
//	anglePsteps = anglePsteps+(anglePsteps*0.05);
	distPsteps = actualPosDistance * linearStepsMil; //steps to distanse
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6a39      	ldr	r1, [r7, #32]
 800183a:	4618      	mov	r0, r3
 800183c:	f7ff fa82 	bl	8000d44 <__aeabi_fmul>
 8001840:	4603      	mov	r3, r0
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fc44 	bl	80010d0 <__aeabi_f2uiz>
 8001848:	4602      	mov	r2, r0
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	645a      	str	r2, [r3, #68]	; 0x44
//	lastPosLinear = distance;

// 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера

//	uint32_t periodM1 = 1200; //reduse to 600-400 mks for 32 microsteps
	uint32_t periodM1 = 600;
 800184e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001852:	61fb      	str	r3, [r7, #28]
	uint32_t psc = 72-1;
 8001854:	2347      	movs	r3, #71	; 0x47
 8001856:	61bb      	str	r3, [r7, #24]
	uint32_t delimiter=1;
 8001858:	2301      	movs	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
	uint32_t mnoj=1;
 800185c:	2301      	movs	r3, #1
 800185e:	613b      	str	r3, [r7, #16]

	if (anglePsteps > distPsteps) {
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001868:	429a      	cmp	r2, r3
 800186a:	d92c      	bls.n	80018c6 <_ZN7RoboArm11Move2MotorsEff+0x23e>

		htim1M1->Instance->PSC = psc;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	69ba      	ldr	r2, [r7, #24]
 8001874:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = periodM1;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	69fa      	ldr	r2, [r7, #28]
 800187e:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1M1->Instance->CCR1 = periodM1/2;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	0852      	lsrs	r2, r2, #1
 800188a:	635a      	str	r2, [r3, #52]	; 0x34

		delimiter = anglePsteps / distPsteps;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	fbb2 f3f3 	udiv	r3, r2, r3
 8001898:	617b      	str	r3, [r7, #20]
		mnoj = periodM1 * delimiter;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	fb02 f303 	mul.w	r3, r2, r3
 80018a2:	613b      	str	r3, [r7, #16]

		htim2M2->Instance->PSC = psc;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	69ba      	ldr	r2, [r7, #24]
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = mnoj;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2M2->Instance->CCR2 = mnoj / 2;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	0852      	lsrs	r2, r2, #1
 80018c2:	639a      	str	r2, [r3, #56]	; 0x38
 80018c4:	e031      	b.n	800192a <_ZN7RoboArm11Move2MotorsEff+0x2a2>

	} else if (anglePsteps < distPsteps) {
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d22b      	bcs.n	800192a <_ZN7RoboArm11Move2MotorsEff+0x2a2>

		htim2M2->Instance->PSC = psc;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = periodM1;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2M2->Instance->CCR2 = periodM1 / 2;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	0852      	lsrs	r2, r2, #1
 80018f0:	639a      	str	r2, [r3, #56]	; 0x38

		delimiter = distPsteps / anglePsteps;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80018fe:	617b      	str	r3, [r7, #20]
		mnoj = periodM1 * delimiter;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	fb02 f303 	mul.w	r3, r2, r3
 8001908:	613b      	str	r3, [r7, #16]

		htim1M1->Instance->PSC = psc;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = mnoj;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1M1->Instance->CCR1 = mnoj / 2;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	0852      	lsrs	r2, r2, #1
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
	}

	stateMoveM1 = true;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	stateMoveM2 = true;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef

	SetEnable(1, true);
 800193a:	2201      	movs	r2, #1
 800193c:	2101      	movs	r1, #1
 800193e:	68f8      	ldr	r0, [r7, #12]
 8001940:	f000 fa65 	bl	8001e0e <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 8001944:	2201      	movs	r2, #1
 8001946:	2102      	movs	r1, #2
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f000 fa60 	bl	8001e0e <_ZN7RoboArm9SetEnableEtb>

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	2100      	movs	r1, #0
 8001954:	4618      	mov	r0, r3
 8001956:	f003 fbb5 	bl	80050c4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	2104      	movs	r1, #4
 8001960:	4618      	mov	r0, r3
 8001962:	f003 fbaf 	bl	80050c4 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	4618      	mov	r0, r3
 800196c:	f003 fada 	bl	8004f24 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4618      	mov	r0, r3
 8001976:	f003 fad5 	bl	8004f24 <HAL_TIM_Base_Start_IT>

	return 0;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3738      	adds	r7, #56	; 0x38
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40768000 	.word	0x40768000
 8001988:	47480000 	.word	0x47480000
 800198c:	43b40000 	.word	0x43b40000

08001990 <_ZN7RoboArm13setPrintStateEb>:

int RoboArm::OpenGripper() {
	return 0;
}

int RoboArm::setPrintState(bool state) {
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	70fb      	strb	r3, [r7, #3]
	if (state) {
 800199c:	78fb      	ldrb	r3, [r7, #3]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d004      	beq.n	80019ac <_ZN7RoboArm13setPrintStateEb+0x1c>
		PrintAllState = true;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 80019aa:	e003      	b.n	80019b4 <_ZN7RoboArm13setPrintStateEb+0x24>
	} else {
		PrintAllState = false;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
	}
	return 0;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bc80      	pop	{r7}
 80019be:	4770      	bx	lr

080019c0 <_ZN7RoboArm13getPrintStateEv>:

bool RoboArm::getPrintState() {
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	if (PrintAllState) {
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <_ZN7RoboArm13getPrintStateEv+0x16>
		return true;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <_ZN7RoboArm13getPrintStateEv+0x18>
	} else {
		return false;
 80019d6:	2300      	movs	r3, #0
	}
}
 80019d8:	4618      	mov	r0, r3
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr

080019e2 <_ZN7RoboArm17SetMicrosteps4AllEh>:


int RoboArm::SetMicrosteps4All(uint8_t microsteps_per_step){
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b082      	sub	sp, #8
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	70fb      	strb	r3, [r7, #3]

	tmcd_angle.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	3398      	adds	r3, #152	; 0x98
 80019f2:	78fa      	ldrb	r2, [r7, #3]
 80019f4:	4611      	mov	r1, r2
 80019f6:	4618      	mov	r0, r3
 80019f8:	f000 facc 	bl	8001f94 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_gripper.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	33c0      	adds	r3, #192	; 0xc0
 8001a00:	78fa      	ldrb	r2, [r7, #3]
 8001a02:	4611      	mov	r1, r2
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fac5 	bl	8001f94 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_linear.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3370      	adds	r3, #112	; 0x70
 8001a0e:	78fa      	ldrb	r2, [r7, #3]
 8001a10:	4611      	mov	r1, r2
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 fabe 	bl	8001f94 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

	return 0;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>:

int RoboArm::SetSettEncoders(SPI_HandleTypeDef &arm_hspi1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc1T, uint16_t CS_Pin_Enc1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc2T, uint16_t CS_Pin_Enc2T,
		uint8_t ResolutionEncodersT) {
 8001a22:	b480      	push	{r7}
 8001a24:	b085      	sub	sp, #20
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	607a      	str	r2, [r7, #4]
 8001a2e:	807b      	strh	r3, [r7, #2]

	arm_hspi1 = &arm_hspi1T;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54
	CS_GPIO_Port_Enc1 = CS_GPIO_Port_Enc1T;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	65da      	str	r2, [r3, #92]	; 0x5c
	CS_Pin_Enc1 = CS_Pin_Enc1T;
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	CS_Pin_Enc2 = CS_Pin_Enc2T;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	8bba      	ldrh	r2, [r7, #28]
 8001a48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	CS_GPIO_Port_Enc2 = CS_GPIO_Port_Enc2T;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	665a      	str	r2, [r3, #100]	; 0x64
	ResolutionEncoders = ResolutionEncodersT;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001a58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	return 0;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3714      	adds	r7, #20
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr

08001a68 <_ZN7RoboArm16GetAngleEncodersEm>:

float RoboArm::GetAngleEncoders(uint32_t encoderValue) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
	//	https://www.cuidevices.com/product/resource/amt22.pdf
	return calculateAngle(encoderValue, ResolutionEncoders);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4610      	mov	r0, r2
 8001a80:	f7ff fc12 	bl	80012a8 <calculateAngle>
 8001a84:	4603      	mov	r3, r0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <_ZN7RoboArm14GetPosEncodersEh>:

uint32_t RoboArm::GetPosEncoders(uint8_t numEnc) {
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b082      	sub	sp, #8
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	6078      	str	r0, [r7, #4]
 8001a96:	460b      	mov	r3, r1
 8001a98:	70fb      	strb	r3, [r7, #3]
	switch (numEnc) {
 8001a9a:	78fb      	ldrb	r3, [r7, #3]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d002      	beq.n	8001aa6 <_ZN7RoboArm14GetPosEncodersEh+0x18>
 8001aa0:	2b02      	cmp	r3, #2
 8001aa2:	d013      	beq.n	8001acc <_ZN7RoboArm14GetPosEncodersEh+0x3e>
 8001aa4:	e025      	b.n	8001af2 <_ZN7RoboArm14GetPosEncodersEh+0x64>
	case 1:
		posNowEnc1 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001aba:	f7ff fb67 	bl	800118c <getPositionSPI>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	669a      	str	r2, [r3, #104]	; 0x68
				ResolutionEncoders);
		return posNowEnc1;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001aca:	e013      	b.n	8001af4 <_ZN7RoboArm14GetPosEncodersEh+0x66>
		break;
	case 2:
		posNowEnc2 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001ae0:	f7ff fb54 	bl	800118c <getPositionSPI>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	66da      	str	r2, [r3, #108]	; 0x6c
				ResolutionEncoders);
		return posNowEnc2;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001af0:	e000      	b.n	8001af4 <_ZN7RoboArm14GetPosEncodersEh+0x66>
		break;
	default:
		return 1;
 8001af2:	2301      	movs	r3, #1
		break;
	}
	return 0;
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <_ZN7RoboArm15SetSoftwareZeroEv>:
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2);
	HAL_Delay(250);
	return 0;
}

int RoboArm::SetSoftwareZero() {
 8001afc:	b5b0      	push	{r4, r5, r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
//	ang_zero = GetPosEncoders(1);
//	lin_zero = GetPosEncoders(2);

	int attempts = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_1 = GetPosEncoders(1);
 8001b08:	2101      	movs	r1, #1
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffbf 	bl	8001a8e <_ZN7RoboArm14GetPosEncodersEh>
 8001b10:	6138      	str	r0, [r7, #16]

	while(posnowT_1 == 0xFFFF && ++attempts < 3)
 8001b12:	e004      	b.n	8001b1e <_ZN7RoboArm15SetSoftwareZeroEv+0x22>
		posnowT_1 = GetPosEncoders(1); //try again
 8001b14:	2101      	movs	r1, #1
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7ff ffb9 	bl	8001a8e <_ZN7RoboArm14GetPosEncodersEh>
 8001b1c:	6138      	str	r0, [r7, #16]
	while(posnowT_1 == 0xFFFF && ++attempts < 3)
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d107      	bne.n	8001b38 <_ZN7RoboArm15SetSoftwareZeroEv+0x3c>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	dc01      	bgt.n	8001b38 <_ZN7RoboArm15SetSoftwareZeroEv+0x3c>
 8001b34:	2301      	movs	r3, #1
 8001b36:	e000      	b.n	8001b3a <_ZN7RoboArm15SetSoftwareZeroEv+0x3e>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1ea      	bne.n	8001b14 <_ZN7RoboArm15SetSoftwareZeroEv+0x18>

	attempts = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]

	//			float ang = posnowT*360/16384;
	ang_zero = GetAngleEncoders(posnowT_1) - defaultAngle;// - defaultAngle; //0, 120, 240
 8001b42:	6939      	ldr	r1, [r7, #16]
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f7ff ff8f 	bl	8001a68 <_ZN7RoboArm16GetAngleEncodersEm>
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff f8a2 	bl	8000c9c <__aeabi_i2f>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	f7fe ffe7 	bl	8000b30 <__aeabi_fsub>
 8001b62:	4603      	mov	r3, r0
 8001b64:	461a      	mov	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	if (ang_zero < 0.0)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001b72:	f04f 0100 	mov.w	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff fa82 	bl	8001080 <__aeabi_fcmplt>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00b      	beq.n	8001b9a <_ZN7RoboArm15SetSoftwareZeroEv+0x9e>
		ang_zero = 360.0 + ang_zero;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001b88:	4937      	ldr	r1, [pc, #220]	; (8001c68 <_ZN7RoboArm15SetSoftwareZeroEv+0x16c>)
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe ffd2 	bl	8000b34 <__addsf3>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	//			un_send.params.ang = angleT;

	uint32_t posnowT_2 = GetPosEncoders(2);
 8001b9a:	2102      	movs	r1, #2
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f7ff ff76 	bl	8001a8e <_ZN7RoboArm14GetPosEncodersEh>
 8001ba2:	60f8      	str	r0, [r7, #12]
	while(posnowT_2 == 0xFFFF && ++attempts < 3)
 8001ba4:	e004      	b.n	8001bb0 <_ZN7RoboArm15SetSoftwareZeroEv+0xb4>
		posnowT_2 = GetPosEncoders(2); //try again
 8001ba6:	2102      	movs	r1, #2
 8001ba8:	6878      	ldr	r0, [r7, #4]
 8001baa:	f7ff ff70 	bl	8001a8e <_ZN7RoboArm14GetPosEncodersEh>
 8001bae:	60f8      	str	r0, [r7, #12]
	while(posnowT_2 == 0xFFFF && ++attempts < 3)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d107      	bne.n	8001bca <_ZN7RoboArm15SetSoftwareZeroEv+0xce>
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	617b      	str	r3, [r7, #20]
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	dc01      	bgt.n	8001bca <_ZN7RoboArm15SetSoftwareZeroEv+0xce>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <_ZN7RoboArm15SetSoftwareZeroEv+0xd0>
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ea      	bne.n	8001ba6 <_ZN7RoboArm15SetSoftwareZeroEv+0xaa>
	float ang_pos = GetAngleEncoders(posnowT_2);
 8001bd0:	68f9      	ldr	r1, [r7, #12]
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ff48 	bl	8001a68 <_ZN7RoboArm16GetAngleEncodersEm>
 8001bd8:	60b8      	str	r0, [r7, #8]
	lin_zero = ang_pos*distMax/360.0 - defaultDistanse;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bde:	68b9      	ldr	r1, [r7, #8]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff f8af 	bl	8000d44 <__aeabi_fmul>
 8001be6:	4603      	mov	r3, r0
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe fc1d 	bl	8000428 <__aeabi_f2d>
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <_ZN7RoboArm15SetSoftwareZeroEv+0x170>)
 8001bf4:	f7fe fd9a 	bl	800072c <__aeabi_ddiv>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4614      	mov	r4, r2
 8001bfe:	461d      	mov	r5, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fbfc 	bl	8000404 <__aeabi_i2d>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4620      	mov	r0, r4
 8001c12:	4629      	mov	r1, r5
 8001c14:	f7fe faa8 	bl	8000168 <__aeabi_dsub>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f7fe ff32 	bl	8000a88 <__aeabi_d2f>
 8001c24:	4602      	mov	r2, r0
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if (lin_zero < 0.0)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001c32:	f04f 0100 	mov.w	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fa22 	bl	8001080 <__aeabi_fcmplt>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00d      	beq.n	8001c5e <_ZN7RoboArm15SetSoftwareZeroEv+0x162>
		lin_zero = distMax + lin_zero;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4610      	mov	r0, r2
 8001c50:	f7fe ff70 	bl	8000b34 <__addsf3>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461a      	mov	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	return 0;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bdb0      	pop	{r4, r5, r7, pc}
 8001c68:	43b40000 	.word	0x43b40000
 8001c6c:	40768000 	.word	0x40768000

08001c70 <_ZN7RoboArm18ShiftZeroOutputAngEf>:
	if (lin_actual > distMax)
		lin_actual -= distMax;
	return lin_actual;
}

float RoboArm::ShiftZeroOutputAng(float ang_actual){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
	float ang = ang_actual - ang_zero;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c80:	4619      	mov	r1, r3
 8001c82:	6838      	ldr	r0, [r7, #0]
 8001c84:	f7fe ff54 	bl	8000b30 <__aeabi_fsub>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	60fb      	str	r3, [r7, #12]
	if (ang < 0.0)
 8001c8c:	f04f 0100 	mov.w	r1, #0
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f7ff f9f5 	bl	8001080 <__aeabi_fcmplt>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d005      	beq.n	8001ca8 <_ZN7RoboArm18ShiftZeroOutputAngEf+0x38>
		ang = 360.0 + ang;
 8001c9c:	4905      	ldr	r1, [pc, #20]	; (8001cb4 <_ZN7RoboArm18ShiftZeroOutputAngEf+0x44>)
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f7fe ff48 	bl	8000b34 <__addsf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	60fb      	str	r3, [r7, #12]
	return ang;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	43b40000 	.word	0x43b40000

08001cb8 <_ZN7RoboArm18ShiftZeroOutputLinEf>:

float RoboArm::ShiftZeroOutputLin(float lin_actual){
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
	float lin = lin_actual - lin_zero;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001cc8:	4619      	mov	r1, r3
 8001cca:	6838      	ldr	r0, [r7, #0]
 8001ccc:	f7fe ff30 	bl	8000b30 <__aeabi_fsub>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	60fb      	str	r3, [r7, #12]
	if (lin < 0.0)
 8001cd4:	f04f 0100 	mov.w	r1, #0
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f7ff f9d1 	bl	8001080 <__aeabi_fcmplt>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d007      	beq.n	8001cf4 <_ZN7RoboArm18ShiftZeroOutputLinEf+0x3c>
		lin = distMax + lin;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce8:	4619      	mov	r1, r3
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f7fe ff22 	bl	8000b34 <__addsf3>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	60fb      	str	r3, [r7, #12]
	return lin;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_t>:
		GPIO_TypeDef *Dir1_GPIO_Port_M1T, uint16_t Dir1_Pin_M1T,
		GPIO_TypeDef *Dir2_GPIO_Port_M2T, uint16_t Dir2_Pin_M2T,
		GPIO_TypeDef *Dir3_GPIO_Port_M3T, uint16_t Dir3_Pin_M3T,
		GPIO_TypeDef *En1_GPIO_Port_M1T, uint16_t En1_Pin_M1T,
		GPIO_TypeDef *En2_GPIO_Port_M2T, uint16_t En2_Pin_M2T,
		GPIO_TypeDef *En3_GPIO_Port_M3T, uint16_t En3_Pin_M3T){
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	60f8      	str	r0, [r7, #12]
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	603b      	str	r3, [r7, #0]
//		UART_HandleTypeDef &huart_tmcT) {
	htim1M1 = &htim1;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	605a      	str	r2, [r3, #4]
	htim2M2 = &htim2;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	609a      	str	r2, [r3, #8]
	htim3M3 = &htim3;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	69ba      	ldr	r2, [r7, #24]
 8001d1c:	60da      	str	r2, [r3, #12]

	Dir1_GPIO_Port_M1 = Dir1_GPIO_Port_M1T;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	615a      	str	r2, [r3, #20]
	Dir1_Pin_M1 = Dir1_Pin_M1T;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8c3a      	ldrh	r2, [r7, #32]
 8001d28:	831a      	strh	r2, [r3, #24]
	Dir2_GPIO_Port_M2 = Dir2_GPIO_Port_M2T;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d2e:	61da      	str	r2, [r3, #28]
	Dir2_Pin_M2 = Dir2_Pin_M2T;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d34:	841a      	strh	r2, [r3, #32]
	Dir3_GPIO_Port_M3 = Dir3_GPIO_Port_M3T;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
	Dir3_Pin_M3 = Dir3_Pin_M3T;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001d40:	851a      	strh	r2, [r3, #40]	; 0x28

	En1_GPIO_Port_M1 = En1_GPIO_Port_M1T;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
	En1_Pin_M1 = En1_Pin_M1T;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001d4c:	861a      	strh	r2, [r3, #48]	; 0x30
	En2_GPIO_Port_M2 = En2_GPIO_Port_M2T;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d52:	635a      	str	r2, [r3, #52]	; 0x34
	En2_Pin_M2 = En2_Pin_M2T;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001d5a:	871a      	strh	r2, [r3, #56]	; 0x38
	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d60:	63da      	str	r2, [r3, #60]	; 0x3c
	En3_Pin_M3 = En3_Pin_M3T;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001d68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	SetEnable(1, true);
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	2101      	movs	r1, #1
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f000 f84c 	bl	8001e0e <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 8001d76:	2201      	movs	r2, #1
 8001d78:	2102      	movs	r1, #2
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f000 f847 	bl	8001e0e <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, true);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2103      	movs	r1, #3
 8001d84:	68f8      	ldr	r0, [r7, #12]
 8001d86:	f000 f842 	bl	8001e0e <_ZN7RoboArm9SetEnableEtb>

	tmcd_angle.setup(&huartTmc, 115200, tmcd_angle.SERIAL_ADDRESS_0);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8001d90:	2300      	movs	r3, #0
 8001d92:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d96:	68b9      	ldr	r1, [r7, #8]
 8001d98:	f000 f88e 	bl	8001eb8 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_gripper.setup(&huartTmc, 115200, tmcd_gripper.SERIAL_ADDRESS_1);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8001da2:	2301      	movs	r3, #1
 8001da4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	f000 f885 	bl	8001eb8 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_linear.setup(&huartTmc, 115200, tmcd_linear.SERIAL_ADDRESS_3);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8001db4:	2303      	movs	r3, #3
 8001db6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	f000 f87c 	bl	8001eb8 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>

	tmcd_angle.enable();
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	3398      	adds	r3, #152	; 0x98
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 f88b 	bl	8001ee0 <_ZN7TMC22096enableEv>

//	tmcd_angle.disableAutomaticCurrentScaling();
//	tmcd_angle.disableAutomaticGradientAdaptation();

	tmcd_gripper.enable();
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	33c0      	adds	r3, #192	; 0xc0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f886 	bl	8001ee0 <_ZN7TMC22096enableEv>

//	tmcd_gripper.disableAutomaticCurrentScaling();
//	tmcd_gripper.disableAutomaticGradientAdaptation();

	tmcd_linear.enable();
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	3370      	adds	r3, #112	; 0x70
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f000 f881 	bl	8001ee0 <_ZN7TMC22096enableEv>

//	tmcd_linear.disableAutomaticCurrentScaling();
//	tmcd_linear.disableAutomaticGradientAdaptation();

	SetMicrosteps4All(5);
 8001dde:	2105      	movs	r1, #5
 8001de0:	68f8      	ldr	r0, [r7, #12]
 8001de2:	f7ff fdfe 	bl	80019e2 <_ZN7RoboArm17SetMicrosteps4AllEh>



	SetEnable(1, false);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2101      	movs	r1, #1
 8001dea:	68f8      	ldr	r0, [r7, #12]
 8001dec:	f000 f80f 	bl	8001e0e <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 8001df0:	2200      	movs	r2, #0
 8001df2:	2102      	movs	r1, #2
 8001df4:	68f8      	ldr	r0, [r7, #12]
 8001df6:	f000 f80a 	bl	8001e0e <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, false);
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	2103      	movs	r1, #3
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f805 	bl	8001e0e <_ZN7RoboArm9SetEnableEtb>

	return 0;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_ZN7RoboArm9SetEnableEtb>:

int RoboArm::SetEnable(uint16_t numMotor, bool state) {
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	807b      	strh	r3, [r7, #2]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	707b      	strb	r3, [r7, #1]

	GPIO_PinState pinSet;

	if (state) {
 8001e1e:	787b      	ldrb	r3, [r7, #1]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d002      	beq.n	8001e2a <_ZN7RoboArm9SetEnableEtb+0x1c>
		pinSet = GPIO_PIN_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]
 8001e28:	e001      	b.n	8001e2e <_ZN7RoboArm9SetEnableEtb+0x20>
	} else {
		pinSet = GPIO_PIN_SET;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	73fb      	strb	r3, [r7, #15]
	}

	if (numMotor == 1) {
 8001e2e:	887b      	ldrh	r3, [r7, #2]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d108      	bne.n	8001e46 <_ZN7RoboArm9SetEnableEtb+0x38>
		HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, pinSet);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001e3c:	7bfa      	ldrb	r2, [r7, #15]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f001 ffaa 	bl	8003d98 <HAL_GPIO_WritePin>
 8001e44:	e017      	b.n	8001e76 <_ZN7RoboArm9SetEnableEtb+0x68>
	} else if (numMotor == 2) {
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d108      	bne.n	8001e5e <_ZN7RoboArm9SetEnableEtb+0x50>
		HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, pinSet);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001e54:	7bfa      	ldrb	r2, [r7, #15]
 8001e56:	4619      	mov	r1, r3
 8001e58:	f001 ff9e 	bl	8003d98 <HAL_GPIO_WritePin>
 8001e5c:	e00b      	b.n	8001e76 <_ZN7RoboArm9SetEnableEtb+0x68>
	} else if (numMotor == 3) {
 8001e5e:	887b      	ldrh	r3, [r7, #2]
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d108      	bne.n	8001e76 <_ZN7RoboArm9SetEnableEtb+0x68>
		HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, pinSet);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e6e:	7bfa      	ldrb	r2, [r7, #15]
 8001e70:	4619      	mov	r1, r3
 8001e72:	f001 ff91 	bl	8003d98 <HAL_GPIO_WritePin>
	}

	return 0;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <_ZN7TMC2209C1Ev>:
//
// ----------------------------------------------------------------------------
#include "TMC2209.h"
#include "main.h"

TMC2209::TMC2209() {
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	f883 2020 	strb.w	r2, [r3, #32]
	serial_baud_rate_ = 115200;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e96:	601a      	str	r2, [r3, #0]
	serial_address_ = SERIAL_ADDRESS_3;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	711a      	strb	r2, [r3, #4]
	hardware_enable_pin_ = -1;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ea4:	80da      	strh	r2, [r3, #6]
	cool_step_enabled_ = false;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>:

void TMC2209::setup(UART_HandleTypeDef *tmc_uart,long serial_baud_rate, SerialAddress serial_address) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
 8001ec4:	70fb      	strb	r3, [r7, #3]
	tmcuart=tmc_uart;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	609a      	str	r2, [r3, #8]
	initialize(serial_baud_rate, serial_address);
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	6879      	ldr	r1, [r7, #4]
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	f000 f904 	bl	80020e0 <_ZN7TMC220910initializeElNS_13SerialAddressE>
}
 8001ed8:	bf00      	nop
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <_ZN7TMC22096enableEv>:

//  pinMode(hardware_enable_pin_, OUTPUT);
//  digitalWrite(hardware_enable_pin_, HIGH);
}

void TMC2209::enable() {
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	db0f      	blt.n	8001f12 <_ZN7TMC22096enableEv+0x32>
		HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_RESET);
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	2120      	movs	r1, #32
 8001ef6:	4810      	ldr	r0, [pc, #64]	; (8001f38 <_ZN7TMC22096enableEv+0x58>)
 8001ef8:	f001 ff4e 	bl	8003d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_RESET);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2101      	movs	r1, #1
 8001f00:	480d      	ldr	r0, [pc, #52]	; (8001f38 <_ZN7TMC22096enableEv+0x58>)
 8001f02:	f001 ff49 	bl	8003d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_RESET);
 8001f06:	2200      	movs	r2, #0
 8001f08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f0c:	480b      	ldr	r0, [pc, #44]	; (8001f3c <_ZN7TMC22096enableEv+0x5c>)
 8001f0e:	f001 ff43 	bl	8003d98 <HAL_GPIO_WritePin>
		//  digitalWrite(hardware_enable_pin_, LOW);
	}
	chopper_config_.toff = toff_;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f18:	f003 030f 	and.w	r3, r3, #15
 8001f1c:	b2d9      	uxtb	r1, r3
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	7f13      	ldrb	r3, [r2, #28]
 8001f22:	f361 0303 	bfi	r3, r1, #0, #4
 8001f26:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 fa0e 	bl	800234a <_ZN7TMC220924writeStoredChopperConfigEv>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40010800 	.word	0x40010800
 8001f3c:	40010c00 	.word	0x40010c00

08001f40 <_ZN7TMC22097disableEv>:

void TMC2209::disable() {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	db0f      	blt.n	8001f72 <_ZN7TMC22097disableEv+0x32>
		//digitalWrite(hardware_enable_pin_, HIGH);
		HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	2120      	movs	r1, #32
 8001f56:	480d      	ldr	r0, [pc, #52]	; (8001f8c <_ZN7TMC22097disableEv+0x4c>)
 8001f58:	f001 ff1e 	bl	8003d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_SET);
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	2101      	movs	r1, #1
 8001f60:	480a      	ldr	r0, [pc, #40]	; (8001f8c <_ZN7TMC22097disableEv+0x4c>)
 8001f62:	f001 ff19 	bl	8003d98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f6c:	4808      	ldr	r0, [pc, #32]	; (8001f90 <_ZN7TMC22097disableEv+0x50>)
 8001f6e:	f001 ff13 	bl	8003d98 <HAL_GPIO_WritePin>
	}
	chopper_config_.toff = TOFF_DISABLE;
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	7f13      	ldrb	r3, [r2, #28]
 8001f76:	f36f 0303 	bfc	r3, #0, #4
 8001f7a:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f9e4 	bl	800234a <_ZN7TMC220924writeStoredChopperConfigEv>
}
 8001f82:	bf00      	nop
 8001f84:	3708      	adds	r7, #8
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40010800 	.word	0x40010800
 8001f90:	40010c00 	.word	0x40010c00

08001f94 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>:
		++exponent;
	}
	setMicrostepsPerStepPowerOfTwo(exponent);
}

void TMC2209::setMicrostepsPerStepPowerOfTwo(uint8_t exponent) {
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
	switch (exponent) {
 8001fa0:	78fb      	ldrb	r3, [r7, #3]
 8001fa2:	2b07      	cmp	r3, #7
 8001fa4:	d84a      	bhi.n	800203c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xa8>
 8001fa6:	a201      	add	r2, pc, #4	; (adr r2, 8001fac <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0x18>)
 8001fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fac:	08001fcd 	.word	0x08001fcd
 8001fb0:	08001fdb 	.word	0x08001fdb
 8001fb4:	08001fe9 	.word	0x08001fe9
 8001fb8:	08001ff7 	.word	0x08001ff7
 8001fbc:	08002005 	.word	0x08002005
 8001fc0:	08002013 	.word	0x08002013
 8001fc4:	08002021 	.word	0x08002021
 8001fc8:	0800202f 	.word	0x0800202f
	case 0: {
		chopper_config_.mres = MRES_001;
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	7fd3      	ldrb	r3, [r2, #31]
 8001fd0:	2108      	movs	r1, #8
 8001fd2:	f361 0303 	bfi	r3, r1, #0, #4
 8001fd6:	77d3      	strb	r3, [r2, #31]
		break;
 8001fd8:	e036      	b.n	8002048 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 1: {
		chopper_config_.mres = MRES_002;
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	7fd3      	ldrb	r3, [r2, #31]
 8001fde:	2107      	movs	r1, #7
 8001fe0:	f361 0303 	bfi	r3, r1, #0, #4
 8001fe4:	77d3      	strb	r3, [r2, #31]
		break;
 8001fe6:	e02f      	b.n	8002048 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 2: {
		chopper_config_.mres = MRES_004;
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	7fd3      	ldrb	r3, [r2, #31]
 8001fec:	2106      	movs	r1, #6
 8001fee:	f361 0303 	bfi	r3, r1, #0, #4
 8001ff2:	77d3      	strb	r3, [r2, #31]
		break;
 8001ff4:	e028      	b.n	8002048 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 3: {
		chopper_config_.mres = MRES_008;
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	7fd3      	ldrb	r3, [r2, #31]
 8001ffa:	2105      	movs	r1, #5
 8001ffc:	f361 0303 	bfi	r3, r1, #0, #4
 8002000:	77d3      	strb	r3, [r2, #31]
		break;
 8002002:	e021      	b.n	8002048 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 4: {
		chopper_config_.mres = MRES_016;
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	7fd3      	ldrb	r3, [r2, #31]
 8002008:	2104      	movs	r1, #4
 800200a:	f361 0303 	bfi	r3, r1, #0, #4
 800200e:	77d3      	strb	r3, [r2, #31]
		break;
 8002010:	e01a      	b.n	8002048 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 5: {
		chopper_config_.mres = MRES_032;
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	7fd3      	ldrb	r3, [r2, #31]
 8002016:	2103      	movs	r1, #3
 8002018:	f361 0303 	bfi	r3, r1, #0, #4
 800201c:	77d3      	strb	r3, [r2, #31]
		break;
 800201e:	e013      	b.n	8002048 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 6: {
		chopper_config_.mres = MRES_064;
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	7fd3      	ldrb	r3, [r2, #31]
 8002024:	2102      	movs	r1, #2
 8002026:	f361 0303 	bfi	r3, r1, #0, #4
 800202a:	77d3      	strb	r3, [r2, #31]
		break;
 800202c:	e00c      	b.n	8002048 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 7: {
		chopper_config_.mres = MRES_128;
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	7fd3      	ldrb	r3, [r2, #31]
 8002032:	2101      	movs	r1, #1
 8002034:	f361 0303 	bfi	r3, r1, #0, #4
 8002038:	77d3      	strb	r3, [r2, #31]
		break;
 800203a:	e005      	b.n	8002048 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 8:
	default: {
		chopper_config_.mres = MRES_256;
 800203c:	687a      	ldr	r2, [r7, #4]
 800203e:	7fd3      	ldrb	r3, [r2, #31]
 8002040:	f36f 0303 	bfc	r3, #0, #4
 8002044:	77d3      	strb	r3, [r2, #31]
		break;
 8002046:	bf00      	nop
	}
	}
	writeStoredChopperConfig();
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f97e 	bl	800234a <_ZN7TMC220924writeStoredChopperConfigEv>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop

08002058 <_ZN7TMC220927enableInverseMotorDirectionEv>:
	driver_current_.ihold = hold_current;
	driver_current_.iholddelay = hold_delay;
	writeStoredDriverCurrent();
}

void TMC2209::enableInverseMotorDirection() {
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 1;
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	7b13      	ldrb	r3, [r2, #12]
 8002064:	f043 0308 	orr.w	r3, r3, #8
 8002068:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 f95e 	bl	800232c <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <_ZN7TMC220928disableInverseMotorDirectionEv>:

void TMC2209::disableInverseMotorDirection() {
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 0;
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	7b13      	ldrb	r3, [r2, #12]
 8002084:	f36f 03c3 	bfc	r3, #3, #1
 8002088:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f94e 	bl	800232c <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002090:	bf00      	nop
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <_ZN7TMC220930disableAutomaticCurrentScalingEv>:
void TMC2209::enableAutomaticCurrentScaling() {
	pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
	writeStoredPwmConfig();
}

void TMC2209::disableAutomaticCurrentScaling() {
 8002098:	b580      	push	{r7, lr}
 800209a:	b082      	sub	sp, #8
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
	pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_OFF;
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80020a6:	f36f 0382 	bfc	r3, #2, #1
 80020aa:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	writeStoredPwmConfig();
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f000 f95a 	bl	8002368 <_ZN7TMC220920writeStoredPwmConfigEv>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_ZN7TMC220934disableAutomaticGradientAdaptationEv>:
void TMC2209::enableAutomaticGradientAdaptation() {
	pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
	writeStoredPwmConfig();
}

void TMC2209::disableAutomaticGradientAdaptation() {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 80020ca:	f36f 03c3 	bfc	r3, #3, #1
 80020ce:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	writeStoredPwmConfig();
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f948 	bl	8002368 <_ZN7TMC220920writeStoredPwmConfigEv>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <_ZN7TMC220910initializeElNS_13SerialAddressE>:
	return read(ADDRESS_MSCNT);
}

// private
/* EDITED */
void TMC2209::initialize(long serial_baud_rate, SerialAddress serial_address) {
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	4613      	mov	r3, r2
 80020ec:	71fb      	strb	r3, [r7, #7]
	serial_baud_rate_ = serial_baud_rate;
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	601a      	str	r2, [r3, #0]

	setOperationModeToSerial(serial_address);
 80020f4:	79fb      	ldrb	r3, [r7, #7]
 80020f6:	4619      	mov	r1, r3
 80020f8:	68f8      	ldr	r0, [r7, #12]
 80020fa:	f000 f810 	bl	800211e <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>
	setRegistersToDefaults();
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f000 f834 	bl	800216c <_ZN7TMC220922setRegistersToDefaultsEv>

	//minimizeMotorCurrent();
	disable();
 8002104:	68f8      	ldr	r0, [r7, #12]
 8002106:	f7ff ff1b 	bl	8001f40 <_ZN7TMC22097disableEv>
	disableAutomaticCurrentScaling();
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7ff ffc4 	bl	8002098 <_ZN7TMC220930disableAutomaticCurrentScalingEv>
	disableAutomaticGradientAdaptation();
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f7ff ffd3 	bl	80020bc <_ZN7TMC220934disableAutomaticGradientAdaptationEv>
}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>:

//	  tmcuart->RxXferCount = 0;

}

void TMC2209::setOperationModeToSerial(SerialAddress serial_address) {
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
 8002126:	460b      	mov	r3, r1
 8002128:	70fb      	strb	r3, [r7, #3]
	serial_address_ = serial_address;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	78fa      	ldrb	r2, [r7, #3]
 800212e:	711a      	strb	r2, [r3, #4]

	global_config_.bytes = 0;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
	global_config_.i_scale_analog = 0;
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	7b13      	ldrb	r3, [r2, #12]
 800213a:	f36f 0300 	bfc	r3, #0, #1
 800213e:	7313      	strb	r3, [r2, #12]
	global_config_.pdn_disable = 1;
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	7b13      	ldrb	r3, [r2, #12]
 8002144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002148:	7313      	strb	r3, [r2, #12]
	global_config_.mstep_reg_select = 1;
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	7b13      	ldrb	r3, [r2, #12]
 800214e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002152:	7313      	strb	r3, [r2, #12]
	global_config_.multistep_filt = 1;
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	7b53      	ldrb	r3, [r2, #13]
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	7353      	strb	r3, [r2, #13]

	writeStoredGlobalConfig();
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 f8e4 	bl	800232c <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002164:	bf00      	nop
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <_ZN7TMC220922setRegistersToDefaultsEv>:

void TMC2209::setRegistersToDefaults() {
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	driver_current_.bytes = 0;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
	driver_current_.ihold = IHOLD_DEFAULT;
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	7c13      	ldrb	r3, [r2, #16]
 800217e:	2110      	movs	r1, #16
 8002180:	f361 0304 	bfi	r3, r1, #0, #5
 8002184:	7413      	strb	r3, [r2, #16]
	driver_current_.irun = IRUN_DEFAULT;
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	7c53      	ldrb	r3, [r2, #17]
 800218a:	f043 031f 	orr.w	r3, r3, #31
 800218e:	7453      	strb	r3, [r2, #17]
	driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	7c93      	ldrb	r3, [r2, #18]
 8002194:	2101      	movs	r1, #1
 8002196:	f361 0303 	bfi	r3, r1, #0, #4
 800219a:	7493      	strb	r3, [r2, #18]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691b      	ldr	r3, [r3, #16]
 80021a0:	461a      	mov	r2, r3
 80021a2:	2110      	movs	r1, #16
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f885 	bl	80022b4 <_ZN7TMC22095writeEhm>

	chopper_config_.bytes = CHOPPER_CONFIG_DEFAULT;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2a      	ldr	r2, [pc, #168]	; (8002258 <_ZN7TMC220922setRegistersToDefaultsEv+0xec>)
 80021ae:	61da      	str	r2, [r3, #28]
	chopper_config_.tbl = TBL_DEFAULT;
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	69d3      	ldr	r3, [r2, #28]
 80021b4:	2102      	movs	r1, #2
 80021b6:	f361 33d0 	bfi	r3, r1, #15, #2
 80021ba:	61d3      	str	r3, [r2, #28]
	chopper_config_.hend = HEND_DEFAULT;
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	8b93      	ldrh	r3, [r2, #28]
 80021c0:	f36f 13ca 	bfc	r3, #7, #4
 80021c4:	8393      	strh	r3, [r2, #28]
	chopper_config_.hstart = HSTART_DEFAULT;
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	7f13      	ldrb	r3, [r2, #28]
 80021ca:	2105      	movs	r1, #5
 80021cc:	f361 1306 	bfi	r3, r1, #4, #3
 80021d0:	7713      	strb	r3, [r2, #28]
	chopper_config_.toff = TOFF_DEFAULT;
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	7f13      	ldrb	r3, [r2, #28]
 80021d6:	2103      	movs	r1, #3
 80021d8:	f361 0303 	bfi	r3, r1, #0, #4
 80021dc:	7713      	strb	r3, [r2, #28]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	461a      	mov	r2, r3
 80021e4:	216c      	movs	r1, #108	; 0x6c
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f000 f864 	bl	80022b4 <_ZN7TMC22095writeEhm>

	pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a1b      	ldr	r2, [pc, #108]	; (800225c <_ZN7TMC220922setRegistersToDefaultsEv+0xf0>)
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f6:	461a      	mov	r2, r3
 80021f8:	2170      	movs	r1, #112	; 0x70
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f85a 	bl	80022b4 <_ZN7TMC22095writeEhm>

	cool_config_.bytes = COOLCONF_DEFAULT;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
	write(ADDRESS_COOLCONF, cool_config_.bytes);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	461a      	mov	r2, r3
 800220c:	2142      	movs	r1, #66	; 0x42
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f850 	bl	80022b4 <_ZN7TMC22095writeEhm>

	write(ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 8002214:	2214      	movs	r2, #20
 8002216:	2111      	movs	r1, #17
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f84b 	bl	80022b4 <_ZN7TMC22095writeEhm>
	write(ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 800221e:	2200      	movs	r2, #0
 8002220:	2113      	movs	r1, #19
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f000 f846 	bl	80022b4 <_ZN7TMC22095writeEhm>
	write(ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 8002228:	2200      	movs	r2, #0
 800222a:	2122      	movs	r1, #34	; 0x22
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f000 f841 	bl	80022b4 <_ZN7TMC22095writeEhm>
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 8002232:	2200      	movs	r2, #0
 8002234:	2114      	movs	r1, #20
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f000 f83c 	bl	80022b4 <_ZN7TMC22095writeEhm>
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 800223c:	2200      	movs	r2, #0
 800223e:	2140      	movs	r1, #64	; 0x40
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f000 f837 	bl	80022b4 <_ZN7TMC22095writeEhm>
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 8002246:	2200      	movs	r2, #0
 8002248:	2142      	movs	r1, #66	; 0x42
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f832 	bl	80022b4 <_ZN7TMC22095writeEhm>
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	10000053 	.word	0x10000053
 800225c:	c10d0024 	.word	0xc10d0024

08002260 <_ZN7TMC220911reverseDataEm>:
	driver_current_.irun = CURRENT_SETTING_MIN;
	driver_current_.ihold = CURRENT_SETTING_MIN;
	writeStoredDriverCurrent();
}

uint32_t TMC2209::reverseData(uint32_t data) {
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	uint32_t reversed_data = 0;
 800226a:	2300      	movs	r3, #0
 800226c:	60fb      	str	r3, [r7, #12]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 800226e:	2300      	movs	r3, #0
 8002270:	72fb      	strb	r3, [r7, #11]
 8002272:	e016      	b.n	80022a2 <_ZN7TMC220911reverseDataEm+0x42>
		right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 8002274:	7afb      	ldrb	r3, [r7, #11]
 8002276:	f1c3 0303 	rsb	r3, r3, #3
 800227a:	b2db      	uxtb	r3, r3
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	72bb      	strb	r3, [r7, #10]
		left_shift = i * BITS_PER_BYTE;
 8002280:	7afb      	ldrb	r3, [r7, #11]
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	727b      	strb	r3, [r7, #9]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 8002286:	7abb      	ldrb	r3, [r7, #10]
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	fa22 f303 	lsr.w	r3, r2, r3
 800228e:	b2da      	uxtb	r2, r3
 8002290:	7a7b      	ldrb	r3, [r7, #9]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4313      	orrs	r3, r2
 800229a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 800229c:	7afb      	ldrb	r3, [r7, #11]
 800229e:	3301      	adds	r3, #1
 80022a0:	72fb      	strb	r3, [r7, #11]
 80022a2:	7afb      	ldrb	r3, [r7, #11]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d9e5      	bls.n	8002274 <_ZN7TMC220911reverseDataEm+0x14>
	}
	return reversed_data;
 80022a8:	68fb      	ldr	r3, [r7, #12]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <_ZN7TMC22095writeEhm>:
	for (uint8_t i = 0; i < datagram_size; ++i) {
		byte = serialRead();
	}*/
}

void TMC2209::write(uint8_t register_address, uint32_t data) {
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	460b      	mov	r3, r1
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 80022ce:	7c3b      	ldrb	r3, [r7, #16]
 80022d0:	2205      	movs	r2, #5
 80022d2:	f362 0303 	bfi	r3, r2, #0, #4
 80022d6:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = serial_address_;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	791b      	ldrb	r3, [r3, #4]
 80022dc:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 80022de:	7afb      	ldrb	r3, [r7, #11]
 80022e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	7cbb      	ldrb	r3, [r7, #18]
 80022e8:	f362 0306 	bfi	r3, r2, #0, #7
 80022ec:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 80022ee:	7cbb      	ldrb	r3, [r7, #18]
 80022f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f4:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data);
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f7ff ffb1 	bl	8002260 <_ZN7TMC220911reverseDataEm>
 80022fe:	4603      	mov	r3, r0
 8002300:	f8c7 3013 	str.w	r3, [r7, #19]
	write_datagram.crc = calculateCrc(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002304:	f107 0310 	add.w	r3, r7, #16
 8002308:	2208      	movs	r2, #8
 800230a:	4619      	mov	r1, r3
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f000 f83a 	bl	8002386 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>
 8002312:	4603      	mov	r3, r0
 8002314:	75fb      	strb	r3, [r7, #23]
	sendDatagramUnidirectional(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 8002316:	f107 0310 	add.w	r3, r7, #16
 800231a:	2208      	movs	r2, #8
 800231c:	4619      	mov	r1, r3
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f880 	bl	8002424 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>
}
 8002324:	bf00      	nop
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <_ZN7TMC220923writeStoredGlobalConfigEv>:
uint8_t TMC2209::holdDelaySettingToPercent(uint8_t hold_delay_setting) {
	uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
	return percent;
}

void TMC2209::writeStoredGlobalConfig() {
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	461a      	mov	r2, r3
 800233a:	2100      	movs	r1, #0
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff ffb9 	bl	80022b4 <_ZN7TMC22095writeEhm>
}
 8002342:	bf00      	nop
 8002344:	3708      	adds	r7, #8
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <_ZN7TMC220924writeStoredChopperConfigEv>:
	if (cool_step_enabled_) {
		write(ADDRESS_COOLCONF, cool_config_.bytes);
	}
}

void TMC2209::writeStoredChopperConfig() {
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	461a      	mov	r2, r3
 8002358:	216c      	movs	r1, #108	; 0x6c
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ffaa 	bl	80022b4 <_ZN7TMC22095writeEhm>
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <_ZN7TMC220920writeStoredPwmConfigEv>:

uint32_t TMC2209::readChopperConfigBytes() {
	return read(ADDRESS_CHOPCONF);
}

void TMC2209::writeStoredPwmConfig() {
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002374:	461a      	mov	r2, r3
 8002376:	2170      	movs	r1, #112	; 0x70
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff ff9b 	bl	80022b4 <_ZN7TMC22095writeEhm>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}

08002386 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 8002386:	b4f0      	push	{r4, r5, r6, r7}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	4613      	mov	r3, r2
 8002392:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8002398:	2300      	movs	r3, #0
 800239a:	757b      	strb	r3, [r7, #21]
 800239c:	e037      	b.n	800240e <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x88>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a4:	7d79      	ldrb	r1, [r7, #21]
 80023a6:	00c9      	lsls	r1, r1, #3
 80023a8:	f1c1 0620 	rsb	r6, r1, #32
 80023ac:	f1a1 0020 	sub.w	r0, r1, #32
 80023b0:	fa22 f401 	lsr.w	r4, r2, r1
 80023b4:	fa03 f606 	lsl.w	r6, r3, r6
 80023b8:	4334      	orrs	r4, r6
 80023ba:	fa23 f000 	lsr.w	r0, r3, r0
 80023be:	4304      	orrs	r4, r0
 80023c0:	fa23 f501 	lsr.w	r5, r3, r1
 80023c4:	4623      	mov	r3, r4
 80023c6:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 80023c8:	2300      	movs	r3, #0
 80023ca:	753b      	strb	r3, [r7, #20]
 80023cc:	e019      	b.n	8002402 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x7c>
			if ((crc >> 7) ^ (byte & 0x01)) {
 80023ce:	7dfb      	ldrb	r3, [r7, #23]
 80023d0:	09db      	lsrs	r3, r3, #7
 80023d2:	b2da      	uxtb	r2, r3
 80023d4:	7dbb      	ldrb	r3, [r7, #22]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	429a      	cmp	r2, r3
 80023de:	d007      	beq.n	80023f0 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x6a>
				crc = (crc << 1) ^ 0x07;
 80023e0:	7dfb      	ldrb	r3, [r7, #23]
 80023e2:	005b      	lsls	r3, r3, #1
 80023e4:	b25b      	sxtb	r3, r3
 80023e6:	f083 0307 	eor.w	r3, r3, #7
 80023ea:	b25b      	sxtb	r3, r3
 80023ec:	75fb      	strb	r3, [r7, #23]
 80023ee:	e002      	b.n	80023f6 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x70>
				crc = crc << 1;
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 80023f6:	7dbb      	ldrb	r3, [r7, #22]
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 80023fc:	7d3b      	ldrb	r3, [r7, #20]
 80023fe:	3301      	adds	r3, #1
 8002400:	753b      	strb	r3, [r7, #20]
 8002402:	7d3b      	ldrb	r3, [r7, #20]
 8002404:	2b07      	cmp	r3, #7
 8002406:	d9e2      	bls.n	80023ce <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x48>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8002408:	7d7b      	ldrb	r3, [r7, #21]
 800240a:	3301      	adds	r3, #1
 800240c:	757b      	strb	r3, [r7, #21]
 800240e:	7d7a      	ldrb	r2, [r7, #21]
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	3b01      	subs	r3, #1
 8002414:	429a      	cmp	r2, r3
 8002416:	dbc2      	blt.n	800239e <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x18>
	return crc;
 8002418:	7dfb      	ldrb	r3, [r7, #23]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bcf0      	pop	{r4, r5, r6, r7}
 8002422:	4770      	bx	lr

08002424 <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagramUnidirectional(Datagram &datagram, uint8_t datagram_size) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	4613      	mov	r3, r2
 8002430:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(tmcuart);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	4618      	mov	r0, r3
 8002438:	f004 f807 	bl	800644a <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(tmcuart, (uint8_t *)(&datagram), datagram_size, HAL_MAX_DELAY);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6898      	ldr	r0, [r3, #8]
 8002440:	79fb      	ldrb	r3, [r7, #7]
 8002442:	b29a      	uxth	r2, r3
 8002444:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	f003 fca6 	bl	8005d9a <HAL_UART_Transmit>
}
 800244e:	bf00      	nop
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4a06      	ldr	r2, [pc, #24]	; (8002480 <vApplicationGetIdleTaskMemory+0x28>)
 8002468:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	4a05      	ldr	r2, [pc, #20]	; (8002484 <vApplicationGetIdleTaskMemory+0x2c>)
 800246e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2280      	movs	r2, #128	; 0x80
 8002474:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002476:	bf00      	nop
 8002478:	3714      	adds	r7, #20
 800247a:	46bd      	mov	sp, r7
 800247c:	bc80      	pop	{r7}
 800247e:	4770      	bx	lr
 8002480:	200001f4 	.word	0x200001f4
 8002484:	20000294 	.word	0x20000294

08002488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002488:	b5b0      	push	{r4, r5, r7, lr}
 800248a:	b0a4      	sub	sp, #144	; 0x90
 800248c:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800248e:	f001 f93b 	bl	8003708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002492:	f000 f899 	bl	80025c8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002496:	f000 fae9 	bl	8002a6c <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 800249a:	f000 f923 	bl	80026e4 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800249e:	f000 f9b9 	bl	8002814 <_ZL12MX_TIM2_Initv>
  MX_SPI1_Init();
 80024a2:	f000 f8e3 	bl	800266c <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 80024a6:	f000 fa85 	bl	80029b4 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 80024aa:	f000 fab1 	bl	8002a10 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 80024ae:	f000 fa19 	bl	80028e4 <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Init(&htim1);
 80024b2:	4837      	ldr	r0, [pc, #220]	; (8002590 <main+0x108>)
 80024b4:	f002 fcde 	bl	8004e74 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim2);
 80024b8:	4836      	ldr	r0, [pc, #216]	; (8002594 <main+0x10c>)
 80024ba:	f002 fcdb 	bl	8004e74 <HAL_TIM_Base_Init>

	arm.SetSettMotors(huart2,htim1, htim2, htim3, Dir1_GPIO_Port, Dir1_Pin,
 80024be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024c2:	930c      	str	r3, [sp, #48]	; 0x30
 80024c4:	4b34      	ldr	r3, [pc, #208]	; (8002598 <main+0x110>)
 80024c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80024c8:	2301      	movs	r3, #1
 80024ca:	930a      	str	r3, [sp, #40]	; 0x28
 80024cc:	4b33      	ldr	r3, [pc, #204]	; (800259c <main+0x114>)
 80024ce:	9309      	str	r3, [sp, #36]	; 0x24
 80024d0:	2320      	movs	r3, #32
 80024d2:	9308      	str	r3, [sp, #32]
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <main+0x114>)
 80024d6:	9307      	str	r3, [sp, #28]
 80024d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024dc:	9306      	str	r3, [sp, #24]
 80024de:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <main+0x110>)
 80024e0:	9305      	str	r3, [sp, #20]
 80024e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024e6:	9304      	str	r3, [sp, #16]
 80024e8:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <main+0x110>)
 80024ea:	9303      	str	r3, [sp, #12]
 80024ec:	2340      	movs	r3, #64	; 0x40
 80024ee:	9302      	str	r3, [sp, #8]
 80024f0:	4b2a      	ldr	r3, [pc, #168]	; (800259c <main+0x114>)
 80024f2:	9301      	str	r3, [sp, #4]
 80024f4:	4b2a      	ldr	r3, [pc, #168]	; (80025a0 <main+0x118>)
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	4b26      	ldr	r3, [pc, #152]	; (8002594 <main+0x10c>)
 80024fa:	4a25      	ldr	r2, [pc, #148]	; (8002590 <main+0x108>)
 80024fc:	4929      	ldr	r1, [pc, #164]	; (80025a4 <main+0x11c>)
 80024fe:	482a      	ldr	r0, [pc, #168]	; (80025a8 <main+0x120>)
 8002500:	f7ff fbfd 	bl	8001cfe <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_t>
			Dir2_GPIO_Port, Dir2_Pin, Dir3_GPIO_Port, Dir3_Pin, En1_GPIO_Port,
			En1_Pin, En2_GPIO_Port, En2_Pin, En3_GPIO_Port, En3_Pin);

	arm.SetSettEncoders(hspi1, CS1_GPIO_Port, CS1_Pin, CS2_GPIO_Port, CS2_Pin,
 8002504:	230e      	movs	r3, #14
 8002506:	9302      	str	r3, [sp, #8]
 8002508:	2302      	movs	r3, #2
 800250a:	9301      	str	r3, [sp, #4]
 800250c:	4b22      	ldr	r3, [pc, #136]	; (8002598 <main+0x110>)
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2301      	movs	r3, #1
 8002512:	4a21      	ldr	r2, [pc, #132]	; (8002598 <main+0x110>)
 8002514:	4925      	ldr	r1, [pc, #148]	; (80025ac <main+0x124>)
 8002516:	4824      	ldr	r0, [pc, #144]	; (80025a8 <main+0x120>)
 8002518:	f7ff fa83 	bl	8001a22 <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <main+0x128>)
 800251e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002522:	461d      	mov	r5, r3
 8002524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002528:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800252c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002530:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f004 faa8 	bl	8006a8c <osThreadCreate>
 800253c:	4603      	mov	r3, r0
 800253e:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <main+0x12c>)
 8002540:	6013      	str	r3, [r2, #0]

  /* definition and creation of myAMT22Task */
  osThreadDef(myAMT22Task, StartAMT22Data, osPriorityIdle, 0, 128);
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <main+0x130>)
 8002544:	f107 0420 	add.w	r4, r7, #32
 8002548:	461d      	mov	r5, r3
 800254a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800254c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800254e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myAMT22TaskHandle = osThreadCreate(osThread(myAMT22Task), NULL);
 8002556:	f107 0320 	add.w	r3, r7, #32
 800255a:	2100      	movs	r1, #0
 800255c:	4618      	mov	r0, r3
 800255e:	f004 fa95 	bl	8006a8c <osThreadCreate>
 8002562:	4603      	mov	r3, r0
 8002564:	4a15      	ldr	r2, [pc, #84]	; (80025bc <main+0x134>)
 8002566:	6013      	str	r3, [r2, #0]

  /* definition and creation of myUARTTask */
  osThreadDef(myUARTTask, StartUARTData, osPriorityIdle, 0, 128);
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <main+0x138>)
 800256a:	1d3c      	adds	r4, r7, #4
 800256c:	461d      	mov	r5, r3
 800256e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002572:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002576:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myUARTTaskHandle = osThreadCreate(osThread(myUARTTask), NULL);
 800257a:	1d3b      	adds	r3, r7, #4
 800257c:	2100      	movs	r1, #0
 800257e:	4618      	mov	r0, r3
 8002580:	f004 fa84 	bl	8006a8c <osThreadCreate>
 8002584:	4603      	mov	r3, r0
 8002586:	4a0f      	ldr	r2, [pc, #60]	; (80025c4 <main+0x13c>)
 8002588:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800258a:	f004 fa78 	bl	8006a7e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 800258e:	e7fe      	b.n	800258e <main+0x106>
 8002590:	200004ec 	.word	0x200004ec
 8002594:	20000534 	.word	0x20000534
 8002598:	40010c00 	.word	0x40010c00
 800259c:	40010800 	.word	0x40010800
 80025a0:	2000057c 	.word	0x2000057c
 80025a4:	2000060c 	.word	0x2000060c
 80025a8:	20000694 	.word	0x20000694
 80025ac:	20000494 	.word	0x20000494
 80025b0:	0800a87c 	.word	0x0800a87c
 80025b4:	20000654 	.word	0x20000654
 80025b8:	0800a8a4 	.word	0x0800a8a4
 80025bc:	20000658 	.word	0x20000658
 80025c0:	0800a8cc 	.word	0x0800a8cc
 80025c4:	2000065c 	.word	0x2000065c

080025c8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b090      	sub	sp, #64	; 0x40
 80025cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80025ce:	f107 0318 	add.w	r3, r7, #24
 80025d2:	2228      	movs	r2, #40	; 0x28
 80025d4:	2100      	movs	r1, #0
 80025d6:	4618      	mov	r0, r3
 80025d8:	f006 f9a5 	bl	8008926 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	2200      	movs	r2, #0
 80025e0:	601a      	str	r2, [r3, #0]
 80025e2:	605a      	str	r2, [r3, #4]
 80025e4:	609a      	str	r2, [r3, #8]
 80025e6:	60da      	str	r2, [r3, #12]
 80025e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025ea:	2301      	movs	r3, #1
 80025ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80025ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80025f4:	2300      	movs	r3, #0
 80025f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80025f8:	2301      	movs	r3, #1
 80025fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025fc:	2302      	movs	r3, #2
 80025fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002600:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002604:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002606:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800260c:	f107 0318 	add.w	r3, r7, #24
 8002610:	4618      	mov	r0, r3
 8002612:	f001 fbf3 	bl	8003dfc <HAL_RCC_OscConfig>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf14      	ite	ne
 800261c:	2301      	movne	r3, #1
 800261e:	2300      	moveq	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 8002626:	f000 fc83 	bl	8002f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800262a:	230f      	movs	r3, #15
 800262c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800262e:	2302      	movs	r3, #2
 8002630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002632:	2300      	movs	r3, #0
 8002634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002636:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800263a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	2102      	movs	r1, #2
 8002644:	4618      	mov	r0, r3
 8002646:	f001 fe5b 	bl	8004300 <HAL_RCC_ClockConfig>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 800265a:	f000 fc69 	bl	8002f30 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800265e:	f001 ff39 	bl	80044d4 <HAL_RCC_EnableCSS>
}
 8002662:	bf00      	nop
 8002664:	3740      	adds	r7, #64	; 0x40
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002670:	4b1a      	ldr	r3, [pc, #104]	; (80026dc <_ZL12MX_SPI1_Initv+0x70>)
 8002672:	4a1b      	ldr	r2, [pc, #108]	; (80026e0 <_ZL12MX_SPI1_Initv+0x74>)
 8002674:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002676:	4b19      	ldr	r3, [pc, #100]	; (80026dc <_ZL12MX_SPI1_Initv+0x70>)
 8002678:	f44f 7282 	mov.w	r2, #260	; 0x104
 800267c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800267e:	4b17      	ldr	r3, [pc, #92]	; (80026dc <_ZL12MX_SPI1_Initv+0x70>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002684:	4b15      	ldr	r3, [pc, #84]	; (80026dc <_ZL12MX_SPI1_Initv+0x70>)
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800268a:	4b14      	ldr	r3, [pc, #80]	; (80026dc <_ZL12MX_SPI1_Initv+0x70>)
 800268c:	2200      	movs	r2, #0
 800268e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <_ZL12MX_SPI1_Initv+0x70>)
 8002692:	2200      	movs	r2, #0
 8002694:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002696:	4b11      	ldr	r3, [pc, #68]	; (80026dc <_ZL12MX_SPI1_Initv+0x70>)
 8002698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800269c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800269e:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <_ZL12MX_SPI1_Initv+0x70>)
 80026a0:	2218      	movs	r2, #24
 80026a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026a4:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <_ZL12MX_SPI1_Initv+0x70>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <_ZL12MX_SPI1_Initv+0x70>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026b0:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <_ZL12MX_SPI1_Initv+0x70>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80026b6:	4b09      	ldr	r3, [pc, #36]	; (80026dc <_ZL12MX_SPI1_Initv+0x70>)
 80026b8:	220a      	movs	r2, #10
 80026ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80026bc:	4807      	ldr	r0, [pc, #28]	; (80026dc <_ZL12MX_SPI1_Initv+0x70>)
 80026be:	f002 f803 	bl	80046c8 <HAL_SPI_Init>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf14      	ite	ne
 80026c8:	2301      	movne	r3, #1
 80026ca:	2300      	moveq	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80026d2:	f000 fc2d 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000494 	.word	0x20000494
 80026e0:	40013000 	.word	0x40013000

080026e4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b092      	sub	sp, #72	; 0x48
 80026e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	605a      	str	r2, [r3, #4]
 80026fe:	609a      	str	r2, [r3, #8]
 8002700:	60da      	str	r2, [r3, #12]
 8002702:	611a      	str	r2, [r3, #16]
 8002704:	615a      	str	r2, [r3, #20]
 8002706:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	2220      	movs	r2, #32
 800270c:	2100      	movs	r1, #0
 800270e:	4618      	mov	r0, r3
 8002710:	f006 f909 	bl	8008926 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002714:	4b3d      	ldr	r3, [pc, #244]	; (800280c <_ZL12MX_TIM1_Initv+0x128>)
 8002716:	4a3e      	ldr	r2, [pc, #248]	; (8002810 <_ZL12MX_TIM1_Initv+0x12c>)
 8002718:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 800271a:	4b3c      	ldr	r3, [pc, #240]	; (800280c <_ZL12MX_TIM1_Initv+0x128>)
 800271c:	2248      	movs	r2, #72	; 0x48
 800271e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002720:	4b3a      	ldr	r3, [pc, #232]	; (800280c <_ZL12MX_TIM1_Initv+0x128>)
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8002726:	4b39      	ldr	r3, [pc, #228]	; (800280c <_ZL12MX_TIM1_Initv+0x128>)
 8002728:	f240 32e7 	movw	r2, #999	; 0x3e7
 800272c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272e:	4b37      	ldr	r3, [pc, #220]	; (800280c <_ZL12MX_TIM1_Initv+0x128>)
 8002730:	2200      	movs	r2, #0
 8002732:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002734:	4b35      	ldr	r3, [pc, #212]	; (800280c <_ZL12MX_TIM1_Initv+0x128>)
 8002736:	2200      	movs	r2, #0
 8002738:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800273a:	4b34      	ldr	r3, [pc, #208]	; (800280c <_ZL12MX_TIM1_Initv+0x128>)
 800273c:	2200      	movs	r2, #0
 800273e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002740:	4832      	ldr	r0, [pc, #200]	; (800280c <_ZL12MX_TIM1_Initv+0x128>)
 8002742:	f002 fc6f 	bl	8005024 <HAL_TIM_PWM_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf14      	ite	ne
 800274c:	2301      	movne	r3, #1
 800274e:	2300      	moveq	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 8002756:	f000 fbeb 	bl	8002f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800275e:	2300      	movs	r3, #0
 8002760:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002762:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002766:	4619      	mov	r1, r3
 8002768:	4828      	ldr	r0, [pc, #160]	; (800280c <_ZL12MX_TIM1_Initv+0x128>)
 800276a:	f003 f9ad 	bl	8005ac8 <HAL_TIMEx_MasterConfigSynchronization>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf14      	ite	ne
 8002774:	2301      	movne	r3, #1
 8002776:	2300      	moveq	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 800277e:	f000 fbd7 	bl	8002f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002782:	2360      	movs	r3, #96	; 0x60
 8002784:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002786:	2300      	movs	r3, #0
 8002788:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800278a:	2300      	movs	r3, #0
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800278e:	2300      	movs	r3, #0
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002792:	2300      	movs	r3, #0
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002796:	2300      	movs	r3, #0
 8002798:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800279a:	2300      	movs	r3, #0
 800279c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800279e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027a2:	2200      	movs	r2, #0
 80027a4:	4619      	mov	r1, r3
 80027a6:	4819      	ldr	r0, [pc, #100]	; (800280c <_ZL12MX_TIM1_Initv+0x128>)
 80027a8:	f002 fe9a 	bl	80054e0 <HAL_TIM_PWM_ConfigChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	bf14      	ite	ne
 80027b2:	2301      	movne	r3, #1
 80027b4:	2300      	moveq	r3, #0
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 80027bc:	f000 fbb8 	bl	8002f30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027d8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	480a      	ldr	r0, [pc, #40]	; (800280c <_ZL12MX_TIM1_Initv+0x128>)
 80027e4:	f003 f9ce 	bl	8005b84 <HAL_TIMEx_ConfigBreakDeadTime>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	bf14      	ite	ne
 80027ee:	2301      	movne	r3, #1
 80027f0:	2300      	moveq	r3, #0
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 80027f8:	f000 fb9a 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027fc:	4803      	ldr	r0, [pc, #12]	; (800280c <_ZL12MX_TIM1_Initv+0x128>)
 80027fe:	f000 fcbb 	bl	8003178 <HAL_TIM_MspPostInit>

}
 8002802:	bf00      	nop
 8002804:	3748      	adds	r7, #72	; 0x48
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	200004ec 	.word	0x200004ec
 8002810:	40012c00 	.word	0x40012c00

08002814 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b08a      	sub	sp, #40	; 0x28
 8002818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800281a:	f107 0320 	add.w	r3, r7, #32
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002824:	1d3b      	adds	r3, r7, #4
 8002826:	2200      	movs	r2, #0
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	609a      	str	r2, [r3, #8]
 800282e:	60da      	str	r2, [r3, #12]
 8002830:	611a      	str	r2, [r3, #16]
 8002832:	615a      	str	r2, [r3, #20]
 8002834:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002836:	4b2a      	ldr	r3, [pc, #168]	; (80028e0 <_ZL12MX_TIM2_Initv+0xcc>)
 8002838:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800283c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 800283e:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <_ZL12MX_TIM2_Initv+0xcc>)
 8002840:	2248      	movs	r2, #72	; 0x48
 8002842:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002844:	4b26      	ldr	r3, [pc, #152]	; (80028e0 <_ZL12MX_TIM2_Initv+0xcc>)
 8002846:	2200      	movs	r2, #0
 8002848:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800284a:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <_ZL12MX_TIM2_Initv+0xcc>)
 800284c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002850:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <_ZL12MX_TIM2_Initv+0xcc>)
 8002854:	2200      	movs	r2, #0
 8002856:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002858:	4b21      	ldr	r3, [pc, #132]	; (80028e0 <_ZL12MX_TIM2_Initv+0xcc>)
 800285a:	2200      	movs	r2, #0
 800285c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800285e:	4820      	ldr	r0, [pc, #128]	; (80028e0 <_ZL12MX_TIM2_Initv+0xcc>)
 8002860:	f002 fbe0 	bl	8005024 <HAL_TIM_PWM_Init>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	bf14      	ite	ne
 800286a:	2301      	movne	r3, #1
 800286c:	2300      	moveq	r3, #0
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 8002874:	f000 fb5c 	bl	8002f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002878:	2300      	movs	r3, #0
 800287a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800287c:	2300      	movs	r3, #0
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002880:	f107 0320 	add.w	r3, r7, #32
 8002884:	4619      	mov	r1, r3
 8002886:	4816      	ldr	r0, [pc, #88]	; (80028e0 <_ZL12MX_TIM2_Initv+0xcc>)
 8002888:	f003 f91e 	bl	8005ac8 <HAL_TIMEx_MasterConfigSynchronization>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	bf14      	ite	ne
 8002892:	2301      	movne	r3, #1
 8002894:	2300      	moveq	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 800289c:	f000 fb48 	bl	8002f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028a0:	2360      	movs	r3, #96	; 0x60
 80028a2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ac:	2300      	movs	r3, #0
 80028ae:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80028b0:	1d3b      	adds	r3, r7, #4
 80028b2:	2204      	movs	r2, #4
 80028b4:	4619      	mov	r1, r3
 80028b6:	480a      	ldr	r0, [pc, #40]	; (80028e0 <_ZL12MX_TIM2_Initv+0xcc>)
 80028b8:	f002 fe12 	bl	80054e0 <HAL_TIM_PWM_ConfigChannel>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf14      	ite	ne
 80028c2:	2301      	movne	r3, #1
 80028c4:	2300      	moveq	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 80028cc:	f000 fb30 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028d0:	4803      	ldr	r0, [pc, #12]	; (80028e0 <_ZL12MX_TIM2_Initv+0xcc>)
 80028d2:	f000 fc51 	bl	8003178 <HAL_TIM_MspPostInit>

}
 80028d6:	bf00      	nop
 80028d8:	3728      	adds	r7, #40	; 0x28
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	20000534 	.word	0x20000534

080028e4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08a      	sub	sp, #40	; 0x28
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028ea:	f107 0320 	add.w	r3, r7, #32
 80028ee:	2200      	movs	r2, #0
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028f4:	1d3b      	adds	r3, r7, #4
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
 80028fa:	605a      	str	r2, [r3, #4]
 80028fc:	609a      	str	r2, [r3, #8]
 80028fe:	60da      	str	r2, [r3, #12]
 8002900:	611a      	str	r2, [r3, #16]
 8002902:	615a      	str	r2, [r3, #20]
 8002904:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002906:	4b29      	ldr	r3, [pc, #164]	; (80029ac <_ZL12MX_TIM3_Initv+0xc8>)
 8002908:	4a29      	ldr	r2, [pc, #164]	; (80029b0 <_ZL12MX_TIM3_Initv+0xcc>)
 800290a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 800290c:	4b27      	ldr	r3, [pc, #156]	; (80029ac <_ZL12MX_TIM3_Initv+0xc8>)
 800290e:	2248      	movs	r2, #72	; 0x48
 8002910:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002912:	4b26      	ldr	r3, [pc, #152]	; (80029ac <_ZL12MX_TIM3_Initv+0xc8>)
 8002914:	2200      	movs	r2, #0
 8002916:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8002918:	4b24      	ldr	r3, [pc, #144]	; (80029ac <_ZL12MX_TIM3_Initv+0xc8>)
 800291a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800291e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <_ZL12MX_TIM3_Initv+0xc8>)
 8002922:	2200      	movs	r2, #0
 8002924:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002926:	4b21      	ldr	r3, [pc, #132]	; (80029ac <_ZL12MX_TIM3_Initv+0xc8>)
 8002928:	2200      	movs	r2, #0
 800292a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800292c:	481f      	ldr	r0, [pc, #124]	; (80029ac <_ZL12MX_TIM3_Initv+0xc8>)
 800292e:	f002 fb79 	bl	8005024 <HAL_TIM_PWM_Init>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 8002942:	f000 faf5 	bl	8002f30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800294e:	f107 0320 	add.w	r3, r7, #32
 8002952:	4619      	mov	r1, r3
 8002954:	4815      	ldr	r0, [pc, #84]	; (80029ac <_ZL12MX_TIM3_Initv+0xc8>)
 8002956:	f003 f8b7 	bl	8005ac8 <HAL_TIMEx_MasterConfigSynchronization>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 800296a:	f000 fae1 	bl	8002f30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800296e:	2360      	movs	r3, #96	; 0x60
 8002970:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002972:	2300      	movs	r3, #0
 8002974:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	2204      	movs	r2, #4
 8002982:	4619      	mov	r1, r3
 8002984:	4809      	ldr	r0, [pc, #36]	; (80029ac <_ZL12MX_TIM3_Initv+0xc8>)
 8002986:	f002 fdab 	bl	80054e0 <HAL_TIM_PWM_ConfigChannel>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	bf14      	ite	ne
 8002990:	2301      	movne	r3, #1
 8002992:	2300      	moveq	r3, #0
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 800299a:	f000 fac9 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800299e:	4803      	ldr	r0, [pc, #12]	; (80029ac <_ZL12MX_TIM3_Initv+0xc8>)
 80029a0:	f000 fbea 	bl	8003178 <HAL_TIM_MspPostInit>

}
 80029a4:	bf00      	nop
 80029a6:	3728      	adds	r7, #40	; 0x28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	2000057c 	.word	0x2000057c
 80029b0:	40000400 	.word	0x40000400

080029b4 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80029b8:	4b13      	ldr	r3, [pc, #76]	; (8002a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80029ba:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <_ZL19MX_USART1_UART_Initv+0x58>)
 80029bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80029be:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80029c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80029c6:	4b10      	ldr	r3, [pc, #64]	; (8002a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80029cc:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80029da:	220c      	movs	r2, #12
 80029dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e4:	4b08      	ldr	r3, [pc, #32]	; (8002a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80029ea:	4807      	ldr	r0, [pc, #28]	; (8002a08 <_ZL19MX_USART1_UART_Initv+0x54>)
 80029ec:	f003 f92d 	bl	8005c4a <HAL_UART_Init>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	bf14      	ite	ne
 80029f6:	2301      	movne	r3, #1
 80029f8:	2300      	moveq	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002a00:	f000 fa96 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	200005c4 	.word	0x200005c4
 8002a0c:	40013800 	.word	0x40013800

08002a10 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
//
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a16:	4a14      	ldr	r2, [pc, #80]	; (8002a68 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002a18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002a1a:	4b12      	ldr	r3, [pc, #72]	; (8002a64 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002a2e:	4b0d      	ldr	r3, [pc, #52]	; (8002a64 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a36:	220c      	movs	r2, #12
 8002a38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002a46:	4807      	ldr	r0, [pc, #28]	; (8002a64 <_ZL19MX_USART2_UART_Initv+0x54>)
 8002a48:	f003 f94f 	bl	8005cea <HAL_HalfDuplex_Init>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	bf14      	ite	ne
 8002a52:	2301      	movne	r3, #1
 8002a54:	2300      	moveq	r3, #0
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002a5c:	f000 fa68 	bl	8002f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
//
  /* USER CODE END USART2_Init 2 */

}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	2000060c 	.word	0x2000060c
 8002a68:	40004400 	.word	0x40004400

08002a6c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a72:	f107 0310 	add.w	r3, r7, #16
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
 8002a7c:	609a      	str	r2, [r3, #8]
 8002a7e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a80:	4b3f      	ldr	r3, [pc, #252]	; (8002b80 <_ZL12MX_GPIO_Initv+0x114>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	4a3e      	ldr	r2, [pc, #248]	; (8002b80 <_ZL12MX_GPIO_Initv+0x114>)
 8002a86:	f043 0310 	orr.w	r3, r3, #16
 8002a8a:	6193      	str	r3, [r2, #24]
 8002a8c:	4b3c      	ldr	r3, [pc, #240]	; (8002b80 <_ZL12MX_GPIO_Initv+0x114>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f003 0310 	and.w	r3, r3, #16
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a98:	4b39      	ldr	r3, [pc, #228]	; (8002b80 <_ZL12MX_GPIO_Initv+0x114>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	4a38      	ldr	r2, [pc, #224]	; (8002b80 <_ZL12MX_GPIO_Initv+0x114>)
 8002a9e:	f043 0320 	orr.w	r3, r3, #32
 8002aa2:	6193      	str	r3, [r2, #24]
 8002aa4:	4b36      	ldr	r3, [pc, #216]	; (8002b80 <_ZL12MX_GPIO_Initv+0x114>)
 8002aa6:	699b      	ldr	r3, [r3, #24]
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab0:	4b33      	ldr	r3, [pc, #204]	; (8002b80 <_ZL12MX_GPIO_Initv+0x114>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	4a32      	ldr	r2, [pc, #200]	; (8002b80 <_ZL12MX_GPIO_Initv+0x114>)
 8002ab6:	f043 0304 	orr.w	r3, r3, #4
 8002aba:	6193      	str	r3, [r2, #24]
 8002abc:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <_ZL12MX_GPIO_Initv+0x114>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ac8:	4b2d      	ldr	r3, [pc, #180]	; (8002b80 <_ZL12MX_GPIO_Initv+0x114>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	4a2c      	ldr	r2, [pc, #176]	; (8002b80 <_ZL12MX_GPIO_Initv+0x114>)
 8002ace:	f043 0308 	orr.w	r3, r3, #8
 8002ad2:	6193      	str	r3, [r2, #24]
 8002ad4:	4b2a      	ldr	r3, [pc, #168]	; (8002b80 <_ZL12MX_GPIO_Initv+0x114>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	603b      	str	r3, [r7, #0]
 8002ade:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002ae6:	4827      	ldr	r0, [pc, #156]	; (8002b84 <_ZL12MX_GPIO_Initv+0x118>)
 8002ae8:	f001 f956 	bl	8003d98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, En2_Pin|En1_Pin|Dir1_Pin|EndCap4_Pin
 8002aec:	2200      	movs	r2, #0
 8002aee:	f649 0161 	movw	r1, #39009	; 0x9861
 8002af2:	4825      	ldr	r0, [pc, #148]	; (8002b88 <_ZL12MX_GPIO_Initv+0x11c>)
 8002af4:	f001 f950 	bl	8003d98 <HAL_GPIO_WritePin>
                          |Buser_Pin|Reserved_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS1_Pin|CS2_Pin|Dir2_Pin|Led1_Pin
 8002af8:	2200      	movs	r2, #0
 8002afa:	f64d 71c3 	movw	r1, #57283	; 0xdfc3
 8002afe:	4823      	ldr	r0, [pc, #140]	; (8002b8c <_ZL12MX_GPIO_Initv+0x120>)
 8002b00:	f001 f94a 	bl	8003d98 <HAL_GPIO_WritePin>
                          |EndCap1_Pin|EndCap2_Pin|S1_Pin|S2_Pin
                          |EndCap3_Pin|En3_Pin|Dir3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8002b04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b12:	2302      	movs	r3, #2
 8002b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8002b16:	f107 0310 	add.w	r3, r7, #16
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4819      	ldr	r0, [pc, #100]	; (8002b84 <_ZL12MX_GPIO_Initv+0x118>)
 8002b1e:	f000 ffb7 	bl	8003a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : En2_Pin En1_Pin Dir1_Pin EndCap4_Pin
                           Buser_Pin Reserved_Pin */
  GPIO_InitStruct.Pin = En2_Pin|En1_Pin|Dir1_Pin|EndCap4_Pin
 8002b22:	f649 0361 	movw	r3, #39009	; 0x9861
 8002b26:	613b      	str	r3, [r7, #16]
                          |Buser_Pin|Reserved_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b30:	2302      	movs	r3, #2
 8002b32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b34:	f107 0310 	add.w	r3, r7, #16
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4813      	ldr	r0, [pc, #76]	; (8002b88 <_ZL12MX_GPIO_Initv+0x11c>)
 8002b3c:	f000 ffa8 	bl	8003a90 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002b40:	2310      	movs	r3, #16
 8002b42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b44:	2300      	movs	r3, #0
 8002b46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002b4c:	f107 0310 	add.w	r3, r7, #16
 8002b50:	4619      	mov	r1, r3
 8002b52:	480d      	ldr	r0, [pc, #52]	; (8002b88 <_ZL12MX_GPIO_Initv+0x11c>)
 8002b54:	f000 ff9c 	bl	8003a90 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS2_Pin Dir2_Pin Led1_Pin
                           EndCap1_Pin EndCap2_Pin S1_Pin S2_Pin
                           EndCap3_Pin En3_Pin Dir3_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|Dir2_Pin|Led1_Pin
 8002b58:	f64d 73c3 	movw	r3, #57283	; 0xdfc3
 8002b5c:	613b      	str	r3, [r7, #16]
                          |EndCap1_Pin|EndCap2_Pin|S1_Pin|S2_Pin
                          |EndCap3_Pin|En3_Pin|Dir3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2302      	movs	r3, #2
 8002b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b6a:	f107 0310 	add.w	r3, r7, #16
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4806      	ldr	r0, [pc, #24]	; (8002b8c <_ZL12MX_GPIO_Initv+0x120>)
 8002b72:	f000 ff8d 	bl	8003a90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b76:	bf00      	nop
 8002b78:	3720      	adds	r7, #32
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40021000 	.word	0x40021000
 8002b84:	40011000 	.word	0x40011000
 8002b88:	40010800 	.word	0x40010800
 8002b8c:	40010c00 	.word	0x40010c00

08002b90 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	if (huart == &huart1) {
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_UART_RxCpltCallback+0x80>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d12e      	bne.n	8002bfe <HAL_UART_RxCpltCallback+0x6e>
//		if(!strcmp(rx_buffer,"TEXT")) {
//		}

//		uint8_t data[] = { '\\', 0x8f, 0xf8, 'B', 'q', '}', 0x16, 'C', 1, 1, 0, 0 };
		memcpy(un.bytes, rx_buffer, sizeof(rx_buffer));
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <HAL_UART_RxCpltCallback+0x84>)
 8002ba2:	4a1d      	ldr	r2, [pc, #116]	; (8002c18 <HAL_UART_RxCpltCallback+0x88>)
 8002ba4:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ba6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		switch (un.params.hold) {
 8002baa:	4b1a      	ldr	r3, [pc, #104]	; (8002c14 <HAL_UART_RxCpltCallback+0x84>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	2b4b      	cmp	r3, #75	; 0x4b
 8002bb0:	d018      	beq.n	8002be4 <HAL_UART_RxCpltCallback+0x54>
 8002bb2:	2b4b      	cmp	r3, #75	; 0x4b
 8002bb4:	dc19      	bgt.n	8002bea <HAL_UART_RxCpltCallback+0x5a>
 8002bb6:	2b32      	cmp	r3, #50	; 0x32
 8002bb8:	d010      	beq.n	8002bdc <HAL_UART_RxCpltCallback+0x4c>
 8002bba:	2b32      	cmp	r3, #50	; 0x32
 8002bbc:	dc15      	bgt.n	8002bea <HAL_UART_RxCpltCallback+0x5a>
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	dc02      	bgt.n	8002bc8 <HAL_UART_RxCpltCallback+0x38>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	da03      	bge.n	8002bce <HAL_UART_RxCpltCallback+0x3e>
 8002bc6:	e010      	b.n	8002bea <HAL_UART_RxCpltCallback+0x5a>
 8002bc8:	2b19      	cmp	r3, #25
 8002bca:	d004      	beq.n	8002bd6 <HAL_UART_RxCpltCallback+0x46>
 8002bcc:	e00d      	b.n	8002bea <HAL_UART_RxCpltCallback+0x5a>
		case 0:
		case 1:
			startFirstMove = true;
 8002bce:	4b13      	ldr	r3, [pc, #76]	; (8002c1c <HAL_UART_RxCpltCallback+0x8c>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	701a      	strb	r2, [r3, #0]
			break;
 8002bd4:	e009      	b.n	8002bea <HAL_UART_RxCpltCallback+0x5a>
		case 25:
			stopBeforeReboot = true;
 8002bd6:	4b12      	ldr	r3, [pc, #72]	; (8002c20 <HAL_UART_RxCpltCallback+0x90>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
		case 50:
			sendDataFlag = true;
 8002bdc:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_UART_RxCpltCallback+0x94>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
			break;
 8002be2:	e002      	b.n	8002bea <HAL_UART_RxCpltCallback+0x5a>
		case 75:
			setZeroFlag = true;
 8002be4:	4b10      	ldr	r3, [pc, #64]	; (8002c28 <HAL_UART_RxCpltCallback+0x98>)
 8002be6:	2201      	movs	r2, #1
 8002be8:	701a      	strb	r2, [r3, #0]
		}
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002bea:	220c      	movs	r2, #12
 8002bec:	2100      	movs	r1, #0
 8002bee:	480a      	ldr	r0, [pc, #40]	; (8002c18 <HAL_UART_RxCpltCallback+0x88>)
 8002bf0:	f005 fe99 	bl	8008926 <memset>
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8002bf4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002bf8:	480c      	ldr	r0, [pc, #48]	; (8002c2c <HAL_UART_RxCpltCallback+0x9c>)
 8002bfa:	f001 f8e5 	bl	8003dc8 <HAL_GPIO_TogglePin>
	}
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8002bfe:	220c      	movs	r2, #12
 8002c00:	4905      	ldr	r1, [pc, #20]	; (8002c18 <HAL_UART_RxCpltCallback+0x88>)
 8002c02:	4803      	ldr	r0, [pc, #12]	; (8002c10 <HAL_UART_RxCpltCallback+0x80>)
 8002c04:	f003 f94c 	bl	8005ea0 <HAL_UART_Receive_IT>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	200005c4 	.word	0x200005c4
 8002c14:	20000674 	.word	0x20000674
 8002c18:	20000660 	.word	0x20000660
 8002c1c:	2000066c 	.word	0x2000066c
 8002c20:	2000066e 	.word	0x2000066e
 8002c24:	2000066d 	.word	0x2000066d
 8002c28:	2000066f 	.word	0x2000066f
 8002c2c:	40011000 	.word	0x40011000

08002c30 <_Z16StartDefaultTaskPKv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	arm.setPrintState(false);
 8002c38:	2100      	movs	r1, #0
 8002c3a:	4812      	ldr	r0, [pc, #72]	; (8002c84 <_Z16StartDefaultTaskPKv+0x54>)
 8002c3c:	f7fe fea8 	bl	8001990 <_ZN7RoboArm13setPrintStateEb>
	/* Infinite loop */
	for (;;) {
		if (startFirstMove) {
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <_Z16StartDefaultTaskPKv+0x58>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00a      	beq.n	8002c5e <_Z16StartDefaultTaskPKv+0x2e>
			startFirstMove = false;
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <_Z16StartDefaultTaskPKv+0x58>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	701a      	strb	r2, [r3, #0]
//			float angle = arm.ShiftZeroInputAng(un.params.ang);
//			uint16_t distance = arm.ShiftZeroInputLin(un.params.lin);
//			arm.Move2Motors(angle, distance);
			arm.Move2Motors(un.params.ang, un.params.lin);
 8002c4e:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <_Z16StartDefaultTaskPKv+0x5c>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	4a0e      	ldr	r2, [pc, #56]	; (8002c8c <_Z16StartDefaultTaskPKv+0x5c>)
 8002c54:	6812      	ldr	r2, [r2, #0]
 8002c56:	4619      	mov	r1, r3
 8002c58:	480a      	ldr	r0, [pc, #40]	; (8002c84 <_Z16StartDefaultTaskPKv+0x54>)
 8002c5a:	f7fe fd15 	bl	8001688 <_ZN7RoboArm11Move2MotorsEff>
//			arm.Move2MotorsSimu(un.params.ang, un.params.lin);
//			arm.Move2MotorsSimu(recAngleF, recDist);
			//steppingyakkazavmaxim(2000, 230);
		}

		if (timerFT1 && timerFT2) {
 8002c5e:	4b0c      	ldr	r3, [pc, #48]	; (8002c90 <_Z16StartDefaultTaskPKv+0x60>)
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d009      	beq.n	8002c7a <_Z16StartDefaultTaskPKv+0x4a>
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <_Z16StartDefaultTaskPKv+0x64>)
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d005      	beq.n	8002c7a <_Z16StartDefaultTaskPKv+0x4a>

			timerFT1 = false;
 8002c6e:	4b08      	ldr	r3, [pc, #32]	; (8002c90 <_Z16StartDefaultTaskPKv+0x60>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 8002c74:	4b07      	ldr	r3, [pc, #28]	; (8002c94 <_Z16StartDefaultTaskPKv+0x64>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]

		//	arm.correctPosition();

		}

		osDelay(1);
 8002c7a:	2001      	movs	r0, #1
 8002c7c:	f003 ff52 	bl	8006b24 <osDelay>
		if (startFirstMove) {
 8002c80:	e7de      	b.n	8002c40 <_Z16StartDefaultTaskPKv+0x10>
 8002c82:	bf00      	nop
 8002c84:	20000694 	.word	0x20000694
 8002c88:	2000066c 	.word	0x2000066c
 8002c8c:	20000674 	.word	0x20000674
 8002c90:	20000670 	.word	0x20000670
 8002c94:	20000671 	.word	0x20000671

08002c98 <_Z14StartAMT22DataPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAMT22Data */
void StartAMT22Data(void const * argument)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
//
//		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str),
//				HAL_MAX_DELAY);


		osDelay(1000);
 8002ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ca4:	f003 ff3e 	bl	8006b24 <osDelay>
 8002ca8:	e7fa      	b.n	8002ca0 <_Z14StartAMT22DataPKv+0x8>
	...

08002cac <_Z13StartUARTDataPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUARTData */
void StartUARTData(void const * argument)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08a      	sub	sp, #40	; 0x28
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTData */
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8002cb4:	220c      	movs	r2, #12
 8002cb6:	495f      	ldr	r1, [pc, #380]	; (8002e34 <_Z13StartUARTDataPKv+0x188>)
 8002cb8:	485f      	ldr	r0, [pc, #380]	; (8002e38 <_Z13StartUARTDataPKv+0x18c>)
 8002cba:	f003 f8f1 	bl	8005ea0 <HAL_UART_Receive_IT>
	uint32_t posnowT_1, posnowT_2;
//	float angleT = 0;
//	uint32_t linearDist = 0;
//	flagReadEnc = 1;
//	uint32_t distPmm = 0;
	arm.setPrintState(true);
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	485e      	ldr	r0, [pc, #376]	; (8002e3c <_Z13StartUARTDataPKv+0x190>)
 8002cc2:	f7fe fe65 	bl	8001990 <_ZN7RoboArm13setPrintStateEb>
	/* Infinite loop */
	for (;;) {

		if (arm.getPrintState() && sendDataFlag) {
 8002cc6:	485d      	ldr	r0, [pc, #372]	; (8002e3c <_Z13StartUARTDataPKv+0x190>)
 8002cc8:	f7fe fe7a 	bl	80019c0 <_ZN7RoboArm13getPrintStateEv>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d005      	beq.n	8002cde <_Z13StartUARTDataPKv+0x32>
 8002cd2:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <_Z13StartUARTDataPKv+0x194>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d001      	beq.n	8002cde <_Z13StartUARTDataPKv+0x32>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <_Z13StartUARTDataPKv+0x34>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d06c      	beq.n	8002dbe <_Z13StartUARTDataPKv+0x112>
			sendDataFlag = false;
 8002ce4:	4b56      	ldr	r3, [pc, #344]	; (8002e40 <_Z13StartUARTDataPKv+0x194>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]

			int attempts = 0;
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]

			posnowT_1 = arm.GetPosEncoders(1);
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4852      	ldr	r0, [pc, #328]	; (8002e3c <_Z13StartUARTDataPKv+0x190>)
 8002cf2:	f7fe fecc 	bl	8001a8e <_ZN7RoboArm14GetPosEncodersEh>
 8002cf6:	6278      	str	r0, [r7, #36]	; 0x24
//			//if the position returned was 0xFFFF we know that there was an error calculating the checksum
			//make 3 attempts for position. we will pre-increment attempts because we'll use the number later and want an accurate count
			while (posnowT_1 == 0xFFFF && ++attempts < 3)
 8002cf8:	e004      	b.n	8002d04 <_Z13StartUARTDataPKv+0x58>
				posnowT_1 = arm.GetPosEncoders(1); //try again
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	484f      	ldr	r0, [pc, #316]	; (8002e3c <_Z13StartUARTDataPKv+0x190>)
 8002cfe:	f7fe fec6 	bl	8001a8e <_ZN7RoboArm14GetPosEncodersEh>
 8002d02:	6278      	str	r0, [r7, #36]	; 0x24
			while (posnowT_1 == 0xFFFF && ++attempts < 3)
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d107      	bne.n	8002d1e <_Z13StartUARTDataPKv+0x72>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	dc01      	bgt.n	8002d1e <_Z13StartUARTDataPKv+0x72>
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <_Z13StartUARTDataPKv+0x74>
 8002d1e:	2300      	movs	r3, #0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1ea      	bne.n	8002cfa <_Z13StartUARTDataPKv+0x4e>

//			float ang = posnowT_1*360/16384;
			float ang_actual = arm.GetAngleEncoders(posnowT_1);
 8002d24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d26:	4845      	ldr	r0, [pc, #276]	; (8002e3c <_Z13StartUARTDataPKv+0x190>)
 8002d28:	f7fe fe9e 	bl	8001a68 <_ZN7RoboArm16GetAngleEncodersEm>
 8002d2c:	61b8      	str	r0, [r7, #24]
			float ang = arm.ShiftZeroOutputAng(ang_actual);
 8002d2e:	69b9      	ldr	r1, [r7, #24]
 8002d30:	4842      	ldr	r0, [pc, #264]	; (8002e3c <_Z13StartUARTDataPKv+0x190>)
 8002d32:	f7fe ff9d 	bl	8001c70 <_ZN7RoboArm18ShiftZeroOutputAngEf>
 8002d36:	6178      	str	r0, [r7, #20]

			attempts = 0;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61fb      	str	r3, [r7, #28]
//			un_send.params.ang = angleT;

			posnowT_2 = arm.GetPosEncoders(2);
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	483f      	ldr	r0, [pc, #252]	; (8002e3c <_Z13StartUARTDataPKv+0x190>)
 8002d40:	f7fe fea5 	bl	8001a8e <_ZN7RoboArm14GetPosEncodersEh>
 8002d44:	6238      	str	r0, [r7, #32]
			while (posnowT_2 == 0xFFFF && ++attempts < 3)
 8002d46:	e004      	b.n	8002d52 <_Z13StartUARTDataPKv+0xa6>
				posnowT_2 = arm.GetPosEncoders(2); //try again
 8002d48:	2102      	movs	r1, #2
 8002d4a:	483c      	ldr	r0, [pc, #240]	; (8002e3c <_Z13StartUARTDataPKv+0x190>)
 8002d4c:	f7fe fe9f 	bl	8001a8e <_ZN7RoboArm14GetPosEncodersEh>
 8002d50:	6238      	str	r0, [r7, #32]
			while (posnowT_2 == 0xFFFF && ++attempts < 3)
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d107      	bne.n	8002d6c <_Z13StartUARTDataPKv+0xc0>
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	dc01      	bgt.n	8002d6c <_Z13StartUARTDataPKv+0xc0>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e000      	b.n	8002d6e <_Z13StartUARTDataPKv+0xc2>
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d1ea      	bne.n	8002d48 <_Z13StartUARTDataPKv+0x9c>

			float ang_pos = arm.GetAngleEncoders(posnowT_2);
 8002d72:	6a39      	ldr	r1, [r7, #32]
 8002d74:	4831      	ldr	r0, [pc, #196]	; (8002e3c <_Z13StartUARTDataPKv+0x190>)
 8002d76:	f7fe fe77 	bl	8001a68 <_ZN7RoboArm16GetAngleEncodersEm>
 8002d7a:	6138      	str	r0, [r7, #16]
			float pos_actual = ang_pos * arm.distMax / 360.0;
 8002d7c:	4b2f      	ldr	r3, [pc, #188]	; (8002e3c <_Z13StartUARTDataPKv+0x190>)
 8002d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d80:	6939      	ldr	r1, [r7, #16]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fd ffde 	bl	8000d44 <__aeabi_fmul>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	492e      	ldr	r1, [pc, #184]	; (8002e44 <_Z13StartUARTDataPKv+0x198>)
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fe f88d 	bl	8000eac <__aeabi_fdiv>
 8002d92:	4603      	mov	r3, r0
 8002d94:	60fb      	str	r3, [r7, #12]
			float pos = arm.ShiftZeroOutputLin(pos_actual);
 8002d96:	68f9      	ldr	r1, [r7, #12]
 8002d98:	4828      	ldr	r0, [pc, #160]	; (8002e3c <_Z13StartUARTDataPKv+0x190>)
 8002d9a:	f7fe ff8d 	bl	8001cb8 <_ZN7RoboArm18ShiftZeroOutputLinEf>
 8002d9e:	60b8      	str	r0, [r7, #8]
//					* (6.45 / 360);
//			uint32_t mils = distPsteps / arm.linearStepsMil;
//
//			un_send.params.lin = mils;
//			un_send.params.hold = 0;
			un_send.params.lin = pos;
 8002da0:	4a29      	ldr	r2, [pc, #164]	; (8002e48 <_Z13StartUARTDataPKv+0x19c>)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	6013      	str	r3, [r2, #0]
			un_send.params.ang = ang;
 8002da6:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <_Z13StartUARTDataPKv+0x19c>)
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	6053      	str	r3, [r2, #4]
			un_send.params.hold = 0;
 8002dac:	4b26      	ldr	r3, [pc, #152]	; (8002e48 <_Z13StartUARTDataPKv+0x19c>)
 8002dae:	2200      	movs	r2, #0
 8002db0:	609a      	str	r2, [r3, #8]
//					0x09,0x0a,0x0b,0x0c};
//
//			size_t s = sizeof(un_send);

//			sprintf(str, "%.2f:", un_send.params.ang);//, send_params.lin, 100);
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002db2:	230c      	movs	r3, #12
 8002db4:	220c      	movs	r2, #12
 8002db6:	4924      	ldr	r1, [pc, #144]	; (8002e48 <_Z13StartUARTDataPKv+0x19c>)
 8002db8:	481f      	ldr	r0, [pc, #124]	; (8002e38 <_Z13StartUARTDataPKv+0x18c>)
 8002dba:	f002 ffee 	bl	8005d9a <HAL_UART_Transmit>
//			HAL_UART_Transmit(&huart1, (uint8_t*)str, sizeof(str), 12);
//			sendDataFlag = false;

		}

		if (stopBeforeReboot) {
 8002dbe:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <_Z13StartUARTDataPKv+0x1a0>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d016      	beq.n	8002df4 <_Z13StartUARTDataPKv+0x148>
			stopBeforeReboot = false;
 8002dc6:	4b21      	ldr	r3, [pc, #132]	; (8002e4c <_Z13StartUARTDataPKv+0x1a0>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
			arm.EmergencyStop();
 8002dcc:	481b      	ldr	r0, [pc, #108]	; (8002e3c <_Z13StartUARTDataPKv+0x190>)
 8002dce:	f7fe fbb5 	bl	800153c <_ZN7RoboArm13EmergencyStopEv>
			un_send.params.lin = 0;
 8002dd2:	4b1d      	ldr	r3, [pc, #116]	; (8002e48 <_Z13StartUARTDataPKv+0x19c>)
 8002dd4:	f04f 0200 	mov.w	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002dda:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <_Z13StartUARTDataPKv+0x19c>)
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	605a      	str	r2, [r3, #4]
			un_send.params.hold = 10;
 8002de2:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <_Z13StartUARTDataPKv+0x19c>)
 8002de4:	220a      	movs	r2, #10
 8002de6:	609a      	str	r2, [r3, #8]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002de8:	230c      	movs	r3, #12
 8002dea:	220c      	movs	r2, #12
 8002dec:	4916      	ldr	r1, [pc, #88]	; (8002e48 <_Z13StartUARTDataPKv+0x19c>)
 8002dee:	4812      	ldr	r0, [pc, #72]	; (8002e38 <_Z13StartUARTDataPKv+0x18c>)
 8002df0:	f002 ffd3 	bl	8005d9a <HAL_UART_Transmit>
					12);
		}

		if (setZeroFlag) {
 8002df4:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <_Z13StartUARTDataPKv+0x1a4>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d016      	beq.n	8002e2a <_Z13StartUARTDataPKv+0x17e>
			setZeroFlag = false;
 8002dfc:	4b14      	ldr	r3, [pc, #80]	; (8002e50 <_Z13StartUARTDataPKv+0x1a4>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
//			arm.SetZeroEncoders();
			arm.SetSoftwareZero();
 8002e02:	480e      	ldr	r0, [pc, #56]	; (8002e3c <_Z13StartUARTDataPKv+0x190>)
 8002e04:	f7fe fe7a 	bl	8001afc <_ZN7RoboArm15SetSoftwareZeroEv>
			un_send.params.lin = 0;
 8002e08:	4b0f      	ldr	r3, [pc, #60]	; (8002e48 <_Z13StartUARTDataPKv+0x19c>)
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002e10:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <_Z13StartUARTDataPKv+0x19c>)
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	605a      	str	r2, [r3, #4]
			un_send.params.hold = 10;
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <_Z13StartUARTDataPKv+0x19c>)
 8002e1a:	220a      	movs	r2, #10
 8002e1c:	609a      	str	r2, [r3, #8]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002e1e:	230c      	movs	r3, #12
 8002e20:	220c      	movs	r2, #12
 8002e22:	4909      	ldr	r1, [pc, #36]	; (8002e48 <_Z13StartUARTDataPKv+0x19c>)
 8002e24:	4804      	ldr	r0, [pc, #16]	; (8002e38 <_Z13StartUARTDataPKv+0x18c>)
 8002e26:	f002 ffb8 	bl	8005d9a <HAL_UART_Transmit>
					12);
		}

		osDelay(500);
 8002e2a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002e2e:	f003 fe79 	bl	8006b24 <osDelay>
	}
 8002e32:	e748      	b.n	8002cc6 <_Z13StartUARTDataPKv+0x1a>
 8002e34:	20000660 	.word	0x20000660
 8002e38:	200005c4 	.word	0x200005c4
 8002e3c:	20000694 	.word	0x20000694
 8002e40:	2000066d 	.word	0x2000066d
 8002e44:	43b40000 	.word	0x43b40000
 8002e48:	20000680 	.word	0x20000680
 8002e4c:	2000066e 	.word	0x2000066e
 8002e50:	2000066f 	.word	0x2000066f

08002e54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a2a      	ldr	r2, [pc, #168]	; (8002f0c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d121      	bne.n	8002eaa <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		cntImpulse1++;
 8002e66:	4b2a      	ldr	r3, [pc, #168]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	4a28      	ldr	r2, [pc, #160]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002e6e:	6013      	str	r3, [r2, #0]
		if (cntImpulse1 >= arm.anglePsteps) {
 8002e70:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002e72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e74:	4b26      	ldr	r3, [pc, #152]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d83c      	bhi.n	8002ef6 <HAL_TIM_PeriodElapsedCallback+0xa2>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	4826      	ldr	r0, [pc, #152]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002e80:	f002 f9c2 	bl	8005208 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002e84:	4824      	ldr	r0, [pc, #144]	; (8002f18 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002e86:	f002 f89f 	bl	8004fc8 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(1, false);
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	4821      	ldr	r0, [pc, #132]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002e90:	f7fe ffbd 	bl	8001e0e <_ZN7RoboArm9SetEnableEtb>
			cntImpulse1 = 0;
 8002e94:	4b1e      	ldr	r3, [pc, #120]	; (8002f10 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	601a      	str	r2, [r3, #0]
			arm.stateMoveM1 = false;
 8002e9a:	4b1e      	ldr	r3, [pc, #120]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
			timerFT1 = true;
 8002ea2:	4b1e      	ldr	r3, [pc, #120]	; (8002f1c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	701a      	strb	r2, [r3, #0]
 8002ea8:	e025      	b.n	8002ef6 <HAL_TIM_PeriodElapsedCallback+0xa2>
		}

	} else if (htim->Instance == TIM2) {
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb2:	d120      	bne.n	8002ef6 <HAL_TIM_PeriodElapsedCallback+0xa2>

		cntImpulse2++;
 8002eb4:	4b1a      	ldr	r3, [pc, #104]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	3301      	adds	r3, #1
 8002eba:	4a19      	ldr	r2, [pc, #100]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002ebc:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= arm.distPsteps) {
 8002ebe:	4b15      	ldr	r3, [pc, #84]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec2:	4b17      	ldr	r3, [pc, #92]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d815      	bhi.n	8002ef6 <HAL_TIM_PeriodElapsedCallback+0xa2>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002eca:	2104      	movs	r1, #4
 8002ecc:	4815      	ldr	r0, [pc, #84]	; (8002f24 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002ece:	f002 f99b 	bl	8005208 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8002ed2:	4814      	ldr	r0, [pc, #80]	; (8002f24 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002ed4:	f002 f878 	bl	8004fc8 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(2, false);
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2102      	movs	r1, #2
 8002edc:	480d      	ldr	r0, [pc, #52]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002ede:	f7fe ff96 	bl	8001e0e <_ZN7RoboArm9SetEnableEtb>
			cntImpulse2 = 0;
 8002ee2:	4b0f      	ldr	r3, [pc, #60]	; (8002f20 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]
			arm.stateMoveM2 = false;
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
			timerFT2 = true;
 8002ef0:	4b0d      	ldr	r3, [pc, #52]	; (8002f28 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a0c      	ldr	r2, [pc, #48]	; (8002f2c <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d101      	bne.n	8002f04 <HAL_TIM_PeriodElapsedCallback+0xb0>
    HAL_IncTick();
 8002f00:	f000 fc18 	bl	8003734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f04:	bf00      	nop
 8002f06:	3708      	adds	r7, #8
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40012c00 	.word	0x40012c00
 8002f10:	2000068c 	.word	0x2000068c
 8002f14:	20000694 	.word	0x20000694
 8002f18:	200004ec 	.word	0x200004ec
 8002f1c:	20000670 	.word	0x20000670
 8002f20:	20000690 	.word	0x20000690
 8002f24:	20000534 	.word	0x20000534
 8002f28:	20000671 	.word	0x20000671
 8002f2c:	40000800 	.word	0x40000800

08002f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f34:	b672      	cpsid	i
}
 8002f36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002f38:	e7fe      	b.n	8002f38 <Error_Handler+0x8>
	...

08002f3c <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d109      	bne.n	8002f60 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d104      	bne.n	8002f60 <_Z41__static_initialization_and_destruction_0ii+0x24>
RoboArm arm(0, 124);
 8002f56:	227c      	movs	r2, #124	; 0x7c
 8002f58:	2100      	movs	r1, #0
 8002f5a:	4803      	ldr	r0, [pc, #12]	; (8002f68 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8002f5c:	f7fe fa84 	bl	8001468 <_ZN7RoboArmC1Ehh>
}
 8002f60:	bf00      	nop
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}
 8002f68:	20000694 	.word	0x20000694

08002f6c <_GLOBAL__sub_I_hspi1>:
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f74:	2001      	movs	r0, #1
 8002f76:	f7ff ffe1 	bl	8002f3c <_Z41__static_initialization_and_destruction_0ii>
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002f82:	4b1c      	ldr	r3, [pc, #112]	; (8002ff4 <HAL_MspInit+0x78>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <HAL_MspInit+0x78>)
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	6193      	str	r3, [r2, #24]
 8002f8e:	4b19      	ldr	r3, [pc, #100]	; (8002ff4 <HAL_MspInit+0x78>)
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f9a:	4b16      	ldr	r3, [pc, #88]	; (8002ff4 <HAL_MspInit+0x78>)
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <HAL_MspInit+0x78>)
 8002fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	61d3      	str	r3, [r2, #28]
 8002fa6:	4b13      	ldr	r3, [pc, #76]	; (8002ff4 <HAL_MspInit+0x78>)
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fae:	607b      	str	r3, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	210f      	movs	r1, #15
 8002fb6:	f06f 0001 	mvn.w	r0, #1
 8002fba:	f000 fc8c 	bl	80038d6 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2105      	movs	r1, #5
 8002fc2:	2005      	movs	r0, #5
 8002fc4:	f000 fc87 	bl	80038d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8002fc8:	2005      	movs	r0, #5
 8002fca:	f000 fca0 	bl	800390e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002fce:	4b0a      	ldr	r3, [pc, #40]	; (8002ff8 <HAL_MspInit+0x7c>)
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	4a04      	ldr	r2, [pc, #16]	; (8002ff8 <HAL_MspInit+0x7c>)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40010000 	.word	0x40010000

08002ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	; 0x28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
 800300c:	605a      	str	r2, [r3, #4]
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a26      	ldr	r2, [pc, #152]	; (80030b0 <HAL_SPI_MspInit+0xb4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d145      	bne.n	80030a8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800301c:	4b25      	ldr	r3, [pc, #148]	; (80030b4 <HAL_SPI_MspInit+0xb8>)
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	4a24      	ldr	r2, [pc, #144]	; (80030b4 <HAL_SPI_MspInit+0xb8>)
 8003022:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003026:	6193      	str	r3, [r2, #24]
 8003028:	4b22      	ldr	r3, [pc, #136]	; (80030b4 <HAL_SPI_MspInit+0xb8>)
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003030:	613b      	str	r3, [r7, #16]
 8003032:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003034:	4b1f      	ldr	r3, [pc, #124]	; (80030b4 <HAL_SPI_MspInit+0xb8>)
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <HAL_SPI_MspInit+0xb8>)
 800303a:	f043 0308 	orr.w	r3, r3, #8
 800303e:	6193      	str	r3, [r2, #24]
 8003040:	4b1c      	ldr	r3, [pc, #112]	; (80030b4 <HAL_SPI_MspInit+0xb8>)
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800304c:	2328      	movs	r3, #40	; 0x28
 800304e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003050:	2302      	movs	r3, #2
 8003052:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003054:	2303      	movs	r3, #3
 8003056:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003058:	f107 0314 	add.w	r3, r7, #20
 800305c:	4619      	mov	r1, r3
 800305e:	4816      	ldr	r0, [pc, #88]	; (80030b8 <HAL_SPI_MspInit+0xbc>)
 8003060:	f000 fd16 	bl	8003a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003064:	2310      	movs	r3, #16
 8003066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003068:	2300      	movs	r3, #0
 800306a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	4619      	mov	r1, r3
 8003076:	4810      	ldr	r0, [pc, #64]	; (80030b8 <HAL_SPI_MspInit+0xbc>)
 8003078:	f000 fd0a 	bl	8003a90 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 800307c:	4b0f      	ldr	r3, [pc, #60]	; (80030bc <HAL_SPI_MspInit+0xc0>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
 8003092:	4a0a      	ldr	r2, [pc, #40]	; (80030bc <HAL_SPI_MspInit+0xc0>)
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003098:	2200      	movs	r2, #0
 800309a:	2105      	movs	r1, #5
 800309c:	2023      	movs	r0, #35	; 0x23
 800309e:	f000 fc1a 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80030a2:	2023      	movs	r0, #35	; 0x23
 80030a4:	f000 fc33 	bl	800390e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80030a8:	bf00      	nop
 80030aa:	3728      	adds	r7, #40	; 0x28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40013000 	.word	0x40013000
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40010c00 	.word	0x40010c00
 80030bc:	40010000 	.word	0x40010000

080030c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a27      	ldr	r2, [pc, #156]	; (800316c <HAL_TIM_PWM_MspInit+0xac>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d114      	bne.n	80030fc <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030d2:	4b27      	ldr	r3, [pc, #156]	; (8003170 <HAL_TIM_PWM_MspInit+0xb0>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	4a26      	ldr	r2, [pc, #152]	; (8003170 <HAL_TIM_PWM_MspInit+0xb0>)
 80030d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80030dc:	6193      	str	r3, [r2, #24]
 80030de:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_TIM_PWM_MspInit+0xb0>)
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030e6:	617b      	str	r3, [r7, #20]
 80030e8:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80030ea:	2200      	movs	r2, #0
 80030ec:	2105      	movs	r1, #5
 80030ee:	2019      	movs	r0, #25
 80030f0:	f000 fbf1 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80030f4:	2019      	movs	r0, #25
 80030f6:	f000 fc0a 	bl	800390e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80030fa:	e032      	b.n	8003162 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d114      	bne.n	8003130 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003106:	4b1a      	ldr	r3, [pc, #104]	; (8003170 <HAL_TIM_PWM_MspInit+0xb0>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_TIM_PWM_MspInit+0xb0>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	61d3      	str	r3, [r2, #28]
 8003112:	4b17      	ldr	r3, [pc, #92]	; (8003170 <HAL_TIM_PWM_MspInit+0xb0>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	613b      	str	r3, [r7, #16]
 800311c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800311e:	2200      	movs	r2, #0
 8003120:	2105      	movs	r1, #5
 8003122:	201c      	movs	r0, #28
 8003124:	f000 fbd7 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003128:	201c      	movs	r0, #28
 800312a:	f000 fbf0 	bl	800390e <HAL_NVIC_EnableIRQ>
}
 800312e:	e018      	b.n	8003162 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM3)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0f      	ldr	r2, [pc, #60]	; (8003174 <HAL_TIM_PWM_MspInit+0xb4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d113      	bne.n	8003162 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800313a:	4b0d      	ldr	r3, [pc, #52]	; (8003170 <HAL_TIM_PWM_MspInit+0xb0>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	4a0c      	ldr	r2, [pc, #48]	; (8003170 <HAL_TIM_PWM_MspInit+0xb0>)
 8003140:	f043 0302 	orr.w	r3, r3, #2
 8003144:	61d3      	str	r3, [r2, #28]
 8003146:	4b0a      	ldr	r3, [pc, #40]	; (8003170 <HAL_TIM_PWM_MspInit+0xb0>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003152:	2200      	movs	r2, #0
 8003154:	2105      	movs	r1, #5
 8003156:	201d      	movs	r0, #29
 8003158:	f000 fbbd 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800315c:	201d      	movs	r0, #29
 800315e:	f000 fbd6 	bl	800390e <HAL_NVIC_EnableIRQ>
}
 8003162:	bf00      	nop
 8003164:	3718      	adds	r7, #24
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	40012c00 	.word	0x40012c00
 8003170:	40021000 	.word	0x40021000
 8003174:	40000400 	.word	0x40000400

08003178 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08a      	sub	sp, #40	; 0x28
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	f107 0318 	add.w	r3, r7, #24
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a2e      	ldr	r2, [pc, #184]	; (800324c <HAL_TIM_MspPostInit+0xd4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d119      	bne.n	80031cc <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003198:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_TIM_MspPostInit+0xd8>)
 800319a:	699b      	ldr	r3, [r3, #24]
 800319c:	4a2c      	ldr	r2, [pc, #176]	; (8003250 <HAL_TIM_MspPostInit+0xd8>)
 800319e:	f043 0304 	orr.w	r3, r3, #4
 80031a2:	6193      	str	r3, [r2, #24]
 80031a4:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <HAL_TIM_MspPostInit+0xd8>)
 80031a6:	699b      	ldr	r3, [r3, #24]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ba:	2302      	movs	r3, #2
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031be:	f107 0318 	add.w	r3, r7, #24
 80031c2:	4619      	mov	r1, r3
 80031c4:	4823      	ldr	r0, [pc, #140]	; (8003254 <HAL_TIM_MspPostInit+0xdc>)
 80031c6:	f000 fc63 	bl	8003a90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80031ca:	e03a      	b.n	8003242 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031d4:	d118      	bne.n	8003208 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031d6:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_TIM_MspPostInit+0xd8>)
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	4a1d      	ldr	r2, [pc, #116]	; (8003250 <HAL_TIM_MspPostInit+0xd8>)
 80031dc:	f043 0304 	orr.w	r3, r3, #4
 80031e0:	6193      	str	r3, [r2, #24]
 80031e2:	4b1b      	ldr	r3, [pc, #108]	; (8003250 <HAL_TIM_MspPostInit+0xd8>)
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80031ee:	2302      	movs	r3, #2
 80031f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	2302      	movs	r3, #2
 80031f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f6:	2302      	movs	r3, #2
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031fa:	f107 0318 	add.w	r3, r7, #24
 80031fe:	4619      	mov	r1, r3
 8003200:	4814      	ldr	r0, [pc, #80]	; (8003254 <HAL_TIM_MspPostInit+0xdc>)
 8003202:	f000 fc45 	bl	8003a90 <HAL_GPIO_Init>
}
 8003206:	e01c      	b.n	8003242 <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a12      	ldr	r2, [pc, #72]	; (8003258 <HAL_TIM_MspPostInit+0xe0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d117      	bne.n	8003242 <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003212:	4b0f      	ldr	r3, [pc, #60]	; (8003250 <HAL_TIM_MspPostInit+0xd8>)
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	4a0e      	ldr	r2, [pc, #56]	; (8003250 <HAL_TIM_MspPostInit+0xd8>)
 8003218:	f043 0304 	orr.w	r3, r3, #4
 800321c:	6193      	str	r3, [r2, #24]
 800321e:	4b0c      	ldr	r3, [pc, #48]	; (8003250 <HAL_TIM_MspPostInit+0xd8>)
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800322a:	2380      	movs	r3, #128	; 0x80
 800322c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322e:	2302      	movs	r3, #2
 8003230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003232:	2302      	movs	r3, #2
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003236:	f107 0318 	add.w	r3, r7, #24
 800323a:	4619      	mov	r1, r3
 800323c:	4805      	ldr	r0, [pc, #20]	; (8003254 <HAL_TIM_MspPostInit+0xdc>)
 800323e:	f000 fc27 	bl	8003a90 <HAL_GPIO_Init>
}
 8003242:	bf00      	nop
 8003244:	3728      	adds	r7, #40	; 0x28
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40021000 	.word	0x40021000
 8003254:	40010800 	.word	0x40010800
 8003258:	40000400 	.word	0x40000400

0800325c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b08a      	sub	sp, #40	; 0x28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003264:	f107 0318 	add.w	r3, r7, #24
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a39      	ldr	r2, [pc, #228]	; (800335c <HAL_UART_MspInit+0x100>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d13a      	bne.n	80032f2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800327c:	4b38      	ldr	r3, [pc, #224]	; (8003360 <HAL_UART_MspInit+0x104>)
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	4a37      	ldr	r2, [pc, #220]	; (8003360 <HAL_UART_MspInit+0x104>)
 8003282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003286:	6193      	str	r3, [r2, #24]
 8003288:	4b35      	ldr	r3, [pc, #212]	; (8003360 <HAL_UART_MspInit+0x104>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003290:	617b      	str	r3, [r7, #20]
 8003292:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003294:	4b32      	ldr	r3, [pc, #200]	; (8003360 <HAL_UART_MspInit+0x104>)
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	4a31      	ldr	r2, [pc, #196]	; (8003360 <HAL_UART_MspInit+0x104>)
 800329a:	f043 0304 	orr.w	r3, r3, #4
 800329e:	6193      	str	r3, [r2, #24]
 80032a0:	4b2f      	ldr	r3, [pc, #188]	; (8003360 <HAL_UART_MspInit+0x104>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 0304 	and.w	r3, r3, #4
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80032ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b2:	2302      	movs	r3, #2
 80032b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80032b6:	2303      	movs	r3, #3
 80032b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ba:	f107 0318 	add.w	r3, r7, #24
 80032be:	4619      	mov	r1, r3
 80032c0:	4828      	ldr	r0, [pc, #160]	; (8003364 <HAL_UART_MspInit+0x108>)
 80032c2:	f000 fbe5 	bl	8003a90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80032c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d4:	f107 0318 	add.w	r3, r7, #24
 80032d8:	4619      	mov	r1, r3
 80032da:	4822      	ldr	r0, [pc, #136]	; (8003364 <HAL_UART_MspInit+0x108>)
 80032dc:	f000 fbd8 	bl	8003a90 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80032e0:	2200      	movs	r2, #0
 80032e2:	2105      	movs	r1, #5
 80032e4:	2025      	movs	r0, #37	; 0x25
 80032e6:	f000 faf6 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80032ea:	2025      	movs	r0, #37	; 0x25
 80032ec:	f000 fb0f 	bl	800390e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80032f0:	e030      	b.n	8003354 <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a1c      	ldr	r2, [pc, #112]	; (8003368 <HAL_UART_MspInit+0x10c>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d12b      	bne.n	8003354 <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 80032fc:	4b18      	ldr	r3, [pc, #96]	; (8003360 <HAL_UART_MspInit+0x104>)
 80032fe:	69db      	ldr	r3, [r3, #28]
 8003300:	4a17      	ldr	r2, [pc, #92]	; (8003360 <HAL_UART_MspInit+0x104>)
 8003302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003306:	61d3      	str	r3, [r2, #28]
 8003308:	4b15      	ldr	r3, [pc, #84]	; (8003360 <HAL_UART_MspInit+0x104>)
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003310:	60fb      	str	r3, [r7, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003314:	4b12      	ldr	r3, [pc, #72]	; (8003360 <HAL_UART_MspInit+0x104>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	4a11      	ldr	r2, [pc, #68]	; (8003360 <HAL_UART_MspInit+0x104>)
 800331a:	f043 0304 	orr.w	r3, r3, #4
 800331e:	6193      	str	r3, [r2, #24]
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <HAL_UART_MspInit+0x104>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f003 0304 	and.w	r3, r3, #4
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800332c:	2304      	movs	r3, #4
 800332e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003330:	2312      	movs	r3, #18
 8003332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003334:	2303      	movs	r3, #3
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003338:	f107 0318 	add.w	r3, r7, #24
 800333c:	4619      	mov	r1, r3
 800333e:	4809      	ldr	r0, [pc, #36]	; (8003364 <HAL_UART_MspInit+0x108>)
 8003340:	f000 fba6 	bl	8003a90 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003344:	2200      	movs	r2, #0
 8003346:	2105      	movs	r1, #5
 8003348:	2026      	movs	r0, #38	; 0x26
 800334a:	f000 fac4 	bl	80038d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800334e:	2026      	movs	r0, #38	; 0x26
 8003350:	f000 fadd 	bl	800390e <HAL_NVIC_EnableIRQ>
}
 8003354:	bf00      	nop
 8003356:	3728      	adds	r7, #40	; 0x28
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}
 800335c:	40013800 	.word	0x40013800
 8003360:	40021000 	.word	0x40021000
 8003364:	40010800 	.word	0x40010800
 8003368:	40004400 	.word	0x40004400

0800336c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08e      	sub	sp, #56	; 0x38
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003378:	2300      	movs	r3, #0
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800337c:	2300      	movs	r3, #0
 800337e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8003382:	4b34      	ldr	r3, [pc, #208]	; (8003454 <HAL_InitTick+0xe8>)
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	4a33      	ldr	r2, [pc, #204]	; (8003454 <HAL_InitTick+0xe8>)
 8003388:	f043 0304 	orr.w	r3, r3, #4
 800338c:	61d3      	str	r3, [r2, #28]
 800338e:	4b31      	ldr	r3, [pc, #196]	; (8003454 <HAL_InitTick+0xe8>)
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	60fb      	str	r3, [r7, #12]
 8003398:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800339a:	f107 0210 	add.w	r2, r7, #16
 800339e:	f107 0314 	add.w	r3, r7, #20
 80033a2:	4611      	mov	r1, r2
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 f927 	bl	80045f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80033ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d103      	bne.n	80033bc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80033b4:	f001 f8f8 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 80033b8:	6378      	str	r0, [r7, #52]	; 0x34
 80033ba:	e004      	b.n	80033c6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80033bc:	f001 f8f4 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 80033c0:	4603      	mov	r3, r0
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80033c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033c8:	4a23      	ldr	r2, [pc, #140]	; (8003458 <HAL_InitTick+0xec>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0c9b      	lsrs	r3, r3, #18
 80033d0:	3b01      	subs	r3, #1
 80033d2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80033d4:	4b21      	ldr	r3, [pc, #132]	; (800345c <HAL_InitTick+0xf0>)
 80033d6:	4a22      	ldr	r2, [pc, #136]	; (8003460 <HAL_InitTick+0xf4>)
 80033d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80033da:	4b20      	ldr	r3, [pc, #128]	; (800345c <HAL_InitTick+0xf0>)
 80033dc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033e0:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80033e2:	4a1e      	ldr	r2, [pc, #120]	; (800345c <HAL_InitTick+0xf0>)
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80033e8:	4b1c      	ldr	r3, [pc, #112]	; (800345c <HAL_InitTick+0xf0>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033ee:	4b1b      	ldr	r3, [pc, #108]	; (800345c <HAL_InitTick+0xf0>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033f4:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_InitTick+0xf0>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80033fa:	4818      	ldr	r0, [pc, #96]	; (800345c <HAL_InitTick+0xf0>)
 80033fc:	f001 fd3a 	bl	8004e74 <HAL_TIM_Base_Init>
 8003400:	4603      	mov	r3, r0
 8003402:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003406:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800340a:	2b00      	cmp	r3, #0
 800340c:	d11b      	bne.n	8003446 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800340e:	4813      	ldr	r0, [pc, #76]	; (800345c <HAL_InitTick+0xf0>)
 8003410:	f001 fd88 	bl	8004f24 <HAL_TIM_Base_Start_IT>
 8003414:	4603      	mov	r3, r0
 8003416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800341a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800341e:	2b00      	cmp	r3, #0
 8003420:	d111      	bne.n	8003446 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003422:	201e      	movs	r0, #30
 8003424:	f000 fa73 	bl	800390e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2b0f      	cmp	r3, #15
 800342c:	d808      	bhi.n	8003440 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800342e:	2200      	movs	r2, #0
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	201e      	movs	r0, #30
 8003434:	f000 fa4f 	bl	80038d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003438:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <HAL_InitTick+0xf8>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e002      	b.n	8003446 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003446:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800344a:	4618      	mov	r0, r3
 800344c:	3738      	adds	r7, #56	; 0x38
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40021000 	.word	0x40021000
 8003458:	431bde83 	.word	0x431bde83
 800345c:	200007a8 	.word	0x200007a8
 8003460:	40000800 	.word	0x40000800
 8003464:	20000004 	.word	0x20000004

08003468 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800346c:	f001 f8f4 	bl	8004658 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003470:	e7fe      	b.n	8003470 <NMI_Handler+0x8>

08003472 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003472:	b480      	push	{r7}
 8003474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003476:	e7fe      	b.n	8003476 <HardFault_Handler+0x4>

08003478 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800347c:	e7fe      	b.n	800347c <MemManage_Handler+0x4>

0800347e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800347e:	b480      	push	{r7}
 8003480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003482:	e7fe      	b.n	8003482 <BusFault_Handler+0x4>

08003484 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003484:	b480      	push	{r7}
 8003486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003488:	e7fe      	b.n	8003488 <UsageFault_Handler+0x4>

0800348a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800348a:	b480      	push	{r7}
 800348c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	46bd      	mov	sp, r7
 8003492:	bc80      	pop	{r7}
 8003494:	4770      	bx	lr

08003496 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8003496:	b480      	push	{r7}
 8003498:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800349a:	bf00      	nop
 800349c:	46bd      	mov	sp, r7
 800349e:	bc80      	pop	{r7}
 80034a0:	4770      	bx	lr
	...

080034a4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80034a8:	4802      	ldr	r0, [pc, #8]	; (80034b4 <TIM1_UP_IRQHandler+0x10>)
 80034aa:	f001 ff11 	bl	80052d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80034ae:	bf00      	nop
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	200004ec 	.word	0x200004ec

080034b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80034bc:	4802      	ldr	r0, [pc, #8]	; (80034c8 <TIM2_IRQHandler+0x10>)
 80034be:	f001 ff07 	bl	80052d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80034c2:	bf00      	nop
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	20000534 	.word	0x20000534

080034cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80034d0:	4802      	ldr	r0, [pc, #8]	; (80034dc <TIM3_IRQHandler+0x10>)
 80034d2:	f001 fefd 	bl	80052d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	2000057c 	.word	0x2000057c

080034e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80034e4:	4802      	ldr	r0, [pc, #8]	; (80034f0 <TIM4_IRQHandler+0x10>)
 80034e6:	f001 fef3 	bl	80052d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80034ea:	bf00      	nop
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	200007a8 	.word	0x200007a8

080034f4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80034f8:	4802      	ldr	r0, [pc, #8]	; (8003504 <SPI1_IRQHandler+0x10>)
 80034fa:	f001 fb19 	bl	8004b30 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80034fe:	bf00      	nop
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000494 	.word	0x20000494

08003508 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800350c:	4802      	ldr	r0, [pc, #8]	; (8003518 <USART1_IRQHandler+0x10>)
 800350e:	f002 fced 	bl	8005eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	200005c4 	.word	0x200005c4

0800351c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003520:	4802      	ldr	r0, [pc, #8]	; (800352c <USART2_IRQHandler+0x10>)
 8003522:	f002 fce3 	bl	8005eec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	2000060c 	.word	0x2000060c

08003530 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003530:	b480      	push	{r7}
 8003532:	af00      	add	r7, sp, #0
  return 1;
 8003534:	2301      	movs	r3, #1
}
 8003536:	4618      	mov	r0, r3
 8003538:	46bd      	mov	sp, r7
 800353a:	bc80      	pop	{r7}
 800353c:	4770      	bx	lr

0800353e <_kill>:

int _kill(int pid, int sig)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b082      	sub	sp, #8
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003548:	f005 fa96 	bl	8008a78 <__errno>
 800354c:	4603      	mov	r3, r0
 800354e:	2216      	movs	r2, #22
 8003550:	601a      	str	r2, [r3, #0]
  return -1;
 8003552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_exit>:

void _exit (int status)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b082      	sub	sp, #8
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003566:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7ff ffe7 	bl	800353e <_kill>
  while (1) {}    /* Make sure we hang here */
 8003570:	e7fe      	b.n	8003570 <_exit+0x12>

08003572 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b086      	sub	sp, #24
 8003576:	af00      	add	r7, sp, #0
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800357e:	2300      	movs	r3, #0
 8003580:	617b      	str	r3, [r7, #20]
 8003582:	e00a      	b.n	800359a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003584:	f3af 8000 	nop.w
 8003588:	4601      	mov	r1, r0
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	1c5a      	adds	r2, r3, #1
 800358e:	60ba      	str	r2, [r7, #8]
 8003590:	b2ca      	uxtb	r2, r1
 8003592:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	3301      	adds	r3, #1
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	429a      	cmp	r2, r3
 80035a0:	dbf0      	blt.n	8003584 <_read+0x12>
  }

  return len;
 80035a2:	687b      	ldr	r3, [r7, #4]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3718      	adds	r7, #24
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035b8:	2300      	movs	r3, #0
 80035ba:	617b      	str	r3, [r7, #20]
 80035bc:	e009      	b.n	80035d2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	60ba      	str	r2, [r7, #8]
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	4618      	mov	r0, r3
 80035c8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	3301      	adds	r3, #1
 80035d0:	617b      	str	r3, [r7, #20]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	dbf1      	blt.n	80035be <_write+0x12>
  }
  return len;
 80035da:	687b      	ldr	r3, [r7, #4]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <_close>:

int _close(int file)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc80      	pop	{r7}
 80035f8:	4770      	bx	lr

080035fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
 8003602:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800360a:	605a      	str	r2, [r3, #4]
  return 0;
 800360c:	2300      	movs	r3, #0
}
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <_isatty>:

int _isatty(int file)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003620:	2301      	movs	r3, #1
}
 8003622:	4618      	mov	r0, r3
 8003624:	370c      	adds	r7, #12
 8003626:	46bd      	mov	sp, r7
 8003628:	bc80      	pop	{r7}
 800362a:	4770      	bx	lr

0800362c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	bc80      	pop	{r7}
 8003642:	4770      	bx	lr

08003644 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800364c:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <_sbrk+0x5c>)
 800364e:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <_sbrk+0x60>)
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003658:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <_sbrk+0x64>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d102      	bne.n	8003666 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003660:	4b11      	ldr	r3, [pc, #68]	; (80036a8 <_sbrk+0x64>)
 8003662:	4a12      	ldr	r2, [pc, #72]	; (80036ac <_sbrk+0x68>)
 8003664:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <_sbrk+0x64>)
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4413      	add	r3, r2
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	429a      	cmp	r2, r3
 8003672:	d207      	bcs.n	8003684 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003674:	f005 fa00 	bl	8008a78 <__errno>
 8003678:	4603      	mov	r3, r0
 800367a:	220c      	movs	r2, #12
 800367c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003682:	e009      	b.n	8003698 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <_sbrk+0x64>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800368a:	4b07      	ldr	r3, [pc, #28]	; (80036a8 <_sbrk+0x64>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	4a05      	ldr	r2, [pc, #20]	; (80036a8 <_sbrk+0x64>)
 8003694:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003696:	68fb      	ldr	r3, [r7, #12]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3718      	adds	r7, #24
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	20005000 	.word	0x20005000
 80036a4:	00000400 	.word	0x00000400
 80036a8:	200007f0 	.word	0x200007f0
 80036ac:	20001690 	.word	0x20001690

080036b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80036b4:	bf00      	nop
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bc80      	pop	{r7}
 80036ba:	4770      	bx	lr

080036bc <Reset_Handler>:
 80036bc:	f7ff fff8 	bl	80036b0 <SystemInit>
 80036c0:	480b      	ldr	r0, [pc, #44]	; (80036f0 <LoopFillZerobss+0xe>)
 80036c2:	490c      	ldr	r1, [pc, #48]	; (80036f4 <LoopFillZerobss+0x12>)
 80036c4:	4a0c      	ldr	r2, [pc, #48]	; (80036f8 <LoopFillZerobss+0x16>)
 80036c6:	2300      	movs	r3, #0
 80036c8:	e002      	b.n	80036d0 <LoopCopyDataInit>

080036ca <CopyDataInit>:
 80036ca:	58d4      	ldr	r4, [r2, r3]
 80036cc:	50c4      	str	r4, [r0, r3]
 80036ce:	3304      	adds	r3, #4

080036d0 <LoopCopyDataInit>:
 80036d0:	18c4      	adds	r4, r0, r3
 80036d2:	428c      	cmp	r4, r1
 80036d4:	d3f9      	bcc.n	80036ca <CopyDataInit>
 80036d6:	4a09      	ldr	r2, [pc, #36]	; (80036fc <LoopFillZerobss+0x1a>)
 80036d8:	4c09      	ldr	r4, [pc, #36]	; (8003700 <LoopFillZerobss+0x1e>)
 80036da:	2300      	movs	r3, #0
 80036dc:	e001      	b.n	80036e2 <LoopFillZerobss>

080036de <FillZerobss>:
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	3204      	adds	r2, #4

080036e2 <LoopFillZerobss>:
 80036e2:	42a2      	cmp	r2, r4
 80036e4:	d3fb      	bcc.n	80036de <FillZerobss>
 80036e6:	f005 f9cd 	bl	8008a84 <__libc_init_array>
 80036ea:	f7fe fecd 	bl	8002488 <main>
 80036ee:	4770      	bx	lr
 80036f0:	20000000 	.word	0x20000000
 80036f4:	200001d8 	.word	0x200001d8
 80036f8:	0800ac98 	.word	0x0800ac98
 80036fc:	200001d8 	.word	0x200001d8
 8003700:	20001690 	.word	0x20001690

08003704 <ADC1_2_IRQHandler>:
 8003704:	e7fe      	b.n	8003704 <ADC1_2_IRQHandler>
	...

08003708 <HAL_Init>:
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
 800370c:	4b08      	ldr	r3, [pc, #32]	; (8003730 <HAL_Init+0x28>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a07      	ldr	r2, [pc, #28]	; (8003730 <HAL_Init+0x28>)
 8003712:	f043 0310 	orr.w	r3, r3, #16
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	2003      	movs	r0, #3
 800371a:	f000 f8d1 	bl	80038c0 <HAL_NVIC_SetPriorityGrouping>
 800371e:	200f      	movs	r0, #15
 8003720:	f7ff fe24 	bl	800336c <HAL_InitTick>
 8003724:	f7ff fc2a 	bl	8002f7c <HAL_MspInit>
 8003728:	2300      	movs	r3, #0
 800372a:	4618      	mov	r0, r3
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40022000 	.word	0x40022000

08003734 <HAL_IncTick>:
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
 8003738:	4b05      	ldr	r3, [pc, #20]	; (8003750 <HAL_IncTick+0x1c>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	461a      	mov	r2, r3
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <HAL_IncTick+0x20>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4413      	add	r3, r2
 8003744:	4a03      	ldr	r2, [pc, #12]	; (8003754 <HAL_IncTick+0x20>)
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	bf00      	nop
 800374a:	46bd      	mov	sp, r7
 800374c:	bc80      	pop	{r7}
 800374e:	4770      	bx	lr
 8003750:	20000008 	.word	0x20000008
 8003754:	200007f4 	.word	0x200007f4

08003758 <HAL_GetTick>:
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
 800375c:	4b02      	ldr	r3, [pc, #8]	; (8003768 <HAL_GetTick+0x10>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	200007f4 	.word	0x200007f4

0800376c <__NVIC_SetPriorityGrouping>:
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68ba      	ldr	r2, [r7, #8]
 8003784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003788:	4013      	ands	r3, r2
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	021a      	lsls	r2, r3, #8
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4313      	orrs	r3, r2
 8003794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <__NVIC_SetPriorityGrouping+0x44>)
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	60d3      	str	r3, [r2, #12]
 80037a4:	bf00      	nop
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_GetPriorityGrouping>:
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <__NVIC_GetPriorityGrouping+0x18>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	0a1b      	lsrs	r3, r3, #8
 80037be:	f003 0307 	and.w	r3, r3, #7
 80037c2:	4618      	mov	r0, r3
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bc80      	pop	{r7}
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	e000ed00 	.word	0xe000ed00

080037d0 <__NVIC_EnableIRQ>:
 80037d0:	b480      	push	{r7}
 80037d2:	b083      	sub	sp, #12
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	4603      	mov	r3, r0
 80037d8:	71fb      	strb	r3, [r7, #7]
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	db0b      	blt.n	80037fa <__NVIC_EnableIRQ+0x2a>
 80037e2:	79fb      	ldrb	r3, [r7, #7]
 80037e4:	f003 021f 	and.w	r2, r3, #31
 80037e8:	4906      	ldr	r1, [pc, #24]	; (8003804 <__NVIC_EnableIRQ+0x34>)
 80037ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2001      	movs	r0, #1
 80037f2:	fa00 f202 	lsl.w	r2, r0, r2
 80037f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	bc80      	pop	{r7}
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100

08003808 <__NVIC_SetPriority>:
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	4603      	mov	r3, r0
 8003810:	6039      	str	r1, [r7, #0]
 8003812:	71fb      	strb	r3, [r7, #7]
 8003814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003818:	2b00      	cmp	r3, #0
 800381a:	db0a      	blt.n	8003832 <__NVIC_SetPriority+0x2a>
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	b2da      	uxtb	r2, r3
 8003820:	490c      	ldr	r1, [pc, #48]	; (8003854 <__NVIC_SetPriority+0x4c>)
 8003822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003826:	0112      	lsls	r2, r2, #4
 8003828:	b2d2      	uxtb	r2, r2
 800382a:	440b      	add	r3, r1
 800382c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8003830:	e00a      	b.n	8003848 <__NVIC_SetPriority+0x40>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	b2da      	uxtb	r2, r3
 8003836:	4908      	ldr	r1, [pc, #32]	; (8003858 <__NVIC_SetPriority+0x50>)
 8003838:	79fb      	ldrb	r3, [r7, #7]
 800383a:	f003 030f 	and.w	r3, r3, #15
 800383e:	3b04      	subs	r3, #4
 8003840:	0112      	lsls	r2, r2, #4
 8003842:	b2d2      	uxtb	r2, r2
 8003844:	440b      	add	r3, r1
 8003846:	761a      	strb	r2, [r3, #24]
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	e000e100 	.word	0xe000e100
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <NVIC_EncodePriority>:
 800385c:	b480      	push	{r7}
 800385e:	b089      	sub	sp, #36	; 0x24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	61fb      	str	r3, [r7, #28]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f1c3 0307 	rsb	r3, r3, #7
 8003876:	2b04      	cmp	r3, #4
 8003878:	bf28      	it	cs
 800387a:	2304      	movcs	r3, #4
 800387c:	61bb      	str	r3, [r7, #24]
 800387e:	69fb      	ldr	r3, [r7, #28]
 8003880:	3304      	adds	r3, #4
 8003882:	2b06      	cmp	r3, #6
 8003884:	d902      	bls.n	800388c <NVIC_EncodePriority+0x30>
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	3b03      	subs	r3, #3
 800388a:	e000      	b.n	800388e <NVIC_EncodePriority+0x32>
 800388c:	2300      	movs	r3, #0
 800388e:	617b      	str	r3, [r7, #20]
 8003890:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	401a      	ands	r2, r3
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	409a      	lsls	r2, r3
 80038a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	fa01 f303 	lsl.w	r3, r1, r3
 80038ae:	43d9      	mvns	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	400b      	ands	r3, r1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	3724      	adds	r7, #36	; 0x24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <HAL_NVIC_SetPriorityGrouping>:
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7ff ff4f 	bl	800376c <__NVIC_SetPriorityGrouping>
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_NVIC_SetPriority>:
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b086      	sub	sp, #24
 80038da:	af00      	add	r7, sp, #0
 80038dc:	4603      	mov	r3, r0
 80038de:	60b9      	str	r1, [r7, #8]
 80038e0:	607a      	str	r2, [r7, #4]
 80038e2:	73fb      	strb	r3, [r7, #15]
 80038e4:	2300      	movs	r3, #0
 80038e6:	617b      	str	r3, [r7, #20]
 80038e8:	f7ff ff64 	bl	80037b4 <__NVIC_GetPriorityGrouping>
 80038ec:	6178      	str	r0, [r7, #20]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	68b9      	ldr	r1, [r7, #8]
 80038f2:	6978      	ldr	r0, [r7, #20]
 80038f4:	f7ff ffb2 	bl	800385c <NVIC_EncodePriority>
 80038f8:	4602      	mov	r2, r0
 80038fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038fe:	4611      	mov	r1, r2
 8003900:	4618      	mov	r0, r3
 8003902:	f7ff ff81 	bl	8003808 <__NVIC_SetPriority>
 8003906:	bf00      	nop
 8003908:	3718      	adds	r7, #24
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_NVIC_EnableIRQ>:
 800390e:	b580      	push	{r7, lr}
 8003910:	b082      	sub	sp, #8
 8003912:	af00      	add	r7, sp, #0
 8003914:	4603      	mov	r3, r0
 8003916:	71fb      	strb	r3, [r7, #7]
 8003918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800391c:	4618      	mov	r0, r3
 800391e:	f7ff ff57 	bl	80037d0 <__NVIC_EnableIRQ>
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <HAL_DMA_Abort>:
 800392a:	b480      	push	{r7}
 800392c:	b085      	sub	sp, #20
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
 8003932:	2300      	movs	r3, #0
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d008      	beq.n	8003954 <HAL_DMA_Abort+0x2a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2204      	movs	r2, #4
 8003946:	639a      	str	r2, [r3, #56]	; 0x38
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2020 	strb.w	r2, [r3, #32]
 8003950:	2301      	movs	r3, #1
 8003952:	e020      	b.n	8003996 <HAL_DMA_Abort+0x6c>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 020e 	bic.w	r2, r2, #14
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397c:	2101      	movs	r1, #1
 800397e:	fa01 f202 	lsl.w	r2, r1, r2
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2020 	strb.w	r2, [r3, #32]
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr

080039a0 <HAL_DMA_Abort_IT>:
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	2300      	movs	r3, #0
 80039aa:	73fb      	strb	r3, [r7, #15]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d005      	beq.n	80039c4 <HAL_DMA_Abort_IT+0x24>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2204      	movs	r2, #4
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38
 80039be:	2301      	movs	r3, #1
 80039c0:	73fb      	strb	r3, [r7, #15]
 80039c2:	e051      	b.n	8003a68 <HAL_DMA_Abort_IT+0xc8>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 020e 	bic.w	r2, r2, #14
 80039d2:	601a      	str	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0201 	bic.w	r2, r2, #1
 80039e2:	601a      	str	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a22      	ldr	r2, [pc, #136]	; (8003a74 <HAL_DMA_Abort_IT+0xd4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d029      	beq.n	8003a42 <HAL_DMA_Abort_IT+0xa2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a21      	ldr	r2, [pc, #132]	; (8003a78 <HAL_DMA_Abort_IT+0xd8>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d022      	beq.n	8003a3e <HAL_DMA_Abort_IT+0x9e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <HAL_DMA_Abort_IT+0xdc>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d01a      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x98>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1e      	ldr	r2, [pc, #120]	; (8003a80 <HAL_DMA_Abort_IT+0xe0>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d012      	beq.n	8003a32 <HAL_DMA_Abort_IT+0x92>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1c      	ldr	r2, [pc, #112]	; (8003a84 <HAL_DMA_Abort_IT+0xe4>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d00a      	beq.n	8003a2c <HAL_DMA_Abort_IT+0x8c>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_DMA_Abort_IT+0xe8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d102      	bne.n	8003a26 <HAL_DMA_Abort_IT+0x86>
 8003a20:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003a24:	e00e      	b.n	8003a44 <HAL_DMA_Abort_IT+0xa4>
 8003a26:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a2a:	e00b      	b.n	8003a44 <HAL_DMA_Abort_IT+0xa4>
 8003a2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a30:	e008      	b.n	8003a44 <HAL_DMA_Abort_IT+0xa4>
 8003a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a36:	e005      	b.n	8003a44 <HAL_DMA_Abort_IT+0xa4>
 8003a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a3c:	e002      	b.n	8003a44 <HAL_DMA_Abort_IT+0xa4>
 8003a3e:	2310      	movs	r3, #16
 8003a40:	e000      	b.n	8003a44 <HAL_DMA_Abort_IT+0xa4>
 8003a42:	2301      	movs	r3, #1
 8003a44:	4a11      	ldr	r2, [pc, #68]	; (8003a8c <HAL_DMA_Abort_IT+0xec>)
 8003a46:	6053      	str	r3, [r2, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2020 	strb.w	r2, [r3, #32]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_DMA_Abort_IT+0xc8>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	4798      	blx	r3
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40020008 	.word	0x40020008
 8003a78:	4002001c 	.word	0x4002001c
 8003a7c:	40020030 	.word	0x40020030
 8003a80:	40020044 	.word	0x40020044
 8003a84:	40020058 	.word	0x40020058
 8003a88:	4002006c 	.word	0x4002006c
 8003a8c:	40020000 	.word	0x40020000

08003a90 <HAL_GPIO_Init>:
 8003a90:	b480      	push	{r7}
 8003a92:	b08b      	sub	sp, #44	; 0x2c
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	623b      	str	r3, [r7, #32]
 8003aa2:	e169      	b.n	8003d78 <HAL_GPIO_Init+0x2e8>
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	69fa      	ldr	r2, [r7, #28]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	f040 8158 	bne.w	8003d72 <HAL_GPIO_Init+0x2e2>
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4a9a      	ldr	r2, [pc, #616]	; (8003d30 <HAL_GPIO_Init+0x2a0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d05e      	beq.n	8003b8a <HAL_GPIO_Init+0xfa>
 8003acc:	4a98      	ldr	r2, [pc, #608]	; (8003d30 <HAL_GPIO_Init+0x2a0>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d875      	bhi.n	8003bbe <HAL_GPIO_Init+0x12e>
 8003ad2:	4a98      	ldr	r2, [pc, #608]	; (8003d34 <HAL_GPIO_Init+0x2a4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d058      	beq.n	8003b8a <HAL_GPIO_Init+0xfa>
 8003ad8:	4a96      	ldr	r2, [pc, #600]	; (8003d34 <HAL_GPIO_Init+0x2a4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d86f      	bhi.n	8003bbe <HAL_GPIO_Init+0x12e>
 8003ade:	4a96      	ldr	r2, [pc, #600]	; (8003d38 <HAL_GPIO_Init+0x2a8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d052      	beq.n	8003b8a <HAL_GPIO_Init+0xfa>
 8003ae4:	4a94      	ldr	r2, [pc, #592]	; (8003d38 <HAL_GPIO_Init+0x2a8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d869      	bhi.n	8003bbe <HAL_GPIO_Init+0x12e>
 8003aea:	4a94      	ldr	r2, [pc, #592]	; (8003d3c <HAL_GPIO_Init+0x2ac>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d04c      	beq.n	8003b8a <HAL_GPIO_Init+0xfa>
 8003af0:	4a92      	ldr	r2, [pc, #584]	; (8003d3c <HAL_GPIO_Init+0x2ac>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d863      	bhi.n	8003bbe <HAL_GPIO_Init+0x12e>
 8003af6:	4a92      	ldr	r2, [pc, #584]	; (8003d40 <HAL_GPIO_Init+0x2b0>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d046      	beq.n	8003b8a <HAL_GPIO_Init+0xfa>
 8003afc:	4a90      	ldr	r2, [pc, #576]	; (8003d40 <HAL_GPIO_Init+0x2b0>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d85d      	bhi.n	8003bbe <HAL_GPIO_Init+0x12e>
 8003b02:	2b12      	cmp	r3, #18
 8003b04:	d82a      	bhi.n	8003b5c <HAL_GPIO_Init+0xcc>
 8003b06:	2b12      	cmp	r3, #18
 8003b08:	d859      	bhi.n	8003bbe <HAL_GPIO_Init+0x12e>
 8003b0a:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <HAL_GPIO_Init+0x80>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b8b 	.word	0x08003b8b
 8003b14:	08003b65 	.word	0x08003b65
 8003b18:	08003b77 	.word	0x08003b77
 8003b1c:	08003bb9 	.word	0x08003bb9
 8003b20:	08003bbf 	.word	0x08003bbf
 8003b24:	08003bbf 	.word	0x08003bbf
 8003b28:	08003bbf 	.word	0x08003bbf
 8003b2c:	08003bbf 	.word	0x08003bbf
 8003b30:	08003bbf 	.word	0x08003bbf
 8003b34:	08003bbf 	.word	0x08003bbf
 8003b38:	08003bbf 	.word	0x08003bbf
 8003b3c:	08003bbf 	.word	0x08003bbf
 8003b40:	08003bbf 	.word	0x08003bbf
 8003b44:	08003bbf 	.word	0x08003bbf
 8003b48:	08003bbf 	.word	0x08003bbf
 8003b4c:	08003bbf 	.word	0x08003bbf
 8003b50:	08003bbf 	.word	0x08003bbf
 8003b54:	08003b6d 	.word	0x08003b6d
 8003b58:	08003b81 	.word	0x08003b81
 8003b5c:	4a79      	ldr	r2, [pc, #484]	; (8003d44 <HAL_GPIO_Init+0x2b4>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d013      	beq.n	8003b8a <HAL_GPIO_Init+0xfa>
 8003b62:	e02c      	b.n	8003bbe <HAL_GPIO_Init+0x12e>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	623b      	str	r3, [r7, #32]
 8003b6a:	e029      	b.n	8003bc0 <HAL_GPIO_Init+0x130>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	68db      	ldr	r3, [r3, #12]
 8003b70:	3304      	adds	r3, #4
 8003b72:	623b      	str	r3, [r7, #32]
 8003b74:	e024      	b.n	8003bc0 <HAL_GPIO_Init+0x130>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	3308      	adds	r3, #8
 8003b7c:	623b      	str	r3, [r7, #32]
 8003b7e:	e01f      	b.n	8003bc0 <HAL_GPIO_Init+0x130>
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	330c      	adds	r3, #12
 8003b86:	623b      	str	r3, [r7, #32]
 8003b88:	e01a      	b.n	8003bc0 <HAL_GPIO_Init+0x130>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <HAL_GPIO_Init+0x108>
 8003b92:	2304      	movs	r3, #4
 8003b94:	623b      	str	r3, [r7, #32]
 8003b96:	e013      	b.n	8003bc0 <HAL_GPIO_Init+0x130>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d105      	bne.n	8003bac <HAL_GPIO_Init+0x11c>
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	623b      	str	r3, [r7, #32]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	611a      	str	r2, [r3, #16]
 8003baa:	e009      	b.n	8003bc0 <HAL_GPIO_Init+0x130>
 8003bac:	2308      	movs	r3, #8
 8003bae:	623b      	str	r3, [r7, #32]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69fa      	ldr	r2, [r7, #28]
 8003bb4:	615a      	str	r2, [r3, #20]
 8003bb6:	e003      	b.n	8003bc0 <HAL_GPIO_Init+0x130>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	623b      	str	r3, [r7, #32]
 8003bbc:	e000      	b.n	8003bc0 <HAL_GPIO_Init+0x130>
 8003bbe:	bf00      	nop
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	2bff      	cmp	r3, #255	; 0xff
 8003bc4:	d801      	bhi.n	8003bca <HAL_GPIO_Init+0x13a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	e001      	b.n	8003bce <HAL_GPIO_Init+0x13e>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2bff      	cmp	r3, #255	; 0xff
 8003bd4:	d802      	bhi.n	8003bdc <HAL_GPIO_Init+0x14c>
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	e002      	b.n	8003be2 <HAL_GPIO_Init+0x152>
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	3b08      	subs	r3, #8
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	210f      	movs	r1, #15
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	fa01 f303 	lsl.w	r3, r1, r3
 8003bf0:	43db      	mvns	r3, r3
 8003bf2:	401a      	ands	r2, r3
 8003bf4:	6a39      	ldr	r1, [r7, #32]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 80b1 	beq.w	8003d72 <HAL_GPIO_Init+0x2e2>
 8003c10:	4b4d      	ldr	r3, [pc, #308]	; (8003d48 <HAL_GPIO_Init+0x2b8>)
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	4a4c      	ldr	r2, [pc, #304]	; (8003d48 <HAL_GPIO_Init+0x2b8>)
 8003c16:	f043 0301 	orr.w	r3, r3, #1
 8003c1a:	6193      	str	r3, [r2, #24]
 8003c1c:	4b4a      	ldr	r3, [pc, #296]	; (8003d48 <HAL_GPIO_Init+0x2b8>)
 8003c1e:	699b      	ldr	r3, [r3, #24]
 8003c20:	f003 0301 	and.w	r3, r3, #1
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4a48      	ldr	r2, [pc, #288]	; (8003d4c <HAL_GPIO_Init+0x2bc>)
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	089b      	lsrs	r3, r3, #2
 8003c2e:	3302      	adds	r3, #2
 8003c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c34:	60fb      	str	r3, [r7, #12]
 8003c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	220f      	movs	r2, #15
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a40      	ldr	r2, [pc, #256]	; (8003d50 <HAL_GPIO_Init+0x2c0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d013      	beq.n	8003c7c <HAL_GPIO_Init+0x1ec>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a3f      	ldr	r2, [pc, #252]	; (8003d54 <HAL_GPIO_Init+0x2c4>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d00d      	beq.n	8003c78 <HAL_GPIO_Init+0x1e8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a3e      	ldr	r2, [pc, #248]	; (8003d58 <HAL_GPIO_Init+0x2c8>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d007      	beq.n	8003c74 <HAL_GPIO_Init+0x1e4>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a3d      	ldr	r2, [pc, #244]	; (8003d5c <HAL_GPIO_Init+0x2cc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d101      	bne.n	8003c70 <HAL_GPIO_Init+0x1e0>
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e006      	b.n	8003c7e <HAL_GPIO_Init+0x1ee>
 8003c70:	2304      	movs	r3, #4
 8003c72:	e004      	b.n	8003c7e <HAL_GPIO_Init+0x1ee>
 8003c74:	2302      	movs	r3, #2
 8003c76:	e002      	b.n	8003c7e <HAL_GPIO_Init+0x1ee>
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <HAL_GPIO_Init+0x1ee>
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c80:	f002 0203 	and.w	r2, r2, #3
 8003c84:	0092      	lsls	r2, r2, #2
 8003c86:	4093      	lsls	r3, r2
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	492f      	ldr	r1, [pc, #188]	; (8003d4c <HAL_GPIO_Init+0x2bc>)
 8003c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	3302      	adds	r3, #2
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d006      	beq.n	8003cb6 <HAL_GPIO_Init+0x226>
 8003ca8:	4b2d      	ldr	r3, [pc, #180]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	492c      	ldr	r1, [pc, #176]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003cae:	69bb      	ldr	r3, [r7, #24]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	608b      	str	r3, [r1, #8]
 8003cb4:	e006      	b.n	8003cc4 <HAL_GPIO_Init+0x234>
 8003cb6:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	43db      	mvns	r3, r3
 8003cbe:	4928      	ldr	r1, [pc, #160]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	608b      	str	r3, [r1, #8]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d006      	beq.n	8003cde <HAL_GPIO_Init+0x24e>
 8003cd0:	4b23      	ldr	r3, [pc, #140]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	4922      	ldr	r1, [pc, #136]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	60cb      	str	r3, [r1, #12]
 8003cdc:	e006      	b.n	8003cec <HAL_GPIO_Init+0x25c>
 8003cde:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	491e      	ldr	r1, [pc, #120]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60cb      	str	r3, [r1, #12]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d006      	beq.n	8003d06 <HAL_GPIO_Init+0x276>
 8003cf8:	4b19      	ldr	r3, [pc, #100]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	4918      	ldr	r1, [pc, #96]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
 8003d04:	e006      	b.n	8003d14 <HAL_GPIO_Init+0x284>
 8003d06:	4b16      	ldr	r3, [pc, #88]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	4914      	ldr	r1, [pc, #80]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	604b      	str	r3, [r1, #4]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d021      	beq.n	8003d64 <HAL_GPIO_Init+0x2d4>
 8003d20:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	490e      	ldr	r1, [pc, #56]	; (8003d60 <HAL_GPIO_Init+0x2d0>)
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	600b      	str	r3, [r1, #0]
 8003d2c:	e021      	b.n	8003d72 <HAL_GPIO_Init+0x2e2>
 8003d2e:	bf00      	nop
 8003d30:	10320000 	.word	0x10320000
 8003d34:	10310000 	.word	0x10310000
 8003d38:	10220000 	.word	0x10220000
 8003d3c:	10210000 	.word	0x10210000
 8003d40:	10120000 	.word	0x10120000
 8003d44:	10110000 	.word	0x10110000
 8003d48:	40021000 	.word	0x40021000
 8003d4c:	40010000 	.word	0x40010000
 8003d50:	40010800 	.word	0x40010800
 8003d54:	40010c00 	.word	0x40010c00
 8003d58:	40011000 	.word	0x40011000
 8003d5c:	40011400 	.word	0x40011400
 8003d60:	40010400 	.word	0x40010400
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_GPIO_Init+0x304>)
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	4909      	ldr	r1, [pc, #36]	; (8003d94 <HAL_GPIO_Init+0x304>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]
 8003d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d74:	3301      	adds	r3, #1
 8003d76:	627b      	str	r3, [r7, #36]	; 0x24
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	f47f ae8e 	bne.w	8003aa4 <HAL_GPIO_Init+0x14>
 8003d88:	bf00      	nop
 8003d8a:	bf00      	nop
 8003d8c:	372c      	adds	r7, #44	; 0x2c
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bc80      	pop	{r7}
 8003d92:	4770      	bx	lr
 8003d94:	40010400 	.word	0x40010400

08003d98 <HAL_GPIO_WritePin>:
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	460b      	mov	r3, r1
 8003da2:	807b      	strh	r3, [r7, #2]
 8003da4:	4613      	mov	r3, r2
 8003da6:	707b      	strb	r3, [r7, #1]
 8003da8:	787b      	ldrb	r3, [r7, #1]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d003      	beq.n	8003db6 <HAL_GPIO_WritePin+0x1e>
 8003dae:	887a      	ldrh	r2, [r7, #2]
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	611a      	str	r2, [r3, #16]
 8003db4:	e003      	b.n	8003dbe <HAL_GPIO_WritePin+0x26>
 8003db6:	887b      	ldrh	r3, [r7, #2]
 8003db8:	041a      	lsls	r2, r3, #16
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	611a      	str	r2, [r3, #16]
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr

08003dc8 <HAL_GPIO_TogglePin>:
 8003dc8:	b480      	push	{r7}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	807b      	strh	r3, [r7, #2]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	60fb      	str	r3, [r7, #12]
 8003dda:	887a      	ldrh	r2, [r7, #2]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4013      	ands	r3, r2
 8003de0:	041a      	lsls	r2, r3, #16
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	43d9      	mvns	r1, r3
 8003de6:	887b      	ldrh	r3, [r7, #2]
 8003de8:	400b      	ands	r3, r1
 8003dea:	431a      	orrs	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	611a      	str	r2, [r3, #16]
 8003df0:	bf00      	nop
 8003df2:	3714      	adds	r7, #20
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bc80      	pop	{r7}
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_RCC_OscConfig>:
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d101      	bne.n	8003e0e <HAL_RCC_OscConfig+0x12>
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e272      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 8087 	beq.w	8003f2a <HAL_RCC_OscConfig+0x12e>
 8003e1c:	4b92      	ldr	r3, [pc, #584]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f003 030c 	and.w	r3, r3, #12
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d00c      	beq.n	8003e42 <HAL_RCC_OscConfig+0x46>
 8003e28:	4b8f      	ldr	r3, [pc, #572]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d112      	bne.n	8003e5a <HAL_RCC_OscConfig+0x5e>
 8003e34:	4b8c      	ldr	r3, [pc, #560]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e40:	d10b      	bne.n	8003e5a <HAL_RCC_OscConfig+0x5e>
 8003e42:	4b89      	ldr	r3, [pc, #548]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d06c      	beq.n	8003f28 <HAL_RCC_OscConfig+0x12c>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d168      	bne.n	8003f28 <HAL_RCC_OscConfig+0x12c>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e24c      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e62:	d106      	bne.n	8003e72 <HAL_RCC_OscConfig+0x76>
 8003e64:	4b80      	ldr	r3, [pc, #512]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a7f      	ldr	r2, [pc, #508]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6e:	6013      	str	r3, [r2, #0]
 8003e70:	e02e      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd4>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10c      	bne.n	8003e94 <HAL_RCC_OscConfig+0x98>
 8003e7a:	4b7b      	ldr	r3, [pc, #492]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a7a      	ldr	r2, [pc, #488]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4b78      	ldr	r3, [pc, #480]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a77      	ldr	r2, [pc, #476]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e01d      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd4>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e9c:	d10c      	bne.n	8003eb8 <HAL_RCC_OscConfig+0xbc>
 8003e9e:	4b72      	ldr	r3, [pc, #456]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a71      	ldr	r2, [pc, #452]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ea8:	6013      	str	r3, [r2, #0]
 8003eaa:	4b6f      	ldr	r3, [pc, #444]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a6e      	ldr	r2, [pc, #440]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	e00b      	b.n	8003ed0 <HAL_RCC_OscConfig+0xd4>
 8003eb8:	4b6b      	ldr	r3, [pc, #428]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a6a      	ldr	r2, [pc, #424]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ec2:	6013      	str	r3, [r2, #0]
 8003ec4:	4b68      	ldr	r3, [pc, #416]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a67      	ldr	r2, [pc, #412]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d013      	beq.n	8003f00 <HAL_RCC_OscConfig+0x104>
 8003ed8:	f7ff fc3e 	bl	8003758 <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0xf6>
 8003ee0:	f7ff fc3a 	bl	8003758 <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b64      	cmp	r3, #100	; 0x64
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0xf6>
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e200      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 8003ef2:	4b5d      	ldr	r3, [pc, #372]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0f0      	beq.n	8003ee0 <HAL_RCC_OscConfig+0xe4>
 8003efe:	e014      	b.n	8003f2a <HAL_RCC_OscConfig+0x12e>
 8003f00:	f7ff fc2a 	bl	8003758 <HAL_GetTick>
 8003f04:	6138      	str	r0, [r7, #16]
 8003f06:	e008      	b.n	8003f1a <HAL_RCC_OscConfig+0x11e>
 8003f08:	f7ff fc26 	bl	8003758 <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	; 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCC_OscConfig+0x11e>
 8003f16:	2303      	movs	r3, #3
 8003f18:	e1ec      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 8003f1a:	4b53      	ldr	r3, [pc, #332]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1f0      	bne.n	8003f08 <HAL_RCC_OscConfig+0x10c>
 8003f26:	e000      	b.n	8003f2a <HAL_RCC_OscConfig+0x12e>
 8003f28:	bf00      	nop
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d063      	beq.n	8003ffe <HAL_RCC_OscConfig+0x202>
 8003f36:	4b4c      	ldr	r3, [pc, #304]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 030c 	and.w	r3, r3, #12
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <HAL_RCC_OscConfig+0x15e>
 8003f42:	4b49      	ldr	r3, [pc, #292]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d11c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x18c>
 8003f4e:	4b46      	ldr	r3, [pc, #280]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d116      	bne.n	8003f88 <HAL_RCC_OscConfig+0x18c>
 8003f5a:	4b43      	ldr	r3, [pc, #268]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d005      	beq.n	8003f72 <HAL_RCC_OscConfig+0x176>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d001      	beq.n	8003f72 <HAL_RCC_OscConfig+0x176>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e1c0      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 8003f72:	4b3d      	ldr	r3, [pc, #244]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	00db      	lsls	r3, r3, #3
 8003f80:	4939      	ldr	r1, [pc, #228]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]
 8003f86:	e03a      	b.n	8003ffe <HAL_RCC_OscConfig+0x202>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d020      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x1d6>
 8003f90:	4b36      	ldr	r3, [pc, #216]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003f92:	2201      	movs	r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	f7ff fbdf 	bl	8003758 <HAL_GetTick>
 8003f9a:	6138      	str	r0, [r7, #16]
 8003f9c:	e008      	b.n	8003fb0 <HAL_RCC_OscConfig+0x1b4>
 8003f9e:	f7ff fbdb 	bl	8003758 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x1b4>
 8003fac:	2303      	movs	r3, #3
 8003fae:	e1a1      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 8003fb0:	4b2d      	ldr	r3, [pc, #180]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1a2>
 8003fbc:	4b2a      	ldr	r3, [pc, #168]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4927      	ldr	r1, [pc, #156]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	600b      	str	r3, [r1, #0]
 8003fd0:	e015      	b.n	8003ffe <HAL_RCC_OscConfig+0x202>
 8003fd2:	4b26      	ldr	r3, [pc, #152]	; (800406c <HAL_RCC_OscConfig+0x270>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f7ff fbbe 	bl	8003758 <HAL_GetTick>
 8003fdc:	6138      	str	r0, [r7, #16]
 8003fde:	e008      	b.n	8003ff2 <HAL_RCC_OscConfig+0x1f6>
 8003fe0:	f7ff fbba 	bl	8003758 <HAL_GetTick>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	1ad3      	subs	r3, r2, r3
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x1f6>
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e180      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 8003ff2:	4b1d      	ldr	r3, [pc, #116]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1f0      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x1e4>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d03a      	beq.n	8004080 <HAL_RCC_OscConfig+0x284>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d019      	beq.n	8004046 <HAL_RCC_OscConfig+0x24a>
 8004012:	4b17      	ldr	r3, [pc, #92]	; (8004070 <HAL_RCC_OscConfig+0x274>)
 8004014:	2201      	movs	r2, #1
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	f7ff fb9e 	bl	8003758 <HAL_GetTick>
 800401c:	6138      	str	r0, [r7, #16]
 800401e:	e008      	b.n	8004032 <HAL_RCC_OscConfig+0x236>
 8004020:	f7ff fb9a 	bl	8003758 <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	2b02      	cmp	r3, #2
 800402c:	d901      	bls.n	8004032 <HAL_RCC_OscConfig+0x236>
 800402e:	2303      	movs	r3, #3
 8004030:	e160      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 8004032:	4b0d      	ldr	r3, [pc, #52]	; (8004068 <HAL_RCC_OscConfig+0x26c>)
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d0f0      	beq.n	8004020 <HAL_RCC_OscConfig+0x224>
 800403e:	2001      	movs	r0, #1
 8004040:	f000 fb1e 	bl	8004680 <RCC_Delay>
 8004044:	e01c      	b.n	8004080 <HAL_RCC_OscConfig+0x284>
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <HAL_RCC_OscConfig+0x274>)
 8004048:	2200      	movs	r2, #0
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f7ff fb84 	bl	8003758 <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]
 8004052:	e00f      	b.n	8004074 <HAL_RCC_OscConfig+0x278>
 8004054:	f7ff fb80 	bl	8003758 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b02      	cmp	r3, #2
 8004060:	d908      	bls.n	8004074 <HAL_RCC_OscConfig+0x278>
 8004062:	2303      	movs	r3, #3
 8004064:	e146      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 8004066:	bf00      	nop
 8004068:	40021000 	.word	0x40021000
 800406c:	42420000 	.word	0x42420000
 8004070:	42420480 	.word	0x42420480
 8004074:	4b92      	ldr	r3, [pc, #584]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004078:	f003 0302 	and.w	r3, r3, #2
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e9      	bne.n	8004054 <HAL_RCC_OscConfig+0x258>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0304 	and.w	r3, r3, #4
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80a6 	beq.w	80041da <HAL_RCC_OscConfig+0x3de>
 800408e:	2300      	movs	r3, #0
 8004090:	75fb      	strb	r3, [r7, #23]
 8004092:	4b8b      	ldr	r3, [pc, #556]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10d      	bne.n	80040ba <HAL_RCC_OscConfig+0x2be>
 800409e:	4b88      	ldr	r3, [pc, #544]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	4a87      	ldr	r2, [pc, #540]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 80040a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040a8:	61d3      	str	r3, [r2, #28]
 80040aa:	4b85      	ldr	r3, [pc, #532]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b2:	60bb      	str	r3, [r7, #8]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2301      	movs	r3, #1
 80040b8:	75fb      	strb	r3, [r7, #23]
 80040ba:	4b82      	ldr	r3, [pc, #520]	; (80042c4 <HAL_RCC_OscConfig+0x4c8>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d118      	bne.n	80040f8 <HAL_RCC_OscConfig+0x2fc>
 80040c6:	4b7f      	ldr	r3, [pc, #508]	; (80042c4 <HAL_RCC_OscConfig+0x4c8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a7e      	ldr	r2, [pc, #504]	; (80042c4 <HAL_RCC_OscConfig+0x4c8>)
 80040cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	f7ff fb41 	bl	8003758 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x2f0>
 80040da:	f7ff fb3d 	bl	8003758 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b64      	cmp	r3, #100	; 0x64
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x2f0>
 80040e8:	2303      	movs	r3, #3
 80040ea:	e103      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 80040ec:	4b75      	ldr	r3, [pc, #468]	; (80042c4 <HAL_RCC_OscConfig+0x4c8>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x2de>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d106      	bne.n	800410e <HAL_RCC_OscConfig+0x312>
 8004100:	4b6f      	ldr	r3, [pc, #444]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004102:	6a1b      	ldr	r3, [r3, #32]
 8004104:	4a6e      	ldr	r2, [pc, #440]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	6213      	str	r3, [r2, #32]
 800410c:	e02d      	b.n	800416a <HAL_RCC_OscConfig+0x36e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d10c      	bne.n	8004130 <HAL_RCC_OscConfig+0x334>
 8004116:	4b6a      	ldr	r3, [pc, #424]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	4a69      	ldr	r2, [pc, #420]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	6213      	str	r3, [r2, #32]
 8004122:	4b67      	ldr	r3, [pc, #412]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	4a66      	ldr	r2, [pc, #408]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004128:	f023 0304 	bic.w	r3, r3, #4
 800412c:	6213      	str	r3, [r2, #32]
 800412e:	e01c      	b.n	800416a <HAL_RCC_OscConfig+0x36e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	2b05      	cmp	r3, #5
 8004136:	d10c      	bne.n	8004152 <HAL_RCC_OscConfig+0x356>
 8004138:	4b61      	ldr	r3, [pc, #388]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	4a60      	ldr	r2, [pc, #384]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 800413e:	f043 0304 	orr.w	r3, r3, #4
 8004142:	6213      	str	r3, [r2, #32]
 8004144:	4b5e      	ldr	r3, [pc, #376]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	4a5d      	ldr	r2, [pc, #372]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 800414a:	f043 0301 	orr.w	r3, r3, #1
 800414e:	6213      	str	r3, [r2, #32]
 8004150:	e00b      	b.n	800416a <HAL_RCC_OscConfig+0x36e>
 8004152:	4b5b      	ldr	r3, [pc, #364]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	4a5a      	ldr	r2, [pc, #360]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004158:	f023 0301 	bic.w	r3, r3, #1
 800415c:	6213      	str	r3, [r2, #32]
 800415e:	4b58      	ldr	r3, [pc, #352]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	4a57      	ldr	r2, [pc, #348]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004164:	f023 0304 	bic.w	r3, r3, #4
 8004168:	6213      	str	r3, [r2, #32]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d015      	beq.n	800419e <HAL_RCC_OscConfig+0x3a2>
 8004172:	f7ff faf1 	bl	8003758 <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]
 8004178:	e00a      	b.n	8004190 <HAL_RCC_OscConfig+0x394>
 800417a:	f7ff faed 	bl	8003758 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	f241 3288 	movw	r2, #5000	; 0x1388
 8004188:	4293      	cmp	r3, r2
 800418a:	d901      	bls.n	8004190 <HAL_RCC_OscConfig+0x394>
 800418c:	2303      	movs	r3, #3
 800418e:	e0b1      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 8004190:	4b4b      	ldr	r3, [pc, #300]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	f003 0302 	and.w	r3, r3, #2
 8004198:	2b00      	cmp	r3, #0
 800419a:	d0ee      	beq.n	800417a <HAL_RCC_OscConfig+0x37e>
 800419c:	e014      	b.n	80041c8 <HAL_RCC_OscConfig+0x3cc>
 800419e:	f7ff fadb 	bl	8003758 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]
 80041a4:	e00a      	b.n	80041bc <HAL_RCC_OscConfig+0x3c0>
 80041a6:	f7ff fad7 	bl	8003758 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d901      	bls.n	80041bc <HAL_RCC_OscConfig+0x3c0>
 80041b8:	2303      	movs	r3, #3
 80041ba:	e09b      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 80041bc:	4b40      	ldr	r3, [pc, #256]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f003 0302 	and.w	r3, r3, #2
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d1ee      	bne.n	80041a6 <HAL_RCC_OscConfig+0x3aa>
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d105      	bne.n	80041da <HAL_RCC_OscConfig+0x3de>
 80041ce:	4b3c      	ldr	r3, [pc, #240]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 80041d0:	69db      	ldr	r3, [r3, #28]
 80041d2:	4a3b      	ldr	r2, [pc, #236]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 80041d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041d8:	61d3      	str	r3, [r2, #28]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f000 8087 	beq.w	80042f2 <HAL_RCC_OscConfig+0x4f6>
 80041e4:	4b36      	ldr	r3, [pc, #216]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 030c 	and.w	r3, r3, #12
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d061      	beq.n	80042b4 <HAL_RCC_OscConfig+0x4b8>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d146      	bne.n	8004286 <HAL_RCC_OscConfig+0x48a>
 80041f8:	4b33      	ldr	r3, [pc, #204]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	f7ff faab 	bl	8003758 <HAL_GetTick>
 8004202:	6138      	str	r0, [r7, #16]
 8004204:	e008      	b.n	8004218 <HAL_RCC_OscConfig+0x41c>
 8004206:	f7ff faa7 	bl	8003758 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d901      	bls.n	8004218 <HAL_RCC_OscConfig+0x41c>
 8004214:	2303      	movs	r3, #3
 8004216:	e06d      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 8004218:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f0      	bne.n	8004206 <HAL_RCC_OscConfig+0x40a>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a1b      	ldr	r3, [r3, #32]
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422c:	d108      	bne.n	8004240 <HAL_RCC_OscConfig+0x444>
 800422e:	4b24      	ldr	r3, [pc, #144]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	4921      	ldr	r1, [pc, #132]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 800423c:	4313      	orrs	r3, r2
 800423e:	604b      	str	r3, [r1, #4]
 8004240:	4b1f      	ldr	r3, [pc, #124]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a19      	ldr	r1, [r3, #32]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004250:	430b      	orrs	r3, r1
 8004252:	491b      	ldr	r1, [pc, #108]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]
 8004258:	4b1b      	ldr	r3, [pc, #108]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	f7ff fa7b 	bl	8003758 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x47c>
 8004266:	f7ff fa77 	bl	8003758 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x47c>
 8004274:	2303      	movs	r3, #3
 8004276:	e03d      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 8004278:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x46a>
 8004284:	e035      	b.n	80042f2 <HAL_RCC_OscConfig+0x4f6>
 8004286:	4b10      	ldr	r3, [pc, #64]	; (80042c8 <HAL_RCC_OscConfig+0x4cc>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
 800428c:	f7ff fa64 	bl	8003758 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x4aa>
 8004294:	f7ff fa60 	bl	8003758 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x4aa>
 80042a2:	2303      	movs	r3, #3
 80042a4:	e026      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <HAL_RCC_OscConfig+0x4c4>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x498>
 80042b2:	e01e      	b.n	80042f2 <HAL_RCC_OscConfig+0x4f6>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_OscConfig+0x4d0>
 80042bc:	2301      	movs	r3, #1
 80042be:	e019      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 80042c0:	40021000 	.word	0x40021000
 80042c4:	40007000 	.word	0x40007000
 80042c8:	42420060 	.word	0x42420060
 80042cc:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_RCC_OscConfig+0x500>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d106      	bne.n	80042ee <HAL_RCC_OscConfig+0x4f2>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d001      	beq.n	80042f2 <HAL_RCC_OscConfig+0x4f6>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e000      	b.n	80042f4 <HAL_RCC_OscConfig+0x4f8>
 80042f2:	2300      	movs	r3, #0
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40021000 	.word	0x40021000

08004300 <HAL_RCC_ClockConfig>:
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_RCC_ClockConfig+0x14>
 8004310:	2301      	movs	r3, #1
 8004312:	e0d0      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1b6>
 8004314:	4b6a      	ldr	r3, [pc, #424]	; (80044c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0307 	and.w	r3, r3, #7
 800431c:	683a      	ldr	r2, [r7, #0]
 800431e:	429a      	cmp	r2, r3
 8004320:	d910      	bls.n	8004344 <HAL_RCC_ClockConfig+0x44>
 8004322:	4b67      	ldr	r3, [pc, #412]	; (80044c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f023 0207 	bic.w	r2, r3, #7
 800432a:	4965      	ldr	r1, [pc, #404]	; (80044c0 <HAL_RCC_ClockConfig+0x1c0>)
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	4313      	orrs	r3, r2
 8004330:	600b      	str	r3, [r1, #0]
 8004332:	4b63      	ldr	r3, [pc, #396]	; (80044c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	683a      	ldr	r2, [r7, #0]
 800433c:	429a      	cmp	r2, r3
 800433e:	d001      	beq.n	8004344 <HAL_RCC_ClockConfig+0x44>
 8004340:	2301      	movs	r3, #1
 8004342:	e0b8      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1b6>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b00      	cmp	r3, #0
 800434e:	d020      	beq.n	8004392 <HAL_RCC_ClockConfig+0x92>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <HAL_RCC_ClockConfig+0x68>
 800435c:	4b59      	ldr	r3, [pc, #356]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	4a58      	ldr	r2, [pc, #352]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004362:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004366:	6053      	str	r3, [r2, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0308 	and.w	r3, r3, #8
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_RCC_ClockConfig+0x80>
 8004374:	4b53      	ldr	r3, [pc, #332]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	4a52      	ldr	r2, [pc, #328]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 800437a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800437e:	6053      	str	r3, [r2, #4]
 8004380:	4b50      	ldr	r3, [pc, #320]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	494d      	ldr	r1, [pc, #308]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 800438e:	4313      	orrs	r3, r2
 8004390:	604b      	str	r3, [r1, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d040      	beq.n	8004420 <HAL_RCC_ClockConfig+0x120>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d107      	bne.n	80043b6 <HAL_RCC_ClockConfig+0xb6>
 80043a6:	4b47      	ldr	r3, [pc, #284]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d115      	bne.n	80043de <HAL_RCC_ClockConfig+0xde>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e07f      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1b6>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d107      	bne.n	80043ce <HAL_RCC_ClockConfig+0xce>
 80043be:	4b41      	ldr	r3, [pc, #260]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d109      	bne.n	80043de <HAL_RCC_ClockConfig+0xde>
 80043ca:	2301      	movs	r3, #1
 80043cc:	e073      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1b6>
 80043ce:	4b3d      	ldr	r3, [pc, #244]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <HAL_RCC_ClockConfig+0xde>
 80043da:	2301      	movs	r3, #1
 80043dc:	e06b      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1b6>
 80043de:	4b39      	ldr	r3, [pc, #228]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f023 0203 	bic.w	r2, r3, #3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	4936      	ldr	r1, [pc, #216]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	604b      	str	r3, [r1, #4]
 80043f0:	f7ff f9b2 	bl	8003758 <HAL_GetTick>
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	e00a      	b.n	800440e <HAL_RCC_ClockConfig+0x10e>
 80043f8:	f7ff f9ae 	bl	8003758 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	f241 3288 	movw	r2, #5000	; 0x1388
 8004406:	4293      	cmp	r3, r2
 8004408:	d901      	bls.n	800440e <HAL_RCC_ClockConfig+0x10e>
 800440a:	2303      	movs	r3, #3
 800440c:	e053      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1b6>
 800440e:	4b2d      	ldr	r3, [pc, #180]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f003 020c 	and.w	r2, r3, #12
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	429a      	cmp	r2, r3
 800441e:	d1eb      	bne.n	80043f8 <HAL_RCC_ClockConfig+0xf8>
 8004420:	4b27      	ldr	r3, [pc, #156]	; (80044c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d210      	bcs.n	8004450 <HAL_RCC_ClockConfig+0x150>
 800442e:	4b24      	ldr	r3, [pc, #144]	; (80044c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 0207 	bic.w	r2, r3, #7
 8004436:	4922      	ldr	r1, [pc, #136]	; (80044c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]
 800443e:	4b20      	ldr	r3, [pc, #128]	; (80044c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_ClockConfig+0x150>
 800444c:	2301      	movs	r3, #1
 800444e:	e032      	b.n	80044b6 <HAL_RCC_ClockConfig+0x1b6>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0304 	and.w	r3, r3, #4
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_RCC_ClockConfig+0x16e>
 800445c:	4b19      	ldr	r3, [pc, #100]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	4916      	ldr	r1, [pc, #88]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 800446a:	4313      	orrs	r3, r2
 800446c:	604b      	str	r3, [r1, #4]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0308 	and.w	r3, r3, #8
 8004476:	2b00      	cmp	r3, #0
 8004478:	d009      	beq.n	800448e <HAL_RCC_ClockConfig+0x18e>
 800447a:	4b12      	ldr	r3, [pc, #72]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	490e      	ldr	r1, [pc, #56]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	4313      	orrs	r3, r2
 800448c:	604b      	str	r3, [r1, #4]
 800448e:	f000 f82d 	bl	80044ec <HAL_RCC_GetSysClockFreq>
 8004492:	4602      	mov	r2, r0
 8004494:	4b0b      	ldr	r3, [pc, #44]	; (80044c4 <HAL_RCC_ClockConfig+0x1c4>)
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	f003 030f 	and.w	r3, r3, #15
 800449e:	490a      	ldr	r1, [pc, #40]	; (80044c8 <HAL_RCC_ClockConfig+0x1c8>)
 80044a0:	5ccb      	ldrb	r3, [r1, r3]
 80044a2:	fa22 f303 	lsr.w	r3, r2, r3
 80044a6:	4a09      	ldr	r2, [pc, #36]	; (80044cc <HAL_RCC_ClockConfig+0x1cc>)
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	4b09      	ldr	r3, [pc, #36]	; (80044d0 <HAL_RCC_ClockConfig+0x1d0>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fe ff5c 	bl	800336c <HAL_InitTick>
 80044b4:	2300      	movs	r3, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40022000 	.word	0x40022000
 80044c4:	40021000 	.word	0x40021000
 80044c8:	0800a8f0 	.word	0x0800a8f0
 80044cc:	20000000 	.word	0x20000000
 80044d0:	20000004 	.word	0x20000004

080044d4 <HAL_RCC_EnableCSS>:
 80044d4:	b480      	push	{r7}
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	4b03      	ldr	r3, [pc, #12]	; (80044e8 <HAL_RCC_EnableCSS+0x14>)
 80044da:	2201      	movs	r2, #1
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	bf00      	nop
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	4242004c 	.word	0x4242004c

080044ec <HAL_RCC_GetSysClockFreq>:
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	2300      	movs	r3, #0
 80044f4:	60fb      	str	r3, [r7, #12]
 80044f6:	2300      	movs	r3, #0
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
 80044fe:	2300      	movs	r3, #0
 8004500:	607b      	str	r3, [r7, #4]
 8004502:	2300      	movs	r3, #0
 8004504:	613b      	str	r3, [r7, #16]
 8004506:	4b1e      	ldr	r3, [pc, #120]	; (8004580 <HAL_RCC_GetSysClockFreq+0x94>)
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 030c 	and.w	r3, r3, #12
 8004512:	2b04      	cmp	r3, #4
 8004514:	d002      	beq.n	800451c <HAL_RCC_GetSysClockFreq+0x30>
 8004516:	2b08      	cmp	r3, #8
 8004518:	d003      	beq.n	8004522 <HAL_RCC_GetSysClockFreq+0x36>
 800451a:	e027      	b.n	800456c <HAL_RCC_GetSysClockFreq+0x80>
 800451c:	4b19      	ldr	r3, [pc, #100]	; (8004584 <HAL_RCC_GetSysClockFreq+0x98>)
 800451e:	613b      	str	r3, [r7, #16]
 8004520:	e027      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x86>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	0c9b      	lsrs	r3, r3, #18
 8004526:	f003 030f 	and.w	r3, r3, #15
 800452a:	4a17      	ldr	r2, [pc, #92]	; (8004588 <HAL_RCC_GetSysClockFreq+0x9c>)
 800452c:	5cd3      	ldrb	r3, [r2, r3]
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d010      	beq.n	800455c <HAL_RCC_GetSysClockFreq+0x70>
 800453a:	4b11      	ldr	r3, [pc, #68]	; (8004580 <HAL_RCC_GetSysClockFreq+0x94>)
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	0c5b      	lsrs	r3, r3, #17
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	4a11      	ldr	r2, [pc, #68]	; (800458c <HAL_RCC_GetSysClockFreq+0xa0>)
 8004546:	5cd3      	ldrb	r3, [r2, r3]
 8004548:	60bb      	str	r3, [r7, #8]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a0d      	ldr	r2, [pc, #52]	; (8004584 <HAL_RCC_GetSysClockFreq+0x98>)
 800454e:	fb03 f202 	mul.w	r2, r3, r2
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	fbb2 f3f3 	udiv	r3, r2, r3
 8004558:	617b      	str	r3, [r7, #20]
 800455a:	e004      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x7a>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	4a0c      	ldr	r2, [pc, #48]	; (8004590 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004560:	fb02 f303 	mul.w	r3, r2, r3
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	e002      	b.n	8004572 <HAL_RCC_GetSysClockFreq+0x86>
 800456c:	4b05      	ldr	r3, [pc, #20]	; (8004584 <HAL_RCC_GetSysClockFreq+0x98>)
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	bf00      	nop
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	4618      	mov	r0, r3
 8004576:	371c      	adds	r7, #28
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	40021000 	.word	0x40021000
 8004584:	007a1200 	.word	0x007a1200
 8004588:	0800a908 	.word	0x0800a908
 800458c:	0800a918 	.word	0x0800a918
 8004590:	003d0900 	.word	0x003d0900

08004594 <HAL_RCC_GetHCLKFreq>:
 8004594:	b480      	push	{r7}
 8004596:	af00      	add	r7, sp, #0
 8004598:	4b02      	ldr	r3, [pc, #8]	; (80045a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	46bd      	mov	sp, r7
 80045a0:	bc80      	pop	{r7}
 80045a2:	4770      	bx	lr
 80045a4:	20000000 	.word	0x20000000

080045a8 <HAL_RCC_GetPCLK1Freq>:
 80045a8:	b580      	push	{r7, lr}
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	f7ff fff2 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 80045b0:	4602      	mov	r2, r0
 80045b2:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	0a1b      	lsrs	r3, r3, #8
 80045b8:	f003 0307 	and.w	r3, r3, #7
 80045bc:	4903      	ldr	r1, [pc, #12]	; (80045cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80045be:	5ccb      	ldrb	r3, [r1, r3]
 80045c0:	fa22 f303 	lsr.w	r3, r2, r3
 80045c4:	4618      	mov	r0, r3
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40021000 	.word	0x40021000
 80045cc:	0800a900 	.word	0x0800a900

080045d0 <HAL_RCC_GetPCLK2Freq>:
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	f7ff ffde 	bl	8004594 <HAL_RCC_GetHCLKFreq>
 80045d8:	4602      	mov	r2, r0
 80045da:	4b05      	ldr	r3, [pc, #20]	; (80045f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	0adb      	lsrs	r3, r3, #11
 80045e0:	f003 0307 	and.w	r3, r3, #7
 80045e4:	4903      	ldr	r1, [pc, #12]	; (80045f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045e6:	5ccb      	ldrb	r3, [r1, r3]
 80045e8:	fa22 f303 	lsr.w	r3, r2, r3
 80045ec:	4618      	mov	r0, r3
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	40021000 	.word	0x40021000
 80045f4:	0800a900 	.word	0x0800a900

080045f8 <HAL_RCC_GetClockConfig>:
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	220f      	movs	r2, #15
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	4b11      	ldr	r3, [pc, #68]	; (8004650 <HAL_RCC_GetClockConfig+0x58>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 0203 	and.w	r2, r3, #3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	605a      	str	r2, [r3, #4]
 8004614:	4b0e      	ldr	r3, [pc, #56]	; (8004650 <HAL_RCC_GetClockConfig+0x58>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	609a      	str	r2, [r3, #8]
 8004620:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_RCC_GetClockConfig+0x58>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	60da      	str	r2, [r3, #12]
 800462c:	4b08      	ldr	r3, [pc, #32]	; (8004650 <HAL_RCC_GetClockConfig+0x58>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	08db      	lsrs	r3, r3, #3
 8004632:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	611a      	str	r2, [r3, #16]
 800463a:	4b06      	ldr	r3, [pc, #24]	; (8004654 <HAL_RCC_GetClockConfig+0x5c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0207 	and.w	r2, r3, #7
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	601a      	str	r2, [r3, #0]
 8004646:	bf00      	nop
 8004648:	370c      	adds	r7, #12
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr
 8004650:	40021000 	.word	0x40021000
 8004654:	40022000 	.word	0x40022000

08004658 <HAL_RCC_NMI_IRQHandler>:
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
 800465c:	4b06      	ldr	r3, [pc, #24]	; (8004678 <HAL_RCC_NMI_IRQHandler+0x20>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004664:	2b80      	cmp	r3, #128	; 0x80
 8004666:	d104      	bne.n	8004672 <HAL_RCC_NMI_IRQHandler+0x1a>
 8004668:	f000 f828 	bl	80046bc <HAL_RCC_CSSCallback>
 800466c:	4b03      	ldr	r3, [pc, #12]	; (800467c <HAL_RCC_NMI_IRQHandler+0x24>)
 800466e:	2280      	movs	r2, #128	; 0x80
 8004670:	701a      	strb	r2, [r3, #0]
 8004672:	bf00      	nop
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000
 800467c:	4002100a 	.word	0x4002100a

08004680 <RCC_Delay>:
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <RCC_Delay+0x34>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a0a      	ldr	r2, [pc, #40]	; (80046b8 <RCC_Delay+0x38>)
 800468e:	fba2 2303 	umull	r2, r3, r2, r3
 8004692:	0a5b      	lsrs	r3, r3, #9
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	fb02 f303 	mul.w	r3, r2, r3
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	bf00      	nop
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1e5a      	subs	r2, r3, #1
 80046a2:	60fa      	str	r2, [r7, #12]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f9      	bne.n	800469c <RCC_Delay+0x1c>
 80046a8:	bf00      	nop
 80046aa:	bf00      	nop
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bc80      	pop	{r7}
 80046b2:	4770      	bx	lr
 80046b4:	20000000 	.word	0x20000000
 80046b8:	10624dd3 	.word	0x10624dd3

080046bc <HAL_RCC_CSSCallback>:
 80046bc:	b480      	push	{r7}
 80046be:	af00      	add	r7, sp, #0
 80046c0:	bf00      	nop
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bc80      	pop	{r7}
 80046c6:	4770      	bx	lr

080046c8 <HAL_SPI_Init>:
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_SPI_Init+0x12>
 80046d6:	2301      	movs	r3, #1
 80046d8:	e076      	b.n	80047c8 <HAL_SPI_Init+0x100>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d108      	bne.n	80046f4 <HAL_SPI_Init+0x2c>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ea:	d009      	beq.n	8004700 <HAL_SPI_Init+0x38>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	61da      	str	r2, [r3, #28]
 80046f2:	e005      	b.n	8004700 <HAL_SPI_Init+0x38>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	615a      	str	r2, [r3, #20]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	629a      	str	r2, [r3, #40]	; 0x28
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_SPI_Init+0x58>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fe fc6e 	bl	8002ffc <HAL_SPI_MspInit>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004748:	431a      	orrs	r2, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004752:	431a      	orrs	r2, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	431a      	orrs	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	431a      	orrs	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004770:	431a      	orrs	r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a1b      	ldr	r3, [r3, #32]
 8004780:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004784:	ea42 0103 	orr.w	r1, r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	430a      	orrs	r2, r1
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	0c1a      	lsrs	r2, r3, #16
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f002 0204 	and.w	r2, r2, #4
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	69da      	ldr	r2, [r3, #28]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047b6:	61da      	str	r2, [r3, #28]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2200      	movs	r2, #0
 80047bc:	655a      	str	r2, [r3, #84]	; 0x54
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80047c6:	2300      	movs	r3, #0
 80047c8:	4618      	mov	r0, r3
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_SPI_TransmitReceive>:
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b08c      	sub	sp, #48	; 0x30
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	807b      	strh	r3, [r7, #2]
 80047de:	2301      	movs	r3, #1
 80047e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047e2:	2300      	movs	r3, #0
 80047e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d101      	bne.n	80047f6 <HAL_SPI_TransmitReceive+0x26>
 80047f2:	2302      	movs	r3, #2
 80047f4:	e198      	b.n	8004b28 <HAL_SPI_TransmitReceive+0x358>
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80047fe:	f7fe ffab 	bl	8003758 <HAL_GetTick>
 8004802:	6278      	str	r0, [r7, #36]	; 0x24
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	61fb      	str	r3, [r7, #28]
 8004814:	887b      	ldrh	r3, [r7, #2]
 8004816:	837b      	strh	r3, [r7, #26]
 8004818:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800481c:	2b01      	cmp	r3, #1
 800481e:	d00f      	beq.n	8004840 <HAL_SPI_TransmitReceive+0x70>
 8004820:	69fb      	ldr	r3, [r7, #28]
 8004822:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004826:	d107      	bne.n	8004838 <HAL_SPI_TransmitReceive+0x68>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d103      	bne.n	8004838 <HAL_SPI_TransmitReceive+0x68>
 8004830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004834:	2b04      	cmp	r3, #4
 8004836:	d003      	beq.n	8004840 <HAL_SPI_TransmitReceive+0x70>
 8004838:	2302      	movs	r3, #2
 800483a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800483e:	e16d      	b.n	8004b1c <HAL_SPI_TransmitReceive+0x34c>
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d005      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x82>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d002      	beq.n	8004852 <HAL_SPI_TransmitReceive+0x82>
 800484c:	887b      	ldrh	r3, [r7, #2]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d103      	bne.n	800485a <HAL_SPI_TransmitReceive+0x8a>
 8004852:	2301      	movs	r3, #1
 8004854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004858:	e160      	b.n	8004b1c <HAL_SPI_TransmitReceive+0x34c>
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004860:	b2db      	uxtb	r3, r3
 8004862:	2b04      	cmp	r3, #4
 8004864:	d003      	beq.n	800486e <HAL_SPI_TransmitReceive+0x9e>
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2205      	movs	r2, #5
 800486a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	655a      	str	r2, [r3, #84]	; 0x54
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	639a      	str	r2, [r3, #56]	; 0x38
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	887a      	ldrh	r2, [r7, #2]
 800487e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	887a      	ldrh	r2, [r7, #2]
 8004884:	879a      	strh	r2, [r3, #60]	; 0x3c
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	68ba      	ldr	r2, [r7, #8]
 800488a:	631a      	str	r2, [r3, #48]	; 0x30
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	887a      	ldrh	r2, [r7, #2]
 8004890:	86da      	strh	r2, [r3, #54]	; 0x36
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	887a      	ldrh	r2, [r7, #2]
 8004896:	869a      	strh	r2, [r3, #52]	; 0x34
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2200      	movs	r2, #0
 800489c:	641a      	str	r2, [r3, #64]	; 0x40
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	645a      	str	r2, [r3, #68]	; 0x44
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ae:	2b40      	cmp	r3, #64	; 0x40
 80048b0:	d007      	beq.n	80048c2 <HAL_SPI_TransmitReceive+0xf2>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048c0:	601a      	str	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	68db      	ldr	r3, [r3, #12]
 80048c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048ca:	d17c      	bne.n	80049c6 <HAL_SPI_TransmitReceive+0x1f6>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d002      	beq.n	80048da <HAL_SPI_TransmitReceive+0x10a>
 80048d4:	8b7b      	ldrh	r3, [r7, #26]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d16a      	bne.n	80049b0 <HAL_SPI_TransmitReceive+0x1e0>
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048de:	881a      	ldrh	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	60da      	str	r2, [r3, #12]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	1c9a      	adds	r2, r3, #2
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	631a      	str	r2, [r3, #48]	; 0x30
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	3b01      	subs	r3, #1
 80048f8:	b29a      	uxth	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80048fe:	e057      	b.n	80049b0 <HAL_SPI_TransmitReceive+0x1e0>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b02      	cmp	r3, #2
 800490c:	d11b      	bne.n	8004946 <HAL_SPI_TransmitReceive+0x176>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004912:	b29b      	uxth	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d016      	beq.n	8004946 <HAL_SPI_TransmitReceive+0x176>
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	2b01      	cmp	r3, #1
 800491c:	d113      	bne.n	8004946 <HAL_SPI_TransmitReceive+0x176>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004922:	881a      	ldrh	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	60da      	str	r2, [r3, #12]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800492e:	1c9a      	adds	r2, r3, #2
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	631a      	str	r2, [r3, #48]	; 0x30
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004938:	b29b      	uxth	r3, r3
 800493a:	3b01      	subs	r3, #1
 800493c:	b29a      	uxth	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	86da      	strh	r2, [r3, #54]	; 0x36
 8004942:	2300      	movs	r3, #0
 8004944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b01      	cmp	r3, #1
 8004952:	d119      	bne.n	8004988 <HAL_SPI_TransmitReceive+0x1b8>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004958:	b29b      	uxth	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d014      	beq.n	8004988 <HAL_SPI_TransmitReceive+0x1b8>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68da      	ldr	r2, [r3, #12]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004968:	b292      	uxth	r2, r2
 800496a:	801a      	strh	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004970:	1c9a      	adds	r2, r3, #2
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	639a      	str	r2, [r3, #56]	; 0x38
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800497a:	b29b      	uxth	r3, r3
 800497c:	3b01      	subs	r3, #1
 800497e:	b29a      	uxth	r2, r3
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004984:	2301      	movs	r3, #1
 8004986:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004988:	f7fe fee6 	bl	8003758 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004994:	429a      	cmp	r2, r3
 8004996:	d80b      	bhi.n	80049b0 <HAL_SPI_TransmitReceive+0x1e0>
 8004998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800499e:	d007      	beq.n	80049b0 <HAL_SPI_TransmitReceive+0x1e0>
 80049a0:	2303      	movs	r3, #3
 80049a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80049ae:	e0b5      	b.n	8004b1c <HAL_SPI_TransmitReceive+0x34c>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1a2      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x130>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049be:	b29b      	uxth	r3, r3
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d19d      	bne.n	8004900 <HAL_SPI_TransmitReceive+0x130>
 80049c4:	e080      	b.n	8004ac8 <HAL_SPI_TransmitReceive+0x2f8>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d002      	beq.n	80049d4 <HAL_SPI_TransmitReceive+0x204>
 80049ce:	8b7b      	ldrh	r3, [r7, #26]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d16f      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0x2e4>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	330c      	adds	r3, #12
 80049de:	7812      	ldrb	r2, [r2, #0]
 80049e0:	701a      	strb	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	631a      	str	r2, [r3, #48]	; 0x30
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	86da      	strh	r2, [r3, #54]	; 0x36
 80049fa:	e05b      	b.n	8004ab4 <HAL_SPI_TransmitReceive+0x2e4>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	689b      	ldr	r3, [r3, #8]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d11c      	bne.n	8004a44 <HAL_SPI_TransmitReceive+0x274>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d017      	beq.n	8004a44 <HAL_SPI_TransmitReceive+0x274>
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d114      	bne.n	8004a44 <HAL_SPI_TransmitReceive+0x274>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	330c      	adds	r3, #12
 8004a24:	7812      	ldrb	r2, [r2, #0]
 8004a26:	701a      	strb	r2, [r3, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a40:	2300      	movs	r3, #0
 8004a42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	f003 0301 	and.w	r3, r3, #1
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d119      	bne.n	8004a86 <HAL_SPI_TransmitReceive+0x2b6>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d014      	beq.n	8004a86 <HAL_SPI_TransmitReceive+0x2b6>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68da      	ldr	r2, [r3, #12]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	639a      	str	r2, [r3, #56]	; 0x38
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a82:	2301      	movs	r3, #1
 8004a84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a86:	f7fe fe67 	bl	8003758 <HAL_GetTick>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a92:	429a      	cmp	r2, r3
 8004a94:	d803      	bhi.n	8004a9e <HAL_SPI_TransmitReceive+0x2ce>
 8004a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a9c:	d102      	bne.n	8004aa4 <HAL_SPI_TransmitReceive+0x2d4>
 8004a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d107      	bne.n	8004ab4 <HAL_SPI_TransmitReceive+0x2e4>
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004ab2:	e033      	b.n	8004b1c <HAL_SPI_TransmitReceive+0x34c>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ab8:	b29b      	uxth	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d19e      	bne.n	80049fc <HAL_SPI_TransmitReceive+0x22c>
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d199      	bne.n	80049fc <HAL_SPI_TransmitReceive+0x22c>
 8004ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f000 f9b3 	bl	8004e38 <SPI_EndRxTxTransaction>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d006      	beq.n	8004ae6 <HAL_SPI_TransmitReceive+0x316>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54
 8004ae4:	e01a      	b.n	8004b1c <HAL_SPI_TransmitReceive+0x34c>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d10a      	bne.n	8004b04 <HAL_SPI_TransmitReceive+0x334>
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	617b      	str	r3, [r7, #20]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_SPI_TransmitReceive+0x344>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b12:	e003      	b.n	8004b1c <HAL_SPI_TransmitReceive+0x34c>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004b24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3730      	adds	r7, #48	; 0x30
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <HAL_SPI_IRQHandler>:
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b088      	sub	sp, #32
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	61fb      	str	r3, [r7, #28]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	61bb      	str	r3, [r7, #24]
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10e      	bne.n	8004b70 <HAL_SPI_IRQHandler+0x40>
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	f003 0301 	and.w	r3, r3, #1
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d009      	beq.n	8004b70 <HAL_SPI_IRQHandler+0x40>
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d004      	beq.n	8004b70 <HAL_SPI_IRQHandler+0x40>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
 8004b6e:	e0b7      	b.n	8004ce0 <HAL_SPI_IRQHandler+0x1b0>
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d009      	beq.n	8004b8e <HAL_SPI_IRQHandler+0x5e>
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <HAL_SPI_IRQHandler+0x5e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	4798      	blx	r3
 8004b8c:	e0a8      	b.n	8004ce0 <HAL_SPI_IRQHandler+0x1b0>
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	f003 0320 	and.w	r3, r3, #32
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d105      	bne.n	8004ba4 <HAL_SPI_IRQHandler+0x74>
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	f000 809e 	beq.w	8004ce0 <HAL_SPI_IRQHandler+0x1b0>
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 8098 	beq.w	8004ce0 <HAL_SPI_IRQHandler+0x1b0>
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d023      	beq.n	8004c02 <HAL_SPI_IRQHandler+0xd2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bc0:	b2db      	uxtb	r3, r3
 8004bc2:	2b03      	cmp	r3, #3
 8004bc4:	d011      	beq.n	8004bea <HAL_SPI_IRQHandler+0xba>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	f043 0204 	orr.w	r2, r3, #4
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	617b      	str	r3, [r7, #20]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	e00b      	b.n	8004c02 <HAL_SPI_IRQHandler+0xd2>
 8004bea:	2300      	movs	r3, #0
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	613b      	str	r3, [r7, #16]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	e06e      	b.n	8004ce0 <HAL_SPI_IRQHandler+0x1b0>
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d014      	beq.n	8004c36 <HAL_SPI_IRQHandler+0x106>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c10:	f043 0201 	orr.w	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	655a      	str	r2, [r3, #84]	; 0x54
 8004c18:	2300      	movs	r3, #0
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d04f      	beq.n	8004cde <HAL_SPI_IRQHandler+0x1ae>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c4c:	605a      	str	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d104      	bne.n	8004c6a <HAL_SPI_IRQHandler+0x13a>
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d034      	beq.n	8004cd4 <HAL_SPI_IRQHandler+0x1a4>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f022 0203 	bic.w	r2, r2, #3
 8004c78:	605a      	str	r2, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d011      	beq.n	8004ca6 <HAL_SPI_IRQHandler+0x176>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c86:	4a18      	ldr	r2, [pc, #96]	; (8004ce8 <HAL_SPI_IRQHandler+0x1b8>)
 8004c88:	635a      	str	r2, [r3, #52]	; 0x34
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe fe86 	bl	80039a0 <HAL_DMA_Abort_IT>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <HAL_SPI_IRQHandler+0x176>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c9e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	655a      	str	r2, [r3, #84]	; 0x54
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d016      	beq.n	8004cdc <HAL_SPI_IRQHandler+0x1ac>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cb2:	4a0d      	ldr	r2, [pc, #52]	; (8004ce8 <HAL_SPI_IRQHandler+0x1b8>)
 8004cb4:	635a      	str	r2, [r3, #52]	; 0x34
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe fe70 	bl	80039a0 <HAL_DMA_Abort_IT>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_SPI_IRQHandler+0x1ac>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	655a      	str	r2, [r3, #84]	; 0x54
 8004cd2:	e003      	b.n	8004cdc <HAL_SPI_IRQHandler+0x1ac>
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 f809 	bl	8004cec <HAL_SPI_ErrorCallback>
 8004cda:	e000      	b.n	8004cde <HAL_SPI_IRQHandler+0x1ae>
 8004cdc:	bf00      	nop
 8004cde:	bf00      	nop
 8004ce0:	3720      	adds	r7, #32
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	08004cff 	.word	0x08004cff

08004cec <HAL_SPI_ErrorCallback>:
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	bf00      	nop
 8004cf6:	370c      	adds	r7, #12
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bc80      	pop	{r7}
 8004cfc:	4770      	bx	lr

08004cfe <SPI_DMAAbortOnError>:
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7ff ffe7 	bl	8004cec <HAL_SPI_ErrorCallback>
 8004d1e:	bf00      	nop
 8004d20:	3710      	adds	r7, #16
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <SPI_WaitFlagStateUntilTimeout>:
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b088      	sub	sp, #32
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	603b      	str	r3, [r7, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	71fb      	strb	r3, [r7, #7]
 8004d38:	f7fe fd0e 	bl	8003758 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d40:	1a9b      	subs	r3, r3, r2
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	4413      	add	r3, r2
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	f7fe fd06 	bl	8003758 <HAL_GetTick>
 8004d4c:	61b8      	str	r0, [r7, #24]
 8004d4e:	4b39      	ldr	r3, [pc, #228]	; (8004e34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	015b      	lsls	r3, r3, #5
 8004d54:	0d1b      	lsrs	r3, r3, #20
 8004d56:	69fa      	ldr	r2, [r7, #28]
 8004d58:	fb02 f303 	mul.w	r3, r2, r3
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	e054      	b.n	8004e0a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d66:	d050      	beq.n	8004e0a <SPI_WaitFlagStateUntilTimeout+0xe2>
 8004d68:	f7fe fcf6 	bl	8003758 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	69fa      	ldr	r2, [r7, #28]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d902      	bls.n	8004d7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d13d      	bne.n	8004dfa <SPI_WaitFlagStateUntilTimeout+0xd2>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d96:	d111      	bne.n	8004dbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004da0:	d004      	beq.n	8004dac <SPI_WaitFlagStateUntilTimeout+0x84>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004daa:	d107      	bne.n	8004dbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dc4:	d10f      	bne.n	8004de6 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004df6:	2303      	movs	r3, #3
 8004df8:	e017      	b.n	8004e2a <SPI_WaitFlagStateUntilTimeout+0x102>
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8004e00:	2300      	movs	r3, #0
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	3b01      	subs	r3, #1
 8004e08:	617b      	str	r3, [r7, #20]
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	4013      	ands	r3, r2
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	bf0c      	ite	eq
 8004e1a:	2301      	moveq	r3, #1
 8004e1c:	2300      	movne	r3, #0
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	461a      	mov	r2, r3
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d19b      	bne.n	8004d60 <SPI_WaitFlagStateUntilTimeout+0x38>
 8004e28:	2300      	movs	r3, #0
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3720      	adds	r7, #32
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000000 	.word	0x20000000

08004e38 <SPI_EndRxTxTransaction>:
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af02      	add	r7, sp, #8
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2180      	movs	r1, #128	; 0x80
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f7ff ff6a 	bl	8004d28 <SPI_WaitFlagStateUntilTimeout>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d007      	beq.n	8004e6a <SPI_EndRxTxTransaction+0x32>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5e:	f043 0220 	orr.w	r2, r3, #32
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	655a      	str	r2, [r3, #84]	; 0x54
 8004e66:	2303      	movs	r3, #3
 8004e68:	e000      	b.n	8004e6c <SPI_EndRxTxTransaction+0x34>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <HAL_TIM_Base_Init>:
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <HAL_TIM_Base_Init+0x12>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e041      	b.n	8004f0a <HAL_TIM_Base_Init+0x96>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d106      	bne.n	8004ea0 <HAL_TIM_Base_Init+0x2c>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f839 	bl	8004f12 <HAL_TIM_Base_MspInit>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2202      	movs	r2, #2
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f000 fbfa 	bl	80056ac <TIM_Base_SetConfig>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f08:	2300      	movs	r3, #0
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <HAL_TIM_Base_MspInit>:
 8004f12:	b480      	push	{r7}
 8004f14:	b083      	sub	sp, #12
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
 8004f1a:	bf00      	nop
 8004f1c:	370c      	adds	r7, #12
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bc80      	pop	{r7}
 8004f22:	4770      	bx	lr

08004f24 <HAL_TIM_Base_Start_IT>:
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d001      	beq.n	8004f3c <HAL_TIM_Base_Start_IT+0x18>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e03a      	b.n	8004fb2 <HAL_TIM_Base_Start_IT+0x8e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2202      	movs	r2, #2
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68da      	ldr	r2, [r3, #12]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0201 	orr.w	r2, r2, #1
 8004f52:	60da      	str	r2, [r3, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a18      	ldr	r2, [pc, #96]	; (8004fbc <HAL_TIM_Base_Start_IT+0x98>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d00e      	beq.n	8004f7c <HAL_TIM_Base_Start_IT+0x58>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f66:	d009      	beq.n	8004f7c <HAL_TIM_Base_Start_IT+0x58>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a14      	ldr	r2, [pc, #80]	; (8004fc0 <HAL_TIM_Base_Start_IT+0x9c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d004      	beq.n	8004f7c <HAL_TIM_Base_Start_IT+0x58>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a13      	ldr	r2, [pc, #76]	; (8004fc4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d111      	bne.n	8004fa0 <HAL_TIM_Base_Start_IT+0x7c>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	60fb      	str	r3, [r7, #12]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b06      	cmp	r3, #6
 8004f8c:	d010      	beq.n	8004fb0 <HAL_TIM_Base_Start_IT+0x8c>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f042 0201 	orr.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]
 8004f9e:	e007      	b.n	8004fb0 <HAL_TIM_Base_Start_IT+0x8c>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f042 0201 	orr.w	r2, r2, #1
 8004fae:	601a      	str	r2, [r3, #0]
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr
 8004fbc:	40012c00 	.word	0x40012c00
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800

08004fc8 <HAL_TIM_Base_Stop_IT>:
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68da      	ldr	r2, [r3, #12]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0201 	bic.w	r2, r2, #1
 8004fde:	60da      	str	r2, [r3, #12]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6a1a      	ldr	r2, [r3, #32]
 8004fe6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fea:	4013      	ands	r3, r2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10f      	bne.n	8005010 <HAL_TIM_Base_Stop_IT+0x48>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6a1a      	ldr	r2, [r3, #32]
 8004ff6:	f240 4344 	movw	r3, #1092	; 0x444
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d107      	bne.n	8005010 <HAL_TIM_Base_Stop_IT+0x48>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0201 	bic.w	r2, r2, #1
 800500e:	601a      	str	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005018:	2300      	movs	r3, #0
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	bc80      	pop	{r7}
 8005022:	4770      	bx	lr

08005024 <HAL_TIM_PWM_Init>:
 8005024:	b580      	push	{r7, lr}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_TIM_PWM_Init+0x12>
 8005032:	2301      	movs	r3, #1
 8005034:	e041      	b.n	80050ba <HAL_TIM_PWM_Init+0x96>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d106      	bne.n	8005050 <HAL_TIM_PWM_Init+0x2c>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7fe f838 	bl	80030c0 <HAL_TIM_PWM_MspInit>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2202      	movs	r2, #2
 8005054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f000 fb22 	bl	80056ac <TIM_Base_SetConfig>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050b8:	2300      	movs	r3, #0
 80050ba:	4618      	mov	r0, r3
 80050bc:	3708      	adds	r7, #8
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <HAL_TIM_PWM_Start>:
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d109      	bne.n	80050e8 <HAL_TIM_PWM_Start+0x24>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	bf14      	ite	ne
 80050e0:	2301      	movne	r3, #1
 80050e2:	2300      	moveq	r3, #0
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	e022      	b.n	800512e <HAL_TIM_PWM_Start+0x6a>
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	2b04      	cmp	r3, #4
 80050ec:	d109      	bne.n	8005102 <HAL_TIM_PWM_Start+0x3e>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	bf14      	ite	ne
 80050fa:	2301      	movne	r3, #1
 80050fc:	2300      	moveq	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	e015      	b.n	800512e <HAL_TIM_PWM_Start+0x6a>
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b08      	cmp	r3, #8
 8005106:	d109      	bne.n	800511c <HAL_TIM_PWM_Start+0x58>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b01      	cmp	r3, #1
 8005112:	bf14      	ite	ne
 8005114:	2301      	movne	r3, #1
 8005116:	2300      	moveq	r3, #0
 8005118:	b2db      	uxtb	r3, r3
 800511a:	e008      	b.n	800512e <HAL_TIM_PWM_Start+0x6a>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	bf14      	ite	ne
 8005128:	2301      	movne	r3, #1
 800512a:	2300      	moveq	r3, #0
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d001      	beq.n	8005136 <HAL_TIM_PWM_Start+0x72>
 8005132:	2301      	movs	r3, #1
 8005134:	e05e      	b.n	80051f4 <HAL_TIM_PWM_Start+0x130>
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d104      	bne.n	8005146 <HAL_TIM_PWM_Start+0x82>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005144:	e013      	b.n	800516e <HAL_TIM_PWM_Start+0xaa>
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b04      	cmp	r3, #4
 800514a:	d104      	bne.n	8005156 <HAL_TIM_PWM_Start+0x92>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005154:	e00b      	b.n	800516e <HAL_TIM_PWM_Start+0xaa>
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	2b08      	cmp	r3, #8
 800515a:	d104      	bne.n	8005166 <HAL_TIM_PWM_Start+0xa2>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005164:	e003      	b.n	800516e <HAL_TIM_PWM_Start+0xaa>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2201      	movs	r2, #1
 8005174:	6839      	ldr	r1, [r7, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f000 fc82 	bl	8005a80 <TIM_CCxChannelCmd>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a1e      	ldr	r2, [pc, #120]	; (80051fc <HAL_TIM_PWM_Start+0x138>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d107      	bne.n	8005196 <HAL_TIM_PWM_Start+0xd2>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005194:	645a      	str	r2, [r3, #68]	; 0x44
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a18      	ldr	r2, [pc, #96]	; (80051fc <HAL_TIM_PWM_Start+0x138>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00e      	beq.n	80051be <HAL_TIM_PWM_Start+0xfa>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a8:	d009      	beq.n	80051be <HAL_TIM_PWM_Start+0xfa>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a14      	ldr	r2, [pc, #80]	; (8005200 <HAL_TIM_PWM_Start+0x13c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_TIM_PWM_Start+0xfa>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a12      	ldr	r2, [pc, #72]	; (8005204 <HAL_TIM_PWM_Start+0x140>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d111      	bne.n	80051e2 <HAL_TIM_PWM_Start+0x11e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	f003 0307 	and.w	r3, r3, #7
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b06      	cmp	r3, #6
 80051ce:	d010      	beq.n	80051f2 <HAL_TIM_PWM_Start+0x12e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0201 	orr.w	r2, r2, #1
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	e007      	b.n	80051f2 <HAL_TIM_PWM_Start+0x12e>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f042 0201 	orr.w	r2, r2, #1
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	2300      	movs	r3, #0
 80051f4:	4618      	mov	r0, r3
 80051f6:	3710      	adds	r7, #16
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40012c00 	.word	0x40012c00
 8005200:	40000400 	.word	0x40000400
 8005204:	40000800 	.word	0x40000800

08005208 <HAL_TIM_PWM_Stop>:
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2200      	movs	r2, #0
 8005218:	6839      	ldr	r1, [r7, #0]
 800521a:	4618      	mov	r0, r3
 800521c:	f000 fc30 	bl	8005a80 <TIM_CCxChannelCmd>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	4a29      	ldr	r2, [pc, #164]	; (80052cc <HAL_TIM_PWM_Stop+0xc4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d117      	bne.n	800525a <HAL_TIM_PWM_Stop+0x52>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6a1a      	ldr	r2, [r3, #32]
 8005230:	f241 1311 	movw	r3, #4369	; 0x1111
 8005234:	4013      	ands	r3, r2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10f      	bne.n	800525a <HAL_TIM_PWM_Stop+0x52>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6a1a      	ldr	r2, [r3, #32]
 8005240:	f240 4344 	movw	r3, #1092	; 0x444
 8005244:	4013      	ands	r3, r2
 8005246:	2b00      	cmp	r3, #0
 8005248:	d107      	bne.n	800525a <HAL_TIM_PWM_Stop+0x52>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005258:	645a      	str	r2, [r3, #68]	; 0x44
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6a1a      	ldr	r2, [r3, #32]
 8005260:	f241 1311 	movw	r3, #4369	; 0x1111
 8005264:	4013      	ands	r3, r2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10f      	bne.n	800528a <HAL_TIM_PWM_Stop+0x82>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	6a1a      	ldr	r2, [r3, #32]
 8005270:	f240 4344 	movw	r3, #1092	; 0x444
 8005274:	4013      	ands	r3, r2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d107      	bne.n	800528a <HAL_TIM_PWM_Stop+0x82>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 0201 	bic.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d104      	bne.n	800529a <HAL_TIM_PWM_Stop+0x92>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005298:	e013      	b.n	80052c2 <HAL_TIM_PWM_Stop+0xba>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	2b04      	cmp	r3, #4
 800529e:	d104      	bne.n	80052aa <HAL_TIM_PWM_Stop+0xa2>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a8:	e00b      	b.n	80052c2 <HAL_TIM_PWM_Stop+0xba>
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_PWM_Stop+0xb2>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052b8:	e003      	b.n	80052c2 <HAL_TIM_PWM_Stop+0xba>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2201      	movs	r2, #1
 80052be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052c2:	2300      	movs	r3, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	3708      	adds	r7, #8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}
 80052cc:	40012c00 	.word	0x40012c00

080052d0 <HAL_TIM_IRQHandler>:
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0302 	and.w	r3, r3, #2
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d122      	bne.n	800532c <HAL_TIM_IRQHandler+0x5c>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b02      	cmp	r3, #2
 80052f2:	d11b      	bne.n	800532c <HAL_TIM_IRQHandler+0x5c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0202 	mvn.w	r2, #2
 80052fc:	611a      	str	r2, [r3, #16]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	771a      	strb	r2, [r3, #28]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_TIM_IRQHandler+0x4a>
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 f9af 	bl	8005676 <HAL_TIM_IC_CaptureCallback>
 8005318:	e005      	b.n	8005326 <HAL_TIM_IRQHandler+0x56>
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 f9a2 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 f9b1 	bl	8005688 <HAL_TIM_PWM_PulseFinishedCallback>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	771a      	strb	r2, [r3, #28]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b04      	cmp	r3, #4
 8005338:	d122      	bne.n	8005380 <HAL_TIM_IRQHandler+0xb0>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b04      	cmp	r3, #4
 8005346:	d11b      	bne.n	8005380 <HAL_TIM_IRQHandler+0xb0>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0204 	mvn.w	r2, #4
 8005350:	611a      	str	r2, [r3, #16]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2202      	movs	r2, #2
 8005356:	771a      	strb	r2, [r3, #28]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005362:	2b00      	cmp	r3, #0
 8005364:	d003      	beq.n	800536e <HAL_TIM_IRQHandler+0x9e>
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f985 	bl	8005676 <HAL_TIM_IC_CaptureCallback>
 800536c:	e005      	b.n	800537a <HAL_TIM_IRQHandler+0xaa>
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f000 f978 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f987 	bl	8005688 <HAL_TIM_PWM_PulseFinishedCallback>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	771a      	strb	r2, [r3, #28]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	f003 0308 	and.w	r3, r3, #8
 800538a:	2b08      	cmp	r3, #8
 800538c:	d122      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x104>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f003 0308 	and.w	r3, r3, #8
 8005398:	2b08      	cmp	r3, #8
 800539a:	d11b      	bne.n	80053d4 <HAL_TIM_IRQHandler+0x104>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0208 	mvn.w	r2, #8
 80053a4:	611a      	str	r2, [r3, #16]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2204      	movs	r2, #4
 80053aa:	771a      	strb	r2, [r3, #28]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_TIM_IRQHandler+0xf2>
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 f95b 	bl	8005676 <HAL_TIM_IC_CaptureCallback>
 80053c0:	e005      	b.n	80053ce <HAL_TIM_IRQHandler+0xfe>
 80053c2:	6878      	ldr	r0, [r7, #4]
 80053c4:	f000 f94e 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f95d 	bl	8005688 <HAL_TIM_PWM_PulseFinishedCallback>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	771a      	strb	r2, [r3, #28]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f003 0310 	and.w	r3, r3, #16
 80053de:	2b10      	cmp	r3, #16
 80053e0:	d122      	bne.n	8005428 <HAL_TIM_IRQHandler+0x158>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0310 	and.w	r3, r3, #16
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d11b      	bne.n	8005428 <HAL_TIM_IRQHandler+0x158>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f06f 0210 	mvn.w	r2, #16
 80053f8:	611a      	str	r2, [r3, #16]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2208      	movs	r2, #8
 80053fe:	771a      	strb	r2, [r3, #28]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_TIM_IRQHandler+0x146>
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 f931 	bl	8005676 <HAL_TIM_IC_CaptureCallback>
 8005414:	e005      	b.n	8005422 <HAL_TIM_IRQHandler+0x152>
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f924 	bl	8005664 <HAL_TIM_OC_DelayElapsedCallback>
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f933 	bl	8005688 <HAL_TIM_PWM_PulseFinishedCallback>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2200      	movs	r2, #0
 8005426:	771a      	strb	r2, [r3, #28]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b01      	cmp	r3, #1
 8005434:	d10e      	bne.n	8005454 <HAL_TIM_IRQHandler+0x184>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	2b01      	cmp	r3, #1
 8005442:	d107      	bne.n	8005454 <HAL_TIM_IRQHandler+0x184>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0201 	mvn.w	r2, #1
 800544c:	611a      	str	r2, [r3, #16]
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f7fd fd00 	bl	8002e54 <HAL_TIM_PeriodElapsedCallback>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	691b      	ldr	r3, [r3, #16]
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	2b80      	cmp	r3, #128	; 0x80
 8005460:	d10e      	bne.n	8005480 <HAL_TIM_IRQHandler+0x1b0>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546c:	2b80      	cmp	r3, #128	; 0x80
 800546e:	d107      	bne.n	8005480 <HAL_TIM_IRQHandler+0x1b0>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005478:	611a      	str	r2, [r3, #16]
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 fbdc 	bl	8005c38 <HAL_TIMEx_BreakCallback>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548a:	2b40      	cmp	r3, #64	; 0x40
 800548c:	d10e      	bne.n	80054ac <HAL_TIM_IRQHandler+0x1dc>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005498:	2b40      	cmp	r3, #64	; 0x40
 800549a:	d107      	bne.n	80054ac <HAL_TIM_IRQHandler+0x1dc>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054a4:	611a      	str	r2, [r3, #16]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f8f7 	bl	800569a <HAL_TIM_TriggerCallback>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b20      	cmp	r3, #32
 80054b8:	d10e      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x208>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b20      	cmp	r3, #32
 80054c6:	d107      	bne.n	80054d8 <HAL_TIM_IRQHandler+0x208>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f06f 0220 	mvn.w	r2, #32
 80054d0:	611a      	str	r2, [r3, #16]
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 fba7 	bl	8005c26 <HAL_TIMEx_CommutCallback>
 80054d8:	bf00      	nop
 80054da:	3708      	adds	r7, #8
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}

080054e0 <HAL_TIM_PWM_ConfigChannel>:
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	2300      	movs	r3, #0
 80054ee:	75fb      	strb	r3, [r7, #23]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e0ae      	b.n	800565c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b0c      	cmp	r3, #12
 800550a:	f200 809f 	bhi.w	800564c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800550e:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005514:	08005549 	.word	0x08005549
 8005518:	0800564d 	.word	0x0800564d
 800551c:	0800564d 	.word	0x0800564d
 8005520:	0800564d 	.word	0x0800564d
 8005524:	08005589 	.word	0x08005589
 8005528:	0800564d 	.word	0x0800564d
 800552c:	0800564d 	.word	0x0800564d
 8005530:	0800564d 	.word	0x0800564d
 8005534:	080055cb 	.word	0x080055cb
 8005538:	0800564d 	.word	0x0800564d
 800553c:	0800564d 	.word	0x0800564d
 8005540:	0800564d 	.word	0x0800564d
 8005544:	0800560b 	.word	0x0800560b
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	4618      	mov	r0, r3
 8005550:	f000 f90e 	bl	8005770 <TIM_OC1_SetConfig>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699a      	ldr	r2, [r3, #24]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0208 	orr.w	r2, r2, #8
 8005562:	619a      	str	r2, [r3, #24]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	699a      	ldr	r2, [r3, #24]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0204 	bic.w	r2, r2, #4
 8005572:	619a      	str	r2, [r3, #24]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6999      	ldr	r1, [r3, #24]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	691a      	ldr	r2, [r3, #16]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	430a      	orrs	r2, r1
 8005584:	619a      	str	r2, [r3, #24]
 8005586:	e064      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x172>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68b9      	ldr	r1, [r7, #8]
 800558e:	4618      	mov	r0, r3
 8005590:	f000 f954 	bl	800583c <TIM_OC2_SetConfig>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699a      	ldr	r2, [r3, #24]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055a2:	619a      	str	r2, [r3, #24]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699a      	ldr	r2, [r3, #24]
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055b2:	619a      	str	r2, [r3, #24]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6999      	ldr	r1, [r3, #24]
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	021a      	lsls	r2, r3, #8
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	619a      	str	r2, [r3, #24]
 80055c8:	e043      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x172>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	68b9      	ldr	r1, [r7, #8]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f000 f99d 	bl	8005910 <TIM_OC3_SetConfig>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69da      	ldr	r2, [r3, #28]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f042 0208 	orr.w	r2, r2, #8
 80055e4:	61da      	str	r2, [r3, #28]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	69da      	ldr	r2, [r3, #28]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0204 	bic.w	r2, r2, #4
 80055f4:	61da      	str	r2, [r3, #28]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	69d9      	ldr	r1, [r3, #28]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	691a      	ldr	r2, [r3, #16]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	61da      	str	r2, [r3, #28]
 8005608:	e023      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x172>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68b9      	ldr	r1, [r7, #8]
 8005610:	4618      	mov	r0, r3
 8005612:	f000 f9e7 	bl	80059e4 <TIM_OC4_SetConfig>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005624:	61da      	str	r2, [r3, #28]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69da      	ldr	r2, [r3, #28]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005634:	61da      	str	r2, [r3, #28]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	69d9      	ldr	r1, [r3, #28]
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	021a      	lsls	r2, r3, #8
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	430a      	orrs	r2, r1
 8005648:	61da      	str	r2, [r3, #28]
 800564a:	e002      	b.n	8005652 <HAL_TIM_PWM_ConfigChannel+0x172>
 800564c:	2301      	movs	r3, #1
 800564e:	75fb      	strb	r3, [r7, #23]
 8005650:	bf00      	nop
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800565a:	7dfb      	ldrb	r3, [r7, #23]
 800565c:	4618      	mov	r0, r3
 800565e:	3718      	adds	r7, #24
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_TIM_OC_DelayElapsedCallback>:
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	bc80      	pop	{r7}
 8005674:	4770      	bx	lr

08005676 <HAL_TIM_IC_CaptureCallback>:
 8005676:	b480      	push	{r7}
 8005678:	b083      	sub	sp, #12
 800567a:	af00      	add	r7, sp, #0
 800567c:	6078      	str	r0, [r7, #4]
 800567e:	bf00      	nop
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	bc80      	pop	{r7}
 8005686:	4770      	bx	lr

08005688 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr

0800569a <HAL_TIM_TriggerCallback>:
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <TIM_Base_SetConfig>:
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a29      	ldr	r2, [pc, #164]	; (8005764 <TIM_Base_SetConfig+0xb8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00b      	beq.n	80056dc <TIM_Base_SetConfig+0x30>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ca:	d007      	beq.n	80056dc <TIM_Base_SetConfig+0x30>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a26      	ldr	r2, [pc, #152]	; (8005768 <TIM_Base_SetConfig+0xbc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_Base_SetConfig+0x30>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a25      	ldr	r2, [pc, #148]	; (800576c <TIM_Base_SetConfig+0xc0>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d108      	bne.n	80056ee <TIM_Base_SetConfig+0x42>
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1c      	ldr	r2, [pc, #112]	; (8005764 <TIM_Base_SetConfig+0xb8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fc:	d007      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a19      	ldr	r2, [pc, #100]	; (8005768 <TIM_Base_SetConfig+0xbc>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a18      	ldr	r2, [pc, #96]	; (800576c <TIM_Base_SetConfig+0xc0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d108      	bne.n	8005720 <TIM_Base_SetConfig+0x74>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005714:	60fb      	str	r3, [r7, #12]
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	62da      	str	r2, [r3, #44]	; 0x2c
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	629a      	str	r2, [r3, #40]	; 0x28
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a07      	ldr	r2, [pc, #28]	; (8005764 <TIM_Base_SetConfig+0xb8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d103      	bne.n	8005754 <TIM_Base_SetConfig+0xa8>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	615a      	str	r2, [r3, #20]
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40000400 	.word	0x40000400
 800576c:	40000800 	.word	0x40000800

08005770 <TIM_OC1_SetConfig>:
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f023 0201 	bic.w	r2, r3, #1
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	621a      	str	r2, [r3, #32]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	685b      	ldr	r3, [r3, #4]
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	699b      	ldr	r3, [r3, #24]
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0303 	bic.w	r3, r3, #3
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f023 0302 	bic.w	r3, r3, #2
 80057b8:	617b      	str	r3, [r7, #20]
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a1c      	ldr	r2, [pc, #112]	; (8005838 <TIM_OC1_SetConfig+0xc8>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d10c      	bne.n	80057e6 <TIM_OC1_SetConfig+0x76>
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f023 0308 	bic.w	r3, r3, #8
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	4313      	orrs	r3, r2
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f023 0304 	bic.w	r3, r3, #4
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a13      	ldr	r2, [pc, #76]	; (8005838 <TIM_OC1_SetConfig+0xc8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d111      	bne.n	8005812 <TIM_OC1_SetConfig+0xa2>
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f4:	613b      	str	r3, [r7, #16]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	619a      	str	r2, [r3, #24]
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	635a      	str	r2, [r3, #52]	; 0x34
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	621a      	str	r2, [r3, #32]
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	bc80      	pop	{r7}
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40012c00 	.word	0x40012c00

0800583c <TIM_OC2_SetConfig>:
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
 8005844:	6039      	str	r1, [r7, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a1b      	ldr	r3, [r3, #32]
 8005850:	f023 0210 	bic.w	r2, r3, #16
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	621a      	str	r2, [r3, #32]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	613b      	str	r3, [r7, #16]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	699b      	ldr	r3, [r3, #24]
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800586a:	60fb      	str	r3, [r7, #12]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f023 0320 	bic.w	r3, r3, #32
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4a1d      	ldr	r2, [pc, #116]	; (800590c <TIM_OC2_SetConfig+0xd0>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d10d      	bne.n	80058b8 <TIM_OC2_SetConfig+0x7c>
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a2:	617b      	str	r3, [r7, #20]
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	697a      	ldr	r2, [r7, #20]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	617b      	str	r3, [r7, #20]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058b6:	617b      	str	r3, [r7, #20]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a14      	ldr	r2, [pc, #80]	; (800590c <TIM_OC2_SetConfig+0xd0>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d113      	bne.n	80058e8 <TIM_OC2_SetConfig+0xac>
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058c6:	613b      	str	r3, [r7, #16]
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ce:	613b      	str	r3, [r7, #16]
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	4313      	orrs	r3, r2
 80058da:	613b      	str	r3, [r7, #16]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	693a      	ldr	r2, [r7, #16]
 80058ec:	605a      	str	r2, [r3, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	619a      	str	r2, [r3, #24]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	685a      	ldr	r2, [r3, #4]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	639a      	str	r2, [r3, #56]	; 0x38
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	621a      	str	r2, [r3, #32]
 8005902:	bf00      	nop
 8005904:	371c      	adds	r7, #28
 8005906:	46bd      	mov	sp, r7
 8005908:	bc80      	pop	{r7}
 800590a:	4770      	bx	lr
 800590c:	40012c00 	.word	0x40012c00

08005910 <TIM_OC3_SetConfig>:
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	621a      	str	r2, [r3, #32]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	613b      	str	r3, [r7, #16]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	60fb      	str	r3, [r7, #12]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f023 0303 	bic.w	r3, r3, #3
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005958:	617b      	str	r3, [r7, #20]
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	021b      	lsls	r3, r3, #8
 8005960:	697a      	ldr	r2, [r7, #20]
 8005962:	4313      	orrs	r3, r2
 8005964:	617b      	str	r3, [r7, #20]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a1d      	ldr	r2, [pc, #116]	; (80059e0 <TIM_OC3_SetConfig+0xd0>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d10d      	bne.n	800598a <TIM_OC3_SetConfig+0x7a>
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	4313      	orrs	r3, r2
 8005980:	617b      	str	r3, [r7, #20]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a14      	ldr	r2, [pc, #80]	; (80059e0 <TIM_OC3_SetConfig+0xd0>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d113      	bne.n	80059ba <TIM_OC3_SetConfig+0xaa>
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005998:	613b      	str	r3, [r7, #16]
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059a0:	613b      	str	r3, [r7, #16]
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	693a      	ldr	r2, [r7, #16]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	011b      	lsls	r3, r3, #4
 80059b4:	693a      	ldr	r2, [r7, #16]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	613b      	str	r3, [r7, #16]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	605a      	str	r2, [r3, #4]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	61da      	str	r2, [r3, #28]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	63da      	str	r2, [r3, #60]	; 0x3c
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	621a      	str	r2, [r3, #32]
 80059d4:	bf00      	nop
 80059d6:	371c      	adds	r7, #28
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40012c00 	.word	0x40012c00

080059e4 <TIM_OC4_SetConfig>:
 80059e4:	b480      	push	{r7}
 80059e6:	b087      	sub	sp, #28
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	613b      	str	r3, [r7, #16]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a1b      	ldr	r3, [r3, #32]
 80059f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	621a      	str	r2, [r3, #32]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a12:	60fb      	str	r3, [r7, #12]
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	021b      	lsls	r3, r3, #8
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a2e:	613b      	str	r3, [r7, #16]
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	031b      	lsls	r3, r3, #12
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a0f      	ldr	r2, [pc, #60]	; (8005a7c <TIM_OC4_SetConfig+0x98>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d109      	bne.n	8005a58 <TIM_OC4_SetConfig+0x74>
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	019b      	lsls	r3, r3, #6
 8005a52:	697a      	ldr	r2, [r7, #20]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	617b      	str	r3, [r7, #20]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	605a      	str	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	61da      	str	r2, [r3, #28]
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	685a      	ldr	r2, [r3, #4]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	641a      	str	r2, [r3, #64]	; 0x40
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	621a      	str	r2, [r3, #32]
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bc80      	pop	{r7}
 8005a7a:	4770      	bx	lr
 8005a7c:	40012c00 	.word	0x40012c00

08005a80 <TIM_CCxChannelCmd>:
 8005a80:	b480      	push	{r7}
 8005a82:	b087      	sub	sp, #28
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	607a      	str	r2, [r7, #4]
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f003 031f 	and.w	r3, r3, #31
 8005a92:	2201      	movs	r2, #1
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	6a1a      	ldr	r2, [r3, #32]
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	43db      	mvns	r3, r3
 8005aa2:	401a      	ands	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	621a      	str	r2, [r3, #32]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6a1a      	ldr	r2, [r3, #32]
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 031f 	and.w	r3, r3, #31
 8005ab2:	6879      	ldr	r1, [r7, #4]
 8005ab4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab8:	431a      	orrs	r2, r3
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	621a      	str	r2, [r3, #32]
 8005abe:	bf00      	nop
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bc80      	pop	{r7}
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_TIMEx_MasterConfigSynchronization>:
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d101      	bne.n	8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005adc:	2302      	movs	r3, #2
 8005ade:	e046      	b.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	60fb      	str	r3, [r7, #12]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	60bb      	str	r3, [r7, #8]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	60fb      	str	r3, [r7, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	605a      	str	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a16      	ldr	r2, [pc, #88]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00e      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2c:	d009      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a12      	ldr	r2, [pc, #72]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d004      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a10      	ldr	r2, [pc, #64]	; (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d10c      	bne.n	8005b5c <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60bb      	str	r3, [r7, #8]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	609a      	str	r2, [r3, #8]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bc80      	pop	{r7}
 8005b76:	4770      	bx	lr
 8005b78:	40012c00 	.word	0x40012c00
 8005b7c:	40000400 	.word	0x40000400
 8005b80:	40000800 	.word	0x40000800

08005b84 <HAL_TIMEx_ConfigBreakDeadTime>:
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e03d      	b.n	8005c1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	645a      	str	r2, [r3, #68]	; 0x44
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr

08005c26 <HAL_TIMEx_CommutCallback>:
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bc80      	pop	{r7}
 8005c36:	4770      	bx	lr

08005c38 <HAL_TIMEx_BreakCallback>:
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bc80      	pop	{r7}
 8005c48:	4770      	bx	lr

08005c4a <HAL_UART_Init>:
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b082      	sub	sp, #8
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <HAL_UART_Init+0x12>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e042      	b.n	8005ce2 <HAL_UART_Init+0x98>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d106      	bne.n	8005c76 <HAL_UART_Init+0x2c>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7fd faf3 	bl	800325c <HAL_UART_MspInit>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2224      	movs	r2, #36	; 0x24
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c8c:	60da      	str	r2, [r3, #12]
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f000 fe50 	bl	8006934 <UART_SetConfig>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ca2:	611a      	str	r2, [r3, #16]
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	695a      	ldr	r2, [r3, #20]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cb2:	615a      	str	r2, [r3, #20]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cc2:	60da      	str	r2, [r3, #12]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	645a      	str	r2, [r3, #68]	; 0x44
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2220      	movs	r2, #32
 8005cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	635a      	str	r2, [r3, #52]	; 0x34
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HAL_HalfDuplex_Init>:
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b082      	sub	sp, #8
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <HAL_HalfDuplex_Init+0x12>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e04a      	b.n	8005d92 <HAL_HalfDuplex_Init+0xa8>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d106      	bne.n	8005d16 <HAL_HalfDuplex_Init+0x2c>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f7fd faa3 	bl	800325c <HAL_UART_MspInit>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2224      	movs	r2, #36	; 0x24
 8005d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68da      	ldr	r2, [r3, #12]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d2c:	60da      	str	r2, [r3, #12]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fe00 	bl	8006934 <UART_SetConfig>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d42:	611a      	str	r2, [r3, #16]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	695a      	ldr	r2, [r3, #20]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005d52:	615a      	str	r2, [r3, #20]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	695a      	ldr	r2, [r3, #20]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f042 0208 	orr.w	r2, r2, #8
 8005d62:	615a      	str	r2, [r3, #20]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68da      	ldr	r2, [r3, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d72:	60da      	str	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	645a      	str	r2, [r3, #68]	; 0x44
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	635a      	str	r2, [r3, #52]	; 0x34
 8005d90:	2300      	movs	r3, #0
 8005d92:	4618      	mov	r0, r3
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <HAL_UART_Transmit>:
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b08a      	sub	sp, #40	; 0x28
 8005d9e:	af02      	add	r7, sp, #8
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	603b      	str	r3, [r7, #0]
 8005da6:	4613      	mov	r3, r2
 8005da8:	80fb      	strh	r3, [r7, #6]
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b20      	cmp	r3, #32
 8005db8:	d16d      	bne.n	8005e96 <HAL_UART_Transmit+0xfc>
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <HAL_UART_Transmit+0x2c>
 8005dc0:	88fb      	ldrh	r3, [r7, #6]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d101      	bne.n	8005dca <HAL_UART_Transmit+0x30>
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	e066      	b.n	8005e98 <HAL_UART_Transmit+0xfe>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	645a      	str	r2, [r3, #68]	; 0x44
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2221      	movs	r2, #33	; 0x21
 8005dd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dd8:	f7fd fcbe 	bl	8003758 <HAL_GetTick>
 8005ddc:	6178      	str	r0, [r7, #20]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	849a      	strh	r2, [r3, #36]	; 0x24
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	88fa      	ldrh	r2, [r7, #6]
 8005de8:	84da      	strh	r2, [r3, #38]	; 0x26
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df2:	d108      	bne.n	8005e06 <HAL_UART_Transmit+0x6c>
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	691b      	ldr	r3, [r3, #16]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d104      	bne.n	8005e06 <HAL_UART_Transmit+0x6c>
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	61bb      	str	r3, [r7, #24]
 8005e04:	e003      	b.n	8005e0e <HAL_UART_Transmit+0x74>
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	61bb      	str	r3, [r7, #24]
 8005e0e:	e02a      	b.n	8005e66 <HAL_UART_Transmit+0xcc>
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	2200      	movs	r2, #0
 8005e18:	2180      	movs	r1, #128	; 0x80
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fb48 	bl	80064b0 <UART_WaitOnFlagUntilTimeout>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d001      	beq.n	8005e2a <HAL_UART_Transmit+0x90>
 8005e26:	2303      	movs	r3, #3
 8005e28:	e036      	b.n	8005e98 <HAL_UART_Transmit+0xfe>
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10b      	bne.n	8005e48 <HAL_UART_Transmit+0xae>
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	881b      	ldrh	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e3e:	605a      	str	r2, [r3, #4]
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	3302      	adds	r3, #2
 8005e44:	61bb      	str	r3, [r7, #24]
 8005e46:	e007      	b.n	8005e58 <HAL_UART_Transmit+0xbe>
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	781a      	ldrb	r2, [r3, #0]
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	605a      	str	r2, [r3, #4]
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	3301      	adds	r3, #1
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	84da      	strh	r2, [r3, #38]	; 0x26
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1cf      	bne.n	8005e10 <HAL_UART_Transmit+0x76>
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	9300      	str	r3, [sp, #0]
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	2200      	movs	r2, #0
 8005e78:	2140      	movs	r1, #64	; 0x40
 8005e7a:	68f8      	ldr	r0, [r7, #12]
 8005e7c:	f000 fb18 	bl	80064b0 <UART_WaitOnFlagUntilTimeout>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d001      	beq.n	8005e8a <HAL_UART_Transmit+0xf0>
 8005e86:	2303      	movs	r3, #3
 8005e88:	e006      	b.n	8005e98 <HAL_UART_Transmit+0xfe>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e92:	2300      	movs	r3, #0
 8005e94:	e000      	b.n	8005e98 <HAL_UART_Transmit+0xfe>
 8005e96:	2302      	movs	r3, #2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3720      	adds	r7, #32
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_UART_Receive_IT>:
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	80fb      	strh	r3, [r7, #6]
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b20      	cmp	r3, #32
 8005eb8:	d112      	bne.n	8005ee0 <HAL_UART_Receive_IT+0x40>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_UART_Receive_IT+0x26>
 8005ec0:	88fb      	ldrh	r3, [r7, #6]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d101      	bne.n	8005eca <HAL_UART_Receive_IT+0x2a>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e00b      	b.n	8005ee2 <HAL_UART_Receive_IT+0x42>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	631a      	str	r2, [r3, #48]	; 0x30
 8005ed0:	88fb      	ldrh	r3, [r7, #6]
 8005ed2:	461a      	mov	r2, r3
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	68f8      	ldr	r0, [r7, #12]
 8005ed8:	f000 fb58 	bl	800658c <UART_Start_Receive_IT>
 8005edc:	4603      	mov	r3, r0
 8005ede:	e000      	b.n	8005ee2 <HAL_UART_Receive_IT+0x42>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <HAL_UART_IRQHandler>:
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b0ba      	sub	sp, #232	; 0xe8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005f12:	2300      	movs	r3, #0
 8005f14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10f      	bne.n	8005f52 <HAL_UART_IRQHandler+0x66>
 8005f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d009      	beq.n	8005f52 <HAL_UART_IRQHandler+0x66>
 8005f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f42:	f003 0320 	and.w	r3, r3, #32
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <HAL_UART_IRQHandler+0x66>
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fc34 	bl	80067b8 <UART_Receive_IT>
 8005f50:	e25b      	b.n	800640a <HAL_UART_IRQHandler+0x51e>
 8005f52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	f000 80de 	beq.w	8006118 <HAL_UART_IRQHandler+0x22c>
 8005f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d106      	bne.n	8005f76 <HAL_UART_IRQHandler+0x8a>
 8005f68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f6c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 80d1 	beq.w	8006118 <HAL_UART_IRQHandler+0x22c>
 8005f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7a:	f003 0301 	and.w	r3, r3, #1
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <HAL_UART_IRQHandler+0xae>
 8005f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d005      	beq.n	8005f9a <HAL_UART_IRQHandler+0xae>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f92:	f043 0201 	orr.w	r2, r3, #1
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	645a      	str	r2, [r3, #68]	; 0x44
 8005f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00b      	beq.n	8005fbe <HAL_UART_IRQHandler+0xd2>
 8005fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d005      	beq.n	8005fbe <HAL_UART_IRQHandler+0xd2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb6:	f043 0202 	orr.w	r2, r3, #2
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	645a      	str	r2, [r3, #68]	; 0x44
 8005fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fc2:	f003 0302 	and.w	r3, r3, #2
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00b      	beq.n	8005fe2 <HAL_UART_IRQHandler+0xf6>
 8005fca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fce:	f003 0301 	and.w	r3, r3, #1
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d005      	beq.n	8005fe2 <HAL_UART_IRQHandler+0xf6>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fda:	f043 0204 	orr.w	r2, r3, #4
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	645a      	str	r2, [r3, #68]	; 0x44
 8005fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d011      	beq.n	8006012 <HAL_UART_IRQHandler+0x126>
 8005fee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d105      	bne.n	8006006 <HAL_UART_IRQHandler+0x11a>
 8005ffa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	2b00      	cmp	r3, #0
 8006004:	d005      	beq.n	8006012 <HAL_UART_IRQHandler+0x126>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800600a:	f043 0208 	orr.w	r2, r3, #8
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	645a      	str	r2, [r3, #68]	; 0x44
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006016:	2b00      	cmp	r3, #0
 8006018:	f000 81f2 	beq.w	8006400 <HAL_UART_IRQHandler+0x514>
 800601c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d008      	beq.n	800603a <HAL_UART_IRQHandler+0x14e>
 8006028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d002      	beq.n	800603a <HAL_UART_IRQHandler+0x14e>
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fbbf 	bl	80067b8 <UART_Receive_IT>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006044:	2b00      	cmp	r3, #0
 8006046:	bf14      	ite	ne
 8006048:	2301      	movne	r3, #1
 800604a:	2300      	moveq	r3, #0
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006056:	f003 0308 	and.w	r3, r3, #8
 800605a:	2b00      	cmp	r3, #0
 800605c:	d103      	bne.n	8006066 <HAL_UART_IRQHandler+0x17a>
 800605e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006062:	2b00      	cmp	r3, #0
 8006064:	d04f      	beq.n	8006106 <HAL_UART_IRQHandler+0x21a>
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fac9 	bl	80065fe <UART_EndRxTransfer>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d041      	beq.n	80060fe <HAL_UART_IRQHandler+0x212>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3314      	adds	r3, #20
 8006080:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006084:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006090:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006094:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006098:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	3314      	adds	r3, #20
 80060a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80060ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060b6:	e841 2300 	strex	r3, r2, [r1]
 80060ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80060be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1d9      	bne.n	800607a <HAL_UART_IRQHandler+0x18e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d013      	beq.n	80060f6 <HAL_UART_IRQHandler+0x20a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	4a7e      	ldr	r2, [pc, #504]	; (80062cc <HAL_UART_IRQHandler+0x3e0>)
 80060d4:	635a      	str	r2, [r3, #52]	; 0x34
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fd fc60 	bl	80039a0 <HAL_DMA_Abort_IT>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d016      	beq.n	8006114 <HAL_UART_IRQHandler+0x228>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80060f0:	4610      	mov	r0, r2
 80060f2:	4798      	blx	r3
 80060f4:	e00e      	b.n	8006114 <HAL_UART_IRQHandler+0x228>
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f993 	bl	8006422 <HAL_UART_ErrorCallback>
 80060fc:	e00a      	b.n	8006114 <HAL_UART_IRQHandler+0x228>
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f98f 	bl	8006422 <HAL_UART_ErrorCallback>
 8006104:	e006      	b.n	8006114 <HAL_UART_IRQHandler+0x228>
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 f98b 	bl	8006422 <HAL_UART_ErrorCallback>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	645a      	str	r2, [r3, #68]	; 0x44
 8006112:	e175      	b.n	8006400 <HAL_UART_IRQHandler+0x514>
 8006114:	bf00      	nop
 8006116:	e173      	b.n	8006400 <HAL_UART_IRQHandler+0x514>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	2b01      	cmp	r3, #1
 800611e:	f040 814f 	bne.w	80063c0 <HAL_UART_IRQHandler+0x4d4>
 8006122:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006126:	f003 0310 	and.w	r3, r3, #16
 800612a:	2b00      	cmp	r3, #0
 800612c:	f000 8148 	beq.w	80063c0 <HAL_UART_IRQHandler+0x4d4>
 8006130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	2b00      	cmp	r3, #0
 800613a:	f000 8141 	beq.w	80063c0 <HAL_UART_IRQHandler+0x4d4>
 800613e:	2300      	movs	r3, #0
 8006140:	60bb      	str	r3, [r7, #8]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	60bb      	str	r3, [r7, #8]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	60bb      	str	r3, [r7, #8]
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 80b6 	beq.w	80062d0 <HAL_UART_IRQHandler+0x3e4>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8006170:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 8145 	beq.w	8006404 <HAL_UART_IRQHandler+0x518>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800617e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006182:	429a      	cmp	r2, r3
 8006184:	f080 813e 	bcs.w	8006404 <HAL_UART_IRQHandler+0x518>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800618e:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	2b20      	cmp	r3, #32
 8006198:	f000 8088 	beq.w	80062ac <HAL_UART_IRQHandler+0x3c0>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	330c      	adds	r3, #12
 80061a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061aa:	e853 3f00 	ldrex	r3, [r3]
 80061ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80061b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	330c      	adds	r3, #12
 80061c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80061c8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061d0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061d4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061d8:	e841 2300 	strex	r3, r2, [r1]
 80061dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80061e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1d9      	bne.n	800619c <HAL_UART_IRQHandler+0x2b0>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3314      	adds	r3, #20
 80061ee:	677b      	str	r3, [r7, #116]	; 0x74
 80061f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061f2:	e853 3f00 	ldrex	r3, [r3]
 80061f6:	673b      	str	r3, [r7, #112]	; 0x70
 80061f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061fa:	f023 0301 	bic.w	r3, r3, #1
 80061fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3314      	adds	r3, #20
 8006208:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800620c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006210:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006212:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006214:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	67bb      	str	r3, [r7, #120]	; 0x78
 800621e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e1      	bne.n	80061e8 <HAL_UART_IRQHandler+0x2fc>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3314      	adds	r3, #20
 800622a:	663b      	str	r3, [r7, #96]	; 0x60
 800622c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800622e:	e853 3f00 	ldrex	r3, [r3]
 8006232:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006234:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006236:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800623a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3314      	adds	r3, #20
 8006244:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006248:	66fa      	str	r2, [r7, #108]	; 0x6c
 800624a:	66bb      	str	r3, [r7, #104]	; 0x68
 800624c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800624e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006250:	e841 2300 	strex	r3, r2, [r1]
 8006254:	667b      	str	r3, [r7, #100]	; 0x64
 8006256:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1e3      	bne.n	8006224 <HAL_UART_IRQHandler+0x338>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	631a      	str	r2, [r3, #48]	; 0x30
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	330c      	adds	r3, #12
 8006270:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006274:	e853 3f00 	ldrex	r3, [r3]
 8006278:	64bb      	str	r3, [r7, #72]	; 0x48
 800627a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800627c:	f023 0310 	bic.w	r3, r3, #16
 8006280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	330c      	adds	r3, #12
 800628a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800628e:	65ba      	str	r2, [r7, #88]	; 0x58
 8006290:	657b      	str	r3, [r7, #84]	; 0x54
 8006292:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006294:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006296:	e841 2300 	strex	r3, r2, [r1]
 800629a:	653b      	str	r3, [r7, #80]	; 0x50
 800629c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1e3      	bne.n	800626a <HAL_UART_IRQHandler+0x37e>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7fd fb3f 	bl	800392a <HAL_DMA_Abort>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	635a      	str	r2, [r3, #52]	; 0x34
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	b29b      	uxth	r3, r3
 80062c0:	4619      	mov	r1, r3
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f000 f8b6 	bl	8006434 <HAL_UARTEx_RxEventCallback>
 80062c8:	e09c      	b.n	8006404 <HAL_UART_IRQHandler+0x518>
 80062ca:	bf00      	nop
 80062cc:	080066c3 	.word	0x080066c3
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062d8:	b29b      	uxth	r3, r3
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f000 808e 	beq.w	8006408 <HAL_UART_IRQHandler+0x51c>
 80062ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	f000 8089 	beq.w	8006408 <HAL_UART_IRQHandler+0x51c>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	330c      	adds	r3, #12
 80062fc:	63bb      	str	r3, [r7, #56]	; 0x38
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	e853 3f00 	ldrex	r3, [r3]
 8006304:	637b      	str	r3, [r7, #52]	; 0x34
 8006306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006308:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800630c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	330c      	adds	r3, #12
 8006316:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800631a:	647a      	str	r2, [r7, #68]	; 0x44
 800631c:	643b      	str	r3, [r7, #64]	; 0x40
 800631e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006320:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006322:	e841 2300 	strex	r3, r2, [r1]
 8006326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006328:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1e3      	bne.n	80062f6 <HAL_UART_IRQHandler+0x40a>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3314      	adds	r3, #20
 8006334:	627b      	str	r3, [r7, #36]	; 0x24
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	e853 3f00 	ldrex	r3, [r3]
 800633c:	623b      	str	r3, [r7, #32]
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	f023 0301 	bic.w	r3, r3, #1
 8006344:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3314      	adds	r3, #20
 800634e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006352:	633a      	str	r2, [r7, #48]	; 0x30
 8006354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800635a:	e841 2300 	strex	r3, r2, [r1]
 800635e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1e3      	bne.n	800632e <HAL_UART_IRQHandler+0x442>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	631a      	str	r2, [r3, #48]	; 0x30
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	330c      	adds	r3, #12
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0310 	bic.w	r3, r3, #16
 800638a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006398:	61fa      	str	r2, [r7, #28]
 800639a:	61bb      	str	r3, [r7, #24]
 800639c:	69b9      	ldr	r1, [r7, #24]
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	e841 2300 	strex	r3, r2, [r1]
 80063a4:	617b      	str	r3, [r7, #20]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e3      	bne.n	8006374 <HAL_UART_IRQHandler+0x488>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2202      	movs	r2, #2
 80063b0:	635a      	str	r2, [r3, #52]	; 0x34
 80063b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 f83b 	bl	8006434 <HAL_UARTEx_RxEventCallback>
 80063be:	e023      	b.n	8006408 <HAL_UART_IRQHandler+0x51c>
 80063c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d009      	beq.n	80063e0 <HAL_UART_IRQHandler+0x4f4>
 80063cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d003      	beq.n	80063e0 <HAL_UART_IRQHandler+0x4f4>
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 f986 	bl	80066ea <UART_Transmit_IT>
 80063de:	e014      	b.n	800640a <HAL_UART_IRQHandler+0x51e>
 80063e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00e      	beq.n	800640a <HAL_UART_IRQHandler+0x51e>
 80063ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_UART_IRQHandler+0x51e>
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f9c5 	bl	8006788 <UART_EndTransmit_IT>
 80063fe:	e004      	b.n	800640a <HAL_UART_IRQHandler+0x51e>
 8006400:	bf00      	nop
 8006402:	e002      	b.n	800640a <HAL_UART_IRQHandler+0x51e>
 8006404:	bf00      	nop
 8006406:	e000      	b.n	800640a <HAL_UART_IRQHandler+0x51e>
 8006408:	bf00      	nop
 800640a:	37e8      	adds	r7, #232	; 0xe8
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <HAL_UART_TxCpltCallback>:
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	bc80      	pop	{r7}
 8006420:	4770      	bx	lr

08006422 <HAL_UART_ErrorCallback>:
 8006422:	b480      	push	{r7}
 8006424:	b083      	sub	sp, #12
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	bc80      	pop	{r7}
 8006432:	4770      	bx	lr

08006434 <HAL_UARTEx_RxEventCallback>:
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	460b      	mov	r3, r1
 800643e:	807b      	strh	r3, [r7, #2]
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr

0800644a <HAL_HalfDuplex_EnableTransmitter>:
 800644a:	b480      	push	{r7}
 800644c:	b085      	sub	sp, #20
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	2300      	movs	r3, #0
 8006454:	60fb      	str	r3, [r7, #12]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800645c:	2b01      	cmp	r3, #1
 800645e:	d101      	bne.n	8006464 <HAL_HalfDuplex_EnableTransmitter+0x1a>
 8006460:	2302      	movs	r3, #2
 8006462:	e020      	b.n	80064a6 <HAL_HalfDuplex_EnableTransmitter+0x5c>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2224      	movs	r2, #36	; 0x24
 8006470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f023 030c 	bic.w	r3, r3, #12
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f043 0308 	orr.w	r3, r3, #8
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	60da      	str	r2, [r3, #12]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2220      	movs	r2, #32
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064a4:	2300      	movs	r3, #0
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bc80      	pop	{r7}
 80064ae:	4770      	bx	lr

080064b0 <UART_WaitOnFlagUntilTimeout>:
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b090      	sub	sp, #64	; 0x40
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	60f8      	str	r0, [r7, #12]
 80064b8:	60b9      	str	r1, [r7, #8]
 80064ba:	603b      	str	r3, [r7, #0]
 80064bc:	4613      	mov	r3, r2
 80064be:	71fb      	strb	r3, [r7, #7]
 80064c0:	e050      	b.n	8006564 <UART_WaitOnFlagUntilTimeout+0xb4>
 80064c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80064c8:	d04c      	beq.n	8006564 <UART_WaitOnFlagUntilTimeout+0xb4>
 80064ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d007      	beq.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80064d0:	f7fd f942 	bl	8003758 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80064dc:	429a      	cmp	r2, r3
 80064de:	d241      	bcs.n	8006564 <UART_WaitOnFlagUntilTimeout+0xb4>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	330c      	adds	r3, #12
 80064e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80064e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ea:	e853 3f00 	ldrex	r3, [r3]
 80064ee:	627b      	str	r3, [r7, #36]	; 0x24
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	330c      	adds	r3, #12
 80064fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006500:	637a      	str	r2, [r7, #52]	; 0x34
 8006502:	633b      	str	r3, [r7, #48]	; 0x30
 8006504:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006506:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006508:	e841 2300 	strex	r3, r2, [r1]
 800650c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800650e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1e5      	bne.n	80064e0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	3314      	adds	r3, #20
 800651a:	617b      	str	r3, [r7, #20]
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	e853 3f00 	ldrex	r3, [r3]
 8006522:	613b      	str	r3, [r7, #16]
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f023 0301 	bic.w	r3, r3, #1
 800652a:	63bb      	str	r3, [r7, #56]	; 0x38
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	3314      	adds	r3, #20
 8006532:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006534:	623a      	str	r2, [r7, #32]
 8006536:	61fb      	str	r3, [r7, #28]
 8006538:	69f9      	ldr	r1, [r7, #28]
 800653a:	6a3a      	ldr	r2, [r7, #32]
 800653c:	e841 2300 	strex	r3, r2, [r1]
 8006540:	61bb      	str	r3, [r7, #24]
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1e5      	bne.n	8006514 <UART_WaitOnFlagUntilTimeout+0x64>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2220      	movs	r2, #32
 800654c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2220      	movs	r2, #32
 8006554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006560:	2303      	movs	r3, #3
 8006562:	e00f      	b.n	8006584 <UART_WaitOnFlagUntilTimeout+0xd4>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	4013      	ands	r3, r2
 800656e:	68ba      	ldr	r2, [r7, #8]
 8006570:	429a      	cmp	r2, r3
 8006572:	bf0c      	ite	eq
 8006574:	2301      	moveq	r3, #1
 8006576:	2300      	movne	r3, #0
 8006578:	b2db      	uxtb	r3, r3
 800657a:	461a      	mov	r2, r3
 800657c:	79fb      	ldrb	r3, [r7, #7]
 800657e:	429a      	cmp	r2, r3
 8006580:	d09f      	beq.n	80064c2 <UART_WaitOnFlagUntilTimeout+0x12>
 8006582:	2300      	movs	r3, #0
 8006584:	4618      	mov	r0, r3
 8006586:	3740      	adds	r7, #64	; 0x40
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <UART_Start_Receive_IT>:
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	4613      	mov	r3, r2
 8006598:	80fb      	strh	r3, [r7, #6]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	629a      	str	r2, [r3, #40]	; 0x28
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	88fa      	ldrh	r2, [r7, #6]
 80065a4:	859a      	strh	r2, [r3, #44]	; 0x2c
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	88fa      	ldrh	r2, [r7, #6]
 80065aa:	85da      	strh	r2, [r3, #46]	; 0x2e
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	645a      	str	r2, [r3, #68]	; 0x44
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2222      	movs	r2, #34	; 0x22
 80065b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d007      	beq.n	80065d2 <UART_Start_Receive_IT+0x46>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68da      	ldr	r2, [r3, #12]
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065d0:	60da      	str	r2, [r3, #12]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695a      	ldr	r2, [r3, #20]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0201 	orr.w	r2, r2, #1
 80065e0:	615a      	str	r2, [r3, #20]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68da      	ldr	r2, [r3, #12]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f042 0220 	orr.w	r2, r2, #32
 80065f0:	60da      	str	r2, [r3, #12]
 80065f2:	2300      	movs	r3, #0
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr

080065fe <UART_EndRxTransfer>:
 80065fe:	b480      	push	{r7}
 8006600:	b095      	sub	sp, #84	; 0x54
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	330c      	adds	r3, #12
 800660c:	637b      	str	r3, [r7, #52]	; 0x34
 800660e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	633b      	str	r3, [r7, #48]	; 0x30
 8006616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006618:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800661c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	330c      	adds	r3, #12
 8006624:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006626:	643a      	str	r2, [r7, #64]	; 0x40
 8006628:	63fb      	str	r3, [r7, #60]	; 0x3c
 800662a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800662c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	63bb      	str	r3, [r7, #56]	; 0x38
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e5      	bne.n	8006606 <UART_EndRxTransfer+0x8>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3314      	adds	r3, #20
 8006640:	623b      	str	r3, [r7, #32]
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	e853 3f00 	ldrex	r3, [r3]
 8006648:	61fb      	str	r3, [r7, #28]
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	f023 0301 	bic.w	r3, r3, #1
 8006650:	64bb      	str	r3, [r7, #72]	; 0x48
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3314      	adds	r3, #20
 8006658:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800665a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800665c:	62bb      	str	r3, [r7, #40]	; 0x28
 800665e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006660:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006662:	e841 2300 	strex	r3, r2, [r1]
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
 8006668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1e5      	bne.n	800663a <UART_EndRxTransfer+0x3c>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006672:	2b01      	cmp	r3, #1
 8006674:	d119      	bne.n	80066aa <UART_EndRxTransfer+0xac>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	330c      	adds	r3, #12
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	e853 3f00 	ldrex	r3, [r3]
 8006684:	60bb      	str	r3, [r7, #8]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f023 0310 	bic.w	r3, r3, #16
 800668c:	647b      	str	r3, [r7, #68]	; 0x44
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	330c      	adds	r3, #12
 8006694:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006696:	61ba      	str	r2, [r7, #24]
 8006698:	617b      	str	r3, [r7, #20]
 800669a:	6979      	ldr	r1, [r7, #20]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	e841 2300 	strex	r3, r2, [r1]
 80066a2:	613b      	str	r3, [r7, #16]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d1e5      	bne.n	8006676 <UART_EndRxTransfer+0x78>
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2220      	movs	r2, #32
 80066ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2200      	movs	r2, #0
 80066b6:	631a      	str	r2, [r3, #48]	; 0x30
 80066b8:	bf00      	nop
 80066ba:	3754      	adds	r7, #84	; 0x54
 80066bc:	46bd      	mov	sp, r7
 80066be:	bc80      	pop	{r7}
 80066c0:	4770      	bx	lr

080066c2 <UART_DMAAbortOnError>:
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	60fb      	str	r3, [r7, #12]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	85da      	strh	r2, [r3, #46]	; 0x2e
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	84da      	strh	r2, [r3, #38]	; 0x26
 80066dc:	68f8      	ldr	r0, [r7, #12]
 80066de:	f7ff fea0 	bl	8006422 <HAL_UART_ErrorCallback>
 80066e2:	bf00      	nop
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <UART_Transmit_IT>:
 80066ea:	b480      	push	{r7}
 80066ec:	b085      	sub	sp, #20
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	2b21      	cmp	r3, #33	; 0x21
 80066fc:	d13e      	bne.n	800677c <UART_Transmit_IT+0x92>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006706:	d114      	bne.n	8006732 <UART_Transmit_IT+0x48>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d110      	bne.n	8006732 <UART_Transmit_IT+0x48>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a1b      	ldr	r3, [r3, #32]
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006724:	605a      	str	r2, [r3, #4]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	1c9a      	adds	r2, r3, #2
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	621a      	str	r2, [r3, #32]
 8006730:	e008      	b.n	8006744 <UART_Transmit_IT+0x5a>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	1c59      	adds	r1, r3, #1
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	6211      	str	r1, [r2, #32]
 800673c:	781a      	ldrb	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	605a      	str	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006748:	b29b      	uxth	r3, r3
 800674a:	3b01      	subs	r3, #1
 800674c:	b29b      	uxth	r3, r3
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	4619      	mov	r1, r3
 8006752:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006754:	2b00      	cmp	r3, #0
 8006756:	d10f      	bne.n	8006778 <UART_Transmit_IT+0x8e>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68da      	ldr	r2, [r3, #12]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006766:	60da      	str	r2, [r3, #12]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	68da      	ldr	r2, [r3, #12]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006776:	60da      	str	r2, [r3, #12]
 8006778:	2300      	movs	r3, #0
 800677a:	e000      	b.n	800677e <UART_Transmit_IT+0x94>
 800677c:	2302      	movs	r3, #2
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr

08006788 <UART_EndTransmit_IT>:
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800679e:	60da      	str	r2, [r3, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2220      	movs	r2, #32
 80067a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff fe31 	bl	8006410 <HAL_UART_TxCpltCallback>
 80067ae:	2300      	movs	r3, #0
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}

080067b8 <UART_Receive_IT>:
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b08c      	sub	sp, #48	; 0x30
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b22      	cmp	r3, #34	; 0x22
 80067ca:	f040 80ae 	bne.w	800692a <UART_Receive_IT+0x172>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067d6:	d117      	bne.n	8006808 <UART_Receive_IT+0x50>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d113      	bne.n	8006808 <UART_Receive_IT+0x50>
 80067e0:	2300      	movs	r3, #0
 80067e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067fa:	801a      	strh	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006800:	1c9a      	adds	r2, r3, #2
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	629a      	str	r2, [r3, #40]	; 0x28
 8006806:	e026      	b.n	8006856 <UART_Receive_IT+0x9e>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800680e:	2300      	movs	r3, #0
 8006810:	62bb      	str	r3, [r7, #40]	; 0x28
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800681a:	d007      	beq.n	800682c <UART_Receive_IT+0x74>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d10a      	bne.n	800683a <UART_Receive_IT+0x82>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <UART_Receive_IT+0x82>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	b2da      	uxtb	r2, r3
 8006834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	e008      	b.n	800684c <UART_Receive_IT+0x94>
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	b2db      	uxtb	r3, r3
 8006842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006846:	b2da      	uxtb	r2, r3
 8006848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006850:	1c5a      	adds	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	629a      	str	r2, [r3, #40]	; 0x28
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800685a:	b29b      	uxth	r3, r3
 800685c:	3b01      	subs	r3, #1
 800685e:	b29b      	uxth	r3, r3
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	4619      	mov	r1, r3
 8006864:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006866:	2b00      	cmp	r3, #0
 8006868:	d15d      	bne.n	8006926 <UART_Receive_IT+0x16e>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0220 	bic.w	r2, r2, #32
 8006878:	60da      	str	r2, [r3, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68da      	ldr	r2, [r3, #12]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006888:	60da      	str	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	695a      	ldr	r2, [r3, #20]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0201 	bic.w	r2, r2, #1
 8006898:	615a      	str	r2, [r3, #20]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2220      	movs	r2, #32
 800689e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	635a      	str	r2, [r3, #52]	; 0x34
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d135      	bne.n	800691c <UART_Receive_IT+0x164>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	631a      	str	r2, [r3, #48]	; 0x30
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	330c      	adds	r3, #12
 80068bc:	617b      	str	r3, [r7, #20]
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	e853 3f00 	ldrex	r3, [r3]
 80068c4:	613b      	str	r3, [r7, #16]
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f023 0310 	bic.w	r3, r3, #16
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	330c      	adds	r3, #12
 80068d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d6:	623a      	str	r2, [r7, #32]
 80068d8:	61fb      	str	r3, [r7, #28]
 80068da:	69f9      	ldr	r1, [r7, #28]
 80068dc:	6a3a      	ldr	r2, [r7, #32]
 80068de:	e841 2300 	strex	r3, r2, [r1]
 80068e2:	61bb      	str	r3, [r7, #24]
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1e5      	bne.n	80068b6 <UART_Receive_IT+0xfe>
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b10      	cmp	r3, #16
 80068f6:	d10a      	bne.n	800690e <UART_Receive_IT+0x156>
 80068f8:	2300      	movs	r3, #0
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006912:	4619      	mov	r1, r3
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff fd8d 	bl	8006434 <HAL_UARTEx_RxEventCallback>
 800691a:	e002      	b.n	8006922 <UART_Receive_IT+0x16a>
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f7fc f937 	bl	8002b90 <HAL_UART_RxCpltCallback>
 8006922:	2300      	movs	r3, #0
 8006924:	e002      	b.n	800692c <UART_Receive_IT+0x174>
 8006926:	2300      	movs	r3, #0
 8006928:	e000      	b.n	800692c <UART_Receive_IT+0x174>
 800692a:	2302      	movs	r3, #2
 800692c:	4618      	mov	r0, r3
 800692e:	3730      	adds	r7, #48	; 0x30
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <UART_SetConfig>:
 8006934:	b580      	push	{r7, lr}
 8006936:	b084      	sub	sp, #16
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	691b      	ldr	r3, [r3, #16]
 8006942:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68da      	ldr	r2, [r3, #12]
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	611a      	str	r2, [r3, #16]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	689a      	ldr	r2, [r3, #8]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	695b      	ldr	r3, [r3, #20]
 8006960:	4313      	orrs	r3, r2
 8006962:	60bb      	str	r3, [r7, #8]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800696e:	f023 030c 	bic.w	r3, r3, #12
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	430b      	orrs	r3, r1
 800697a:	60d3      	str	r3, [r2, #12]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	695b      	ldr	r3, [r3, #20]
 8006982:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	430a      	orrs	r2, r1
 8006990:	615a      	str	r2, [r3, #20]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a2c      	ldr	r2, [pc, #176]	; (8006a48 <UART_SetConfig+0x114>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d103      	bne.n	80069a4 <UART_SetConfig+0x70>
 800699c:	f7fd fe18 	bl	80045d0 <HAL_RCC_GetPCLK2Freq>
 80069a0:	60f8      	str	r0, [r7, #12]
 80069a2:	e002      	b.n	80069aa <UART_SetConfig+0x76>
 80069a4:	f7fd fe00 	bl	80045a8 <HAL_RCC_GetPCLK1Freq>
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	68fa      	ldr	r2, [r7, #12]
 80069ac:	4613      	mov	r3, r2
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	009a      	lsls	r2, r3, #2
 80069b4:	441a      	add	r2, r3
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c0:	4a22      	ldr	r2, [pc, #136]	; (8006a4c <UART_SetConfig+0x118>)
 80069c2:	fba2 2303 	umull	r2, r3, r2, r3
 80069c6:	095b      	lsrs	r3, r3, #5
 80069c8:	0119      	lsls	r1, r3, #4
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	4613      	mov	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	009a      	lsls	r2, r3, #2
 80069d4:	441a      	add	r2, r3
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80069e0:	4b1a      	ldr	r3, [pc, #104]	; (8006a4c <UART_SetConfig+0x118>)
 80069e2:	fba3 0302 	umull	r0, r3, r3, r2
 80069e6:	095b      	lsrs	r3, r3, #5
 80069e8:	2064      	movs	r0, #100	; 0x64
 80069ea:	fb00 f303 	mul.w	r3, r0, r3
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	011b      	lsls	r3, r3, #4
 80069f2:	3332      	adds	r3, #50	; 0x32
 80069f4:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <UART_SetConfig+0x118>)
 80069f6:	fba2 2303 	umull	r2, r3, r2, r3
 80069fa:	095b      	lsrs	r3, r3, #5
 80069fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a00:	4419      	add	r1, r3
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	4613      	mov	r3, r2
 8006a06:	009b      	lsls	r3, r3, #2
 8006a08:	4413      	add	r3, r2
 8006a0a:	009a      	lsls	r2, r3, #2
 8006a0c:	441a      	add	r2, r3
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <UART_SetConfig+0x118>)
 8006a1a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	2064      	movs	r0, #100	; 0x64
 8006a22:	fb00 f303 	mul.w	r3, r0, r3
 8006a26:	1ad3      	subs	r3, r2, r3
 8006a28:	011b      	lsls	r3, r3, #4
 8006a2a:	3332      	adds	r3, #50	; 0x32
 8006a2c:	4a07      	ldr	r2, [pc, #28]	; (8006a4c <UART_SetConfig+0x118>)
 8006a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	f003 020f 	and.w	r2, r3, #15
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	609a      	str	r2, [r3, #8]
 8006a40:	bf00      	nop
 8006a42:	3710      	adds	r7, #16
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}
 8006a48:	40013800 	.word	0x40013800
 8006a4c:	51eb851f 	.word	0x51eb851f

08006a50 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b085      	sub	sp, #20
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	4603      	mov	r3, r0
 8006a58:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006a5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006a62:	2b84      	cmp	r3, #132	; 0x84
 8006a64:	d005      	beq.n	8006a72 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006a66:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	3303      	adds	r3, #3
 8006a70:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006a72:	68fb      	ldr	r3, [r7, #12]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3714      	adds	r7, #20
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bc80      	pop	{r7}
 8006a7c:	4770      	bx	lr

08006a7e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006a82:	f000 fae7 	bl	8007054 <vTaskStartScheduler>
  
  return osOK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a8e:	b089      	sub	sp, #36	; 0x24
 8006a90:	af04      	add	r7, sp, #16
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	695b      	ldr	r3, [r3, #20]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d020      	beq.n	8006ae0 <osThreadCreate+0x54>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	699b      	ldr	r3, [r3, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d01c      	beq.n	8006ae0 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685c      	ldr	r4, [r3, #4]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	691e      	ldr	r6, [r3, #16]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7ff ffc9 	bl	8006a50 <makeFreeRtosPriority>
 8006abe:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	687a      	ldr	r2, [r7, #4]
 8006ac6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ac8:	9202      	str	r2, [sp, #8]
 8006aca:	9301      	str	r3, [sp, #4]
 8006acc:	9100      	str	r1, [sp, #0]
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	4632      	mov	r2, r6
 8006ad2:	4629      	mov	r1, r5
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	f000 f8e8 	bl	8006caa <xTaskCreateStatic>
 8006ada:	4603      	mov	r3, r0
 8006adc:	60fb      	str	r3, [r7, #12]
 8006ade:	e01c      	b.n	8006b1a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685c      	ldr	r4, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006aec:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7ff ffab 	bl	8006a50 <makeFreeRtosPriority>
 8006afa:	4602      	mov	r2, r0
 8006afc:	f107 030c 	add.w	r3, r7, #12
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	9200      	str	r2, [sp, #0]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	4632      	mov	r2, r6
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f000 f929 	bl	8006d62 <xTaskCreate>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d001      	beq.n	8006b1a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e000      	b.n	8006b1c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006b24 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d001      	beq.n	8006b3a <osDelay+0x16>
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	e000      	b.n	8006b3c <osDelay+0x18>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	f000 fa55 	bl	8006fec <vTaskDelay>
  
  return osOK;
 8006b42:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <vListInitialise>:
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f103 0208 	add.w	r2, r3, #8
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	605a      	str	r2, [r3, #4]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b64:	609a      	str	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	f103 0208 	add.w	r2, r3, #8
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	60da      	str	r2, [r3, #12]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f103 0208 	add.w	r2, r3, #8
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	611a      	str	r2, [r3, #16]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	601a      	str	r2, [r3, #0]
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bc80      	pop	{r7}
 8006b88:	4770      	bx	lr

08006b8a <vListInitialiseItem>:
 8006b8a:	b480      	push	{r7}
 8006b8c:	b083      	sub	sp, #12
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	611a      	str	r2, [r3, #16]
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bc80      	pop	{r7}
 8006ba0:	4770      	bx	lr

08006ba2 <vListInsertEnd>:
 8006ba2:	b480      	push	{r7}
 8006ba4:	b085      	sub	sp, #20
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
 8006baa:	6039      	str	r1, [r7, #0]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	60fb      	str	r3, [r7, #12]
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	605a      	str	r2, [r3, #4]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	609a      	str	r2, [r3, #8]
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	605a      	str	r2, [r3, #4]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	609a      	str	r2, [r3, #8]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	611a      	str	r2, [r3, #16]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	1c5a      	adds	r2, r3, #1
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	bf00      	nop
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bc80      	pop	{r7}
 8006be6:	4770      	bx	lr

08006be8 <vListInsert>:
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
 8006bf0:	6039      	str	r1, [r7, #0]
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60bb      	str	r3, [r7, #8]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006bfe:	d103      	bne.n	8006c08 <vListInsert+0x20>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	60fb      	str	r3, [r7, #12]
 8006c06:	e00c      	b.n	8006c22 <vListInsert+0x3a>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3308      	adds	r3, #8
 8006c0c:	60fb      	str	r3, [r7, #12]
 8006c0e:	e002      	b.n	8006c16 <vListInsert+0x2e>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	60fb      	str	r3, [r7, #12]
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d2f6      	bcs.n	8006c10 <vListInsert+0x28>
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	685a      	ldr	r2, [r3, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	605a      	str	r2, [r3, #4]
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	685b      	ldr	r3, [r3, #4]
 8006c2e:	683a      	ldr	r2, [r7, #0]
 8006c30:	609a      	str	r2, [r3, #8]
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	68fa      	ldr	r2, [r7, #12]
 8006c36:	609a      	str	r2, [r3, #8]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	683a      	ldr	r2, [r7, #0]
 8006c3c:	605a      	str	r2, [r3, #4]
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	611a      	str	r2, [r3, #16]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	bf00      	nop
 8006c50:	3714      	adds	r7, #20
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bc80      	pop	{r7}
 8006c56:	4770      	bx	lr

08006c58 <uxListRemove>:
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	685b      	ldr	r3, [r3, #4]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	6892      	ldr	r2, [r2, #8]
 8006c6e:	609a      	str	r2, [r3, #8]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6852      	ldr	r2, [r2, #4]
 8006c78:	605a      	str	r2, [r3, #4]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d103      	bne.n	8006c8c <uxListRemove+0x34>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689a      	ldr	r2, [r3, #8]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	605a      	str	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	611a      	str	r2, [r3, #16]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	1e5a      	subs	r2, r3, #1
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	601a      	str	r2, [r3, #0]
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3714      	adds	r7, #20
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bc80      	pop	{r7}
 8006ca8:	4770      	bx	lr

08006caa <xTaskCreateStatic>:
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b08e      	sub	sp, #56	; 0x38
 8006cae:	af04      	add	r7, sp, #16
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	607a      	str	r2, [r7, #4]
 8006cb6:	603b      	str	r3, [r7, #0]
 8006cb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <xTaskCreateStatic+0x2a>
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	623b      	str	r3, [r7, #32]
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <xTaskCreateStatic+0x28>
 8006cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d10a      	bne.n	8006cf0 <xTaskCreateStatic+0x46>
 8006cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cde:	f383 8811 	msr	BASEPRI, r3
 8006ce2:	f3bf 8f6f 	isb	sy
 8006ce6:	f3bf 8f4f 	dsb	sy
 8006cea:	61fb      	str	r3, [r7, #28]
 8006cec:	bf00      	nop
 8006cee:	e7fe      	b.n	8006cee <xTaskCreateStatic+0x44>
 8006cf0:	23a0      	movs	r3, #160	; 0xa0
 8006cf2:	613b      	str	r3, [r7, #16]
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	2ba0      	cmp	r3, #160	; 0xa0
 8006cf8:	d00a      	beq.n	8006d10 <xTaskCreateStatic+0x66>
 8006cfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfe:	f383 8811 	msr	BASEPRI, r3
 8006d02:	f3bf 8f6f 	isb	sy
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	61bb      	str	r3, [r7, #24]
 8006d0c:	bf00      	nop
 8006d0e:	e7fe      	b.n	8006d0e <xTaskCreateStatic+0x64>
 8006d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d01e      	beq.n	8006d54 <xTaskCreateStatic+0xaa>
 8006d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d01b      	beq.n	8006d54 <xTaskCreateStatic+0xaa>
 8006d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d24:	631a      	str	r2, [r3, #48]	; 0x30
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	2202      	movs	r2, #2
 8006d2a:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8006d2e:	2300      	movs	r3, #0
 8006d30:	9303      	str	r3, [sp, #12]
 8006d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d34:	9302      	str	r3, [sp, #8]
 8006d36:	f107 0314 	add.w	r3, r7, #20
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	68b9      	ldr	r1, [r7, #8]
 8006d46:	68f8      	ldr	r0, [r7, #12]
 8006d48:	f000 f850 	bl	8006dec <prvInitialiseNewTask>
 8006d4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006d4e:	f000 f8e3 	bl	8006f18 <prvAddNewTaskToReadyList>
 8006d52:	e001      	b.n	8006d58 <xTaskCreateStatic+0xae>
 8006d54:	2300      	movs	r3, #0
 8006d56:	617b      	str	r3, [r7, #20]
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3728      	adds	r7, #40	; 0x28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <xTaskCreate>:
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b08c      	sub	sp, #48	; 0x30
 8006d66:	af04      	add	r7, sp, #16
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	603b      	str	r3, [r7, #0]
 8006d6e:	4613      	mov	r3, r2
 8006d70:	80fb      	strh	r3, [r7, #6]
 8006d72:	88fb      	ldrh	r3, [r7, #6]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4618      	mov	r0, r3
 8006d78:	f000 fe9a 	bl	8007ab0 <pvPortMalloc>
 8006d7c:	6178      	str	r0, [r7, #20]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d00e      	beq.n	8006da2 <xTaskCreate+0x40>
 8006d84:	20a0      	movs	r0, #160	; 0xa0
 8006d86:	f000 fe93 	bl	8007ab0 <pvPortMalloc>
 8006d8a:	61f8      	str	r0, [r7, #28]
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d003      	beq.n	8006d9a <xTaskCreate+0x38>
 8006d92:	69fb      	ldr	r3, [r7, #28]
 8006d94:	697a      	ldr	r2, [r7, #20]
 8006d96:	631a      	str	r2, [r3, #48]	; 0x30
 8006d98:	e005      	b.n	8006da6 <xTaskCreate+0x44>
 8006d9a:	6978      	ldr	r0, [r7, #20]
 8006d9c:	f000 ff4c 	bl	8007c38 <vPortFree>
 8006da0:	e001      	b.n	8006da6 <xTaskCreate+0x44>
 8006da2:	2300      	movs	r3, #0
 8006da4:	61fb      	str	r3, [r7, #28]
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d017      	beq.n	8006ddc <xTaskCreate+0x7a>
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8006db4:	88fa      	ldrh	r2, [r7, #6]
 8006db6:	2300      	movs	r3, #0
 8006db8:	9303      	str	r3, [sp, #12]
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	9302      	str	r3, [sp, #8]
 8006dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc0:	9301      	str	r3, [sp, #4]
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f80e 	bl	8006dec <prvInitialiseNewTask>
 8006dd0:	69f8      	ldr	r0, [r7, #28]
 8006dd2:	f000 f8a1 	bl	8006f18 <prvAddNewTaskToReadyList>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	e002      	b.n	8006de2 <xTaskCreate+0x80>
 8006ddc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	4618      	mov	r0, r3
 8006de6:	3720      	adds	r7, #32
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <prvInitialiseNewTask>:
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b088      	sub	sp, #32
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	60f8      	str	r0, [r7, #12]
 8006df4:	60b9      	str	r1, [r7, #8]
 8006df6:	607a      	str	r2, [r7, #4]
 8006df8:	603b      	str	r3, [r7, #0]
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e04:	3b01      	subs	r3, #1
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	61bb      	str	r3, [r7, #24]
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	f023 0307 	bic.w	r3, r3, #7
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00a      	beq.n	8006e34 <prvInitialiseNewTask+0x48>
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	bf00      	nop
 8006e32:	e7fe      	b.n	8006e32 <prvInitialiseNewTask+0x46>
 8006e34:	2300      	movs	r3, #0
 8006e36:	61fb      	str	r3, [r7, #28]
 8006e38:	e012      	b.n	8006e60 <prvInitialiseNewTask+0x74>
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	4413      	add	r3, r2
 8006e40:	7819      	ldrb	r1, [r3, #0]
 8006e42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	4413      	add	r3, r2
 8006e48:	3334      	adds	r3, #52	; 0x34
 8006e4a:	460a      	mov	r2, r1
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	4413      	add	r3, r2
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d006      	beq.n	8006e68 <prvInitialiseNewTask+0x7c>
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	2b0f      	cmp	r3, #15
 8006e64:	d9e9      	bls.n	8006e3a <prvInitialiseNewTask+0x4e>
 8006e66:	e000      	b.n	8006e6a <prvInitialiseNewTask+0x7e>
 8006e68:	bf00      	nop
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e74:	2b06      	cmp	r3, #6
 8006e76:	d901      	bls.n	8006e7c <prvInitialiseNewTask+0x90>
 8006e78:	2306      	movs	r3, #6
 8006e7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e80:	62da      	str	r2, [r3, #44]	; 0x2c
 8006e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e86:	645a      	str	r2, [r3, #68]	; 0x44
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	649a      	str	r2, [r3, #72]	; 0x48
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e90:	3304      	adds	r3, #4
 8006e92:	4618      	mov	r0, r3
 8006e94:	f7ff fe79 	bl	8006b8a <vListInitialiseItem>
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	3318      	adds	r3, #24
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7ff fe74 	bl	8006b8a <vListInitialiseItem>
 8006ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ea6:	611a      	str	r2, [r3, #16]
 8006ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eaa:	f1c3 0207 	rsb	r2, r3, #7
 8006eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb0:	619a      	str	r2, [r3, #24]
 8006eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eb6:	625a      	str	r2, [r3, #36]	; 0x24
 8006eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	334c      	adds	r3, #76	; 0x4c
 8006ecc:	224c      	movs	r2, #76	; 0x4c
 8006ece:	2100      	movs	r1, #0
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 fd28 	bl	8008926 <memset>
 8006ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed8:	4a0c      	ldr	r2, [pc, #48]	; (8006f0c <prvInitialiseNewTask+0x120>)
 8006eda:	651a      	str	r2, [r3, #80]	; 0x50
 8006edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ede:	4a0c      	ldr	r2, [pc, #48]	; (8006f10 <prvInitialiseNewTask+0x124>)
 8006ee0:	655a      	str	r2, [r3, #84]	; 0x54
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	4a0b      	ldr	r2, [pc, #44]	; (8006f14 <prvInitialiseNewTask+0x128>)
 8006ee6:	659a      	str	r2, [r3, #88]	; 0x58
 8006ee8:	683a      	ldr	r2, [r7, #0]
 8006eea:	68f9      	ldr	r1, [r7, #12]
 8006eec:	69b8      	ldr	r0, [r7, #24]
 8006eee:	f000 fc29 	bl	8007744 <pxPortInitialiseStack>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef6:	601a      	str	r2, [r3, #0]
 8006ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d002      	beq.n	8006f04 <prvInitialiseNewTask+0x118>
 8006efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	bf00      	nop
 8006f06:	3720      	adds	r7, #32
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	20001544 	.word	0x20001544
 8006f10:	200015ac 	.word	0x200015ac
 8006f14:	20001614 	.word	0x20001614

08006f18 <prvAddNewTaskToReadyList>:
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	f000 fd04 	bl	800792c <vPortEnterCritical>
 8006f24:	4b2a      	ldr	r3, [pc, #168]	; (8006fd0 <prvAddNewTaskToReadyList+0xb8>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	4a29      	ldr	r2, [pc, #164]	; (8006fd0 <prvAddNewTaskToReadyList+0xb8>)
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	4b29      	ldr	r3, [pc, #164]	; (8006fd4 <prvAddNewTaskToReadyList+0xbc>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d109      	bne.n	8006f4a <prvAddNewTaskToReadyList+0x32>
 8006f36:	4a27      	ldr	r2, [pc, #156]	; (8006fd4 <prvAddNewTaskToReadyList+0xbc>)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6013      	str	r3, [r2, #0]
 8006f3c:	4b24      	ldr	r3, [pc, #144]	; (8006fd0 <prvAddNewTaskToReadyList+0xb8>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d110      	bne.n	8006f66 <prvAddNewTaskToReadyList+0x4e>
 8006f44:	f000 fad2 	bl	80074ec <prvInitialiseTaskLists>
 8006f48:	e00d      	b.n	8006f66 <prvAddNewTaskToReadyList+0x4e>
 8006f4a:	4b23      	ldr	r3, [pc, #140]	; (8006fd8 <prvAddNewTaskToReadyList+0xc0>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d109      	bne.n	8006f66 <prvAddNewTaskToReadyList+0x4e>
 8006f52:	4b20      	ldr	r3, [pc, #128]	; (8006fd4 <prvAddNewTaskToReadyList+0xbc>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d802      	bhi.n	8006f66 <prvAddNewTaskToReadyList+0x4e>
 8006f60:	4a1c      	ldr	r2, [pc, #112]	; (8006fd4 <prvAddNewTaskToReadyList+0xbc>)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6013      	str	r3, [r2, #0]
 8006f66:	4b1d      	ldr	r3, [pc, #116]	; (8006fdc <prvAddNewTaskToReadyList+0xc4>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	4a1b      	ldr	r2, [pc, #108]	; (8006fdc <prvAddNewTaskToReadyList+0xc4>)
 8006f6e:	6013      	str	r3, [r2, #0]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f74:	2201      	movs	r2, #1
 8006f76:	409a      	lsls	r2, r3
 8006f78:	4b19      	ldr	r3, [pc, #100]	; (8006fe0 <prvAddNewTaskToReadyList+0xc8>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	4a18      	ldr	r2, [pc, #96]	; (8006fe0 <prvAddNewTaskToReadyList+0xc8>)
 8006f80:	6013      	str	r3, [r2, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f86:	4613      	mov	r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	4413      	add	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4a15      	ldr	r2, [pc, #84]	; (8006fe4 <prvAddNewTaskToReadyList+0xcc>)
 8006f90:	441a      	add	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	3304      	adds	r3, #4
 8006f96:	4619      	mov	r1, r3
 8006f98:	4610      	mov	r0, r2
 8006f9a:	f7ff fe02 	bl	8006ba2 <vListInsertEnd>
 8006f9e:	f000 fcf5 	bl	800798c <vPortExitCritical>
 8006fa2:	4b0d      	ldr	r3, [pc, #52]	; (8006fd8 <prvAddNewTaskToReadyList+0xc0>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00e      	beq.n	8006fc8 <prvAddNewTaskToReadyList+0xb0>
 8006faa:	4b0a      	ldr	r3, [pc, #40]	; (8006fd4 <prvAddNewTaskToReadyList+0xbc>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d207      	bcs.n	8006fc8 <prvAddNewTaskToReadyList+0xb0>
 8006fb8:	4b0b      	ldr	r3, [pc, #44]	; (8006fe8 <prvAddNewTaskToReadyList+0xd0>)
 8006fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fbe:	601a      	str	r2, [r3, #0]
 8006fc0:	f3bf 8f4f 	dsb	sy
 8006fc4:	f3bf 8f6f 	isb	sy
 8006fc8:	bf00      	nop
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	200008f8 	.word	0x200008f8
 8006fd4:	200007f8 	.word	0x200007f8
 8006fd8:	20000904 	.word	0x20000904
 8006fdc:	20000914 	.word	0x20000914
 8006fe0:	20000900 	.word	0x20000900
 8006fe4:	200007fc 	.word	0x200007fc
 8006fe8:	e000ed04 	.word	0xe000ed04

08006fec <vTaskDelay>:
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d017      	beq.n	800702e <vTaskDelay+0x42>
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <vTaskDelay+0x60>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <vTaskDelay+0x30>
 8007006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	60bb      	str	r3, [r7, #8]
 8007018:	bf00      	nop
 800701a:	e7fe      	b.n	800701a <vTaskDelay+0x2e>
 800701c:	f000 f884 	bl	8007128 <vTaskSuspendAll>
 8007020:	2100      	movs	r1, #0
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 fb28 	bl	8007678 <prvAddCurrentTaskToDelayedList>
 8007028:	f000 f88c 	bl	8007144 <xTaskResumeAll>
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d107      	bne.n	8007044 <vTaskDelay+0x58>
 8007034:	4b06      	ldr	r3, [pc, #24]	; (8007050 <vTaskDelay+0x64>)
 8007036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	bf00      	nop
 8007046:	3710      	adds	r7, #16
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	20000920 	.word	0x20000920
 8007050:	e000ed04 	.word	0xe000ed04

08007054 <vTaskStartScheduler>:
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	; 0x28
 8007058:	af04      	add	r7, sp, #16
 800705a:	2300      	movs	r3, #0
 800705c:	60bb      	str	r3, [r7, #8]
 800705e:	2300      	movs	r3, #0
 8007060:	607b      	str	r3, [r7, #4]
 8007062:	463a      	mov	r2, r7
 8007064:	1d39      	adds	r1, r7, #4
 8007066:	f107 0308 	add.w	r3, r7, #8
 800706a:	4618      	mov	r0, r3
 800706c:	f7fb f9f4 	bl	8002458 <vApplicationGetIdleTaskMemory>
 8007070:	6839      	ldr	r1, [r7, #0]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	9202      	str	r2, [sp, #8]
 8007078:	9301      	str	r3, [sp, #4]
 800707a:	2300      	movs	r3, #0
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	2300      	movs	r3, #0
 8007080:	460a      	mov	r2, r1
 8007082:	4921      	ldr	r1, [pc, #132]	; (8007108 <vTaskStartScheduler+0xb4>)
 8007084:	4821      	ldr	r0, [pc, #132]	; (800710c <vTaskStartScheduler+0xb8>)
 8007086:	f7ff fe10 	bl	8006caa <xTaskCreateStatic>
 800708a:	4603      	mov	r3, r0
 800708c:	4a20      	ldr	r2, [pc, #128]	; (8007110 <vTaskStartScheduler+0xbc>)
 800708e:	6013      	str	r3, [r2, #0]
 8007090:	4b1f      	ldr	r3, [pc, #124]	; (8007110 <vTaskStartScheduler+0xbc>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d002      	beq.n	800709e <vTaskStartScheduler+0x4a>
 8007098:	2301      	movs	r3, #1
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	e001      	b.n	80070a2 <vTaskStartScheduler+0x4e>
 800709e:	2300      	movs	r3, #0
 80070a0:	617b      	str	r3, [r7, #20]
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d11b      	bne.n	80070e0 <vTaskStartScheduler+0x8c>
 80070a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ac:	f383 8811 	msr	BASEPRI, r3
 80070b0:	f3bf 8f6f 	isb	sy
 80070b4:	f3bf 8f4f 	dsb	sy
 80070b8:	613b      	str	r3, [r7, #16]
 80070ba:	bf00      	nop
 80070bc:	4b15      	ldr	r3, [pc, #84]	; (8007114 <vTaskStartScheduler+0xc0>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	334c      	adds	r3, #76	; 0x4c
 80070c2:	4a15      	ldr	r2, [pc, #84]	; (8007118 <vTaskStartScheduler+0xc4>)
 80070c4:	6013      	str	r3, [r2, #0]
 80070c6:	4b15      	ldr	r3, [pc, #84]	; (800711c <vTaskStartScheduler+0xc8>)
 80070c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	4b14      	ldr	r3, [pc, #80]	; (8007120 <vTaskStartScheduler+0xcc>)
 80070d0:	2201      	movs	r2, #1
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	4b13      	ldr	r3, [pc, #76]	; (8007124 <vTaskStartScheduler+0xd0>)
 80070d6:	2200      	movs	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	f000 fbb5 	bl	8007848 <xPortStartScheduler>
 80070de:	e00e      	b.n	80070fe <vTaskStartScheduler+0xaa>
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070e6:	d10a      	bne.n	80070fe <vTaskStartScheduler+0xaa>
 80070e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	60fb      	str	r3, [r7, #12]
 80070fa:	bf00      	nop
 80070fc:	e7fe      	b.n	80070fc <vTaskStartScheduler+0xa8>
 80070fe:	bf00      	nop
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	0800a8e8 	.word	0x0800a8e8
 800710c:	080074bd 	.word	0x080074bd
 8007110:	2000091c 	.word	0x2000091c
 8007114:	200007f8 	.word	0x200007f8
 8007118:	20000068 	.word	0x20000068
 800711c:	20000918 	.word	0x20000918
 8007120:	20000904 	.word	0x20000904
 8007124:	200008fc 	.word	0x200008fc

08007128 <vTaskSuspendAll>:
 8007128:	b480      	push	{r7}
 800712a:	af00      	add	r7, sp, #0
 800712c:	4b04      	ldr	r3, [pc, #16]	; (8007140 <vTaskSuspendAll+0x18>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3301      	adds	r3, #1
 8007132:	4a03      	ldr	r2, [pc, #12]	; (8007140 <vTaskSuspendAll+0x18>)
 8007134:	6013      	str	r3, [r2, #0]
 8007136:	bf00      	nop
 8007138:	46bd      	mov	sp, r7
 800713a:	bc80      	pop	{r7}
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	20000920 	.word	0x20000920

08007144 <xTaskResumeAll>:
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	2300      	movs	r3, #0
 800714c:	60fb      	str	r3, [r7, #12]
 800714e:	2300      	movs	r3, #0
 8007150:	60bb      	str	r3, [r7, #8]
 8007152:	4b41      	ldr	r3, [pc, #260]	; (8007258 <xTaskResumeAll+0x114>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10a      	bne.n	8007170 <xTaskResumeAll+0x2c>
 800715a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	603b      	str	r3, [r7, #0]
 800716c:	bf00      	nop
 800716e:	e7fe      	b.n	800716e <xTaskResumeAll+0x2a>
 8007170:	f000 fbdc 	bl	800792c <vPortEnterCritical>
 8007174:	4b38      	ldr	r3, [pc, #224]	; (8007258 <xTaskResumeAll+0x114>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	3b01      	subs	r3, #1
 800717a:	4a37      	ldr	r2, [pc, #220]	; (8007258 <xTaskResumeAll+0x114>)
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	4b36      	ldr	r3, [pc, #216]	; (8007258 <xTaskResumeAll+0x114>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d161      	bne.n	800724a <xTaskResumeAll+0x106>
 8007186:	4b35      	ldr	r3, [pc, #212]	; (800725c <xTaskResumeAll+0x118>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d05d      	beq.n	800724a <xTaskResumeAll+0x106>
 800718e:	e02e      	b.n	80071ee <xTaskResumeAll+0xaa>
 8007190:	4b33      	ldr	r3, [pc, #204]	; (8007260 <xTaskResumeAll+0x11c>)
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3318      	adds	r3, #24
 800719c:	4618      	mov	r0, r3
 800719e:	f7ff fd5b 	bl	8006c58 <uxListRemove>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3304      	adds	r3, #4
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7ff fd56 	bl	8006c58 <uxListRemove>
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071b0:	2201      	movs	r2, #1
 80071b2:	409a      	lsls	r2, r3
 80071b4:	4b2b      	ldr	r3, [pc, #172]	; (8007264 <xTaskResumeAll+0x120>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	4a2a      	ldr	r2, [pc, #168]	; (8007264 <xTaskResumeAll+0x120>)
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c2:	4613      	mov	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	4a27      	ldr	r2, [pc, #156]	; (8007268 <xTaskResumeAll+0x124>)
 80071cc:	441a      	add	r2, r3
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	3304      	adds	r3, #4
 80071d2:	4619      	mov	r1, r3
 80071d4:	4610      	mov	r0, r2
 80071d6:	f7ff fce4 	bl	8006ba2 <vListInsertEnd>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071de:	4b23      	ldr	r3, [pc, #140]	; (800726c <xTaskResumeAll+0x128>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e4:	429a      	cmp	r2, r3
 80071e6:	d302      	bcc.n	80071ee <xTaskResumeAll+0xaa>
 80071e8:	4b21      	ldr	r3, [pc, #132]	; (8007270 <xTaskResumeAll+0x12c>)
 80071ea:	2201      	movs	r2, #1
 80071ec:	601a      	str	r2, [r3, #0]
 80071ee:	4b1c      	ldr	r3, [pc, #112]	; (8007260 <xTaskResumeAll+0x11c>)
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d1cc      	bne.n	8007190 <xTaskResumeAll+0x4c>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <xTaskResumeAll+0xbc>
 80071fc:	f000 fa18 	bl	8007630 <prvResetNextTaskUnblockTime>
 8007200:	4b1c      	ldr	r3, [pc, #112]	; (8007274 <xTaskResumeAll+0x130>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	607b      	str	r3, [r7, #4]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d010      	beq.n	800722e <xTaskResumeAll+0xea>
 800720c:	f000 f836 	bl	800727c <xTaskIncrementTick>
 8007210:	4603      	mov	r3, r0
 8007212:	2b00      	cmp	r3, #0
 8007214:	d002      	beq.n	800721c <xTaskResumeAll+0xd8>
 8007216:	4b16      	ldr	r3, [pc, #88]	; (8007270 <xTaskResumeAll+0x12c>)
 8007218:	2201      	movs	r2, #1
 800721a:	601a      	str	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	3b01      	subs	r3, #1
 8007220:	607b      	str	r3, [r7, #4]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1f1      	bne.n	800720c <xTaskResumeAll+0xc8>
 8007228:	4b12      	ldr	r3, [pc, #72]	; (8007274 <xTaskResumeAll+0x130>)
 800722a:	2200      	movs	r2, #0
 800722c:	601a      	str	r2, [r3, #0]
 800722e:	4b10      	ldr	r3, [pc, #64]	; (8007270 <xTaskResumeAll+0x12c>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d009      	beq.n	800724a <xTaskResumeAll+0x106>
 8007236:	2301      	movs	r3, #1
 8007238:	60bb      	str	r3, [r7, #8]
 800723a:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <xTaskResumeAll+0x134>)
 800723c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007240:	601a      	str	r2, [r3, #0]
 8007242:	f3bf 8f4f 	dsb	sy
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f000 fb9f 	bl	800798c <vPortExitCritical>
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}
 8007258:	20000920 	.word	0x20000920
 800725c:	200008f8 	.word	0x200008f8
 8007260:	200008b8 	.word	0x200008b8
 8007264:	20000900 	.word	0x20000900
 8007268:	200007fc 	.word	0x200007fc
 800726c:	200007f8 	.word	0x200007f8
 8007270:	2000090c 	.word	0x2000090c
 8007274:	20000908 	.word	0x20000908
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <xTaskIncrementTick>:
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af00      	add	r7, sp, #0
 8007282:	2300      	movs	r3, #0
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	4b51      	ldr	r3, [pc, #324]	; (80073cc <xTaskIncrementTick+0x150>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	f040 808d 	bne.w	80073aa <xTaskIncrementTick+0x12e>
 8007290:	4b4f      	ldr	r3, [pc, #316]	; (80073d0 <xTaskIncrementTick+0x154>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3301      	adds	r3, #1
 8007296:	613b      	str	r3, [r7, #16]
 8007298:	4a4d      	ldr	r2, [pc, #308]	; (80073d0 <xTaskIncrementTick+0x154>)
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d120      	bne.n	80072e6 <xTaskIncrementTick+0x6a>
 80072a4:	4b4b      	ldr	r3, [pc, #300]	; (80073d4 <xTaskIncrementTick+0x158>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d00a      	beq.n	80072c4 <xTaskIncrementTick+0x48>
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	603b      	str	r3, [r7, #0]
 80072c0:	bf00      	nop
 80072c2:	e7fe      	b.n	80072c2 <xTaskIncrementTick+0x46>
 80072c4:	4b43      	ldr	r3, [pc, #268]	; (80073d4 <xTaskIncrementTick+0x158>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	4b43      	ldr	r3, [pc, #268]	; (80073d8 <xTaskIncrementTick+0x15c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	4a41      	ldr	r2, [pc, #260]	; (80073d4 <xTaskIncrementTick+0x158>)
 80072d0:	6013      	str	r3, [r2, #0]
 80072d2:	4a41      	ldr	r2, [pc, #260]	; (80073d8 <xTaskIncrementTick+0x15c>)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6013      	str	r3, [r2, #0]
 80072d8:	4b40      	ldr	r3, [pc, #256]	; (80073dc <xTaskIncrementTick+0x160>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3301      	adds	r3, #1
 80072de:	4a3f      	ldr	r2, [pc, #252]	; (80073dc <xTaskIncrementTick+0x160>)
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	f000 f9a5 	bl	8007630 <prvResetNextTaskUnblockTime>
 80072e6:	4b3e      	ldr	r3, [pc, #248]	; (80073e0 <xTaskIncrementTick+0x164>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d34d      	bcc.n	800738c <xTaskIncrementTick+0x110>
 80072f0:	4b38      	ldr	r3, [pc, #224]	; (80073d4 <xTaskIncrementTick+0x158>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <xTaskIncrementTick+0x82>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <xTaskIncrementTick+0x84>
 80072fe:	2300      	movs	r3, #0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d004      	beq.n	800730e <xTaskIncrementTick+0x92>
 8007304:	4b36      	ldr	r3, [pc, #216]	; (80073e0 <xTaskIncrementTick+0x164>)
 8007306:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800730a:	601a      	str	r2, [r3, #0]
 800730c:	e03e      	b.n	800738c <xTaskIncrementTick+0x110>
 800730e:	4b31      	ldr	r3, [pc, #196]	; (80073d4 <xTaskIncrementTick+0x158>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	68db      	ldr	r3, [r3, #12]
 8007316:	60bb      	str	r3, [r7, #8]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	607b      	str	r3, [r7, #4]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	429a      	cmp	r2, r3
 8007324:	d203      	bcs.n	800732e <xTaskIncrementTick+0xb2>
 8007326:	4a2e      	ldr	r2, [pc, #184]	; (80073e0 <xTaskIncrementTick+0x164>)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6013      	str	r3, [r2, #0]
 800732c:	e02e      	b.n	800738c <xTaskIncrementTick+0x110>
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	3304      	adds	r3, #4
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff fc90 	bl	8006c58 <uxListRemove>
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	2b00      	cmp	r3, #0
 800733e:	d004      	beq.n	800734a <xTaskIncrementTick+0xce>
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	3318      	adds	r3, #24
 8007344:	4618      	mov	r0, r3
 8007346:	f7ff fc87 	bl	8006c58 <uxListRemove>
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800734e:	2201      	movs	r2, #1
 8007350:	409a      	lsls	r2, r3
 8007352:	4b24      	ldr	r3, [pc, #144]	; (80073e4 <xTaskIncrementTick+0x168>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4313      	orrs	r3, r2
 8007358:	4a22      	ldr	r2, [pc, #136]	; (80073e4 <xTaskIncrementTick+0x168>)
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007360:	4613      	mov	r3, r2
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	4413      	add	r3, r2
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4a1f      	ldr	r2, [pc, #124]	; (80073e8 <xTaskIncrementTick+0x16c>)
 800736a:	441a      	add	r2, r3
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	3304      	adds	r3, #4
 8007370:	4619      	mov	r1, r3
 8007372:	4610      	mov	r0, r2
 8007374:	f7ff fc15 	bl	8006ba2 <vListInsertEnd>
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800737c:	4b1b      	ldr	r3, [pc, #108]	; (80073ec <xTaskIncrementTick+0x170>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007382:	429a      	cmp	r2, r3
 8007384:	d3b4      	bcc.n	80072f0 <xTaskIncrementTick+0x74>
 8007386:	2301      	movs	r3, #1
 8007388:	617b      	str	r3, [r7, #20]
 800738a:	e7b1      	b.n	80072f0 <xTaskIncrementTick+0x74>
 800738c:	4b17      	ldr	r3, [pc, #92]	; (80073ec <xTaskIncrementTick+0x170>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007392:	4915      	ldr	r1, [pc, #84]	; (80073e8 <xTaskIncrementTick+0x16c>)
 8007394:	4613      	mov	r3, r2
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	4413      	add	r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	d907      	bls.n	80073b4 <xTaskIncrementTick+0x138>
 80073a4:	2301      	movs	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	e004      	b.n	80073b4 <xTaskIncrementTick+0x138>
 80073aa:	4b11      	ldr	r3, [pc, #68]	; (80073f0 <xTaskIncrementTick+0x174>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3301      	adds	r3, #1
 80073b0:	4a0f      	ldr	r2, [pc, #60]	; (80073f0 <xTaskIncrementTick+0x174>)
 80073b2:	6013      	str	r3, [r2, #0]
 80073b4:	4b0f      	ldr	r3, [pc, #60]	; (80073f4 <xTaskIncrementTick+0x178>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <xTaskIncrementTick+0x144>
 80073bc:	2301      	movs	r3, #1
 80073be:	617b      	str	r3, [r7, #20]
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000920 	.word	0x20000920
 80073d0:	200008fc 	.word	0x200008fc
 80073d4:	200008b0 	.word	0x200008b0
 80073d8:	200008b4 	.word	0x200008b4
 80073dc:	20000910 	.word	0x20000910
 80073e0:	20000918 	.word	0x20000918
 80073e4:	20000900 	.word	0x20000900
 80073e8:	200007fc 	.word	0x200007fc
 80073ec:	200007f8 	.word	0x200007f8
 80073f0:	20000908 	.word	0x20000908
 80073f4:	2000090c 	.word	0x2000090c

080073f8 <vTaskSwitchContext>:
 80073f8:	b480      	push	{r7}
 80073fa:	b087      	sub	sp, #28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	4b29      	ldr	r3, [pc, #164]	; (80074a4 <vTaskSwitchContext+0xac>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d003      	beq.n	800740e <vTaskSwitchContext+0x16>
 8007406:	4b28      	ldr	r3, [pc, #160]	; (80074a8 <vTaskSwitchContext+0xb0>)
 8007408:	2201      	movs	r2, #1
 800740a:	601a      	str	r2, [r3, #0]
 800740c:	e044      	b.n	8007498 <vTaskSwitchContext+0xa0>
 800740e:	4b26      	ldr	r3, [pc, #152]	; (80074a8 <vTaskSwitchContext+0xb0>)
 8007410:	2200      	movs	r2, #0
 8007412:	601a      	str	r2, [r3, #0]
 8007414:	4b25      	ldr	r3, [pc, #148]	; (80074ac <vTaskSwitchContext+0xb4>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60fb      	str	r3, [r7, #12]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	fab3 f383 	clz	r3, r3
 8007420:	72fb      	strb	r3, [r7, #11]
 8007422:	7afb      	ldrb	r3, [r7, #11]
 8007424:	f1c3 031f 	rsb	r3, r3, #31
 8007428:	617b      	str	r3, [r7, #20]
 800742a:	4921      	ldr	r1, [pc, #132]	; (80074b0 <vTaskSwitchContext+0xb8>)
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	4613      	mov	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	4413      	add	r3, r2
 8007434:	009b      	lsls	r3, r3, #2
 8007436:	440b      	add	r3, r1
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10a      	bne.n	8007454 <vTaskSwitchContext+0x5c>
 800743e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	607b      	str	r3, [r7, #4]
 8007450:	bf00      	nop
 8007452:	e7fe      	b.n	8007452 <vTaskSwitchContext+0x5a>
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	4613      	mov	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4a14      	ldr	r2, [pc, #80]	; (80074b0 <vTaskSwitchContext+0xb8>)
 8007460:	4413      	add	r3, r2
 8007462:	613b      	str	r3, [r7, #16]
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	605a      	str	r2, [r3, #4]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	685a      	ldr	r2, [r3, #4]
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	3308      	adds	r3, #8
 8007476:	429a      	cmp	r2, r3
 8007478:	d104      	bne.n	8007484 <vTaskSwitchContext+0x8c>
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	685a      	ldr	r2, [r3, #4]
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	605a      	str	r2, [r3, #4]
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	4a0a      	ldr	r2, [pc, #40]	; (80074b4 <vTaskSwitchContext+0xbc>)
 800748c:	6013      	str	r3, [r2, #0]
 800748e:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <vTaskSwitchContext+0xbc>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	334c      	adds	r3, #76	; 0x4c
 8007494:	4a08      	ldr	r2, [pc, #32]	; (80074b8 <vTaskSwitchContext+0xc0>)
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	bf00      	nop
 800749a:	371c      	adds	r7, #28
 800749c:	46bd      	mov	sp, r7
 800749e:	bc80      	pop	{r7}
 80074a0:	4770      	bx	lr
 80074a2:	bf00      	nop
 80074a4:	20000920 	.word	0x20000920
 80074a8:	2000090c 	.word	0x2000090c
 80074ac:	20000900 	.word	0x20000900
 80074b0:	200007fc 	.word	0x200007fc
 80074b4:	200007f8 	.word	0x200007f8
 80074b8:	20000068 	.word	0x20000068

080074bc <prvIdleTask>:
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	f000 f852 	bl	800756c <prvCheckTasksWaitingTermination>
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <prvIdleTask+0x28>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d9f9      	bls.n	80074c4 <prvIdleTask+0x8>
 80074d0:	4b05      	ldr	r3, [pc, #20]	; (80074e8 <prvIdleTask+0x2c>)
 80074d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d6:	601a      	str	r2, [r3, #0]
 80074d8:	f3bf 8f4f 	dsb	sy
 80074dc:	f3bf 8f6f 	isb	sy
 80074e0:	e7f0      	b.n	80074c4 <prvIdleTask+0x8>
 80074e2:	bf00      	nop
 80074e4:	200007fc 	.word	0x200007fc
 80074e8:	e000ed04 	.word	0xe000ed04

080074ec <prvInitialiseTaskLists>:
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b082      	sub	sp, #8
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	2300      	movs	r3, #0
 80074f4:	607b      	str	r3, [r7, #4]
 80074f6:	e00c      	b.n	8007512 <prvInitialiseTaskLists+0x26>
 80074f8:	687a      	ldr	r2, [r7, #4]
 80074fa:	4613      	mov	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	4a12      	ldr	r2, [pc, #72]	; (800754c <prvInitialiseTaskLists+0x60>)
 8007504:	4413      	add	r3, r2
 8007506:	4618      	mov	r0, r3
 8007508:	f7ff fb20 	bl	8006b4c <vListInitialise>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	3301      	adds	r3, #1
 8007510:	607b      	str	r3, [r7, #4]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2b06      	cmp	r3, #6
 8007516:	d9ef      	bls.n	80074f8 <prvInitialiseTaskLists+0xc>
 8007518:	480d      	ldr	r0, [pc, #52]	; (8007550 <prvInitialiseTaskLists+0x64>)
 800751a:	f7ff fb17 	bl	8006b4c <vListInitialise>
 800751e:	480d      	ldr	r0, [pc, #52]	; (8007554 <prvInitialiseTaskLists+0x68>)
 8007520:	f7ff fb14 	bl	8006b4c <vListInitialise>
 8007524:	480c      	ldr	r0, [pc, #48]	; (8007558 <prvInitialiseTaskLists+0x6c>)
 8007526:	f7ff fb11 	bl	8006b4c <vListInitialise>
 800752a:	480c      	ldr	r0, [pc, #48]	; (800755c <prvInitialiseTaskLists+0x70>)
 800752c:	f7ff fb0e 	bl	8006b4c <vListInitialise>
 8007530:	480b      	ldr	r0, [pc, #44]	; (8007560 <prvInitialiseTaskLists+0x74>)
 8007532:	f7ff fb0b 	bl	8006b4c <vListInitialise>
 8007536:	4b0b      	ldr	r3, [pc, #44]	; (8007564 <prvInitialiseTaskLists+0x78>)
 8007538:	4a05      	ldr	r2, [pc, #20]	; (8007550 <prvInitialiseTaskLists+0x64>)
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	4b0a      	ldr	r3, [pc, #40]	; (8007568 <prvInitialiseTaskLists+0x7c>)
 800753e:	4a05      	ldr	r2, [pc, #20]	; (8007554 <prvInitialiseTaskLists+0x68>)
 8007540:	601a      	str	r2, [r3, #0]
 8007542:	bf00      	nop
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	200007fc 	.word	0x200007fc
 8007550:	20000888 	.word	0x20000888
 8007554:	2000089c 	.word	0x2000089c
 8007558:	200008b8 	.word	0x200008b8
 800755c:	200008cc 	.word	0x200008cc
 8007560:	200008e4 	.word	0x200008e4
 8007564:	200008b0 	.word	0x200008b0
 8007568:	200008b4 	.word	0x200008b4

0800756c <prvCheckTasksWaitingTermination>:
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	e019      	b.n	80075a8 <prvCheckTasksWaitingTermination+0x3c>
 8007574:	f000 f9da 	bl	800792c <vPortEnterCritical>
 8007578:	4b10      	ldr	r3, [pc, #64]	; (80075bc <prvCheckTasksWaitingTermination+0x50>)
 800757a:	68db      	ldr	r3, [r3, #12]
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	607b      	str	r3, [r7, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3304      	adds	r3, #4
 8007584:	4618      	mov	r0, r3
 8007586:	f7ff fb67 	bl	8006c58 <uxListRemove>
 800758a:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <prvCheckTasksWaitingTermination+0x54>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3b01      	subs	r3, #1
 8007590:	4a0b      	ldr	r2, [pc, #44]	; (80075c0 <prvCheckTasksWaitingTermination+0x54>)
 8007592:	6013      	str	r3, [r2, #0]
 8007594:	4b0b      	ldr	r3, [pc, #44]	; (80075c4 <prvCheckTasksWaitingTermination+0x58>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3b01      	subs	r3, #1
 800759a:	4a0a      	ldr	r2, [pc, #40]	; (80075c4 <prvCheckTasksWaitingTermination+0x58>)
 800759c:	6013      	str	r3, [r2, #0]
 800759e:	f000 f9f5 	bl	800798c <vPortExitCritical>
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f000 f810 	bl	80075c8 <prvDeleteTCB>
 80075a8:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <prvCheckTasksWaitingTermination+0x58>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d1e1      	bne.n	8007574 <prvCheckTasksWaitingTermination+0x8>
 80075b0:	bf00      	nop
 80075b2:	bf00      	nop
 80075b4:	3708      	adds	r7, #8
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}
 80075ba:	bf00      	nop
 80075bc:	200008cc 	.word	0x200008cc
 80075c0:	200008f8 	.word	0x200008f8
 80075c4:	200008e0 	.word	0x200008e0

080075c8 <prvDeleteTCB>:
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	334c      	adds	r3, #76	; 0x4c
 80075d4:	4618      	mov	r0, r3
 80075d6:	f001 f9c3 	bl	8008960 <_reclaim_reent>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d108      	bne.n	80075f6 <prvDeleteTCB+0x2e>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fb25 	bl	8007c38 <vPortFree>
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fb22 	bl	8007c38 <vPortFree>
 80075f4:	e018      	b.n	8007628 <prvDeleteTCB+0x60>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d103      	bne.n	8007608 <prvDeleteTCB+0x40>
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 fb19 	bl	8007c38 <vPortFree>
 8007606:	e00f      	b.n	8007628 <prvDeleteTCB+0x60>
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800760e:	2b02      	cmp	r3, #2
 8007610:	d00a      	beq.n	8007628 <prvDeleteTCB+0x60>
 8007612:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007616:	f383 8811 	msr	BASEPRI, r3
 800761a:	f3bf 8f6f 	isb	sy
 800761e:	f3bf 8f4f 	dsb	sy
 8007622:	60fb      	str	r3, [r7, #12]
 8007624:	bf00      	nop
 8007626:	e7fe      	b.n	8007626 <prvDeleteTCB+0x5e>
 8007628:	bf00      	nop
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <prvResetNextTaskUnblockTime>:
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	4b0e      	ldr	r3, [pc, #56]	; (8007670 <prvResetNextTaskUnblockTime+0x40>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <prvResetNextTaskUnblockTime+0x14>
 8007640:	2301      	movs	r3, #1
 8007642:	e000      	b.n	8007646 <prvResetNextTaskUnblockTime+0x16>
 8007644:	2300      	movs	r3, #0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d004      	beq.n	8007654 <prvResetNextTaskUnblockTime+0x24>
 800764a:	4b0a      	ldr	r3, [pc, #40]	; (8007674 <prvResetNextTaskUnblockTime+0x44>)
 800764c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	e008      	b.n	8007666 <prvResetNextTaskUnblockTime+0x36>
 8007654:	4b06      	ldr	r3, [pc, #24]	; (8007670 <prvResetNextTaskUnblockTime+0x40>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	607b      	str	r3, [r7, #4]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	4a04      	ldr	r2, [pc, #16]	; (8007674 <prvResetNextTaskUnblockTime+0x44>)
 8007664:	6013      	str	r3, [r2, #0]
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr
 8007670:	200008b0 	.word	0x200008b0
 8007674:	20000918 	.word	0x20000918

08007678 <prvAddCurrentTaskToDelayedList>:
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
 8007682:	4b29      	ldr	r3, [pc, #164]	; (8007728 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	60fb      	str	r3, [r7, #12]
 8007688:	4b28      	ldr	r3, [pc, #160]	; (800772c <prvAddCurrentTaskToDelayedList+0xb4>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	3304      	adds	r3, #4
 800768e:	4618      	mov	r0, r3
 8007690:	f7ff fae2 	bl	8006c58 <uxListRemove>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d10b      	bne.n	80076b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800769a:	4b24      	ldr	r3, [pc, #144]	; (800772c <prvAddCurrentTaskToDelayedList+0xb4>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a0:	2201      	movs	r2, #1
 80076a2:	fa02 f303 	lsl.w	r3, r2, r3
 80076a6:	43da      	mvns	r2, r3
 80076a8:	4b21      	ldr	r3, [pc, #132]	; (8007730 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4013      	ands	r3, r2
 80076ae:	4a20      	ldr	r2, [pc, #128]	; (8007730 <prvAddCurrentTaskToDelayedList+0xb8>)
 80076b0:	6013      	str	r3, [r2, #0]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076b8:	d10a      	bne.n	80076d0 <prvAddCurrentTaskToDelayedList+0x58>
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d007      	beq.n	80076d0 <prvAddCurrentTaskToDelayedList+0x58>
 80076c0:	4b1a      	ldr	r3, [pc, #104]	; (800772c <prvAddCurrentTaskToDelayedList+0xb4>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3304      	adds	r3, #4
 80076c6:	4619      	mov	r1, r3
 80076c8:	481a      	ldr	r0, [pc, #104]	; (8007734 <prvAddCurrentTaskToDelayedList+0xbc>)
 80076ca:	f7ff fa6a 	bl	8006ba2 <vListInsertEnd>
 80076ce:	e026      	b.n	800771e <prvAddCurrentTaskToDelayedList+0xa6>
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	4413      	add	r3, r2
 80076d6:	60bb      	str	r3, [r7, #8]
 80076d8:	4b14      	ldr	r3, [pc, #80]	; (800772c <prvAddCurrentTaskToDelayedList+0xb4>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68ba      	ldr	r2, [r7, #8]
 80076de:	605a      	str	r2, [r3, #4]
 80076e0:	68ba      	ldr	r2, [r7, #8]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d209      	bcs.n	80076fc <prvAddCurrentTaskToDelayedList+0x84>
 80076e8:	4b13      	ldr	r3, [pc, #76]	; (8007738 <prvAddCurrentTaskToDelayedList+0xc0>)
 80076ea:	681a      	ldr	r2, [r3, #0]
 80076ec:	4b0f      	ldr	r3, [pc, #60]	; (800772c <prvAddCurrentTaskToDelayedList+0xb4>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	3304      	adds	r3, #4
 80076f2:	4619      	mov	r1, r3
 80076f4:	4610      	mov	r0, r2
 80076f6:	f7ff fa77 	bl	8006be8 <vListInsert>
 80076fa:	e010      	b.n	800771e <prvAddCurrentTaskToDelayedList+0xa6>
 80076fc:	4b0f      	ldr	r3, [pc, #60]	; (800773c <prvAddCurrentTaskToDelayedList+0xc4>)
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	4b0a      	ldr	r3, [pc, #40]	; (800772c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	3304      	adds	r3, #4
 8007706:	4619      	mov	r1, r3
 8007708:	4610      	mov	r0, r2
 800770a:	f7ff fa6d 	bl	8006be8 <vListInsert>
 800770e:	4b0c      	ldr	r3, [pc, #48]	; (8007740 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	429a      	cmp	r2, r3
 8007716:	d202      	bcs.n	800771e <prvAddCurrentTaskToDelayedList+0xa6>
 8007718:	4a09      	ldr	r2, [pc, #36]	; (8007740 <prvAddCurrentTaskToDelayedList+0xc8>)
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	6013      	str	r3, [r2, #0]
 800771e:	bf00      	nop
 8007720:	3710      	adds	r7, #16
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	200008fc 	.word	0x200008fc
 800772c:	200007f8 	.word	0x200007f8
 8007730:	20000900 	.word	0x20000900
 8007734:	200008e4 	.word	0x200008e4
 8007738:	200008b4 	.word	0x200008b4
 800773c:	200008b0 	.word	0x200008b0
 8007740:	20000918 	.word	0x20000918

08007744 <pxPortInitialiseStack>:
 8007744:	b480      	push	{r7}
 8007746:	b085      	sub	sp, #20
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	3b04      	subs	r3, #4
 8007754:	60fb      	str	r3, [r7, #12]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	3b04      	subs	r3, #4
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	f023 0201 	bic.w	r2, r3, #1
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	601a      	str	r2, [r3, #0]
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	3b04      	subs	r3, #4
 8007772:	60fb      	str	r3, [r7, #12]
 8007774:	4a08      	ldr	r2, [pc, #32]	; (8007798 <pxPortInitialiseStack+0x54>)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	601a      	str	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3b14      	subs	r3, #20
 800777e:	60fb      	str	r3, [r7, #12]
 8007780:	687a      	ldr	r2, [r7, #4]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3b20      	subs	r3, #32
 800778a:	60fb      	str	r3, [r7, #12]
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4618      	mov	r0, r3
 8007790:	3714      	adds	r7, #20
 8007792:	46bd      	mov	sp, r7
 8007794:	bc80      	pop	{r7}
 8007796:	4770      	bx	lr
 8007798:	0800779d 	.word	0x0800779d

0800779c <prvTaskExitError>:
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	2300      	movs	r3, #0
 80077a4:	607b      	str	r3, [r7, #4]
 80077a6:	4b12      	ldr	r3, [pc, #72]	; (80077f0 <prvTaskExitError+0x54>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077ae:	d00a      	beq.n	80077c6 <prvTaskExitError+0x2a>
 80077b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b4:	f383 8811 	msr	BASEPRI, r3
 80077b8:	f3bf 8f6f 	isb	sy
 80077bc:	f3bf 8f4f 	dsb	sy
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	bf00      	nop
 80077c4:	e7fe      	b.n	80077c4 <prvTaskExitError+0x28>
 80077c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	60bb      	str	r3, [r7, #8]
 80077d8:	bf00      	nop
 80077da:	bf00      	nop
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d0fc      	beq.n	80077dc <prvTaskExitError+0x40>
 80077e2:	bf00      	nop
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	2000000c 	.word	0x2000000c
	...

08007800 <SVC_Handler>:
 8007800:	4b07      	ldr	r3, [pc, #28]	; (8007820 <pxCurrentTCBConst2>)
 8007802:	6819      	ldr	r1, [r3, #0]
 8007804:	6808      	ldr	r0, [r1, #0]
 8007806:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800780a:	f380 8809 	msr	PSP, r0
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f04f 0000 	mov.w	r0, #0
 8007816:	f380 8811 	msr	BASEPRI, r0
 800781a:	f04e 0e0d 	orr.w	lr, lr, #13
 800781e:	4770      	bx	lr

08007820 <pxCurrentTCBConst2>:
 8007820:	200007f8 	.word	0x200007f8
 8007824:	bf00      	nop
 8007826:	bf00      	nop

08007828 <prvPortStartFirstTask>:
 8007828:	4806      	ldr	r0, [pc, #24]	; (8007844 <prvPortStartFirstTask+0x1c>)
 800782a:	6800      	ldr	r0, [r0, #0]
 800782c:	6800      	ldr	r0, [r0, #0]
 800782e:	f380 8808 	msr	MSP, r0
 8007832:	b662      	cpsie	i
 8007834:	b661      	cpsie	f
 8007836:	f3bf 8f4f 	dsb	sy
 800783a:	f3bf 8f6f 	isb	sy
 800783e:	df00      	svc	0
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	e000ed08 	.word	0xe000ed08

08007848 <xPortStartScheduler>:
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	4b32      	ldr	r3, [pc, #200]	; (8007918 <xPortStartScheduler+0xd0>)
 8007850:	60fb      	str	r3, [r7, #12]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	b2db      	uxtb	r3, r3
 8007858:	607b      	str	r3, [r7, #4]
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	22ff      	movs	r2, #255	; 0xff
 800785e:	701a      	strb	r2, [r3, #0]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	b2db      	uxtb	r3, r3
 8007866:	70fb      	strb	r3, [r7, #3]
 8007868:	78fb      	ldrb	r3, [r7, #3]
 800786a:	b2db      	uxtb	r3, r3
 800786c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007870:	b2da      	uxtb	r2, r3
 8007872:	4b2a      	ldr	r3, [pc, #168]	; (800791c <xPortStartScheduler+0xd4>)
 8007874:	701a      	strb	r2, [r3, #0]
 8007876:	4b2a      	ldr	r3, [pc, #168]	; (8007920 <xPortStartScheduler+0xd8>)
 8007878:	2207      	movs	r2, #7
 800787a:	601a      	str	r2, [r3, #0]
 800787c:	e009      	b.n	8007892 <xPortStartScheduler+0x4a>
 800787e:	4b28      	ldr	r3, [pc, #160]	; (8007920 <xPortStartScheduler+0xd8>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3b01      	subs	r3, #1
 8007884:	4a26      	ldr	r2, [pc, #152]	; (8007920 <xPortStartScheduler+0xd8>)
 8007886:	6013      	str	r3, [r2, #0]
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	b2db      	uxtb	r3, r3
 800788c:	005b      	lsls	r3, r3, #1
 800788e:	b2db      	uxtb	r3, r3
 8007890:	70fb      	strb	r3, [r7, #3]
 8007892:	78fb      	ldrb	r3, [r7, #3]
 8007894:	b2db      	uxtb	r3, r3
 8007896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800789a:	2b80      	cmp	r3, #128	; 0x80
 800789c:	d0ef      	beq.n	800787e <xPortStartScheduler+0x36>
 800789e:	4b20      	ldr	r3, [pc, #128]	; (8007920 <xPortStartScheduler+0xd8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f1c3 0307 	rsb	r3, r3, #7
 80078a6:	2b04      	cmp	r3, #4
 80078a8:	d00a      	beq.n	80078c0 <xPortStartScheduler+0x78>
 80078aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	60bb      	str	r3, [r7, #8]
 80078bc:	bf00      	nop
 80078be:	e7fe      	b.n	80078be <xPortStartScheduler+0x76>
 80078c0:	4b17      	ldr	r3, [pc, #92]	; (8007920 <xPortStartScheduler+0xd8>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	021b      	lsls	r3, r3, #8
 80078c6:	4a16      	ldr	r2, [pc, #88]	; (8007920 <xPortStartScheduler+0xd8>)
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	4b15      	ldr	r3, [pc, #84]	; (8007920 <xPortStartScheduler+0xd8>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80078d2:	4a13      	ldr	r2, [pc, #76]	; (8007920 <xPortStartScheduler+0xd8>)
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	701a      	strb	r2, [r3, #0]
 80078de:	4b11      	ldr	r3, [pc, #68]	; (8007924 <xPortStartScheduler+0xdc>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a10      	ldr	r2, [pc, #64]	; (8007924 <xPortStartScheduler+0xdc>)
 80078e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	4b0e      	ldr	r3, [pc, #56]	; (8007924 <xPortStartScheduler+0xdc>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a0d      	ldr	r2, [pc, #52]	; (8007924 <xPortStartScheduler+0xdc>)
 80078f0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80078f4:	6013      	str	r3, [r2, #0]
 80078f6:	f000 f8b9 	bl	8007a6c <vPortSetupTimerInterrupt>
 80078fa:	4b0b      	ldr	r3, [pc, #44]	; (8007928 <xPortStartScheduler+0xe0>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]
 8007900:	f7ff ff92 	bl	8007828 <prvPortStartFirstTask>
 8007904:	f7ff fd78 	bl	80073f8 <vTaskSwitchContext>
 8007908:	f7ff ff48 	bl	800779c <prvTaskExitError>
 800790c:	2300      	movs	r3, #0
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	e000e400 	.word	0xe000e400
 800791c:	20000924 	.word	0x20000924
 8007920:	20000928 	.word	0x20000928
 8007924:	e000ed20 	.word	0xe000ed20
 8007928:	2000000c 	.word	0x2000000c

0800792c <vPortEnterCritical>:
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	f383 8811 	msr	BASEPRI, r3
 800793a:	f3bf 8f6f 	isb	sy
 800793e:	f3bf 8f4f 	dsb	sy
 8007942:	607b      	str	r3, [r7, #4]
 8007944:	bf00      	nop
 8007946:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <vPortEnterCritical+0x58>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3301      	adds	r3, #1
 800794c:	4a0d      	ldr	r2, [pc, #52]	; (8007984 <vPortEnterCritical+0x58>)
 800794e:	6013      	str	r3, [r2, #0]
 8007950:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <vPortEnterCritical+0x58>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	2b01      	cmp	r3, #1
 8007956:	d10f      	bne.n	8007978 <vPortEnterCritical+0x4c>
 8007958:	4b0b      	ldr	r3, [pc, #44]	; (8007988 <vPortEnterCritical+0x5c>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	b2db      	uxtb	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d00a      	beq.n	8007978 <vPortEnterCritical+0x4c>
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	603b      	str	r3, [r7, #0]
 8007974:	bf00      	nop
 8007976:	e7fe      	b.n	8007976 <vPortEnterCritical+0x4a>
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	bc80      	pop	{r7}
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	2000000c 	.word	0x2000000c
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <vPortExitCritical>:
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
 8007992:	4b11      	ldr	r3, [pc, #68]	; (80079d8 <vPortExitCritical+0x4c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10a      	bne.n	80079b0 <vPortExitCritical+0x24>
 800799a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	607b      	str	r3, [r7, #4]
 80079ac:	bf00      	nop
 80079ae:	e7fe      	b.n	80079ae <vPortExitCritical+0x22>
 80079b0:	4b09      	ldr	r3, [pc, #36]	; (80079d8 <vPortExitCritical+0x4c>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3b01      	subs	r3, #1
 80079b6:	4a08      	ldr	r2, [pc, #32]	; (80079d8 <vPortExitCritical+0x4c>)
 80079b8:	6013      	str	r3, [r2, #0]
 80079ba:	4b07      	ldr	r3, [pc, #28]	; (80079d8 <vPortExitCritical+0x4c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d105      	bne.n	80079ce <vPortExitCritical+0x42>
 80079c2:	2300      	movs	r3, #0
 80079c4:	603b      	str	r3, [r7, #0]
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bc80      	pop	{r7}
 80079d6:	4770      	bx	lr
 80079d8:	2000000c 	.word	0x2000000c
 80079dc:	00000000 	.word	0x00000000

080079e0 <PendSV_Handler>:
 80079e0:	f3ef 8009 	mrs	r0, PSP
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	4b0d      	ldr	r3, [pc, #52]	; (8007a20 <pxCurrentTCBConst>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80079f0:	6010      	str	r0, [r2, #0]
 80079f2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80079f6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80079fa:	f380 8811 	msr	BASEPRI, r0
 80079fe:	f7ff fcfb 	bl	80073f8 <vTaskSwitchContext>
 8007a02:	f04f 0000 	mov.w	r0, #0
 8007a06:	f380 8811 	msr	BASEPRI, r0
 8007a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a0e:	6819      	ldr	r1, [r3, #0]
 8007a10:	6808      	ldr	r0, [r1, #0]
 8007a12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a16:	f380 8809 	msr	PSP, r0
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	4770      	bx	lr

08007a20 <pxCurrentTCBConst>:
 8007a20:	200007f8 	.word	0x200007f8
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop

08007a28 <SysTick_Handler>:
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b082      	sub	sp, #8
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	607b      	str	r3, [r7, #4]
 8007a40:	bf00      	nop
 8007a42:	f7ff fc1b 	bl	800727c <xTaskIncrementTick>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <SysTick_Handler+0x2c>
 8007a4c:	4b06      	ldr	r3, [pc, #24]	; (8007a68 <SysTick_Handler+0x40>)
 8007a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	2300      	movs	r3, #0
 8007a56:	603b      	str	r3, [r7, #0]
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	f383 8811 	msr	BASEPRI, r3
 8007a5e:	bf00      	nop
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	e000ed04 	.word	0xe000ed04

08007a6c <vPortSetupTimerInterrupt>:
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	4b0a      	ldr	r3, [pc, #40]	; (8007a9c <vPortSetupTimerInterrupt+0x30>)
 8007a72:	2200      	movs	r2, #0
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	4b0a      	ldr	r3, [pc, #40]	; (8007aa0 <vPortSetupTimerInterrupt+0x34>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	601a      	str	r2, [r3, #0]
 8007a7c:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <vPortSetupTimerInterrupt+0x38>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a09      	ldr	r2, [pc, #36]	; (8007aa8 <vPortSetupTimerInterrupt+0x3c>)
 8007a82:	fba2 2303 	umull	r2, r3, r2, r3
 8007a86:	099b      	lsrs	r3, r3, #6
 8007a88:	4a08      	ldr	r2, [pc, #32]	; (8007aac <vPortSetupTimerInterrupt+0x40>)
 8007a8a:	3b01      	subs	r3, #1
 8007a8c:	6013      	str	r3, [r2, #0]
 8007a8e:	4b03      	ldr	r3, [pc, #12]	; (8007a9c <vPortSetupTimerInterrupt+0x30>)
 8007a90:	2207      	movs	r2, #7
 8007a92:	601a      	str	r2, [r3, #0]
 8007a94:	bf00      	nop
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bc80      	pop	{r7}
 8007a9a:	4770      	bx	lr
 8007a9c:	e000e010 	.word	0xe000e010
 8007aa0:	e000e018 	.word	0xe000e018
 8007aa4:	20000000 	.word	0x20000000
 8007aa8:	10624dd3 	.word	0x10624dd3
 8007aac:	e000e014 	.word	0xe000e014

08007ab0 <pvPortMalloc>:
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b08a      	sub	sp, #40	; 0x28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	2300      	movs	r3, #0
 8007aba:	61fb      	str	r3, [r7, #28]
 8007abc:	f7ff fb34 	bl	8007128 <vTaskSuspendAll>
 8007ac0:	4b58      	ldr	r3, [pc, #352]	; (8007c24 <pvPortMalloc+0x174>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <pvPortMalloc+0x1c>
 8007ac8:	f000 f910 	bl	8007cec <prvHeapInit>
 8007acc:	4b56      	ldr	r3, [pc, #344]	; (8007c28 <pvPortMalloc+0x178>)
 8007ace:	681a      	ldr	r2, [r3, #0]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	f040 808e 	bne.w	8007bf6 <pvPortMalloc+0x146>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d01d      	beq.n	8007b1c <pvPortMalloc+0x6c>
 8007ae0:	2208      	movs	r2, #8
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	607b      	str	r3, [r7, #4]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	f003 0307 	and.w	r3, r3, #7
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d014      	beq.n	8007b1c <pvPortMalloc+0x6c>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f023 0307 	bic.w	r3, r3, #7
 8007af8:	3308      	adds	r3, #8
 8007afa:	607b      	str	r3, [r7, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f003 0307 	and.w	r3, r3, #7
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <pvPortMalloc+0x6c>
 8007b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b0a:	f383 8811 	msr	BASEPRI, r3
 8007b0e:	f3bf 8f6f 	isb	sy
 8007b12:	f3bf 8f4f 	dsb	sy
 8007b16:	617b      	str	r3, [r7, #20]
 8007b18:	bf00      	nop
 8007b1a:	e7fe      	b.n	8007b1a <pvPortMalloc+0x6a>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d069      	beq.n	8007bf6 <pvPortMalloc+0x146>
 8007b22:	4b42      	ldr	r3, [pc, #264]	; (8007c2c <pvPortMalloc+0x17c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d864      	bhi.n	8007bf6 <pvPortMalloc+0x146>
 8007b2c:	4b40      	ldr	r3, [pc, #256]	; (8007c30 <pvPortMalloc+0x180>)
 8007b2e:	623b      	str	r3, [r7, #32]
 8007b30:	4b3f      	ldr	r3, [pc, #252]	; (8007c30 <pvPortMalloc+0x180>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	627b      	str	r3, [r7, #36]	; 0x24
 8007b36:	e004      	b.n	8007b42 <pvPortMalloc+0x92>
 8007b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3a:	623b      	str	r3, [r7, #32]
 8007b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	627b      	str	r3, [r7, #36]	; 0x24
 8007b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d903      	bls.n	8007b54 <pvPortMalloc+0xa4>
 8007b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d1f1      	bne.n	8007b38 <pvPortMalloc+0x88>
 8007b54:	4b33      	ldr	r3, [pc, #204]	; (8007c24 <pvPortMalloc+0x174>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d04b      	beq.n	8007bf6 <pvPortMalloc+0x146>
 8007b5e:	6a3b      	ldr	r3, [r7, #32]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2208      	movs	r2, #8
 8007b64:	4413      	add	r3, r2
 8007b66:	61fb      	str	r3, [r7, #28]
 8007b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b72:	685a      	ldr	r2, [r3, #4]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	1ad2      	subs	r2, r2, r3
 8007b78:	2308      	movs	r3, #8
 8007b7a:	005b      	lsls	r3, r3, #1
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d91f      	bls.n	8007bc0 <pvPortMalloc+0x110>
 8007b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4413      	add	r3, r2
 8007b86:	61bb      	str	r3, [r7, #24]
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	f003 0307 	and.w	r3, r3, #7
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d00a      	beq.n	8007ba8 <pvPortMalloc+0xf8>
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	613b      	str	r3, [r7, #16]
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <pvPortMalloc+0xf6>
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	1ad2      	subs	r2, r2, r3
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	605a      	str	r2, [r3, #4]
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	605a      	str	r2, [r3, #4]
 8007bba:	69b8      	ldr	r0, [r7, #24]
 8007bbc:	f000 f8f8 	bl	8007db0 <prvInsertBlockIntoFreeList>
 8007bc0:	4b1a      	ldr	r3, [pc, #104]	; (8007c2c <pvPortMalloc+0x17c>)
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	4a18      	ldr	r2, [pc, #96]	; (8007c2c <pvPortMalloc+0x17c>)
 8007bcc:	6013      	str	r3, [r2, #0]
 8007bce:	4b17      	ldr	r3, [pc, #92]	; (8007c2c <pvPortMalloc+0x17c>)
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	4b18      	ldr	r3, [pc, #96]	; (8007c34 <pvPortMalloc+0x184>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d203      	bcs.n	8007be2 <pvPortMalloc+0x132>
 8007bda:	4b14      	ldr	r3, [pc, #80]	; (8007c2c <pvPortMalloc+0x17c>)
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	4a15      	ldr	r2, [pc, #84]	; (8007c34 <pvPortMalloc+0x184>)
 8007be0:	6013      	str	r3, [r2, #0]
 8007be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007be4:	685a      	ldr	r2, [r3, #4]
 8007be6:	4b10      	ldr	r3, [pc, #64]	; (8007c28 <pvPortMalloc+0x178>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	431a      	orrs	r2, r3
 8007bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bee:	605a      	str	r2, [r3, #4]
 8007bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	601a      	str	r2, [r3, #0]
 8007bf6:	f7ff faa5 	bl	8007144 <xTaskResumeAll>
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	f003 0307 	and.w	r3, r3, #7
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d00a      	beq.n	8007c1a <pvPortMalloc+0x16a>
 8007c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	bf00      	nop
 8007c18:	e7fe      	b.n	8007c18 <pvPortMalloc+0x168>
 8007c1a:	69fb      	ldr	r3, [r7, #28]
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3728      	adds	r7, #40	; 0x28
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	20001534 	.word	0x20001534
 8007c28:	20001540 	.word	0x20001540
 8007c2c:	20001538 	.word	0x20001538
 8007c30:	2000152c 	.word	0x2000152c
 8007c34:	2000153c 	.word	0x2000153c

08007c38 <vPortFree>:
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b086      	sub	sp, #24
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	617b      	str	r3, [r7, #20]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d048      	beq.n	8007cdc <vPortFree+0xa4>
 8007c4a:	2308      	movs	r3, #8
 8007c4c:	425b      	negs	r3, r3
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4413      	add	r3, r2
 8007c52:	617b      	str	r3, [r7, #20]
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	613b      	str	r3, [r7, #16]
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	4b21      	ldr	r3, [pc, #132]	; (8007ce4 <vPortFree+0xac>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4013      	ands	r3, r2
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d10a      	bne.n	8007c7c <vPortFree+0x44>
 8007c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c6a:	f383 8811 	msr	BASEPRI, r3
 8007c6e:	f3bf 8f6f 	isb	sy
 8007c72:	f3bf 8f4f 	dsb	sy
 8007c76:	60fb      	str	r3, [r7, #12]
 8007c78:	bf00      	nop
 8007c7a:	e7fe      	b.n	8007c7a <vPortFree+0x42>
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00a      	beq.n	8007c9a <vPortFree+0x62>
 8007c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c88:	f383 8811 	msr	BASEPRI, r3
 8007c8c:	f3bf 8f6f 	isb	sy
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	60bb      	str	r3, [r7, #8]
 8007c96:	bf00      	nop
 8007c98:	e7fe      	b.n	8007c98 <vPortFree+0x60>
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	685a      	ldr	r2, [r3, #4]
 8007c9e:	4b11      	ldr	r3, [pc, #68]	; (8007ce4 <vPortFree+0xac>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d019      	beq.n	8007cdc <vPortFree+0xa4>
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d115      	bne.n	8007cdc <vPortFree+0xa4>
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	685a      	ldr	r2, [r3, #4]
 8007cb4:	4b0b      	ldr	r3, [pc, #44]	; (8007ce4 <vPortFree+0xac>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	43db      	mvns	r3, r3
 8007cba:	401a      	ands	r2, r3
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	605a      	str	r2, [r3, #4]
 8007cc0:	f7ff fa32 	bl	8007128 <vTaskSuspendAll>
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	685a      	ldr	r2, [r3, #4]
 8007cc8:	4b07      	ldr	r3, [pc, #28]	; (8007ce8 <vPortFree+0xb0>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4413      	add	r3, r2
 8007cce:	4a06      	ldr	r2, [pc, #24]	; (8007ce8 <vPortFree+0xb0>)
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	6938      	ldr	r0, [r7, #16]
 8007cd4:	f000 f86c 	bl	8007db0 <prvInsertBlockIntoFreeList>
 8007cd8:	f7ff fa34 	bl	8007144 <xTaskResumeAll>
 8007cdc:	bf00      	nop
 8007cde:	3718      	adds	r7, #24
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}
 8007ce4:	20001540 	.word	0x20001540
 8007ce8:	20001538 	.word	0x20001538

08007cec <prvHeapInit>:
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007cf6:	60bb      	str	r3, [r7, #8]
 8007cf8:	4b27      	ldr	r3, [pc, #156]	; (8007d98 <prvHeapInit+0xac>)
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f003 0307 	and.w	r3, r3, #7
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00c      	beq.n	8007d20 <prvHeapInit+0x34>
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	3307      	adds	r3, #7
 8007d0a:	60fb      	str	r3, [r7, #12]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f023 0307 	bic.w	r3, r3, #7
 8007d12:	60fb      	str	r3, [r7, #12]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	4a1f      	ldr	r2, [pc, #124]	; (8007d98 <prvHeapInit+0xac>)
 8007d1c:	4413      	add	r3, r2
 8007d1e:	60bb      	str	r3, [r7, #8]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	607b      	str	r3, [r7, #4]
 8007d24:	4a1d      	ldr	r2, [pc, #116]	; (8007d9c <prvHeapInit+0xb0>)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6013      	str	r3, [r2, #0]
 8007d2a:	4b1c      	ldr	r3, [pc, #112]	; (8007d9c <prvHeapInit+0xb0>)
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	605a      	str	r2, [r3, #4]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68ba      	ldr	r2, [r7, #8]
 8007d34:	4413      	add	r3, r2
 8007d36:	60fb      	str	r3, [r7, #12]
 8007d38:	2208      	movs	r2, #8
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	1a9b      	subs	r3, r3, r2
 8007d3e:	60fb      	str	r3, [r7, #12]
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f023 0307 	bic.w	r3, r3, #7
 8007d46:	60fb      	str	r3, [r7, #12]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	4a15      	ldr	r2, [pc, #84]	; (8007da0 <prvHeapInit+0xb4>)
 8007d4c:	6013      	str	r3, [r2, #0]
 8007d4e:	4b14      	ldr	r3, [pc, #80]	; (8007da0 <prvHeapInit+0xb4>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2200      	movs	r2, #0
 8007d54:	605a      	str	r2, [r3, #4]
 8007d56:	4b12      	ldr	r3, [pc, #72]	; (8007da0 <prvHeapInit+0xb4>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	603b      	str	r3, [r7, #0]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	1ad2      	subs	r2, r2, r3
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	605a      	str	r2, [r3, #4]
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	; (8007da0 <prvHeapInit+0xb4>)
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	601a      	str	r2, [r3, #0]
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	4a0a      	ldr	r2, [pc, #40]	; (8007da4 <prvHeapInit+0xb8>)
 8007d7a:	6013      	str	r3, [r2, #0]
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	4a09      	ldr	r2, [pc, #36]	; (8007da8 <prvHeapInit+0xbc>)
 8007d82:	6013      	str	r3, [r2, #0]
 8007d84:	4b09      	ldr	r3, [pc, #36]	; (8007dac <prvHeapInit+0xc0>)
 8007d86:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007d8a:	601a      	str	r2, [r3, #0]
 8007d8c:	bf00      	nop
 8007d8e:	3714      	adds	r7, #20
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bc80      	pop	{r7}
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	2000092c 	.word	0x2000092c
 8007d9c:	2000152c 	.word	0x2000152c
 8007da0:	20001534 	.word	0x20001534
 8007da4:	2000153c 	.word	0x2000153c
 8007da8:	20001538 	.word	0x20001538
 8007dac:	20001540 	.word	0x20001540

08007db0 <prvInsertBlockIntoFreeList>:
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	4b27      	ldr	r3, [pc, #156]	; (8007e58 <prvInsertBlockIntoFreeList+0xa8>)
 8007dba:	60fb      	str	r3, [r7, #12]
 8007dbc:	e002      	b.n	8007dc4 <prvInsertBlockIntoFreeList+0x14>
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	60fb      	str	r3, [r7, #12]
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	687a      	ldr	r2, [r7, #4]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d8f7      	bhi.n	8007dbe <prvInsertBlockIntoFreeList+0xe>
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	60bb      	str	r3, [r7, #8]
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	4413      	add	r3, r2
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d108      	bne.n	8007df2 <prvInsertBlockIntoFreeList+0x42>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	441a      	add	r2, r3
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	605a      	str	r2, [r3, #4]
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	607b      	str	r3, [r7, #4]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	60bb      	str	r3, [r7, #8]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	68ba      	ldr	r2, [r7, #8]
 8007dfc:	441a      	add	r2, r3
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d118      	bne.n	8007e38 <prvInsertBlockIntoFreeList+0x88>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	4b14      	ldr	r3, [pc, #80]	; (8007e5c <prvInsertBlockIntoFreeList+0xac>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d00d      	beq.n	8007e2e <prvInsertBlockIntoFreeList+0x7e>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685a      	ldr	r2, [r3, #4]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	441a      	add	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	605a      	str	r2, [r3, #4]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	681a      	ldr	r2, [r3, #0]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	e008      	b.n	8007e40 <prvInsertBlockIntoFreeList+0x90>
 8007e2e:	4b0b      	ldr	r3, [pc, #44]	; (8007e5c <prvInsertBlockIntoFreeList+0xac>)
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	e003      	b.n	8007e40 <prvInsertBlockIntoFreeList+0x90>
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	601a      	str	r2, [r3, #0]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d002      	beq.n	8007e4e <prvInsertBlockIntoFreeList+0x9e>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	bf00      	nop
 8007e50:	3714      	adds	r7, #20
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bc80      	pop	{r7}
 8007e56:	4770      	bx	lr
 8007e58:	2000152c 	.word	0x2000152c
 8007e5c:	20001534 	.word	0x20001534

08007e60 <__cvt>:
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e66:	461f      	mov	r7, r3
 8007e68:	bfbb      	ittet	lt
 8007e6a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007e6e:	461f      	movlt	r7, r3
 8007e70:	2300      	movge	r3, #0
 8007e72:	232d      	movlt	r3, #45	; 0x2d
 8007e74:	b088      	sub	sp, #32
 8007e76:	4614      	mov	r4, r2
 8007e78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e7a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007e7c:	7013      	strb	r3, [r2, #0]
 8007e7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e80:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007e84:	f023 0820 	bic.w	r8, r3, #32
 8007e88:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e8c:	d005      	beq.n	8007e9a <__cvt+0x3a>
 8007e8e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e92:	d100      	bne.n	8007e96 <__cvt+0x36>
 8007e94:	3501      	adds	r5, #1
 8007e96:	2302      	movs	r3, #2
 8007e98:	e000      	b.n	8007e9c <__cvt+0x3c>
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	aa07      	add	r2, sp, #28
 8007e9e:	9204      	str	r2, [sp, #16]
 8007ea0:	aa06      	add	r2, sp, #24
 8007ea2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007ea6:	e9cd 3500 	strd	r3, r5, [sp]
 8007eaa:	4622      	mov	r2, r4
 8007eac:	463b      	mov	r3, r7
 8007eae:	f000 feb7 	bl	8008c20 <_dtoa_r>
 8007eb2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007eb6:	4606      	mov	r6, r0
 8007eb8:	d102      	bne.n	8007ec0 <__cvt+0x60>
 8007eba:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007ebc:	07db      	lsls	r3, r3, #31
 8007ebe:	d522      	bpl.n	8007f06 <__cvt+0xa6>
 8007ec0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ec4:	eb06 0905 	add.w	r9, r6, r5
 8007ec8:	d110      	bne.n	8007eec <__cvt+0x8c>
 8007eca:	7833      	ldrb	r3, [r6, #0]
 8007ecc:	2b30      	cmp	r3, #48	; 0x30
 8007ece:	d10a      	bne.n	8007ee6 <__cvt+0x86>
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	4639      	mov	r1, r7
 8007ed8:	f7f8 fd66 	bl	80009a8 <__aeabi_dcmpeq>
 8007edc:	b918      	cbnz	r0, 8007ee6 <__cvt+0x86>
 8007ede:	f1c5 0501 	rsb	r5, r5, #1
 8007ee2:	f8ca 5000 	str.w	r5, [sl]
 8007ee6:	f8da 3000 	ldr.w	r3, [sl]
 8007eea:	4499      	add	r9, r3
 8007eec:	2200      	movs	r2, #0
 8007eee:	2300      	movs	r3, #0
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	f7f8 fd58 	bl	80009a8 <__aeabi_dcmpeq>
 8007ef8:	b108      	cbz	r0, 8007efe <__cvt+0x9e>
 8007efa:	f8cd 901c 	str.w	r9, [sp, #28]
 8007efe:	2230      	movs	r2, #48	; 0x30
 8007f00:	9b07      	ldr	r3, [sp, #28]
 8007f02:	454b      	cmp	r3, r9
 8007f04:	d307      	bcc.n	8007f16 <__cvt+0xb6>
 8007f06:	4630      	mov	r0, r6
 8007f08:	9b07      	ldr	r3, [sp, #28]
 8007f0a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007f0c:	1b9b      	subs	r3, r3, r6
 8007f0e:	6013      	str	r3, [r2, #0]
 8007f10:	b008      	add	sp, #32
 8007f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f16:	1c59      	adds	r1, r3, #1
 8007f18:	9107      	str	r1, [sp, #28]
 8007f1a:	701a      	strb	r2, [r3, #0]
 8007f1c:	e7f0      	b.n	8007f00 <__cvt+0xa0>

08007f1e <__exponent>:
 8007f1e:	4603      	mov	r3, r0
 8007f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f22:	2900      	cmp	r1, #0
 8007f24:	f803 2b02 	strb.w	r2, [r3], #2
 8007f28:	bfb6      	itet	lt
 8007f2a:	222d      	movlt	r2, #45	; 0x2d
 8007f2c:	222b      	movge	r2, #43	; 0x2b
 8007f2e:	4249      	neglt	r1, r1
 8007f30:	2909      	cmp	r1, #9
 8007f32:	7042      	strb	r2, [r0, #1]
 8007f34:	dd2a      	ble.n	8007f8c <__exponent+0x6e>
 8007f36:	f10d 0207 	add.w	r2, sp, #7
 8007f3a:	4617      	mov	r7, r2
 8007f3c:	260a      	movs	r6, #10
 8007f3e:	fb91 f5f6 	sdiv	r5, r1, r6
 8007f42:	4694      	mov	ip, r2
 8007f44:	fb06 1415 	mls	r4, r6, r5, r1
 8007f48:	3430      	adds	r4, #48	; 0x30
 8007f4a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007f4e:	460c      	mov	r4, r1
 8007f50:	2c63      	cmp	r4, #99	; 0x63
 8007f52:	4629      	mov	r1, r5
 8007f54:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8007f58:	dcf1      	bgt.n	8007f3e <__exponent+0x20>
 8007f5a:	3130      	adds	r1, #48	; 0x30
 8007f5c:	f1ac 0402 	sub.w	r4, ip, #2
 8007f60:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007f64:	4622      	mov	r2, r4
 8007f66:	1c41      	adds	r1, r0, #1
 8007f68:	42ba      	cmp	r2, r7
 8007f6a:	d30a      	bcc.n	8007f82 <__exponent+0x64>
 8007f6c:	f10d 0209 	add.w	r2, sp, #9
 8007f70:	eba2 020c 	sub.w	r2, r2, ip
 8007f74:	42bc      	cmp	r4, r7
 8007f76:	bf88      	it	hi
 8007f78:	2200      	movhi	r2, #0
 8007f7a:	4413      	add	r3, r2
 8007f7c:	1a18      	subs	r0, r3, r0
 8007f7e:	b003      	add	sp, #12
 8007f80:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f82:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007f86:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007f8a:	e7ed      	b.n	8007f68 <__exponent+0x4a>
 8007f8c:	2330      	movs	r3, #48	; 0x30
 8007f8e:	3130      	adds	r1, #48	; 0x30
 8007f90:	7083      	strb	r3, [r0, #2]
 8007f92:	70c1      	strb	r1, [r0, #3]
 8007f94:	1d03      	adds	r3, r0, #4
 8007f96:	e7f1      	b.n	8007f7c <__exponent+0x5e>

08007f98 <_printf_float>:
 8007f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f9c:	b091      	sub	sp, #68	; 0x44
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007fa4:	4616      	mov	r6, r2
 8007fa6:	461f      	mov	r7, r3
 8007fa8:	4605      	mov	r5, r0
 8007faa:	f000 fcc5 	bl	8008938 <_localeconv_r>
 8007fae:	6803      	ldr	r3, [r0, #0]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fb4:	f7f8 f8cc 	bl	8000150 <strlen>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	930e      	str	r3, [sp, #56]	; 0x38
 8007fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8007fc0:	900a      	str	r0, [sp, #40]	; 0x28
 8007fc2:	3307      	adds	r3, #7
 8007fc4:	f023 0307 	bic.w	r3, r3, #7
 8007fc8:	f103 0208 	add.w	r2, r3, #8
 8007fcc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007fd0:	f8d4 b000 	ldr.w	fp, [r4]
 8007fd4:	f8c8 2000 	str.w	r2, [r8]
 8007fd8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8007fdc:	4652      	mov	r2, sl
 8007fde:	4643      	mov	r3, r8
 8007fe0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007fe4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8007fe8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007fee:	4650      	mov	r0, sl
 8007ff0:	4b9c      	ldr	r3, [pc, #624]	; (8008264 <_printf_float+0x2cc>)
 8007ff2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ff4:	f7f8 fd0a 	bl	8000a0c <__aeabi_dcmpun>
 8007ff8:	bb70      	cbnz	r0, 8008058 <_printf_float+0xc0>
 8007ffa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ffe:	4650      	mov	r0, sl
 8008000:	4b98      	ldr	r3, [pc, #608]	; (8008264 <_printf_float+0x2cc>)
 8008002:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008004:	f7f8 fce4 	bl	80009d0 <__aeabi_dcmple>
 8008008:	bb30      	cbnz	r0, 8008058 <_printf_float+0xc0>
 800800a:	2200      	movs	r2, #0
 800800c:	2300      	movs	r3, #0
 800800e:	4650      	mov	r0, sl
 8008010:	4641      	mov	r1, r8
 8008012:	f7f8 fcd3 	bl	80009bc <__aeabi_dcmplt>
 8008016:	b110      	cbz	r0, 800801e <_printf_float+0x86>
 8008018:	232d      	movs	r3, #45	; 0x2d
 800801a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800801e:	4a92      	ldr	r2, [pc, #584]	; (8008268 <_printf_float+0x2d0>)
 8008020:	4b92      	ldr	r3, [pc, #584]	; (800826c <_printf_float+0x2d4>)
 8008022:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008026:	bf94      	ite	ls
 8008028:	4690      	movls	r8, r2
 800802a:	4698      	movhi	r8, r3
 800802c:	2303      	movs	r3, #3
 800802e:	f04f 0a00 	mov.w	sl, #0
 8008032:	6123      	str	r3, [r4, #16]
 8008034:	f02b 0304 	bic.w	r3, fp, #4
 8008038:	6023      	str	r3, [r4, #0]
 800803a:	4633      	mov	r3, r6
 800803c:	4621      	mov	r1, r4
 800803e:	4628      	mov	r0, r5
 8008040:	9700      	str	r7, [sp, #0]
 8008042:	aa0f      	add	r2, sp, #60	; 0x3c
 8008044:	f000 f9d6 	bl	80083f4 <_printf_common>
 8008048:	3001      	adds	r0, #1
 800804a:	f040 8090 	bne.w	800816e <_printf_float+0x1d6>
 800804e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008052:	b011      	add	sp, #68	; 0x44
 8008054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008058:	4652      	mov	r2, sl
 800805a:	4643      	mov	r3, r8
 800805c:	4650      	mov	r0, sl
 800805e:	4641      	mov	r1, r8
 8008060:	f7f8 fcd4 	bl	8000a0c <__aeabi_dcmpun>
 8008064:	b148      	cbz	r0, 800807a <_printf_float+0xe2>
 8008066:	f1b8 0f00 	cmp.w	r8, #0
 800806a:	bfb8      	it	lt
 800806c:	232d      	movlt	r3, #45	; 0x2d
 800806e:	4a80      	ldr	r2, [pc, #512]	; (8008270 <_printf_float+0x2d8>)
 8008070:	bfb8      	it	lt
 8008072:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008076:	4b7f      	ldr	r3, [pc, #508]	; (8008274 <_printf_float+0x2dc>)
 8008078:	e7d3      	b.n	8008022 <_printf_float+0x8a>
 800807a:	6863      	ldr	r3, [r4, #4]
 800807c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	d142      	bne.n	800810a <_printf_float+0x172>
 8008084:	2306      	movs	r3, #6
 8008086:	6063      	str	r3, [r4, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	9206      	str	r2, [sp, #24]
 800808c:	aa0e      	add	r2, sp, #56	; 0x38
 800808e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8008092:	aa0d      	add	r2, sp, #52	; 0x34
 8008094:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8008098:	9203      	str	r2, [sp, #12]
 800809a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800809e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80080a2:	6023      	str	r3, [r4, #0]
 80080a4:	6863      	ldr	r3, [r4, #4]
 80080a6:	4652      	mov	r2, sl
 80080a8:	9300      	str	r3, [sp, #0]
 80080aa:	4628      	mov	r0, r5
 80080ac:	4643      	mov	r3, r8
 80080ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80080b0:	f7ff fed6 	bl	8007e60 <__cvt>
 80080b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80080b6:	4680      	mov	r8, r0
 80080b8:	2947      	cmp	r1, #71	; 0x47
 80080ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80080bc:	d108      	bne.n	80080d0 <_printf_float+0x138>
 80080be:	1cc8      	adds	r0, r1, #3
 80080c0:	db02      	blt.n	80080c8 <_printf_float+0x130>
 80080c2:	6863      	ldr	r3, [r4, #4]
 80080c4:	4299      	cmp	r1, r3
 80080c6:	dd40      	ble.n	800814a <_printf_float+0x1b2>
 80080c8:	f1a9 0902 	sub.w	r9, r9, #2
 80080cc:	fa5f f989 	uxtb.w	r9, r9
 80080d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80080d4:	d81f      	bhi.n	8008116 <_printf_float+0x17e>
 80080d6:	464a      	mov	r2, r9
 80080d8:	3901      	subs	r1, #1
 80080da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80080de:	910d      	str	r1, [sp, #52]	; 0x34
 80080e0:	f7ff ff1d 	bl	8007f1e <__exponent>
 80080e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80080e6:	4682      	mov	sl, r0
 80080e8:	1813      	adds	r3, r2, r0
 80080ea:	2a01      	cmp	r2, #1
 80080ec:	6123      	str	r3, [r4, #16]
 80080ee:	dc02      	bgt.n	80080f6 <_printf_float+0x15e>
 80080f0:	6822      	ldr	r2, [r4, #0]
 80080f2:	07d2      	lsls	r2, r2, #31
 80080f4:	d501      	bpl.n	80080fa <_printf_float+0x162>
 80080f6:	3301      	adds	r3, #1
 80080f8:	6123      	str	r3, [r4, #16]
 80080fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d09b      	beq.n	800803a <_printf_float+0xa2>
 8008102:	232d      	movs	r3, #45	; 0x2d
 8008104:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008108:	e797      	b.n	800803a <_printf_float+0xa2>
 800810a:	2947      	cmp	r1, #71	; 0x47
 800810c:	d1bc      	bne.n	8008088 <_printf_float+0xf0>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1ba      	bne.n	8008088 <_printf_float+0xf0>
 8008112:	2301      	movs	r3, #1
 8008114:	e7b7      	b.n	8008086 <_printf_float+0xee>
 8008116:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800811a:	d118      	bne.n	800814e <_printf_float+0x1b6>
 800811c:	2900      	cmp	r1, #0
 800811e:	6863      	ldr	r3, [r4, #4]
 8008120:	dd0b      	ble.n	800813a <_printf_float+0x1a2>
 8008122:	6121      	str	r1, [r4, #16]
 8008124:	b913      	cbnz	r3, 800812c <_printf_float+0x194>
 8008126:	6822      	ldr	r2, [r4, #0]
 8008128:	07d0      	lsls	r0, r2, #31
 800812a:	d502      	bpl.n	8008132 <_printf_float+0x19a>
 800812c:	3301      	adds	r3, #1
 800812e:	440b      	add	r3, r1
 8008130:	6123      	str	r3, [r4, #16]
 8008132:	f04f 0a00 	mov.w	sl, #0
 8008136:	65a1      	str	r1, [r4, #88]	; 0x58
 8008138:	e7df      	b.n	80080fa <_printf_float+0x162>
 800813a:	b913      	cbnz	r3, 8008142 <_printf_float+0x1aa>
 800813c:	6822      	ldr	r2, [r4, #0]
 800813e:	07d2      	lsls	r2, r2, #31
 8008140:	d501      	bpl.n	8008146 <_printf_float+0x1ae>
 8008142:	3302      	adds	r3, #2
 8008144:	e7f4      	b.n	8008130 <_printf_float+0x198>
 8008146:	2301      	movs	r3, #1
 8008148:	e7f2      	b.n	8008130 <_printf_float+0x198>
 800814a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800814e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008150:	4299      	cmp	r1, r3
 8008152:	db05      	blt.n	8008160 <_printf_float+0x1c8>
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	6121      	str	r1, [r4, #16]
 8008158:	07d8      	lsls	r0, r3, #31
 800815a:	d5ea      	bpl.n	8008132 <_printf_float+0x19a>
 800815c:	1c4b      	adds	r3, r1, #1
 800815e:	e7e7      	b.n	8008130 <_printf_float+0x198>
 8008160:	2900      	cmp	r1, #0
 8008162:	bfcc      	ite	gt
 8008164:	2201      	movgt	r2, #1
 8008166:	f1c1 0202 	rsble	r2, r1, #2
 800816a:	4413      	add	r3, r2
 800816c:	e7e0      	b.n	8008130 <_printf_float+0x198>
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	055a      	lsls	r2, r3, #21
 8008172:	d407      	bmi.n	8008184 <_printf_float+0x1ec>
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	4642      	mov	r2, r8
 8008178:	4631      	mov	r1, r6
 800817a:	4628      	mov	r0, r5
 800817c:	47b8      	blx	r7
 800817e:	3001      	adds	r0, #1
 8008180:	d12b      	bne.n	80081da <_printf_float+0x242>
 8008182:	e764      	b.n	800804e <_printf_float+0xb6>
 8008184:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008188:	f240 80dd 	bls.w	8008346 <_printf_float+0x3ae>
 800818c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008190:	2200      	movs	r2, #0
 8008192:	2300      	movs	r3, #0
 8008194:	f7f8 fc08 	bl	80009a8 <__aeabi_dcmpeq>
 8008198:	2800      	cmp	r0, #0
 800819a:	d033      	beq.n	8008204 <_printf_float+0x26c>
 800819c:	2301      	movs	r3, #1
 800819e:	4631      	mov	r1, r6
 80081a0:	4628      	mov	r0, r5
 80081a2:	4a35      	ldr	r2, [pc, #212]	; (8008278 <_printf_float+0x2e0>)
 80081a4:	47b8      	blx	r7
 80081a6:	3001      	adds	r0, #1
 80081a8:	f43f af51 	beq.w	800804e <_printf_float+0xb6>
 80081ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80081b0:	429a      	cmp	r2, r3
 80081b2:	db02      	blt.n	80081ba <_printf_float+0x222>
 80081b4:	6823      	ldr	r3, [r4, #0]
 80081b6:	07d8      	lsls	r0, r3, #31
 80081b8:	d50f      	bpl.n	80081da <_printf_float+0x242>
 80081ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081be:	4631      	mov	r1, r6
 80081c0:	4628      	mov	r0, r5
 80081c2:	47b8      	blx	r7
 80081c4:	3001      	adds	r0, #1
 80081c6:	f43f af42 	beq.w	800804e <_printf_float+0xb6>
 80081ca:	f04f 0800 	mov.w	r8, #0
 80081ce:	f104 091a 	add.w	r9, r4, #26
 80081d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081d4:	3b01      	subs	r3, #1
 80081d6:	4543      	cmp	r3, r8
 80081d8:	dc09      	bgt.n	80081ee <_printf_float+0x256>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	079b      	lsls	r3, r3, #30
 80081de:	f100 8104 	bmi.w	80083ea <_printf_float+0x452>
 80081e2:	68e0      	ldr	r0, [r4, #12]
 80081e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081e6:	4298      	cmp	r0, r3
 80081e8:	bfb8      	it	lt
 80081ea:	4618      	movlt	r0, r3
 80081ec:	e731      	b.n	8008052 <_printf_float+0xba>
 80081ee:	2301      	movs	r3, #1
 80081f0:	464a      	mov	r2, r9
 80081f2:	4631      	mov	r1, r6
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b8      	blx	r7
 80081f8:	3001      	adds	r0, #1
 80081fa:	f43f af28 	beq.w	800804e <_printf_float+0xb6>
 80081fe:	f108 0801 	add.w	r8, r8, #1
 8008202:	e7e6      	b.n	80081d2 <_printf_float+0x23a>
 8008204:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008206:	2b00      	cmp	r3, #0
 8008208:	dc38      	bgt.n	800827c <_printf_float+0x2e4>
 800820a:	2301      	movs	r3, #1
 800820c:	4631      	mov	r1, r6
 800820e:	4628      	mov	r0, r5
 8008210:	4a19      	ldr	r2, [pc, #100]	; (8008278 <_printf_float+0x2e0>)
 8008212:	47b8      	blx	r7
 8008214:	3001      	adds	r0, #1
 8008216:	f43f af1a 	beq.w	800804e <_printf_float+0xb6>
 800821a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800821e:	4313      	orrs	r3, r2
 8008220:	d102      	bne.n	8008228 <_printf_float+0x290>
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	07d9      	lsls	r1, r3, #31
 8008226:	d5d8      	bpl.n	80081da <_printf_float+0x242>
 8008228:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800822c:	4631      	mov	r1, r6
 800822e:	4628      	mov	r0, r5
 8008230:	47b8      	blx	r7
 8008232:	3001      	adds	r0, #1
 8008234:	f43f af0b 	beq.w	800804e <_printf_float+0xb6>
 8008238:	f04f 0900 	mov.w	r9, #0
 800823c:	f104 0a1a 	add.w	sl, r4, #26
 8008240:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008242:	425b      	negs	r3, r3
 8008244:	454b      	cmp	r3, r9
 8008246:	dc01      	bgt.n	800824c <_printf_float+0x2b4>
 8008248:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800824a:	e794      	b.n	8008176 <_printf_float+0x1de>
 800824c:	2301      	movs	r3, #1
 800824e:	4652      	mov	r2, sl
 8008250:	4631      	mov	r1, r6
 8008252:	4628      	mov	r0, r5
 8008254:	47b8      	blx	r7
 8008256:	3001      	adds	r0, #1
 8008258:	f43f aef9 	beq.w	800804e <_printf_float+0xb6>
 800825c:	f109 0901 	add.w	r9, r9, #1
 8008260:	e7ee      	b.n	8008240 <_printf_float+0x2a8>
 8008262:	bf00      	nop
 8008264:	7fefffff 	.word	0x7fefffff
 8008268:	0800a91a 	.word	0x0800a91a
 800826c:	0800a91e 	.word	0x0800a91e
 8008270:	0800a922 	.word	0x0800a922
 8008274:	0800a926 	.word	0x0800a926
 8008278:	0800a92a 	.word	0x0800a92a
 800827c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800827e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008280:	429a      	cmp	r2, r3
 8008282:	bfa8      	it	ge
 8008284:	461a      	movge	r2, r3
 8008286:	2a00      	cmp	r2, #0
 8008288:	4691      	mov	r9, r2
 800828a:	dc37      	bgt.n	80082fc <_printf_float+0x364>
 800828c:	f04f 0b00 	mov.w	fp, #0
 8008290:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008294:	f104 021a 	add.w	r2, r4, #26
 8008298:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800829c:	ebaa 0309 	sub.w	r3, sl, r9
 80082a0:	455b      	cmp	r3, fp
 80082a2:	dc33      	bgt.n	800830c <_printf_float+0x374>
 80082a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082a8:	429a      	cmp	r2, r3
 80082aa:	db3b      	blt.n	8008324 <_printf_float+0x38c>
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	07da      	lsls	r2, r3, #31
 80082b0:	d438      	bmi.n	8008324 <_printf_float+0x38c>
 80082b2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80082b6:	eba2 0903 	sub.w	r9, r2, r3
 80082ba:	eba2 020a 	sub.w	r2, r2, sl
 80082be:	4591      	cmp	r9, r2
 80082c0:	bfa8      	it	ge
 80082c2:	4691      	movge	r9, r2
 80082c4:	f1b9 0f00 	cmp.w	r9, #0
 80082c8:	dc34      	bgt.n	8008334 <_printf_float+0x39c>
 80082ca:	f04f 0800 	mov.w	r8, #0
 80082ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082d2:	f104 0a1a 	add.w	sl, r4, #26
 80082d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082da:	1a9b      	subs	r3, r3, r2
 80082dc:	eba3 0309 	sub.w	r3, r3, r9
 80082e0:	4543      	cmp	r3, r8
 80082e2:	f77f af7a 	ble.w	80081da <_printf_float+0x242>
 80082e6:	2301      	movs	r3, #1
 80082e8:	4652      	mov	r2, sl
 80082ea:	4631      	mov	r1, r6
 80082ec:	4628      	mov	r0, r5
 80082ee:	47b8      	blx	r7
 80082f0:	3001      	adds	r0, #1
 80082f2:	f43f aeac 	beq.w	800804e <_printf_float+0xb6>
 80082f6:	f108 0801 	add.w	r8, r8, #1
 80082fa:	e7ec      	b.n	80082d6 <_printf_float+0x33e>
 80082fc:	4613      	mov	r3, r2
 80082fe:	4631      	mov	r1, r6
 8008300:	4642      	mov	r2, r8
 8008302:	4628      	mov	r0, r5
 8008304:	47b8      	blx	r7
 8008306:	3001      	adds	r0, #1
 8008308:	d1c0      	bne.n	800828c <_printf_float+0x2f4>
 800830a:	e6a0      	b.n	800804e <_printf_float+0xb6>
 800830c:	2301      	movs	r3, #1
 800830e:	4631      	mov	r1, r6
 8008310:	4628      	mov	r0, r5
 8008312:	920b      	str	r2, [sp, #44]	; 0x2c
 8008314:	47b8      	blx	r7
 8008316:	3001      	adds	r0, #1
 8008318:	f43f ae99 	beq.w	800804e <_printf_float+0xb6>
 800831c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800831e:	f10b 0b01 	add.w	fp, fp, #1
 8008322:	e7b9      	b.n	8008298 <_printf_float+0x300>
 8008324:	4631      	mov	r1, r6
 8008326:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800832a:	4628      	mov	r0, r5
 800832c:	47b8      	blx	r7
 800832e:	3001      	adds	r0, #1
 8008330:	d1bf      	bne.n	80082b2 <_printf_float+0x31a>
 8008332:	e68c      	b.n	800804e <_printf_float+0xb6>
 8008334:	464b      	mov	r3, r9
 8008336:	4631      	mov	r1, r6
 8008338:	4628      	mov	r0, r5
 800833a:	eb08 020a 	add.w	r2, r8, sl
 800833e:	47b8      	blx	r7
 8008340:	3001      	adds	r0, #1
 8008342:	d1c2      	bne.n	80082ca <_printf_float+0x332>
 8008344:	e683      	b.n	800804e <_printf_float+0xb6>
 8008346:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008348:	2a01      	cmp	r2, #1
 800834a:	dc01      	bgt.n	8008350 <_printf_float+0x3b8>
 800834c:	07db      	lsls	r3, r3, #31
 800834e:	d539      	bpl.n	80083c4 <_printf_float+0x42c>
 8008350:	2301      	movs	r3, #1
 8008352:	4642      	mov	r2, r8
 8008354:	4631      	mov	r1, r6
 8008356:	4628      	mov	r0, r5
 8008358:	47b8      	blx	r7
 800835a:	3001      	adds	r0, #1
 800835c:	f43f ae77 	beq.w	800804e <_printf_float+0xb6>
 8008360:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008364:	4631      	mov	r1, r6
 8008366:	4628      	mov	r0, r5
 8008368:	47b8      	blx	r7
 800836a:	3001      	adds	r0, #1
 800836c:	f43f ae6f 	beq.w	800804e <_printf_float+0xb6>
 8008370:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008374:	2200      	movs	r2, #0
 8008376:	2300      	movs	r3, #0
 8008378:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800837c:	f7f8 fb14 	bl	80009a8 <__aeabi_dcmpeq>
 8008380:	b9d8      	cbnz	r0, 80083ba <_printf_float+0x422>
 8008382:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8008386:	f108 0201 	add.w	r2, r8, #1
 800838a:	4631      	mov	r1, r6
 800838c:	4628      	mov	r0, r5
 800838e:	47b8      	blx	r7
 8008390:	3001      	adds	r0, #1
 8008392:	d10e      	bne.n	80083b2 <_printf_float+0x41a>
 8008394:	e65b      	b.n	800804e <_printf_float+0xb6>
 8008396:	2301      	movs	r3, #1
 8008398:	464a      	mov	r2, r9
 800839a:	4631      	mov	r1, r6
 800839c:	4628      	mov	r0, r5
 800839e:	47b8      	blx	r7
 80083a0:	3001      	adds	r0, #1
 80083a2:	f43f ae54 	beq.w	800804e <_printf_float+0xb6>
 80083a6:	f108 0801 	add.w	r8, r8, #1
 80083aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80083ac:	3b01      	subs	r3, #1
 80083ae:	4543      	cmp	r3, r8
 80083b0:	dcf1      	bgt.n	8008396 <_printf_float+0x3fe>
 80083b2:	4653      	mov	r3, sl
 80083b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80083b8:	e6de      	b.n	8008178 <_printf_float+0x1e0>
 80083ba:	f04f 0800 	mov.w	r8, #0
 80083be:	f104 091a 	add.w	r9, r4, #26
 80083c2:	e7f2      	b.n	80083aa <_printf_float+0x412>
 80083c4:	2301      	movs	r3, #1
 80083c6:	4642      	mov	r2, r8
 80083c8:	e7df      	b.n	800838a <_printf_float+0x3f2>
 80083ca:	2301      	movs	r3, #1
 80083cc:	464a      	mov	r2, r9
 80083ce:	4631      	mov	r1, r6
 80083d0:	4628      	mov	r0, r5
 80083d2:	47b8      	blx	r7
 80083d4:	3001      	adds	r0, #1
 80083d6:	f43f ae3a 	beq.w	800804e <_printf_float+0xb6>
 80083da:	f108 0801 	add.w	r8, r8, #1
 80083de:	68e3      	ldr	r3, [r4, #12]
 80083e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80083e2:	1a5b      	subs	r3, r3, r1
 80083e4:	4543      	cmp	r3, r8
 80083e6:	dcf0      	bgt.n	80083ca <_printf_float+0x432>
 80083e8:	e6fb      	b.n	80081e2 <_printf_float+0x24a>
 80083ea:	f04f 0800 	mov.w	r8, #0
 80083ee:	f104 0919 	add.w	r9, r4, #25
 80083f2:	e7f4      	b.n	80083de <_printf_float+0x446>

080083f4 <_printf_common>:
 80083f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f8:	4616      	mov	r6, r2
 80083fa:	4699      	mov	r9, r3
 80083fc:	688a      	ldr	r2, [r1, #8]
 80083fe:	690b      	ldr	r3, [r1, #16]
 8008400:	4607      	mov	r7, r0
 8008402:	4293      	cmp	r3, r2
 8008404:	bfb8      	it	lt
 8008406:	4613      	movlt	r3, r2
 8008408:	6033      	str	r3, [r6, #0]
 800840a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800840e:	460c      	mov	r4, r1
 8008410:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008414:	b10a      	cbz	r2, 800841a <_printf_common+0x26>
 8008416:	3301      	adds	r3, #1
 8008418:	6033      	str	r3, [r6, #0]
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	0699      	lsls	r1, r3, #26
 800841e:	bf42      	ittt	mi
 8008420:	6833      	ldrmi	r3, [r6, #0]
 8008422:	3302      	addmi	r3, #2
 8008424:	6033      	strmi	r3, [r6, #0]
 8008426:	6825      	ldr	r5, [r4, #0]
 8008428:	f015 0506 	ands.w	r5, r5, #6
 800842c:	d106      	bne.n	800843c <_printf_common+0x48>
 800842e:	f104 0a19 	add.w	sl, r4, #25
 8008432:	68e3      	ldr	r3, [r4, #12]
 8008434:	6832      	ldr	r2, [r6, #0]
 8008436:	1a9b      	subs	r3, r3, r2
 8008438:	42ab      	cmp	r3, r5
 800843a:	dc2b      	bgt.n	8008494 <_printf_common+0xa0>
 800843c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008440:	1e13      	subs	r3, r2, #0
 8008442:	6822      	ldr	r2, [r4, #0]
 8008444:	bf18      	it	ne
 8008446:	2301      	movne	r3, #1
 8008448:	0692      	lsls	r2, r2, #26
 800844a:	d430      	bmi.n	80084ae <_printf_common+0xba>
 800844c:	4649      	mov	r1, r9
 800844e:	4638      	mov	r0, r7
 8008450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008454:	47c0      	blx	r8
 8008456:	3001      	adds	r0, #1
 8008458:	d023      	beq.n	80084a2 <_printf_common+0xae>
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	6922      	ldr	r2, [r4, #16]
 800845e:	f003 0306 	and.w	r3, r3, #6
 8008462:	2b04      	cmp	r3, #4
 8008464:	bf14      	ite	ne
 8008466:	2500      	movne	r5, #0
 8008468:	6833      	ldreq	r3, [r6, #0]
 800846a:	f04f 0600 	mov.w	r6, #0
 800846e:	bf08      	it	eq
 8008470:	68e5      	ldreq	r5, [r4, #12]
 8008472:	f104 041a 	add.w	r4, r4, #26
 8008476:	bf08      	it	eq
 8008478:	1aed      	subeq	r5, r5, r3
 800847a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800847e:	bf08      	it	eq
 8008480:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008484:	4293      	cmp	r3, r2
 8008486:	bfc4      	itt	gt
 8008488:	1a9b      	subgt	r3, r3, r2
 800848a:	18ed      	addgt	r5, r5, r3
 800848c:	42b5      	cmp	r5, r6
 800848e:	d11a      	bne.n	80084c6 <_printf_common+0xd2>
 8008490:	2000      	movs	r0, #0
 8008492:	e008      	b.n	80084a6 <_printf_common+0xb2>
 8008494:	2301      	movs	r3, #1
 8008496:	4652      	mov	r2, sl
 8008498:	4649      	mov	r1, r9
 800849a:	4638      	mov	r0, r7
 800849c:	47c0      	blx	r8
 800849e:	3001      	adds	r0, #1
 80084a0:	d103      	bne.n	80084aa <_printf_common+0xb6>
 80084a2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084aa:	3501      	adds	r5, #1
 80084ac:	e7c1      	b.n	8008432 <_printf_common+0x3e>
 80084ae:	2030      	movs	r0, #48	; 0x30
 80084b0:	18e1      	adds	r1, r4, r3
 80084b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084b6:	1c5a      	adds	r2, r3, #1
 80084b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084bc:	4422      	add	r2, r4
 80084be:	3302      	adds	r3, #2
 80084c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084c4:	e7c2      	b.n	800844c <_printf_common+0x58>
 80084c6:	2301      	movs	r3, #1
 80084c8:	4622      	mov	r2, r4
 80084ca:	4649      	mov	r1, r9
 80084cc:	4638      	mov	r0, r7
 80084ce:	47c0      	blx	r8
 80084d0:	3001      	adds	r0, #1
 80084d2:	d0e6      	beq.n	80084a2 <_printf_common+0xae>
 80084d4:	3601      	adds	r6, #1
 80084d6:	e7d9      	b.n	800848c <_printf_common+0x98>

080084d8 <_printf_i>:
 80084d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084dc:	7e0f      	ldrb	r7, [r1, #24]
 80084de:	4691      	mov	r9, r2
 80084e0:	2f78      	cmp	r7, #120	; 0x78
 80084e2:	4680      	mov	r8, r0
 80084e4:	460c      	mov	r4, r1
 80084e6:	469a      	mov	sl, r3
 80084e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084ee:	d807      	bhi.n	8008500 <_printf_i+0x28>
 80084f0:	2f62      	cmp	r7, #98	; 0x62
 80084f2:	d80a      	bhi.n	800850a <_printf_i+0x32>
 80084f4:	2f00      	cmp	r7, #0
 80084f6:	f000 80d5 	beq.w	80086a4 <_printf_i+0x1cc>
 80084fa:	2f58      	cmp	r7, #88	; 0x58
 80084fc:	f000 80c1 	beq.w	8008682 <_printf_i+0x1aa>
 8008500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008508:	e03a      	b.n	8008580 <_printf_i+0xa8>
 800850a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800850e:	2b15      	cmp	r3, #21
 8008510:	d8f6      	bhi.n	8008500 <_printf_i+0x28>
 8008512:	a101      	add	r1, pc, #4	; (adr r1, 8008518 <_printf_i+0x40>)
 8008514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008518:	08008571 	.word	0x08008571
 800851c:	08008585 	.word	0x08008585
 8008520:	08008501 	.word	0x08008501
 8008524:	08008501 	.word	0x08008501
 8008528:	08008501 	.word	0x08008501
 800852c:	08008501 	.word	0x08008501
 8008530:	08008585 	.word	0x08008585
 8008534:	08008501 	.word	0x08008501
 8008538:	08008501 	.word	0x08008501
 800853c:	08008501 	.word	0x08008501
 8008540:	08008501 	.word	0x08008501
 8008544:	0800868b 	.word	0x0800868b
 8008548:	080085b1 	.word	0x080085b1
 800854c:	08008645 	.word	0x08008645
 8008550:	08008501 	.word	0x08008501
 8008554:	08008501 	.word	0x08008501
 8008558:	080086ad 	.word	0x080086ad
 800855c:	08008501 	.word	0x08008501
 8008560:	080085b1 	.word	0x080085b1
 8008564:	08008501 	.word	0x08008501
 8008568:	08008501 	.word	0x08008501
 800856c:	0800864d 	.word	0x0800864d
 8008570:	682b      	ldr	r3, [r5, #0]
 8008572:	1d1a      	adds	r2, r3, #4
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	602a      	str	r2, [r5, #0]
 8008578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800857c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008580:	2301      	movs	r3, #1
 8008582:	e0a0      	b.n	80086c6 <_printf_i+0x1ee>
 8008584:	6820      	ldr	r0, [r4, #0]
 8008586:	682b      	ldr	r3, [r5, #0]
 8008588:	0607      	lsls	r7, r0, #24
 800858a:	f103 0104 	add.w	r1, r3, #4
 800858e:	6029      	str	r1, [r5, #0]
 8008590:	d501      	bpl.n	8008596 <_printf_i+0xbe>
 8008592:	681e      	ldr	r6, [r3, #0]
 8008594:	e003      	b.n	800859e <_printf_i+0xc6>
 8008596:	0646      	lsls	r6, r0, #25
 8008598:	d5fb      	bpl.n	8008592 <_printf_i+0xba>
 800859a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800859e:	2e00      	cmp	r6, #0
 80085a0:	da03      	bge.n	80085aa <_printf_i+0xd2>
 80085a2:	232d      	movs	r3, #45	; 0x2d
 80085a4:	4276      	negs	r6, r6
 80085a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085aa:	230a      	movs	r3, #10
 80085ac:	4859      	ldr	r0, [pc, #356]	; (8008714 <_printf_i+0x23c>)
 80085ae:	e012      	b.n	80085d6 <_printf_i+0xfe>
 80085b0:	682b      	ldr	r3, [r5, #0]
 80085b2:	6820      	ldr	r0, [r4, #0]
 80085b4:	1d19      	adds	r1, r3, #4
 80085b6:	6029      	str	r1, [r5, #0]
 80085b8:	0605      	lsls	r5, r0, #24
 80085ba:	d501      	bpl.n	80085c0 <_printf_i+0xe8>
 80085bc:	681e      	ldr	r6, [r3, #0]
 80085be:	e002      	b.n	80085c6 <_printf_i+0xee>
 80085c0:	0641      	lsls	r1, r0, #25
 80085c2:	d5fb      	bpl.n	80085bc <_printf_i+0xe4>
 80085c4:	881e      	ldrh	r6, [r3, #0]
 80085c6:	2f6f      	cmp	r7, #111	; 0x6f
 80085c8:	bf0c      	ite	eq
 80085ca:	2308      	moveq	r3, #8
 80085cc:	230a      	movne	r3, #10
 80085ce:	4851      	ldr	r0, [pc, #324]	; (8008714 <_printf_i+0x23c>)
 80085d0:	2100      	movs	r1, #0
 80085d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085d6:	6865      	ldr	r5, [r4, #4]
 80085d8:	2d00      	cmp	r5, #0
 80085da:	bfa8      	it	ge
 80085dc:	6821      	ldrge	r1, [r4, #0]
 80085de:	60a5      	str	r5, [r4, #8]
 80085e0:	bfa4      	itt	ge
 80085e2:	f021 0104 	bicge.w	r1, r1, #4
 80085e6:	6021      	strge	r1, [r4, #0]
 80085e8:	b90e      	cbnz	r6, 80085ee <_printf_i+0x116>
 80085ea:	2d00      	cmp	r5, #0
 80085ec:	d04b      	beq.n	8008686 <_printf_i+0x1ae>
 80085ee:	4615      	mov	r5, r2
 80085f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80085f4:	fb03 6711 	mls	r7, r3, r1, r6
 80085f8:	5dc7      	ldrb	r7, [r0, r7]
 80085fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085fe:	4637      	mov	r7, r6
 8008600:	42bb      	cmp	r3, r7
 8008602:	460e      	mov	r6, r1
 8008604:	d9f4      	bls.n	80085f0 <_printf_i+0x118>
 8008606:	2b08      	cmp	r3, #8
 8008608:	d10b      	bne.n	8008622 <_printf_i+0x14a>
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	07de      	lsls	r6, r3, #31
 800860e:	d508      	bpl.n	8008622 <_printf_i+0x14a>
 8008610:	6923      	ldr	r3, [r4, #16]
 8008612:	6861      	ldr	r1, [r4, #4]
 8008614:	4299      	cmp	r1, r3
 8008616:	bfde      	ittt	le
 8008618:	2330      	movle	r3, #48	; 0x30
 800861a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800861e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008622:	1b52      	subs	r2, r2, r5
 8008624:	6122      	str	r2, [r4, #16]
 8008626:	464b      	mov	r3, r9
 8008628:	4621      	mov	r1, r4
 800862a:	4640      	mov	r0, r8
 800862c:	f8cd a000 	str.w	sl, [sp]
 8008630:	aa03      	add	r2, sp, #12
 8008632:	f7ff fedf 	bl	80083f4 <_printf_common>
 8008636:	3001      	adds	r0, #1
 8008638:	d14a      	bne.n	80086d0 <_printf_i+0x1f8>
 800863a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800863e:	b004      	add	sp, #16
 8008640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	f043 0320 	orr.w	r3, r3, #32
 800864a:	6023      	str	r3, [r4, #0]
 800864c:	2778      	movs	r7, #120	; 0x78
 800864e:	4832      	ldr	r0, [pc, #200]	; (8008718 <_printf_i+0x240>)
 8008650:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008654:	6823      	ldr	r3, [r4, #0]
 8008656:	6829      	ldr	r1, [r5, #0]
 8008658:	061f      	lsls	r7, r3, #24
 800865a:	f851 6b04 	ldr.w	r6, [r1], #4
 800865e:	d402      	bmi.n	8008666 <_printf_i+0x18e>
 8008660:	065f      	lsls	r7, r3, #25
 8008662:	bf48      	it	mi
 8008664:	b2b6      	uxthmi	r6, r6
 8008666:	07df      	lsls	r7, r3, #31
 8008668:	bf48      	it	mi
 800866a:	f043 0320 	orrmi.w	r3, r3, #32
 800866e:	6029      	str	r1, [r5, #0]
 8008670:	bf48      	it	mi
 8008672:	6023      	strmi	r3, [r4, #0]
 8008674:	b91e      	cbnz	r6, 800867e <_printf_i+0x1a6>
 8008676:	6823      	ldr	r3, [r4, #0]
 8008678:	f023 0320 	bic.w	r3, r3, #32
 800867c:	6023      	str	r3, [r4, #0]
 800867e:	2310      	movs	r3, #16
 8008680:	e7a6      	b.n	80085d0 <_printf_i+0xf8>
 8008682:	4824      	ldr	r0, [pc, #144]	; (8008714 <_printf_i+0x23c>)
 8008684:	e7e4      	b.n	8008650 <_printf_i+0x178>
 8008686:	4615      	mov	r5, r2
 8008688:	e7bd      	b.n	8008606 <_printf_i+0x12e>
 800868a:	682b      	ldr	r3, [r5, #0]
 800868c:	6826      	ldr	r6, [r4, #0]
 800868e:	1d18      	adds	r0, r3, #4
 8008690:	6961      	ldr	r1, [r4, #20]
 8008692:	6028      	str	r0, [r5, #0]
 8008694:	0635      	lsls	r5, r6, #24
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	d501      	bpl.n	800869e <_printf_i+0x1c6>
 800869a:	6019      	str	r1, [r3, #0]
 800869c:	e002      	b.n	80086a4 <_printf_i+0x1cc>
 800869e:	0670      	lsls	r0, r6, #25
 80086a0:	d5fb      	bpl.n	800869a <_printf_i+0x1c2>
 80086a2:	8019      	strh	r1, [r3, #0]
 80086a4:	2300      	movs	r3, #0
 80086a6:	4615      	mov	r5, r2
 80086a8:	6123      	str	r3, [r4, #16]
 80086aa:	e7bc      	b.n	8008626 <_printf_i+0x14e>
 80086ac:	682b      	ldr	r3, [r5, #0]
 80086ae:	2100      	movs	r1, #0
 80086b0:	1d1a      	adds	r2, r3, #4
 80086b2:	602a      	str	r2, [r5, #0]
 80086b4:	681d      	ldr	r5, [r3, #0]
 80086b6:	6862      	ldr	r2, [r4, #4]
 80086b8:	4628      	mov	r0, r5
 80086ba:	f000 fa0a 	bl	8008ad2 <memchr>
 80086be:	b108      	cbz	r0, 80086c4 <_printf_i+0x1ec>
 80086c0:	1b40      	subs	r0, r0, r5
 80086c2:	6060      	str	r0, [r4, #4]
 80086c4:	6863      	ldr	r3, [r4, #4]
 80086c6:	6123      	str	r3, [r4, #16]
 80086c8:	2300      	movs	r3, #0
 80086ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ce:	e7aa      	b.n	8008626 <_printf_i+0x14e>
 80086d0:	462a      	mov	r2, r5
 80086d2:	4649      	mov	r1, r9
 80086d4:	4640      	mov	r0, r8
 80086d6:	6923      	ldr	r3, [r4, #16]
 80086d8:	47d0      	blx	sl
 80086da:	3001      	adds	r0, #1
 80086dc:	d0ad      	beq.n	800863a <_printf_i+0x162>
 80086de:	6823      	ldr	r3, [r4, #0]
 80086e0:	079b      	lsls	r3, r3, #30
 80086e2:	d413      	bmi.n	800870c <_printf_i+0x234>
 80086e4:	68e0      	ldr	r0, [r4, #12]
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	4298      	cmp	r0, r3
 80086ea:	bfb8      	it	lt
 80086ec:	4618      	movlt	r0, r3
 80086ee:	e7a6      	b.n	800863e <_printf_i+0x166>
 80086f0:	2301      	movs	r3, #1
 80086f2:	4632      	mov	r2, r6
 80086f4:	4649      	mov	r1, r9
 80086f6:	4640      	mov	r0, r8
 80086f8:	47d0      	blx	sl
 80086fa:	3001      	adds	r0, #1
 80086fc:	d09d      	beq.n	800863a <_printf_i+0x162>
 80086fe:	3501      	adds	r5, #1
 8008700:	68e3      	ldr	r3, [r4, #12]
 8008702:	9903      	ldr	r1, [sp, #12]
 8008704:	1a5b      	subs	r3, r3, r1
 8008706:	42ab      	cmp	r3, r5
 8008708:	dcf2      	bgt.n	80086f0 <_printf_i+0x218>
 800870a:	e7eb      	b.n	80086e4 <_printf_i+0x20c>
 800870c:	2500      	movs	r5, #0
 800870e:	f104 0619 	add.w	r6, r4, #25
 8008712:	e7f5      	b.n	8008700 <_printf_i+0x228>
 8008714:	0800a92c 	.word	0x0800a92c
 8008718:	0800a93d 	.word	0x0800a93d

0800871c <std>:
 800871c:	2300      	movs	r3, #0
 800871e:	b510      	push	{r4, lr}
 8008720:	4604      	mov	r4, r0
 8008722:	e9c0 3300 	strd	r3, r3, [r0]
 8008726:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800872a:	6083      	str	r3, [r0, #8]
 800872c:	8181      	strh	r1, [r0, #12]
 800872e:	6643      	str	r3, [r0, #100]	; 0x64
 8008730:	81c2      	strh	r2, [r0, #14]
 8008732:	6183      	str	r3, [r0, #24]
 8008734:	4619      	mov	r1, r3
 8008736:	2208      	movs	r2, #8
 8008738:	305c      	adds	r0, #92	; 0x5c
 800873a:	f000 f8f4 	bl	8008926 <memset>
 800873e:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <std+0x58>)
 8008740:	6224      	str	r4, [r4, #32]
 8008742:	6263      	str	r3, [r4, #36]	; 0x24
 8008744:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <std+0x5c>)
 8008746:	62a3      	str	r3, [r4, #40]	; 0x28
 8008748:	4b0c      	ldr	r3, [pc, #48]	; (800877c <std+0x60>)
 800874a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800874c:	4b0c      	ldr	r3, [pc, #48]	; (8008780 <std+0x64>)
 800874e:	6323      	str	r3, [r4, #48]	; 0x30
 8008750:	4b0c      	ldr	r3, [pc, #48]	; (8008784 <std+0x68>)
 8008752:	429c      	cmp	r4, r3
 8008754:	d006      	beq.n	8008764 <std+0x48>
 8008756:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800875a:	4294      	cmp	r4, r2
 800875c:	d002      	beq.n	8008764 <std+0x48>
 800875e:	33d0      	adds	r3, #208	; 0xd0
 8008760:	429c      	cmp	r4, r3
 8008762:	d105      	bne.n	8008770 <std+0x54>
 8008764:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800876c:	f000 b9ae 	b.w	8008acc <__retarget_lock_init_recursive>
 8008770:	bd10      	pop	{r4, pc}
 8008772:	bf00      	nop
 8008774:	080088a1 	.word	0x080088a1
 8008778:	080088c3 	.word	0x080088c3
 800877c:	080088fb 	.word	0x080088fb
 8008780:	0800891f 	.word	0x0800891f
 8008784:	20001544 	.word	0x20001544

08008788 <stdio_exit_handler>:
 8008788:	4a02      	ldr	r2, [pc, #8]	; (8008794 <stdio_exit_handler+0xc>)
 800878a:	4903      	ldr	r1, [pc, #12]	; (8008798 <stdio_exit_handler+0x10>)
 800878c:	4803      	ldr	r0, [pc, #12]	; (800879c <stdio_exit_handler+0x14>)
 800878e:	f000 b869 	b.w	8008864 <_fwalk_sglue>
 8008792:	bf00      	nop
 8008794:	20000010 	.word	0x20000010
 8008798:	0800a1d5 	.word	0x0800a1d5
 800879c:	2000001c 	.word	0x2000001c

080087a0 <cleanup_stdio>:
 80087a0:	6841      	ldr	r1, [r0, #4]
 80087a2:	4b0c      	ldr	r3, [pc, #48]	; (80087d4 <cleanup_stdio+0x34>)
 80087a4:	b510      	push	{r4, lr}
 80087a6:	4299      	cmp	r1, r3
 80087a8:	4604      	mov	r4, r0
 80087aa:	d001      	beq.n	80087b0 <cleanup_stdio+0x10>
 80087ac:	f001 fd12 	bl	800a1d4 <_fflush_r>
 80087b0:	68a1      	ldr	r1, [r4, #8]
 80087b2:	4b09      	ldr	r3, [pc, #36]	; (80087d8 <cleanup_stdio+0x38>)
 80087b4:	4299      	cmp	r1, r3
 80087b6:	d002      	beq.n	80087be <cleanup_stdio+0x1e>
 80087b8:	4620      	mov	r0, r4
 80087ba:	f001 fd0b 	bl	800a1d4 <_fflush_r>
 80087be:	68e1      	ldr	r1, [r4, #12]
 80087c0:	4b06      	ldr	r3, [pc, #24]	; (80087dc <cleanup_stdio+0x3c>)
 80087c2:	4299      	cmp	r1, r3
 80087c4:	d004      	beq.n	80087d0 <cleanup_stdio+0x30>
 80087c6:	4620      	mov	r0, r4
 80087c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087cc:	f001 bd02 	b.w	800a1d4 <_fflush_r>
 80087d0:	bd10      	pop	{r4, pc}
 80087d2:	bf00      	nop
 80087d4:	20001544 	.word	0x20001544
 80087d8:	200015ac 	.word	0x200015ac
 80087dc:	20001614 	.word	0x20001614

080087e0 <global_stdio_init.part.0>:
 80087e0:	b510      	push	{r4, lr}
 80087e2:	4b0b      	ldr	r3, [pc, #44]	; (8008810 <global_stdio_init.part.0+0x30>)
 80087e4:	4c0b      	ldr	r4, [pc, #44]	; (8008814 <global_stdio_init.part.0+0x34>)
 80087e6:	4a0c      	ldr	r2, [pc, #48]	; (8008818 <global_stdio_init.part.0+0x38>)
 80087e8:	4620      	mov	r0, r4
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	2104      	movs	r1, #4
 80087ee:	2200      	movs	r2, #0
 80087f0:	f7ff ff94 	bl	800871c <std>
 80087f4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80087f8:	2201      	movs	r2, #1
 80087fa:	2109      	movs	r1, #9
 80087fc:	f7ff ff8e 	bl	800871c <std>
 8008800:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008804:	2202      	movs	r2, #2
 8008806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800880a:	2112      	movs	r1, #18
 800880c:	f7ff bf86 	b.w	800871c <std>
 8008810:	2000167c 	.word	0x2000167c
 8008814:	20001544 	.word	0x20001544
 8008818:	08008789 	.word	0x08008789

0800881c <__sfp_lock_acquire>:
 800881c:	4801      	ldr	r0, [pc, #4]	; (8008824 <__sfp_lock_acquire+0x8>)
 800881e:	f000 b956 	b.w	8008ace <__retarget_lock_acquire_recursive>
 8008822:	bf00      	nop
 8008824:	20001685 	.word	0x20001685

08008828 <__sfp_lock_release>:
 8008828:	4801      	ldr	r0, [pc, #4]	; (8008830 <__sfp_lock_release+0x8>)
 800882a:	f000 b951 	b.w	8008ad0 <__retarget_lock_release_recursive>
 800882e:	bf00      	nop
 8008830:	20001685 	.word	0x20001685

08008834 <__sinit>:
 8008834:	b510      	push	{r4, lr}
 8008836:	4604      	mov	r4, r0
 8008838:	f7ff fff0 	bl	800881c <__sfp_lock_acquire>
 800883c:	6a23      	ldr	r3, [r4, #32]
 800883e:	b11b      	cbz	r3, 8008848 <__sinit+0x14>
 8008840:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008844:	f7ff bff0 	b.w	8008828 <__sfp_lock_release>
 8008848:	4b04      	ldr	r3, [pc, #16]	; (800885c <__sinit+0x28>)
 800884a:	6223      	str	r3, [r4, #32]
 800884c:	4b04      	ldr	r3, [pc, #16]	; (8008860 <__sinit+0x2c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1f5      	bne.n	8008840 <__sinit+0xc>
 8008854:	f7ff ffc4 	bl	80087e0 <global_stdio_init.part.0>
 8008858:	e7f2      	b.n	8008840 <__sinit+0xc>
 800885a:	bf00      	nop
 800885c:	080087a1 	.word	0x080087a1
 8008860:	2000167c 	.word	0x2000167c

08008864 <_fwalk_sglue>:
 8008864:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008868:	4607      	mov	r7, r0
 800886a:	4688      	mov	r8, r1
 800886c:	4614      	mov	r4, r2
 800886e:	2600      	movs	r6, #0
 8008870:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008874:	f1b9 0901 	subs.w	r9, r9, #1
 8008878:	d505      	bpl.n	8008886 <_fwalk_sglue+0x22>
 800887a:	6824      	ldr	r4, [r4, #0]
 800887c:	2c00      	cmp	r4, #0
 800887e:	d1f7      	bne.n	8008870 <_fwalk_sglue+0xc>
 8008880:	4630      	mov	r0, r6
 8008882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008886:	89ab      	ldrh	r3, [r5, #12]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d907      	bls.n	800889c <_fwalk_sglue+0x38>
 800888c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008890:	3301      	adds	r3, #1
 8008892:	d003      	beq.n	800889c <_fwalk_sglue+0x38>
 8008894:	4629      	mov	r1, r5
 8008896:	4638      	mov	r0, r7
 8008898:	47c0      	blx	r8
 800889a:	4306      	orrs	r6, r0
 800889c:	3568      	adds	r5, #104	; 0x68
 800889e:	e7e9      	b.n	8008874 <_fwalk_sglue+0x10>

080088a0 <__sread>:
 80088a0:	b510      	push	{r4, lr}
 80088a2:	460c      	mov	r4, r1
 80088a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088a8:	f000 f8c2 	bl	8008a30 <_read_r>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	bfab      	itete	ge
 80088b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088b2:	89a3      	ldrhlt	r3, [r4, #12]
 80088b4:	181b      	addge	r3, r3, r0
 80088b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088ba:	bfac      	ite	ge
 80088bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80088be:	81a3      	strhlt	r3, [r4, #12]
 80088c0:	bd10      	pop	{r4, pc}

080088c2 <__swrite>:
 80088c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c6:	461f      	mov	r7, r3
 80088c8:	898b      	ldrh	r3, [r1, #12]
 80088ca:	4605      	mov	r5, r0
 80088cc:	05db      	lsls	r3, r3, #23
 80088ce:	460c      	mov	r4, r1
 80088d0:	4616      	mov	r6, r2
 80088d2:	d505      	bpl.n	80088e0 <__swrite+0x1e>
 80088d4:	2302      	movs	r3, #2
 80088d6:	2200      	movs	r2, #0
 80088d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088dc:	f000 f896 	bl	8008a0c <_lseek_r>
 80088e0:	89a3      	ldrh	r3, [r4, #12]
 80088e2:	4632      	mov	r2, r6
 80088e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80088e8:	81a3      	strh	r3, [r4, #12]
 80088ea:	4628      	mov	r0, r5
 80088ec:	463b      	mov	r3, r7
 80088ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80088f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088f6:	f000 b8ad 	b.w	8008a54 <_write_r>

080088fa <__sseek>:
 80088fa:	b510      	push	{r4, lr}
 80088fc:	460c      	mov	r4, r1
 80088fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008902:	f000 f883 	bl	8008a0c <_lseek_r>
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	89a3      	ldrh	r3, [r4, #12]
 800890a:	bf15      	itete	ne
 800890c:	6560      	strne	r0, [r4, #84]	; 0x54
 800890e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008916:	81a3      	strheq	r3, [r4, #12]
 8008918:	bf18      	it	ne
 800891a:	81a3      	strhne	r3, [r4, #12]
 800891c:	bd10      	pop	{r4, pc}

0800891e <__sclose>:
 800891e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008922:	f000 b80d 	b.w	8008940 <_close_r>

08008926 <memset>:
 8008926:	4603      	mov	r3, r0
 8008928:	4402      	add	r2, r0
 800892a:	4293      	cmp	r3, r2
 800892c:	d100      	bne.n	8008930 <memset+0xa>
 800892e:	4770      	bx	lr
 8008930:	f803 1b01 	strb.w	r1, [r3], #1
 8008934:	e7f9      	b.n	800892a <memset+0x4>
	...

08008938 <_localeconv_r>:
 8008938:	4800      	ldr	r0, [pc, #0]	; (800893c <_localeconv_r+0x4>)
 800893a:	4770      	bx	lr
 800893c:	2000015c 	.word	0x2000015c

08008940 <_close_r>:
 8008940:	b538      	push	{r3, r4, r5, lr}
 8008942:	2300      	movs	r3, #0
 8008944:	4d05      	ldr	r5, [pc, #20]	; (800895c <_close_r+0x1c>)
 8008946:	4604      	mov	r4, r0
 8008948:	4608      	mov	r0, r1
 800894a:	602b      	str	r3, [r5, #0]
 800894c:	f7fa fe4a 	bl	80035e4 <_close>
 8008950:	1c43      	adds	r3, r0, #1
 8008952:	d102      	bne.n	800895a <_close_r+0x1a>
 8008954:	682b      	ldr	r3, [r5, #0]
 8008956:	b103      	cbz	r3, 800895a <_close_r+0x1a>
 8008958:	6023      	str	r3, [r4, #0]
 800895a:	bd38      	pop	{r3, r4, r5, pc}
 800895c:	20001680 	.word	0x20001680

08008960 <_reclaim_reent>:
 8008960:	4b29      	ldr	r3, [pc, #164]	; (8008a08 <_reclaim_reent+0xa8>)
 8008962:	b570      	push	{r4, r5, r6, lr}
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4604      	mov	r4, r0
 8008968:	4283      	cmp	r3, r0
 800896a:	d04b      	beq.n	8008a04 <_reclaim_reent+0xa4>
 800896c:	69c3      	ldr	r3, [r0, #28]
 800896e:	b143      	cbz	r3, 8008982 <_reclaim_reent+0x22>
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d144      	bne.n	8008a00 <_reclaim_reent+0xa0>
 8008976:	69e3      	ldr	r3, [r4, #28]
 8008978:	6819      	ldr	r1, [r3, #0]
 800897a:	b111      	cbz	r1, 8008982 <_reclaim_reent+0x22>
 800897c:	4620      	mov	r0, r4
 800897e:	f000 ff33 	bl	80097e8 <_free_r>
 8008982:	6961      	ldr	r1, [r4, #20]
 8008984:	b111      	cbz	r1, 800898c <_reclaim_reent+0x2c>
 8008986:	4620      	mov	r0, r4
 8008988:	f000 ff2e 	bl	80097e8 <_free_r>
 800898c:	69e1      	ldr	r1, [r4, #28]
 800898e:	b111      	cbz	r1, 8008996 <_reclaim_reent+0x36>
 8008990:	4620      	mov	r0, r4
 8008992:	f000 ff29 	bl	80097e8 <_free_r>
 8008996:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008998:	b111      	cbz	r1, 80089a0 <_reclaim_reent+0x40>
 800899a:	4620      	mov	r0, r4
 800899c:	f000 ff24 	bl	80097e8 <_free_r>
 80089a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089a2:	b111      	cbz	r1, 80089aa <_reclaim_reent+0x4a>
 80089a4:	4620      	mov	r0, r4
 80089a6:	f000 ff1f 	bl	80097e8 <_free_r>
 80089aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80089ac:	b111      	cbz	r1, 80089b4 <_reclaim_reent+0x54>
 80089ae:	4620      	mov	r0, r4
 80089b0:	f000 ff1a 	bl	80097e8 <_free_r>
 80089b4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80089b6:	b111      	cbz	r1, 80089be <_reclaim_reent+0x5e>
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 ff15 	bl	80097e8 <_free_r>
 80089be:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80089c0:	b111      	cbz	r1, 80089c8 <_reclaim_reent+0x68>
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 ff10 	bl	80097e8 <_free_r>
 80089c8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80089ca:	b111      	cbz	r1, 80089d2 <_reclaim_reent+0x72>
 80089cc:	4620      	mov	r0, r4
 80089ce:	f000 ff0b 	bl	80097e8 <_free_r>
 80089d2:	6a23      	ldr	r3, [r4, #32]
 80089d4:	b1b3      	cbz	r3, 8008a04 <_reclaim_reent+0xa4>
 80089d6:	4620      	mov	r0, r4
 80089d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80089dc:	4718      	bx	r3
 80089de:	5949      	ldr	r1, [r1, r5]
 80089e0:	b941      	cbnz	r1, 80089f4 <_reclaim_reent+0x94>
 80089e2:	3504      	adds	r5, #4
 80089e4:	69e3      	ldr	r3, [r4, #28]
 80089e6:	2d80      	cmp	r5, #128	; 0x80
 80089e8:	68d9      	ldr	r1, [r3, #12]
 80089ea:	d1f8      	bne.n	80089de <_reclaim_reent+0x7e>
 80089ec:	4620      	mov	r0, r4
 80089ee:	f000 fefb 	bl	80097e8 <_free_r>
 80089f2:	e7c0      	b.n	8008976 <_reclaim_reent+0x16>
 80089f4:	680e      	ldr	r6, [r1, #0]
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 fef6 	bl	80097e8 <_free_r>
 80089fc:	4631      	mov	r1, r6
 80089fe:	e7ef      	b.n	80089e0 <_reclaim_reent+0x80>
 8008a00:	2500      	movs	r5, #0
 8008a02:	e7ef      	b.n	80089e4 <_reclaim_reent+0x84>
 8008a04:	bd70      	pop	{r4, r5, r6, pc}
 8008a06:	bf00      	nop
 8008a08:	20000068 	.word	0x20000068

08008a0c <_lseek_r>:
 8008a0c:	b538      	push	{r3, r4, r5, lr}
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	4611      	mov	r1, r2
 8008a14:	2200      	movs	r2, #0
 8008a16:	4d05      	ldr	r5, [pc, #20]	; (8008a2c <_lseek_r+0x20>)
 8008a18:	602a      	str	r2, [r5, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f7fa fe06 	bl	800362c <_lseek>
 8008a20:	1c43      	adds	r3, r0, #1
 8008a22:	d102      	bne.n	8008a2a <_lseek_r+0x1e>
 8008a24:	682b      	ldr	r3, [r5, #0]
 8008a26:	b103      	cbz	r3, 8008a2a <_lseek_r+0x1e>
 8008a28:	6023      	str	r3, [r4, #0]
 8008a2a:	bd38      	pop	{r3, r4, r5, pc}
 8008a2c:	20001680 	.word	0x20001680

08008a30 <_read_r>:
 8008a30:	b538      	push	{r3, r4, r5, lr}
 8008a32:	4604      	mov	r4, r0
 8008a34:	4608      	mov	r0, r1
 8008a36:	4611      	mov	r1, r2
 8008a38:	2200      	movs	r2, #0
 8008a3a:	4d05      	ldr	r5, [pc, #20]	; (8008a50 <_read_r+0x20>)
 8008a3c:	602a      	str	r2, [r5, #0]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f7fa fd97 	bl	8003572 <_read>
 8008a44:	1c43      	adds	r3, r0, #1
 8008a46:	d102      	bne.n	8008a4e <_read_r+0x1e>
 8008a48:	682b      	ldr	r3, [r5, #0]
 8008a4a:	b103      	cbz	r3, 8008a4e <_read_r+0x1e>
 8008a4c:	6023      	str	r3, [r4, #0]
 8008a4e:	bd38      	pop	{r3, r4, r5, pc}
 8008a50:	20001680 	.word	0x20001680

08008a54 <_write_r>:
 8008a54:	b538      	push	{r3, r4, r5, lr}
 8008a56:	4604      	mov	r4, r0
 8008a58:	4608      	mov	r0, r1
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	4d05      	ldr	r5, [pc, #20]	; (8008a74 <_write_r+0x20>)
 8008a60:	602a      	str	r2, [r5, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	f7fa fda2 	bl	80035ac <_write>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_write_r+0x1e>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_write_r+0x1e>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	20001680 	.word	0x20001680

08008a78 <__errno>:
 8008a78:	4b01      	ldr	r3, [pc, #4]	; (8008a80 <__errno+0x8>)
 8008a7a:	6818      	ldr	r0, [r3, #0]
 8008a7c:	4770      	bx	lr
 8008a7e:	bf00      	nop
 8008a80:	20000068 	.word	0x20000068

08008a84 <__libc_init_array>:
 8008a84:	b570      	push	{r4, r5, r6, lr}
 8008a86:	2600      	movs	r6, #0
 8008a88:	4d0c      	ldr	r5, [pc, #48]	; (8008abc <__libc_init_array+0x38>)
 8008a8a:	4c0d      	ldr	r4, [pc, #52]	; (8008ac0 <__libc_init_array+0x3c>)
 8008a8c:	1b64      	subs	r4, r4, r5
 8008a8e:	10a4      	asrs	r4, r4, #2
 8008a90:	42a6      	cmp	r6, r4
 8008a92:	d109      	bne.n	8008aa8 <__libc_init_array+0x24>
 8008a94:	f001 fee0 	bl	800a858 <_init>
 8008a98:	2600      	movs	r6, #0
 8008a9a:	4d0a      	ldr	r5, [pc, #40]	; (8008ac4 <__libc_init_array+0x40>)
 8008a9c:	4c0a      	ldr	r4, [pc, #40]	; (8008ac8 <__libc_init_array+0x44>)
 8008a9e:	1b64      	subs	r4, r4, r5
 8008aa0:	10a4      	asrs	r4, r4, #2
 8008aa2:	42a6      	cmp	r6, r4
 8008aa4:	d105      	bne.n	8008ab2 <__libc_init_array+0x2e>
 8008aa6:	bd70      	pop	{r4, r5, r6, pc}
 8008aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aac:	4798      	blx	r3
 8008aae:	3601      	adds	r6, #1
 8008ab0:	e7ee      	b.n	8008a90 <__libc_init_array+0xc>
 8008ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ab6:	4798      	blx	r3
 8008ab8:	3601      	adds	r6, #1
 8008aba:	e7f2      	b.n	8008aa2 <__libc_init_array+0x1e>
 8008abc:	0800ac8c 	.word	0x0800ac8c
 8008ac0:	0800ac8c 	.word	0x0800ac8c
 8008ac4:	0800ac8c 	.word	0x0800ac8c
 8008ac8:	0800ac94 	.word	0x0800ac94

08008acc <__retarget_lock_init_recursive>:
 8008acc:	4770      	bx	lr

08008ace <__retarget_lock_acquire_recursive>:
 8008ace:	4770      	bx	lr

08008ad0 <__retarget_lock_release_recursive>:
 8008ad0:	4770      	bx	lr

08008ad2 <memchr>:
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	b510      	push	{r4, lr}
 8008ad6:	b2c9      	uxtb	r1, r1
 8008ad8:	4402      	add	r2, r0
 8008ada:	4293      	cmp	r3, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	d101      	bne.n	8008ae4 <memchr+0x12>
 8008ae0:	2000      	movs	r0, #0
 8008ae2:	e003      	b.n	8008aec <memchr+0x1a>
 8008ae4:	7804      	ldrb	r4, [r0, #0]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	428c      	cmp	r4, r1
 8008aea:	d1f6      	bne.n	8008ada <memchr+0x8>
 8008aec:	bd10      	pop	{r4, pc}

08008aee <memcpy>:
 8008aee:	440a      	add	r2, r1
 8008af0:	4291      	cmp	r1, r2
 8008af2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008af6:	d100      	bne.n	8008afa <memcpy+0xc>
 8008af8:	4770      	bx	lr
 8008afa:	b510      	push	{r4, lr}
 8008afc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b00:	4291      	cmp	r1, r2
 8008b02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b06:	d1f9      	bne.n	8008afc <memcpy+0xe>
 8008b08:	bd10      	pop	{r4, pc}

08008b0a <quorem>:
 8008b0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b0e:	6903      	ldr	r3, [r0, #16]
 8008b10:	690c      	ldr	r4, [r1, #16]
 8008b12:	4607      	mov	r7, r0
 8008b14:	42a3      	cmp	r3, r4
 8008b16:	db7f      	blt.n	8008c18 <quorem+0x10e>
 8008b18:	3c01      	subs	r4, #1
 8008b1a:	f100 0514 	add.w	r5, r0, #20
 8008b1e:	f101 0814 	add.w	r8, r1, #20
 8008b22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b26:	9301      	str	r3, [sp, #4]
 8008b28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008b2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b30:	3301      	adds	r3, #1
 8008b32:	429a      	cmp	r2, r3
 8008b34:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008b3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008b40:	d331      	bcc.n	8008ba6 <quorem+0x9c>
 8008b42:	f04f 0e00 	mov.w	lr, #0
 8008b46:	4640      	mov	r0, r8
 8008b48:	46ac      	mov	ip, r5
 8008b4a:	46f2      	mov	sl, lr
 8008b4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008b50:	b293      	uxth	r3, r2
 8008b52:	fb06 e303 	mla	r3, r6, r3, lr
 8008b56:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b5a:	0c1a      	lsrs	r2, r3, #16
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	fb06 220e 	mla	r2, r6, lr, r2
 8008b62:	ebaa 0303 	sub.w	r3, sl, r3
 8008b66:	f8dc a000 	ldr.w	sl, [ip]
 8008b6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008b6e:	fa1f fa8a 	uxth.w	sl, sl
 8008b72:	4453      	add	r3, sl
 8008b74:	f8dc a000 	ldr.w	sl, [ip]
 8008b78:	b292      	uxth	r2, r2
 8008b7a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008b7e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b88:	4581      	cmp	r9, r0
 8008b8a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008b8e:	f84c 3b04 	str.w	r3, [ip], #4
 8008b92:	d2db      	bcs.n	8008b4c <quorem+0x42>
 8008b94:	f855 300b 	ldr.w	r3, [r5, fp]
 8008b98:	b92b      	cbnz	r3, 8008ba6 <quorem+0x9c>
 8008b9a:	9b01      	ldr	r3, [sp, #4]
 8008b9c:	3b04      	subs	r3, #4
 8008b9e:	429d      	cmp	r5, r3
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	d32d      	bcc.n	8008c00 <quorem+0xf6>
 8008ba4:	613c      	str	r4, [r7, #16]
 8008ba6:	4638      	mov	r0, r7
 8008ba8:	f001 f994 	bl	8009ed4 <__mcmp>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	db23      	blt.n	8008bf8 <quorem+0xee>
 8008bb0:	4629      	mov	r1, r5
 8008bb2:	2000      	movs	r0, #0
 8008bb4:	3601      	adds	r6, #1
 8008bb6:	f858 2b04 	ldr.w	r2, [r8], #4
 8008bba:	f8d1 c000 	ldr.w	ip, [r1]
 8008bbe:	b293      	uxth	r3, r2
 8008bc0:	1ac3      	subs	r3, r0, r3
 8008bc2:	0c12      	lsrs	r2, r2, #16
 8008bc4:	fa1f f08c 	uxth.w	r0, ip
 8008bc8:	4403      	add	r3, r0
 8008bca:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008bce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008bd2:	b29b      	uxth	r3, r3
 8008bd4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008bd8:	45c1      	cmp	r9, r8
 8008bda:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008bde:	f841 3b04 	str.w	r3, [r1], #4
 8008be2:	d2e8      	bcs.n	8008bb6 <quorem+0xac>
 8008be4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008be8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bec:	b922      	cbnz	r2, 8008bf8 <quorem+0xee>
 8008bee:	3b04      	subs	r3, #4
 8008bf0:	429d      	cmp	r5, r3
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	d30a      	bcc.n	8008c0c <quorem+0x102>
 8008bf6:	613c      	str	r4, [r7, #16]
 8008bf8:	4630      	mov	r0, r6
 8008bfa:	b003      	add	sp, #12
 8008bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c00:	6812      	ldr	r2, [r2, #0]
 8008c02:	3b04      	subs	r3, #4
 8008c04:	2a00      	cmp	r2, #0
 8008c06:	d1cd      	bne.n	8008ba4 <quorem+0x9a>
 8008c08:	3c01      	subs	r4, #1
 8008c0a:	e7c8      	b.n	8008b9e <quorem+0x94>
 8008c0c:	6812      	ldr	r2, [r2, #0]
 8008c0e:	3b04      	subs	r3, #4
 8008c10:	2a00      	cmp	r2, #0
 8008c12:	d1f0      	bne.n	8008bf6 <quorem+0xec>
 8008c14:	3c01      	subs	r4, #1
 8008c16:	e7eb      	b.n	8008bf0 <quorem+0xe6>
 8008c18:	2000      	movs	r0, #0
 8008c1a:	e7ee      	b.n	8008bfa <quorem+0xf0>
 8008c1c:	0000      	movs	r0, r0
	...

08008c20 <_dtoa_r>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	4616      	mov	r6, r2
 8008c26:	461f      	mov	r7, r3
 8008c28:	69c4      	ldr	r4, [r0, #28]
 8008c2a:	b099      	sub	sp, #100	; 0x64
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008c32:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008c36:	b974      	cbnz	r4, 8008c56 <_dtoa_r+0x36>
 8008c38:	2010      	movs	r0, #16
 8008c3a:	f000 fe1d 	bl	8009878 <malloc>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	61e8      	str	r0, [r5, #28]
 8008c42:	b920      	cbnz	r0, 8008c4e <_dtoa_r+0x2e>
 8008c44:	21ef      	movs	r1, #239	; 0xef
 8008c46:	4bac      	ldr	r3, [pc, #688]	; (8008ef8 <_dtoa_r+0x2d8>)
 8008c48:	48ac      	ldr	r0, [pc, #688]	; (8008efc <_dtoa_r+0x2dc>)
 8008c4a:	f001 fafb 	bl	800a244 <__assert_func>
 8008c4e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008c52:	6004      	str	r4, [r0, #0]
 8008c54:	60c4      	str	r4, [r0, #12]
 8008c56:	69eb      	ldr	r3, [r5, #28]
 8008c58:	6819      	ldr	r1, [r3, #0]
 8008c5a:	b151      	cbz	r1, 8008c72 <_dtoa_r+0x52>
 8008c5c:	685a      	ldr	r2, [r3, #4]
 8008c5e:	2301      	movs	r3, #1
 8008c60:	4093      	lsls	r3, r2
 8008c62:	604a      	str	r2, [r1, #4]
 8008c64:	608b      	str	r3, [r1, #8]
 8008c66:	4628      	mov	r0, r5
 8008c68:	f000 fefa 	bl	8009a60 <_Bfree>
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	69eb      	ldr	r3, [r5, #28]
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	1e3b      	subs	r3, r7, #0
 8008c74:	bfaf      	iteee	ge
 8008c76:	2300      	movge	r3, #0
 8008c78:	2201      	movlt	r2, #1
 8008c7a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008c7e:	9305      	strlt	r3, [sp, #20]
 8008c80:	bfa8      	it	ge
 8008c82:	f8c8 3000 	strge.w	r3, [r8]
 8008c86:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008c8a:	4b9d      	ldr	r3, [pc, #628]	; (8008f00 <_dtoa_r+0x2e0>)
 8008c8c:	bfb8      	it	lt
 8008c8e:	f8c8 2000 	strlt.w	r2, [r8]
 8008c92:	ea33 0309 	bics.w	r3, r3, r9
 8008c96:	d119      	bne.n	8008ccc <_dtoa_r+0xac>
 8008c98:	f242 730f 	movw	r3, #9999	; 0x270f
 8008c9c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ca4:	4333      	orrs	r3, r6
 8008ca6:	f000 8589 	beq.w	80097bc <_dtoa_r+0xb9c>
 8008caa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008cac:	b953      	cbnz	r3, 8008cc4 <_dtoa_r+0xa4>
 8008cae:	4b95      	ldr	r3, [pc, #596]	; (8008f04 <_dtoa_r+0x2e4>)
 8008cb0:	e023      	b.n	8008cfa <_dtoa_r+0xda>
 8008cb2:	4b95      	ldr	r3, [pc, #596]	; (8008f08 <_dtoa_r+0x2e8>)
 8008cb4:	9303      	str	r3, [sp, #12]
 8008cb6:	3308      	adds	r3, #8
 8008cb8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008cba:	6013      	str	r3, [r2, #0]
 8008cbc:	9803      	ldr	r0, [sp, #12]
 8008cbe:	b019      	add	sp, #100	; 0x64
 8008cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc4:	4b8f      	ldr	r3, [pc, #572]	; (8008f04 <_dtoa_r+0x2e4>)
 8008cc6:	9303      	str	r3, [sp, #12]
 8008cc8:	3303      	adds	r3, #3
 8008cca:	e7f5      	b.n	8008cb8 <_dtoa_r+0x98>
 8008ccc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008cd0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008cd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2300      	movs	r3, #0
 8008cdc:	f7f7 fe64 	bl	80009a8 <__aeabi_dcmpeq>
 8008ce0:	4680      	mov	r8, r0
 8008ce2:	b160      	cbz	r0, 8008cfe <_dtoa_r+0xde>
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008ce8:	6013      	str	r3, [r2, #0]
 8008cea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	f000 8562 	beq.w	80097b6 <_dtoa_r+0xb96>
 8008cf2:	4b86      	ldr	r3, [pc, #536]	; (8008f0c <_dtoa_r+0x2ec>)
 8008cf4:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008cf6:	6013      	str	r3, [r2, #0]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	9303      	str	r3, [sp, #12]
 8008cfc:	e7de      	b.n	8008cbc <_dtoa_r+0x9c>
 8008cfe:	ab16      	add	r3, sp, #88	; 0x58
 8008d00:	9301      	str	r3, [sp, #4]
 8008d02:	ab17      	add	r3, sp, #92	; 0x5c
 8008d04:	9300      	str	r3, [sp, #0]
 8008d06:	4628      	mov	r0, r5
 8008d08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008d0c:	f001 f98a 	bl	800a024 <__d2b>
 8008d10:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008d14:	4682      	mov	sl, r0
 8008d16:	2c00      	cmp	r4, #0
 8008d18:	d07e      	beq.n	8008e18 <_dtoa_r+0x1f8>
 8008d1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008d1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d20:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d28:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008d2c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d30:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008d34:	4619      	mov	r1, r3
 8008d36:	2200      	movs	r2, #0
 8008d38:	4b75      	ldr	r3, [pc, #468]	; (8008f10 <_dtoa_r+0x2f0>)
 8008d3a:	f7f7 fa15 	bl	8000168 <__aeabi_dsub>
 8008d3e:	a368      	add	r3, pc, #416	; (adr r3, 8008ee0 <_dtoa_r+0x2c0>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f7f7 fbc8 	bl	80004d8 <__aeabi_dmul>
 8008d48:	a367      	add	r3, pc, #412	; (adr r3, 8008ee8 <_dtoa_r+0x2c8>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	f7f7 fa0d 	bl	800016c <__adddf3>
 8008d52:	4606      	mov	r6, r0
 8008d54:	4620      	mov	r0, r4
 8008d56:	460f      	mov	r7, r1
 8008d58:	f7f7 fb54 	bl	8000404 <__aeabi_i2d>
 8008d5c:	a364      	add	r3, pc, #400	; (adr r3, 8008ef0 <_dtoa_r+0x2d0>)
 8008d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d62:	f7f7 fbb9 	bl	80004d8 <__aeabi_dmul>
 8008d66:	4602      	mov	r2, r0
 8008d68:	460b      	mov	r3, r1
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	4639      	mov	r1, r7
 8008d6e:	f7f7 f9fd 	bl	800016c <__adddf3>
 8008d72:	4606      	mov	r6, r0
 8008d74:	460f      	mov	r7, r1
 8008d76:	f7f7 fe5f 	bl	8000a38 <__aeabi_d2iz>
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	4683      	mov	fp, r0
 8008d7e:	2300      	movs	r3, #0
 8008d80:	4630      	mov	r0, r6
 8008d82:	4639      	mov	r1, r7
 8008d84:	f7f7 fe1a 	bl	80009bc <__aeabi_dcmplt>
 8008d88:	b148      	cbz	r0, 8008d9e <_dtoa_r+0x17e>
 8008d8a:	4658      	mov	r0, fp
 8008d8c:	f7f7 fb3a 	bl	8000404 <__aeabi_i2d>
 8008d90:	4632      	mov	r2, r6
 8008d92:	463b      	mov	r3, r7
 8008d94:	f7f7 fe08 	bl	80009a8 <__aeabi_dcmpeq>
 8008d98:	b908      	cbnz	r0, 8008d9e <_dtoa_r+0x17e>
 8008d9a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008d9e:	f1bb 0f16 	cmp.w	fp, #22
 8008da2:	d857      	bhi.n	8008e54 <_dtoa_r+0x234>
 8008da4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008da8:	4b5a      	ldr	r3, [pc, #360]	; (8008f14 <_dtoa_r+0x2f4>)
 8008daa:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db2:	f7f7 fe03 	bl	80009bc <__aeabi_dcmplt>
 8008db6:	2800      	cmp	r0, #0
 8008db8:	d04e      	beq.n	8008e58 <_dtoa_r+0x238>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008dc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008dc2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008dc4:	1b1b      	subs	r3, r3, r4
 8008dc6:	1e5a      	subs	r2, r3, #1
 8008dc8:	bf46      	itte	mi
 8008dca:	f1c3 0901 	rsbmi	r9, r3, #1
 8008dce:	2300      	movmi	r3, #0
 8008dd0:	f04f 0900 	movpl.w	r9, #0
 8008dd4:	9209      	str	r2, [sp, #36]	; 0x24
 8008dd6:	bf48      	it	mi
 8008dd8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008dda:	f1bb 0f00 	cmp.w	fp, #0
 8008dde:	db3d      	blt.n	8008e5c <_dtoa_r+0x23c>
 8008de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008de6:	445b      	add	r3, fp
 8008de8:	9309      	str	r3, [sp, #36]	; 0x24
 8008dea:	2300      	movs	r3, #0
 8008dec:	930a      	str	r3, [sp, #40]	; 0x28
 8008dee:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008df0:	2b09      	cmp	r3, #9
 8008df2:	d867      	bhi.n	8008ec4 <_dtoa_r+0x2a4>
 8008df4:	2b05      	cmp	r3, #5
 8008df6:	bfc4      	itt	gt
 8008df8:	3b04      	subgt	r3, #4
 8008dfa:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008dfc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008dfe:	bfc8      	it	gt
 8008e00:	2400      	movgt	r4, #0
 8008e02:	f1a3 0302 	sub.w	r3, r3, #2
 8008e06:	bfd8      	it	le
 8008e08:	2401      	movle	r4, #1
 8008e0a:	2b03      	cmp	r3, #3
 8008e0c:	f200 8086 	bhi.w	8008f1c <_dtoa_r+0x2fc>
 8008e10:	e8df f003 	tbb	[pc, r3]
 8008e14:	5637392c 	.word	0x5637392c
 8008e18:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008e1c:	441c      	add	r4, r3
 8008e1e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008e22:	2b20      	cmp	r3, #32
 8008e24:	bfc1      	itttt	gt
 8008e26:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008e2a:	fa09 f903 	lslgt.w	r9, r9, r3
 8008e2e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008e32:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008e36:	bfd6      	itet	le
 8008e38:	f1c3 0320 	rsble	r3, r3, #32
 8008e3c:	ea49 0003 	orrgt.w	r0, r9, r3
 8008e40:	fa06 f003 	lslle.w	r0, r6, r3
 8008e44:	f7f7 face 	bl	80003e4 <__aeabi_ui2d>
 8008e48:	2201      	movs	r2, #1
 8008e4a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008e4e:	3c01      	subs	r4, #1
 8008e50:	9213      	str	r2, [sp, #76]	; 0x4c
 8008e52:	e76f      	b.n	8008d34 <_dtoa_r+0x114>
 8008e54:	2301      	movs	r3, #1
 8008e56:	e7b3      	b.n	8008dc0 <_dtoa_r+0x1a0>
 8008e58:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e5a:	e7b2      	b.n	8008dc2 <_dtoa_r+0x1a2>
 8008e5c:	f1cb 0300 	rsb	r3, fp, #0
 8008e60:	930a      	str	r3, [sp, #40]	; 0x28
 8008e62:	2300      	movs	r3, #0
 8008e64:	eba9 090b 	sub.w	r9, r9, fp
 8008e68:	930e      	str	r3, [sp, #56]	; 0x38
 8008e6a:	e7c0      	b.n	8008dee <_dtoa_r+0x1ce>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e70:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	dc55      	bgt.n	8008f22 <_dtoa_r+0x302>
 8008e76:	2301      	movs	r3, #1
 8008e78:	461a      	mov	r2, r3
 8008e7a:	9306      	str	r3, [sp, #24]
 8008e7c:	9308      	str	r3, [sp, #32]
 8008e7e:	9223      	str	r2, [sp, #140]	; 0x8c
 8008e80:	e00b      	b.n	8008e9a <_dtoa_r+0x27a>
 8008e82:	2301      	movs	r3, #1
 8008e84:	e7f3      	b.n	8008e6e <_dtoa_r+0x24e>
 8008e86:	2300      	movs	r3, #0
 8008e88:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e8a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008e8c:	445b      	add	r3, fp
 8008e8e:	9306      	str	r3, [sp, #24]
 8008e90:	3301      	adds	r3, #1
 8008e92:	2b01      	cmp	r3, #1
 8008e94:	9308      	str	r3, [sp, #32]
 8008e96:	bfb8      	it	lt
 8008e98:	2301      	movlt	r3, #1
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	2204      	movs	r2, #4
 8008e9e:	69e8      	ldr	r0, [r5, #28]
 8008ea0:	f102 0614 	add.w	r6, r2, #20
 8008ea4:	429e      	cmp	r6, r3
 8008ea6:	d940      	bls.n	8008f2a <_dtoa_r+0x30a>
 8008ea8:	6041      	str	r1, [r0, #4]
 8008eaa:	4628      	mov	r0, r5
 8008eac:	f000 fd98 	bl	80099e0 <_Balloc>
 8008eb0:	9003      	str	r0, [sp, #12]
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	d13c      	bne.n	8008f30 <_dtoa_r+0x310>
 8008eb6:	4602      	mov	r2, r0
 8008eb8:	f240 11af 	movw	r1, #431	; 0x1af
 8008ebc:	4b16      	ldr	r3, [pc, #88]	; (8008f18 <_dtoa_r+0x2f8>)
 8008ebe:	e6c3      	b.n	8008c48 <_dtoa_r+0x28>
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	e7e1      	b.n	8008e88 <_dtoa_r+0x268>
 8008ec4:	2401      	movs	r4, #1
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	940b      	str	r4, [sp, #44]	; 0x2c
 8008eca:	9322      	str	r3, [sp, #136]	; 0x88
 8008ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	9306      	str	r3, [sp, #24]
 8008ed4:	9308      	str	r3, [sp, #32]
 8008ed6:	2312      	movs	r3, #18
 8008ed8:	e7d1      	b.n	8008e7e <_dtoa_r+0x25e>
 8008eda:	bf00      	nop
 8008edc:	f3af 8000 	nop.w
 8008ee0:	636f4361 	.word	0x636f4361
 8008ee4:	3fd287a7 	.word	0x3fd287a7
 8008ee8:	8b60c8b3 	.word	0x8b60c8b3
 8008eec:	3fc68a28 	.word	0x3fc68a28
 8008ef0:	509f79fb 	.word	0x509f79fb
 8008ef4:	3fd34413 	.word	0x3fd34413
 8008ef8:	0800a95b 	.word	0x0800a95b
 8008efc:	0800a972 	.word	0x0800a972
 8008f00:	7ff00000 	.word	0x7ff00000
 8008f04:	0800a957 	.word	0x0800a957
 8008f08:	0800a94e 	.word	0x0800a94e
 8008f0c:	0800a92b 	.word	0x0800a92b
 8008f10:	3ff80000 	.word	0x3ff80000
 8008f14:	0800aa60 	.word	0x0800aa60
 8008f18:	0800a9ca 	.word	0x0800a9ca
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f20:	e7d4      	b.n	8008ecc <_dtoa_r+0x2ac>
 8008f22:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f24:	9306      	str	r3, [sp, #24]
 8008f26:	9308      	str	r3, [sp, #32]
 8008f28:	e7b7      	b.n	8008e9a <_dtoa_r+0x27a>
 8008f2a:	3101      	adds	r1, #1
 8008f2c:	0052      	lsls	r2, r2, #1
 8008f2e:	e7b7      	b.n	8008ea0 <_dtoa_r+0x280>
 8008f30:	69eb      	ldr	r3, [r5, #28]
 8008f32:	9a03      	ldr	r2, [sp, #12]
 8008f34:	601a      	str	r2, [r3, #0]
 8008f36:	9b08      	ldr	r3, [sp, #32]
 8008f38:	2b0e      	cmp	r3, #14
 8008f3a:	f200 80a8 	bhi.w	800908e <_dtoa_r+0x46e>
 8008f3e:	2c00      	cmp	r4, #0
 8008f40:	f000 80a5 	beq.w	800908e <_dtoa_r+0x46e>
 8008f44:	f1bb 0f00 	cmp.w	fp, #0
 8008f48:	dd34      	ble.n	8008fb4 <_dtoa_r+0x394>
 8008f4a:	4b9a      	ldr	r3, [pc, #616]	; (80091b4 <_dtoa_r+0x594>)
 8008f4c:	f00b 020f 	and.w	r2, fp, #15
 8008f50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008f58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008f5c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008f60:	ea4f 142b 	mov.w	r4, fp, asr #4
 8008f64:	d016      	beq.n	8008f94 <_dtoa_r+0x374>
 8008f66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008f6a:	4b93      	ldr	r3, [pc, #588]	; (80091b8 <_dtoa_r+0x598>)
 8008f6c:	2703      	movs	r7, #3
 8008f6e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008f72:	f7f7 fbdb 	bl	800072c <__aeabi_ddiv>
 8008f76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f7a:	f004 040f 	and.w	r4, r4, #15
 8008f7e:	4e8e      	ldr	r6, [pc, #568]	; (80091b8 <_dtoa_r+0x598>)
 8008f80:	b954      	cbnz	r4, 8008f98 <_dtoa_r+0x378>
 8008f82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008f8a:	f7f7 fbcf 	bl	800072c <__aeabi_ddiv>
 8008f8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008f92:	e029      	b.n	8008fe8 <_dtoa_r+0x3c8>
 8008f94:	2702      	movs	r7, #2
 8008f96:	e7f2      	b.n	8008f7e <_dtoa_r+0x35e>
 8008f98:	07e1      	lsls	r1, r4, #31
 8008f9a:	d508      	bpl.n	8008fae <_dtoa_r+0x38e>
 8008f9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008fa0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fa4:	f7f7 fa98 	bl	80004d8 <__aeabi_dmul>
 8008fa8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008fac:	3701      	adds	r7, #1
 8008fae:	1064      	asrs	r4, r4, #1
 8008fb0:	3608      	adds	r6, #8
 8008fb2:	e7e5      	b.n	8008f80 <_dtoa_r+0x360>
 8008fb4:	f000 80a5 	beq.w	8009102 <_dtoa_r+0x4e2>
 8008fb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008fbc:	f1cb 0400 	rsb	r4, fp, #0
 8008fc0:	4b7c      	ldr	r3, [pc, #496]	; (80091b4 <_dtoa_r+0x594>)
 8008fc2:	f004 020f 	and.w	r2, r4, #15
 8008fc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fce:	f7f7 fa83 	bl	80004d8 <__aeabi_dmul>
 8008fd2:	2702      	movs	r7, #2
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008fda:	4e77      	ldr	r6, [pc, #476]	; (80091b8 <_dtoa_r+0x598>)
 8008fdc:	1124      	asrs	r4, r4, #4
 8008fde:	2c00      	cmp	r4, #0
 8008fe0:	f040 8084 	bne.w	80090ec <_dtoa_r+0x4cc>
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d1d2      	bne.n	8008f8e <_dtoa_r+0x36e>
 8008fe8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008fec:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008ff0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f000 8087 	beq.w	8009106 <_dtoa_r+0x4e6>
 8008ff8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	4b6f      	ldr	r3, [pc, #444]	; (80091bc <_dtoa_r+0x59c>)
 8009000:	f7f7 fcdc 	bl	80009bc <__aeabi_dcmplt>
 8009004:	2800      	cmp	r0, #0
 8009006:	d07e      	beq.n	8009106 <_dtoa_r+0x4e6>
 8009008:	9b08      	ldr	r3, [sp, #32]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d07b      	beq.n	8009106 <_dtoa_r+0x4e6>
 800900e:	9b06      	ldr	r3, [sp, #24]
 8009010:	2b00      	cmp	r3, #0
 8009012:	dd38      	ble.n	8009086 <_dtoa_r+0x466>
 8009014:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009018:	2200      	movs	r2, #0
 800901a:	4b69      	ldr	r3, [pc, #420]	; (80091c0 <_dtoa_r+0x5a0>)
 800901c:	f7f7 fa5c 	bl	80004d8 <__aeabi_dmul>
 8009020:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009024:	9c06      	ldr	r4, [sp, #24]
 8009026:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 800902a:	3701      	adds	r7, #1
 800902c:	4638      	mov	r0, r7
 800902e:	f7f7 f9e9 	bl	8000404 <__aeabi_i2d>
 8009032:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009036:	f7f7 fa4f 	bl	80004d8 <__aeabi_dmul>
 800903a:	2200      	movs	r2, #0
 800903c:	4b61      	ldr	r3, [pc, #388]	; (80091c4 <_dtoa_r+0x5a4>)
 800903e:	f7f7 f895 	bl	800016c <__adddf3>
 8009042:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009046:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800904a:	9611      	str	r6, [sp, #68]	; 0x44
 800904c:	2c00      	cmp	r4, #0
 800904e:	d15d      	bne.n	800910c <_dtoa_r+0x4ec>
 8009050:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009054:	2200      	movs	r2, #0
 8009056:	4b5c      	ldr	r3, [pc, #368]	; (80091c8 <_dtoa_r+0x5a8>)
 8009058:	f7f7 f886 	bl	8000168 <__aeabi_dsub>
 800905c:	4602      	mov	r2, r0
 800905e:	460b      	mov	r3, r1
 8009060:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009064:	4633      	mov	r3, r6
 8009066:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009068:	f7f7 fcc6 	bl	80009f8 <__aeabi_dcmpgt>
 800906c:	2800      	cmp	r0, #0
 800906e:	f040 8295 	bne.w	800959c <_dtoa_r+0x97c>
 8009072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009076:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009078:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800907c:	f7f7 fc9e 	bl	80009bc <__aeabi_dcmplt>
 8009080:	2800      	cmp	r0, #0
 8009082:	f040 8289 	bne.w	8009598 <_dtoa_r+0x978>
 8009086:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800908a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800908e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009090:	2b00      	cmp	r3, #0
 8009092:	f2c0 8151 	blt.w	8009338 <_dtoa_r+0x718>
 8009096:	f1bb 0f0e 	cmp.w	fp, #14
 800909a:	f300 814d 	bgt.w	8009338 <_dtoa_r+0x718>
 800909e:	4b45      	ldr	r3, [pc, #276]	; (80091b4 <_dtoa_r+0x594>)
 80090a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80090a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80090a8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80090ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	f280 80da 	bge.w	8009268 <_dtoa_r+0x648>
 80090b4:	9b08      	ldr	r3, [sp, #32]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f300 80d6 	bgt.w	8009268 <_dtoa_r+0x648>
 80090bc:	f040 826b 	bne.w	8009596 <_dtoa_r+0x976>
 80090c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090c4:	2200      	movs	r2, #0
 80090c6:	4b40      	ldr	r3, [pc, #256]	; (80091c8 <_dtoa_r+0x5a8>)
 80090c8:	f7f7 fa06 	bl	80004d8 <__aeabi_dmul>
 80090cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090d0:	f7f7 fc88 	bl	80009e4 <__aeabi_dcmpge>
 80090d4:	9c08      	ldr	r4, [sp, #32]
 80090d6:	4626      	mov	r6, r4
 80090d8:	2800      	cmp	r0, #0
 80090da:	f040 8241 	bne.w	8009560 <_dtoa_r+0x940>
 80090de:	2331      	movs	r3, #49	; 0x31
 80090e0:	9f03      	ldr	r7, [sp, #12]
 80090e2:	f10b 0b01 	add.w	fp, fp, #1
 80090e6:	f807 3b01 	strb.w	r3, [r7], #1
 80090ea:	e23d      	b.n	8009568 <_dtoa_r+0x948>
 80090ec:	07e2      	lsls	r2, r4, #31
 80090ee:	d505      	bpl.n	80090fc <_dtoa_r+0x4dc>
 80090f0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090f4:	f7f7 f9f0 	bl	80004d8 <__aeabi_dmul>
 80090f8:	2301      	movs	r3, #1
 80090fa:	3701      	adds	r7, #1
 80090fc:	1064      	asrs	r4, r4, #1
 80090fe:	3608      	adds	r6, #8
 8009100:	e76d      	b.n	8008fde <_dtoa_r+0x3be>
 8009102:	2702      	movs	r7, #2
 8009104:	e770      	b.n	8008fe8 <_dtoa_r+0x3c8>
 8009106:	46d8      	mov	r8, fp
 8009108:	9c08      	ldr	r4, [sp, #32]
 800910a:	e78f      	b.n	800902c <_dtoa_r+0x40c>
 800910c:	9903      	ldr	r1, [sp, #12]
 800910e:	4b29      	ldr	r3, [pc, #164]	; (80091b4 <_dtoa_r+0x594>)
 8009110:	4421      	add	r1, r4
 8009112:	9112      	str	r1, [sp, #72]	; 0x48
 8009114:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009116:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800911a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800911e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009122:	2900      	cmp	r1, #0
 8009124:	d054      	beq.n	80091d0 <_dtoa_r+0x5b0>
 8009126:	2000      	movs	r0, #0
 8009128:	4928      	ldr	r1, [pc, #160]	; (80091cc <_dtoa_r+0x5ac>)
 800912a:	f7f7 faff 	bl	800072c <__aeabi_ddiv>
 800912e:	463b      	mov	r3, r7
 8009130:	4632      	mov	r2, r6
 8009132:	f7f7 f819 	bl	8000168 <__aeabi_dsub>
 8009136:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800913a:	9f03      	ldr	r7, [sp, #12]
 800913c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009140:	f7f7 fc7a 	bl	8000a38 <__aeabi_d2iz>
 8009144:	4604      	mov	r4, r0
 8009146:	f7f7 f95d 	bl	8000404 <__aeabi_i2d>
 800914a:	4602      	mov	r2, r0
 800914c:	460b      	mov	r3, r1
 800914e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009152:	f7f7 f809 	bl	8000168 <__aeabi_dsub>
 8009156:	4602      	mov	r2, r0
 8009158:	460b      	mov	r3, r1
 800915a:	3430      	adds	r4, #48	; 0x30
 800915c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009160:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009164:	f807 4b01 	strb.w	r4, [r7], #1
 8009168:	f7f7 fc28 	bl	80009bc <__aeabi_dcmplt>
 800916c:	2800      	cmp	r0, #0
 800916e:	d173      	bne.n	8009258 <_dtoa_r+0x638>
 8009170:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009174:	2000      	movs	r0, #0
 8009176:	4911      	ldr	r1, [pc, #68]	; (80091bc <_dtoa_r+0x59c>)
 8009178:	f7f6 fff6 	bl	8000168 <__aeabi_dsub>
 800917c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009180:	f7f7 fc1c 	bl	80009bc <__aeabi_dcmplt>
 8009184:	2800      	cmp	r0, #0
 8009186:	f040 80b6 	bne.w	80092f6 <_dtoa_r+0x6d6>
 800918a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800918c:	429f      	cmp	r7, r3
 800918e:	f43f af7a 	beq.w	8009086 <_dtoa_r+0x466>
 8009192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009196:	2200      	movs	r2, #0
 8009198:	4b09      	ldr	r3, [pc, #36]	; (80091c0 <_dtoa_r+0x5a0>)
 800919a:	f7f7 f99d 	bl	80004d8 <__aeabi_dmul>
 800919e:	2200      	movs	r2, #0
 80091a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80091a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091a8:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <_dtoa_r+0x5a0>)
 80091aa:	f7f7 f995 	bl	80004d8 <__aeabi_dmul>
 80091ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80091b2:	e7c3      	b.n	800913c <_dtoa_r+0x51c>
 80091b4:	0800aa60 	.word	0x0800aa60
 80091b8:	0800aa38 	.word	0x0800aa38
 80091bc:	3ff00000 	.word	0x3ff00000
 80091c0:	40240000 	.word	0x40240000
 80091c4:	401c0000 	.word	0x401c0000
 80091c8:	40140000 	.word	0x40140000
 80091cc:	3fe00000 	.word	0x3fe00000
 80091d0:	4630      	mov	r0, r6
 80091d2:	4639      	mov	r1, r7
 80091d4:	f7f7 f980 	bl	80004d8 <__aeabi_dmul>
 80091d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80091da:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80091de:	9c03      	ldr	r4, [sp, #12]
 80091e0:	9314      	str	r3, [sp, #80]	; 0x50
 80091e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091e6:	f7f7 fc27 	bl	8000a38 <__aeabi_d2iz>
 80091ea:	9015      	str	r0, [sp, #84]	; 0x54
 80091ec:	f7f7 f90a 	bl	8000404 <__aeabi_i2d>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80091f8:	f7f6 ffb6 	bl	8000168 <__aeabi_dsub>
 80091fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80091fe:	4606      	mov	r6, r0
 8009200:	3330      	adds	r3, #48	; 0x30
 8009202:	f804 3b01 	strb.w	r3, [r4], #1
 8009206:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009208:	460f      	mov	r7, r1
 800920a:	429c      	cmp	r4, r3
 800920c:	f04f 0200 	mov.w	r2, #0
 8009210:	d124      	bne.n	800925c <_dtoa_r+0x63c>
 8009212:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009216:	4baf      	ldr	r3, [pc, #700]	; (80094d4 <_dtoa_r+0x8b4>)
 8009218:	f7f6 ffa8 	bl	800016c <__adddf3>
 800921c:	4602      	mov	r2, r0
 800921e:	460b      	mov	r3, r1
 8009220:	4630      	mov	r0, r6
 8009222:	4639      	mov	r1, r7
 8009224:	f7f7 fbe8 	bl	80009f8 <__aeabi_dcmpgt>
 8009228:	2800      	cmp	r0, #0
 800922a:	d163      	bne.n	80092f4 <_dtoa_r+0x6d4>
 800922c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009230:	2000      	movs	r0, #0
 8009232:	49a8      	ldr	r1, [pc, #672]	; (80094d4 <_dtoa_r+0x8b4>)
 8009234:	f7f6 ff98 	bl	8000168 <__aeabi_dsub>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4630      	mov	r0, r6
 800923e:	4639      	mov	r1, r7
 8009240:	f7f7 fbbc 	bl	80009bc <__aeabi_dcmplt>
 8009244:	2800      	cmp	r0, #0
 8009246:	f43f af1e 	beq.w	8009086 <_dtoa_r+0x466>
 800924a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800924c:	1e7b      	subs	r3, r7, #1
 800924e:	9314      	str	r3, [sp, #80]	; 0x50
 8009250:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009254:	2b30      	cmp	r3, #48	; 0x30
 8009256:	d0f8      	beq.n	800924a <_dtoa_r+0x62a>
 8009258:	46c3      	mov	fp, r8
 800925a:	e03b      	b.n	80092d4 <_dtoa_r+0x6b4>
 800925c:	4b9e      	ldr	r3, [pc, #632]	; (80094d8 <_dtoa_r+0x8b8>)
 800925e:	f7f7 f93b 	bl	80004d8 <__aeabi_dmul>
 8009262:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009266:	e7bc      	b.n	80091e2 <_dtoa_r+0x5c2>
 8009268:	9f03      	ldr	r7, [sp, #12]
 800926a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800926e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009272:	4640      	mov	r0, r8
 8009274:	4649      	mov	r1, r9
 8009276:	f7f7 fa59 	bl	800072c <__aeabi_ddiv>
 800927a:	f7f7 fbdd 	bl	8000a38 <__aeabi_d2iz>
 800927e:	4604      	mov	r4, r0
 8009280:	f7f7 f8c0 	bl	8000404 <__aeabi_i2d>
 8009284:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009288:	f7f7 f926 	bl	80004d8 <__aeabi_dmul>
 800928c:	4602      	mov	r2, r0
 800928e:	460b      	mov	r3, r1
 8009290:	4640      	mov	r0, r8
 8009292:	4649      	mov	r1, r9
 8009294:	f7f6 ff68 	bl	8000168 <__aeabi_dsub>
 8009298:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800929c:	f807 6b01 	strb.w	r6, [r7], #1
 80092a0:	9e03      	ldr	r6, [sp, #12]
 80092a2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80092a6:	1bbe      	subs	r6, r7, r6
 80092a8:	45b4      	cmp	ip, r6
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	d136      	bne.n	800931e <_dtoa_r+0x6fe>
 80092b0:	f7f6 ff5c 	bl	800016c <__adddf3>
 80092b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092b8:	4680      	mov	r8, r0
 80092ba:	4689      	mov	r9, r1
 80092bc:	f7f7 fb9c 	bl	80009f8 <__aeabi_dcmpgt>
 80092c0:	bb58      	cbnz	r0, 800931a <_dtoa_r+0x6fa>
 80092c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80092c6:	4640      	mov	r0, r8
 80092c8:	4649      	mov	r1, r9
 80092ca:	f7f7 fb6d 	bl	80009a8 <__aeabi_dcmpeq>
 80092ce:	b108      	cbz	r0, 80092d4 <_dtoa_r+0x6b4>
 80092d0:	07e3      	lsls	r3, r4, #31
 80092d2:	d422      	bmi.n	800931a <_dtoa_r+0x6fa>
 80092d4:	4651      	mov	r1, sl
 80092d6:	4628      	mov	r0, r5
 80092d8:	f000 fbc2 	bl	8009a60 <_Bfree>
 80092dc:	2300      	movs	r3, #0
 80092de:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80092e0:	703b      	strb	r3, [r7, #0]
 80092e2:	f10b 0301 	add.w	r3, fp, #1
 80092e6:	6013      	str	r3, [r2, #0]
 80092e8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f43f ace6 	beq.w	8008cbc <_dtoa_r+0x9c>
 80092f0:	601f      	str	r7, [r3, #0]
 80092f2:	e4e3      	b.n	8008cbc <_dtoa_r+0x9c>
 80092f4:	4627      	mov	r7, r4
 80092f6:	463b      	mov	r3, r7
 80092f8:	461f      	mov	r7, r3
 80092fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80092fe:	2a39      	cmp	r2, #57	; 0x39
 8009300:	d107      	bne.n	8009312 <_dtoa_r+0x6f2>
 8009302:	9a03      	ldr	r2, [sp, #12]
 8009304:	429a      	cmp	r2, r3
 8009306:	d1f7      	bne.n	80092f8 <_dtoa_r+0x6d8>
 8009308:	2230      	movs	r2, #48	; 0x30
 800930a:	9903      	ldr	r1, [sp, #12]
 800930c:	f108 0801 	add.w	r8, r8, #1
 8009310:	700a      	strb	r2, [r1, #0]
 8009312:	781a      	ldrb	r2, [r3, #0]
 8009314:	3201      	adds	r2, #1
 8009316:	701a      	strb	r2, [r3, #0]
 8009318:	e79e      	b.n	8009258 <_dtoa_r+0x638>
 800931a:	46d8      	mov	r8, fp
 800931c:	e7eb      	b.n	80092f6 <_dtoa_r+0x6d6>
 800931e:	2200      	movs	r2, #0
 8009320:	4b6d      	ldr	r3, [pc, #436]	; (80094d8 <_dtoa_r+0x8b8>)
 8009322:	f7f7 f8d9 	bl	80004d8 <__aeabi_dmul>
 8009326:	2200      	movs	r2, #0
 8009328:	2300      	movs	r3, #0
 800932a:	4680      	mov	r8, r0
 800932c:	4689      	mov	r9, r1
 800932e:	f7f7 fb3b 	bl	80009a8 <__aeabi_dcmpeq>
 8009332:	2800      	cmp	r0, #0
 8009334:	d09b      	beq.n	800926e <_dtoa_r+0x64e>
 8009336:	e7cd      	b.n	80092d4 <_dtoa_r+0x6b4>
 8009338:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800933a:	2a00      	cmp	r2, #0
 800933c:	f000 80c4 	beq.w	80094c8 <_dtoa_r+0x8a8>
 8009340:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009342:	2a01      	cmp	r2, #1
 8009344:	f300 80a8 	bgt.w	8009498 <_dtoa_r+0x878>
 8009348:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800934a:	2a00      	cmp	r2, #0
 800934c:	f000 80a0 	beq.w	8009490 <_dtoa_r+0x870>
 8009350:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009354:	464f      	mov	r7, r9
 8009356:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009358:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800935a:	2101      	movs	r1, #1
 800935c:	441a      	add	r2, r3
 800935e:	4628      	mov	r0, r5
 8009360:	4499      	add	r9, r3
 8009362:	9209      	str	r2, [sp, #36]	; 0x24
 8009364:	f000 fc32 	bl	8009bcc <__i2b>
 8009368:	4606      	mov	r6, r0
 800936a:	b15f      	cbz	r7, 8009384 <_dtoa_r+0x764>
 800936c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800936e:	2b00      	cmp	r3, #0
 8009370:	dd08      	ble.n	8009384 <_dtoa_r+0x764>
 8009372:	42bb      	cmp	r3, r7
 8009374:	bfa8      	it	ge
 8009376:	463b      	movge	r3, r7
 8009378:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800937a:	eba9 0903 	sub.w	r9, r9, r3
 800937e:	1aff      	subs	r7, r7, r3
 8009380:	1ad3      	subs	r3, r2, r3
 8009382:	9309      	str	r3, [sp, #36]	; 0x24
 8009384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009386:	b1f3      	cbz	r3, 80093c6 <_dtoa_r+0x7a6>
 8009388:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800938a:	2b00      	cmp	r3, #0
 800938c:	f000 80a0 	beq.w	80094d0 <_dtoa_r+0x8b0>
 8009390:	2c00      	cmp	r4, #0
 8009392:	dd10      	ble.n	80093b6 <_dtoa_r+0x796>
 8009394:	4631      	mov	r1, r6
 8009396:	4622      	mov	r2, r4
 8009398:	4628      	mov	r0, r5
 800939a:	f000 fcd5 	bl	8009d48 <__pow5mult>
 800939e:	4652      	mov	r2, sl
 80093a0:	4601      	mov	r1, r0
 80093a2:	4606      	mov	r6, r0
 80093a4:	4628      	mov	r0, r5
 80093a6:	f000 fc27 	bl	8009bf8 <__multiply>
 80093aa:	4680      	mov	r8, r0
 80093ac:	4651      	mov	r1, sl
 80093ae:	4628      	mov	r0, r5
 80093b0:	f000 fb56 	bl	8009a60 <_Bfree>
 80093b4:	46c2      	mov	sl, r8
 80093b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093b8:	1b1a      	subs	r2, r3, r4
 80093ba:	d004      	beq.n	80093c6 <_dtoa_r+0x7a6>
 80093bc:	4651      	mov	r1, sl
 80093be:	4628      	mov	r0, r5
 80093c0:	f000 fcc2 	bl	8009d48 <__pow5mult>
 80093c4:	4682      	mov	sl, r0
 80093c6:	2101      	movs	r1, #1
 80093c8:	4628      	mov	r0, r5
 80093ca:	f000 fbff 	bl	8009bcc <__i2b>
 80093ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093d0:	4604      	mov	r4, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f340 8082 	ble.w	80094dc <_dtoa_r+0x8bc>
 80093d8:	461a      	mov	r2, r3
 80093da:	4601      	mov	r1, r0
 80093dc:	4628      	mov	r0, r5
 80093de:	f000 fcb3 	bl	8009d48 <__pow5mult>
 80093e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80093e4:	4604      	mov	r4, r0
 80093e6:	2b01      	cmp	r3, #1
 80093e8:	dd7b      	ble.n	80094e2 <_dtoa_r+0x8c2>
 80093ea:	f04f 0800 	mov.w	r8, #0
 80093ee:	6923      	ldr	r3, [r4, #16]
 80093f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80093f4:	6918      	ldr	r0, [r3, #16]
 80093f6:	f000 fb9b 	bl	8009b30 <__hi0bits>
 80093fa:	f1c0 0020 	rsb	r0, r0, #32
 80093fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009400:	4418      	add	r0, r3
 8009402:	f010 001f 	ands.w	r0, r0, #31
 8009406:	f000 8092 	beq.w	800952e <_dtoa_r+0x90e>
 800940a:	f1c0 0320 	rsb	r3, r0, #32
 800940e:	2b04      	cmp	r3, #4
 8009410:	f340 8085 	ble.w	800951e <_dtoa_r+0x8fe>
 8009414:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009416:	f1c0 001c 	rsb	r0, r0, #28
 800941a:	4403      	add	r3, r0
 800941c:	4481      	add	r9, r0
 800941e:	4407      	add	r7, r0
 8009420:	9309      	str	r3, [sp, #36]	; 0x24
 8009422:	f1b9 0f00 	cmp.w	r9, #0
 8009426:	dd05      	ble.n	8009434 <_dtoa_r+0x814>
 8009428:	4651      	mov	r1, sl
 800942a:	464a      	mov	r2, r9
 800942c:	4628      	mov	r0, r5
 800942e:	f000 fce5 	bl	8009dfc <__lshift>
 8009432:	4682      	mov	sl, r0
 8009434:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009436:	2b00      	cmp	r3, #0
 8009438:	dd05      	ble.n	8009446 <_dtoa_r+0x826>
 800943a:	4621      	mov	r1, r4
 800943c:	461a      	mov	r2, r3
 800943e:	4628      	mov	r0, r5
 8009440:	f000 fcdc 	bl	8009dfc <__lshift>
 8009444:	4604      	mov	r4, r0
 8009446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009448:	2b00      	cmp	r3, #0
 800944a:	d072      	beq.n	8009532 <_dtoa_r+0x912>
 800944c:	4621      	mov	r1, r4
 800944e:	4650      	mov	r0, sl
 8009450:	f000 fd40 	bl	8009ed4 <__mcmp>
 8009454:	2800      	cmp	r0, #0
 8009456:	da6c      	bge.n	8009532 <_dtoa_r+0x912>
 8009458:	2300      	movs	r3, #0
 800945a:	4651      	mov	r1, sl
 800945c:	220a      	movs	r2, #10
 800945e:	4628      	mov	r0, r5
 8009460:	f000 fb20 	bl	8009aa4 <__multadd>
 8009464:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009466:	4682      	mov	sl, r0
 8009468:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 81ac 	beq.w	80097ca <_dtoa_r+0xbaa>
 8009472:	2300      	movs	r3, #0
 8009474:	4631      	mov	r1, r6
 8009476:	220a      	movs	r2, #10
 8009478:	4628      	mov	r0, r5
 800947a:	f000 fb13 	bl	8009aa4 <__multadd>
 800947e:	9b06      	ldr	r3, [sp, #24]
 8009480:	4606      	mov	r6, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	f300 8093 	bgt.w	80095ae <_dtoa_r+0x98e>
 8009488:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800948a:	2b02      	cmp	r3, #2
 800948c:	dc59      	bgt.n	8009542 <_dtoa_r+0x922>
 800948e:	e08e      	b.n	80095ae <_dtoa_r+0x98e>
 8009490:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009492:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009496:	e75d      	b.n	8009354 <_dtoa_r+0x734>
 8009498:	9b08      	ldr	r3, [sp, #32]
 800949a:	1e5c      	subs	r4, r3, #1
 800949c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800949e:	42a3      	cmp	r3, r4
 80094a0:	bfbf      	itttt	lt
 80094a2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80094a4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80094a6:	1ae3      	sublt	r3, r4, r3
 80094a8:	18d2      	addlt	r2, r2, r3
 80094aa:	bfa8      	it	ge
 80094ac:	1b1c      	subge	r4, r3, r4
 80094ae:	9b08      	ldr	r3, [sp, #32]
 80094b0:	bfbe      	ittt	lt
 80094b2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80094b4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80094b6:	2400      	movlt	r4, #0
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	bfb5      	itete	lt
 80094bc:	eba9 0703 	sublt.w	r7, r9, r3
 80094c0:	464f      	movge	r7, r9
 80094c2:	2300      	movlt	r3, #0
 80094c4:	9b08      	ldrge	r3, [sp, #32]
 80094c6:	e747      	b.n	8009358 <_dtoa_r+0x738>
 80094c8:	464f      	mov	r7, r9
 80094ca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80094cc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80094ce:	e74c      	b.n	800936a <_dtoa_r+0x74a>
 80094d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094d2:	e773      	b.n	80093bc <_dtoa_r+0x79c>
 80094d4:	3fe00000 	.word	0x3fe00000
 80094d8:	40240000 	.word	0x40240000
 80094dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094de:	2b01      	cmp	r3, #1
 80094e0:	dc18      	bgt.n	8009514 <_dtoa_r+0x8f4>
 80094e2:	9b04      	ldr	r3, [sp, #16]
 80094e4:	b9b3      	cbnz	r3, 8009514 <_dtoa_r+0x8f4>
 80094e6:	9b05      	ldr	r3, [sp, #20]
 80094e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80094ec:	b993      	cbnz	r3, 8009514 <_dtoa_r+0x8f4>
 80094ee:	9b05      	ldr	r3, [sp, #20]
 80094f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80094f4:	0d1b      	lsrs	r3, r3, #20
 80094f6:	051b      	lsls	r3, r3, #20
 80094f8:	b17b      	cbz	r3, 800951a <_dtoa_r+0x8fa>
 80094fa:	f04f 0801 	mov.w	r8, #1
 80094fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009500:	f109 0901 	add.w	r9, r9, #1
 8009504:	3301      	adds	r3, #1
 8009506:	9309      	str	r3, [sp, #36]	; 0x24
 8009508:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800950a:	2b00      	cmp	r3, #0
 800950c:	f47f af6f 	bne.w	80093ee <_dtoa_r+0x7ce>
 8009510:	2001      	movs	r0, #1
 8009512:	e774      	b.n	80093fe <_dtoa_r+0x7de>
 8009514:	f04f 0800 	mov.w	r8, #0
 8009518:	e7f6      	b.n	8009508 <_dtoa_r+0x8e8>
 800951a:	4698      	mov	r8, r3
 800951c:	e7f4      	b.n	8009508 <_dtoa_r+0x8e8>
 800951e:	d080      	beq.n	8009422 <_dtoa_r+0x802>
 8009520:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009522:	331c      	adds	r3, #28
 8009524:	441a      	add	r2, r3
 8009526:	4499      	add	r9, r3
 8009528:	441f      	add	r7, r3
 800952a:	9209      	str	r2, [sp, #36]	; 0x24
 800952c:	e779      	b.n	8009422 <_dtoa_r+0x802>
 800952e:	4603      	mov	r3, r0
 8009530:	e7f6      	b.n	8009520 <_dtoa_r+0x900>
 8009532:	9b08      	ldr	r3, [sp, #32]
 8009534:	2b00      	cmp	r3, #0
 8009536:	dc34      	bgt.n	80095a2 <_dtoa_r+0x982>
 8009538:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800953a:	2b02      	cmp	r3, #2
 800953c:	dd31      	ble.n	80095a2 <_dtoa_r+0x982>
 800953e:	9b08      	ldr	r3, [sp, #32]
 8009540:	9306      	str	r3, [sp, #24]
 8009542:	9b06      	ldr	r3, [sp, #24]
 8009544:	b963      	cbnz	r3, 8009560 <_dtoa_r+0x940>
 8009546:	4621      	mov	r1, r4
 8009548:	2205      	movs	r2, #5
 800954a:	4628      	mov	r0, r5
 800954c:	f000 faaa 	bl	8009aa4 <__multadd>
 8009550:	4601      	mov	r1, r0
 8009552:	4604      	mov	r4, r0
 8009554:	4650      	mov	r0, sl
 8009556:	f000 fcbd 	bl	8009ed4 <__mcmp>
 800955a:	2800      	cmp	r0, #0
 800955c:	f73f adbf 	bgt.w	80090de <_dtoa_r+0x4be>
 8009560:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009562:	9f03      	ldr	r7, [sp, #12]
 8009564:	ea6f 0b03 	mvn.w	fp, r3
 8009568:	f04f 0800 	mov.w	r8, #0
 800956c:	4621      	mov	r1, r4
 800956e:	4628      	mov	r0, r5
 8009570:	f000 fa76 	bl	8009a60 <_Bfree>
 8009574:	2e00      	cmp	r6, #0
 8009576:	f43f aead 	beq.w	80092d4 <_dtoa_r+0x6b4>
 800957a:	f1b8 0f00 	cmp.w	r8, #0
 800957e:	d005      	beq.n	800958c <_dtoa_r+0x96c>
 8009580:	45b0      	cmp	r8, r6
 8009582:	d003      	beq.n	800958c <_dtoa_r+0x96c>
 8009584:	4641      	mov	r1, r8
 8009586:	4628      	mov	r0, r5
 8009588:	f000 fa6a 	bl	8009a60 <_Bfree>
 800958c:	4631      	mov	r1, r6
 800958e:	4628      	mov	r0, r5
 8009590:	f000 fa66 	bl	8009a60 <_Bfree>
 8009594:	e69e      	b.n	80092d4 <_dtoa_r+0x6b4>
 8009596:	2400      	movs	r4, #0
 8009598:	4626      	mov	r6, r4
 800959a:	e7e1      	b.n	8009560 <_dtoa_r+0x940>
 800959c:	46c3      	mov	fp, r8
 800959e:	4626      	mov	r6, r4
 80095a0:	e59d      	b.n	80090de <_dtoa_r+0x4be>
 80095a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 80c8 	beq.w	800973a <_dtoa_r+0xb1a>
 80095aa:	9b08      	ldr	r3, [sp, #32]
 80095ac:	9306      	str	r3, [sp, #24]
 80095ae:	2f00      	cmp	r7, #0
 80095b0:	dd05      	ble.n	80095be <_dtoa_r+0x99e>
 80095b2:	4631      	mov	r1, r6
 80095b4:	463a      	mov	r2, r7
 80095b6:	4628      	mov	r0, r5
 80095b8:	f000 fc20 	bl	8009dfc <__lshift>
 80095bc:	4606      	mov	r6, r0
 80095be:	f1b8 0f00 	cmp.w	r8, #0
 80095c2:	d05b      	beq.n	800967c <_dtoa_r+0xa5c>
 80095c4:	4628      	mov	r0, r5
 80095c6:	6871      	ldr	r1, [r6, #4]
 80095c8:	f000 fa0a 	bl	80099e0 <_Balloc>
 80095cc:	4607      	mov	r7, r0
 80095ce:	b928      	cbnz	r0, 80095dc <_dtoa_r+0x9bc>
 80095d0:	4602      	mov	r2, r0
 80095d2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80095d6:	4b81      	ldr	r3, [pc, #516]	; (80097dc <_dtoa_r+0xbbc>)
 80095d8:	f7ff bb36 	b.w	8008c48 <_dtoa_r+0x28>
 80095dc:	6932      	ldr	r2, [r6, #16]
 80095de:	f106 010c 	add.w	r1, r6, #12
 80095e2:	3202      	adds	r2, #2
 80095e4:	0092      	lsls	r2, r2, #2
 80095e6:	300c      	adds	r0, #12
 80095e8:	f7ff fa81 	bl	8008aee <memcpy>
 80095ec:	2201      	movs	r2, #1
 80095ee:	4639      	mov	r1, r7
 80095f0:	4628      	mov	r0, r5
 80095f2:	f000 fc03 	bl	8009dfc <__lshift>
 80095f6:	46b0      	mov	r8, r6
 80095f8:	4606      	mov	r6, r0
 80095fa:	9b03      	ldr	r3, [sp, #12]
 80095fc:	9a03      	ldr	r2, [sp, #12]
 80095fe:	3301      	adds	r3, #1
 8009600:	9308      	str	r3, [sp, #32]
 8009602:	9b06      	ldr	r3, [sp, #24]
 8009604:	4413      	add	r3, r2
 8009606:	930b      	str	r3, [sp, #44]	; 0x2c
 8009608:	9b04      	ldr	r3, [sp, #16]
 800960a:	f003 0301 	and.w	r3, r3, #1
 800960e:	930a      	str	r3, [sp, #40]	; 0x28
 8009610:	9b08      	ldr	r3, [sp, #32]
 8009612:	4621      	mov	r1, r4
 8009614:	3b01      	subs	r3, #1
 8009616:	4650      	mov	r0, sl
 8009618:	9304      	str	r3, [sp, #16]
 800961a:	f7ff fa76 	bl	8008b0a <quorem>
 800961e:	4641      	mov	r1, r8
 8009620:	9006      	str	r0, [sp, #24]
 8009622:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009626:	4650      	mov	r0, sl
 8009628:	f000 fc54 	bl	8009ed4 <__mcmp>
 800962c:	4632      	mov	r2, r6
 800962e:	9009      	str	r0, [sp, #36]	; 0x24
 8009630:	4621      	mov	r1, r4
 8009632:	4628      	mov	r0, r5
 8009634:	f000 fc6a 	bl	8009f0c <__mdiff>
 8009638:	68c2      	ldr	r2, [r0, #12]
 800963a:	4607      	mov	r7, r0
 800963c:	bb02      	cbnz	r2, 8009680 <_dtoa_r+0xa60>
 800963e:	4601      	mov	r1, r0
 8009640:	4650      	mov	r0, sl
 8009642:	f000 fc47 	bl	8009ed4 <__mcmp>
 8009646:	4602      	mov	r2, r0
 8009648:	4639      	mov	r1, r7
 800964a:	4628      	mov	r0, r5
 800964c:	920c      	str	r2, [sp, #48]	; 0x30
 800964e:	f000 fa07 	bl	8009a60 <_Bfree>
 8009652:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009654:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009656:	9f08      	ldr	r7, [sp, #32]
 8009658:	ea43 0102 	orr.w	r1, r3, r2
 800965c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800965e:	4319      	orrs	r1, r3
 8009660:	d110      	bne.n	8009684 <_dtoa_r+0xa64>
 8009662:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009666:	d029      	beq.n	80096bc <_dtoa_r+0xa9c>
 8009668:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800966a:	2b00      	cmp	r3, #0
 800966c:	dd02      	ble.n	8009674 <_dtoa_r+0xa54>
 800966e:	9b06      	ldr	r3, [sp, #24]
 8009670:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009674:	9b04      	ldr	r3, [sp, #16]
 8009676:	f883 9000 	strb.w	r9, [r3]
 800967a:	e777      	b.n	800956c <_dtoa_r+0x94c>
 800967c:	4630      	mov	r0, r6
 800967e:	e7ba      	b.n	80095f6 <_dtoa_r+0x9d6>
 8009680:	2201      	movs	r2, #1
 8009682:	e7e1      	b.n	8009648 <_dtoa_r+0xa28>
 8009684:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009686:	2b00      	cmp	r3, #0
 8009688:	db04      	blt.n	8009694 <_dtoa_r+0xa74>
 800968a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800968c:	430b      	orrs	r3, r1
 800968e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8009690:	430b      	orrs	r3, r1
 8009692:	d120      	bne.n	80096d6 <_dtoa_r+0xab6>
 8009694:	2a00      	cmp	r2, #0
 8009696:	dded      	ble.n	8009674 <_dtoa_r+0xa54>
 8009698:	4651      	mov	r1, sl
 800969a:	2201      	movs	r2, #1
 800969c:	4628      	mov	r0, r5
 800969e:	f000 fbad 	bl	8009dfc <__lshift>
 80096a2:	4621      	mov	r1, r4
 80096a4:	4682      	mov	sl, r0
 80096a6:	f000 fc15 	bl	8009ed4 <__mcmp>
 80096aa:	2800      	cmp	r0, #0
 80096ac:	dc03      	bgt.n	80096b6 <_dtoa_r+0xa96>
 80096ae:	d1e1      	bne.n	8009674 <_dtoa_r+0xa54>
 80096b0:	f019 0f01 	tst.w	r9, #1
 80096b4:	d0de      	beq.n	8009674 <_dtoa_r+0xa54>
 80096b6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80096ba:	d1d8      	bne.n	800966e <_dtoa_r+0xa4e>
 80096bc:	2339      	movs	r3, #57	; 0x39
 80096be:	9a04      	ldr	r2, [sp, #16]
 80096c0:	7013      	strb	r3, [r2, #0]
 80096c2:	463b      	mov	r3, r7
 80096c4:	461f      	mov	r7, r3
 80096c6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80096ca:	3b01      	subs	r3, #1
 80096cc:	2a39      	cmp	r2, #57	; 0x39
 80096ce:	d06b      	beq.n	80097a8 <_dtoa_r+0xb88>
 80096d0:	3201      	adds	r2, #1
 80096d2:	701a      	strb	r2, [r3, #0]
 80096d4:	e74a      	b.n	800956c <_dtoa_r+0x94c>
 80096d6:	2a00      	cmp	r2, #0
 80096d8:	dd07      	ble.n	80096ea <_dtoa_r+0xaca>
 80096da:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80096de:	d0ed      	beq.n	80096bc <_dtoa_r+0xa9c>
 80096e0:	9a04      	ldr	r2, [sp, #16]
 80096e2:	f109 0301 	add.w	r3, r9, #1
 80096e6:	7013      	strb	r3, [r2, #0]
 80096e8:	e740      	b.n	800956c <_dtoa_r+0x94c>
 80096ea:	9b08      	ldr	r3, [sp, #32]
 80096ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80096ee:	f803 9c01 	strb.w	r9, [r3, #-1]
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d042      	beq.n	800977c <_dtoa_r+0xb5c>
 80096f6:	4651      	mov	r1, sl
 80096f8:	2300      	movs	r3, #0
 80096fa:	220a      	movs	r2, #10
 80096fc:	4628      	mov	r0, r5
 80096fe:	f000 f9d1 	bl	8009aa4 <__multadd>
 8009702:	45b0      	cmp	r8, r6
 8009704:	4682      	mov	sl, r0
 8009706:	f04f 0300 	mov.w	r3, #0
 800970a:	f04f 020a 	mov.w	r2, #10
 800970e:	4641      	mov	r1, r8
 8009710:	4628      	mov	r0, r5
 8009712:	d107      	bne.n	8009724 <_dtoa_r+0xb04>
 8009714:	f000 f9c6 	bl	8009aa4 <__multadd>
 8009718:	4680      	mov	r8, r0
 800971a:	4606      	mov	r6, r0
 800971c:	9b08      	ldr	r3, [sp, #32]
 800971e:	3301      	adds	r3, #1
 8009720:	9308      	str	r3, [sp, #32]
 8009722:	e775      	b.n	8009610 <_dtoa_r+0x9f0>
 8009724:	f000 f9be 	bl	8009aa4 <__multadd>
 8009728:	4631      	mov	r1, r6
 800972a:	4680      	mov	r8, r0
 800972c:	2300      	movs	r3, #0
 800972e:	220a      	movs	r2, #10
 8009730:	4628      	mov	r0, r5
 8009732:	f000 f9b7 	bl	8009aa4 <__multadd>
 8009736:	4606      	mov	r6, r0
 8009738:	e7f0      	b.n	800971c <_dtoa_r+0xafc>
 800973a:	9b08      	ldr	r3, [sp, #32]
 800973c:	9306      	str	r3, [sp, #24]
 800973e:	9f03      	ldr	r7, [sp, #12]
 8009740:	4621      	mov	r1, r4
 8009742:	4650      	mov	r0, sl
 8009744:	f7ff f9e1 	bl	8008b0a <quorem>
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800974e:	f807 9b01 	strb.w	r9, [r7], #1
 8009752:	1afa      	subs	r2, r7, r3
 8009754:	9b06      	ldr	r3, [sp, #24]
 8009756:	4293      	cmp	r3, r2
 8009758:	dd07      	ble.n	800976a <_dtoa_r+0xb4a>
 800975a:	4651      	mov	r1, sl
 800975c:	2300      	movs	r3, #0
 800975e:	220a      	movs	r2, #10
 8009760:	4628      	mov	r0, r5
 8009762:	f000 f99f 	bl	8009aa4 <__multadd>
 8009766:	4682      	mov	sl, r0
 8009768:	e7ea      	b.n	8009740 <_dtoa_r+0xb20>
 800976a:	9b06      	ldr	r3, [sp, #24]
 800976c:	f04f 0800 	mov.w	r8, #0
 8009770:	2b00      	cmp	r3, #0
 8009772:	bfcc      	ite	gt
 8009774:	461f      	movgt	r7, r3
 8009776:	2701      	movle	r7, #1
 8009778:	9b03      	ldr	r3, [sp, #12]
 800977a:	441f      	add	r7, r3
 800977c:	4651      	mov	r1, sl
 800977e:	2201      	movs	r2, #1
 8009780:	4628      	mov	r0, r5
 8009782:	f000 fb3b 	bl	8009dfc <__lshift>
 8009786:	4621      	mov	r1, r4
 8009788:	4682      	mov	sl, r0
 800978a:	f000 fba3 	bl	8009ed4 <__mcmp>
 800978e:	2800      	cmp	r0, #0
 8009790:	dc97      	bgt.n	80096c2 <_dtoa_r+0xaa2>
 8009792:	d102      	bne.n	800979a <_dtoa_r+0xb7a>
 8009794:	f019 0f01 	tst.w	r9, #1
 8009798:	d193      	bne.n	80096c2 <_dtoa_r+0xaa2>
 800979a:	463b      	mov	r3, r7
 800979c:	461f      	mov	r7, r3
 800979e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80097a2:	2a30      	cmp	r2, #48	; 0x30
 80097a4:	d0fa      	beq.n	800979c <_dtoa_r+0xb7c>
 80097a6:	e6e1      	b.n	800956c <_dtoa_r+0x94c>
 80097a8:	9a03      	ldr	r2, [sp, #12]
 80097aa:	429a      	cmp	r2, r3
 80097ac:	d18a      	bne.n	80096c4 <_dtoa_r+0xaa4>
 80097ae:	2331      	movs	r3, #49	; 0x31
 80097b0:	f10b 0b01 	add.w	fp, fp, #1
 80097b4:	e797      	b.n	80096e6 <_dtoa_r+0xac6>
 80097b6:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <_dtoa_r+0xbc0>)
 80097b8:	f7ff ba9f 	b.w	8008cfa <_dtoa_r+0xda>
 80097bc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f47f aa77 	bne.w	8008cb2 <_dtoa_r+0x92>
 80097c4:	4b07      	ldr	r3, [pc, #28]	; (80097e4 <_dtoa_r+0xbc4>)
 80097c6:	f7ff ba98 	b.w	8008cfa <_dtoa_r+0xda>
 80097ca:	9b06      	ldr	r3, [sp, #24]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	dcb6      	bgt.n	800973e <_dtoa_r+0xb1e>
 80097d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80097d2:	2b02      	cmp	r3, #2
 80097d4:	f73f aeb5 	bgt.w	8009542 <_dtoa_r+0x922>
 80097d8:	e7b1      	b.n	800973e <_dtoa_r+0xb1e>
 80097da:	bf00      	nop
 80097dc:	0800a9ca 	.word	0x0800a9ca
 80097e0:	0800a92a 	.word	0x0800a92a
 80097e4:	0800a94e 	.word	0x0800a94e

080097e8 <_free_r>:
 80097e8:	b538      	push	{r3, r4, r5, lr}
 80097ea:	4605      	mov	r5, r0
 80097ec:	2900      	cmp	r1, #0
 80097ee:	d040      	beq.n	8009872 <_free_r+0x8a>
 80097f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097f4:	1f0c      	subs	r4, r1, #4
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bfb8      	it	lt
 80097fa:	18e4      	addlt	r4, r4, r3
 80097fc:	f000 f8e4 	bl	80099c8 <__malloc_lock>
 8009800:	4a1c      	ldr	r2, [pc, #112]	; (8009874 <_free_r+0x8c>)
 8009802:	6813      	ldr	r3, [r2, #0]
 8009804:	b933      	cbnz	r3, 8009814 <_free_r+0x2c>
 8009806:	6063      	str	r3, [r4, #4]
 8009808:	6014      	str	r4, [r2, #0]
 800980a:	4628      	mov	r0, r5
 800980c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009810:	f000 b8e0 	b.w	80099d4 <__malloc_unlock>
 8009814:	42a3      	cmp	r3, r4
 8009816:	d908      	bls.n	800982a <_free_r+0x42>
 8009818:	6820      	ldr	r0, [r4, #0]
 800981a:	1821      	adds	r1, r4, r0
 800981c:	428b      	cmp	r3, r1
 800981e:	bf01      	itttt	eq
 8009820:	6819      	ldreq	r1, [r3, #0]
 8009822:	685b      	ldreq	r3, [r3, #4]
 8009824:	1809      	addeq	r1, r1, r0
 8009826:	6021      	streq	r1, [r4, #0]
 8009828:	e7ed      	b.n	8009806 <_free_r+0x1e>
 800982a:	461a      	mov	r2, r3
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	b10b      	cbz	r3, 8009834 <_free_r+0x4c>
 8009830:	42a3      	cmp	r3, r4
 8009832:	d9fa      	bls.n	800982a <_free_r+0x42>
 8009834:	6811      	ldr	r1, [r2, #0]
 8009836:	1850      	adds	r0, r2, r1
 8009838:	42a0      	cmp	r0, r4
 800983a:	d10b      	bne.n	8009854 <_free_r+0x6c>
 800983c:	6820      	ldr	r0, [r4, #0]
 800983e:	4401      	add	r1, r0
 8009840:	1850      	adds	r0, r2, r1
 8009842:	4283      	cmp	r3, r0
 8009844:	6011      	str	r1, [r2, #0]
 8009846:	d1e0      	bne.n	800980a <_free_r+0x22>
 8009848:	6818      	ldr	r0, [r3, #0]
 800984a:	685b      	ldr	r3, [r3, #4]
 800984c:	4408      	add	r0, r1
 800984e:	6010      	str	r0, [r2, #0]
 8009850:	6053      	str	r3, [r2, #4]
 8009852:	e7da      	b.n	800980a <_free_r+0x22>
 8009854:	d902      	bls.n	800985c <_free_r+0x74>
 8009856:	230c      	movs	r3, #12
 8009858:	602b      	str	r3, [r5, #0]
 800985a:	e7d6      	b.n	800980a <_free_r+0x22>
 800985c:	6820      	ldr	r0, [r4, #0]
 800985e:	1821      	adds	r1, r4, r0
 8009860:	428b      	cmp	r3, r1
 8009862:	bf01      	itttt	eq
 8009864:	6819      	ldreq	r1, [r3, #0]
 8009866:	685b      	ldreq	r3, [r3, #4]
 8009868:	1809      	addeq	r1, r1, r0
 800986a:	6021      	streq	r1, [r4, #0]
 800986c:	6063      	str	r3, [r4, #4]
 800986e:	6054      	str	r4, [r2, #4]
 8009870:	e7cb      	b.n	800980a <_free_r+0x22>
 8009872:	bd38      	pop	{r3, r4, r5, pc}
 8009874:	20001688 	.word	0x20001688

08009878 <malloc>:
 8009878:	4b02      	ldr	r3, [pc, #8]	; (8009884 <malloc+0xc>)
 800987a:	4601      	mov	r1, r0
 800987c:	6818      	ldr	r0, [r3, #0]
 800987e:	f000 b823 	b.w	80098c8 <_malloc_r>
 8009882:	bf00      	nop
 8009884:	20000068 	.word	0x20000068

08009888 <sbrk_aligned>:
 8009888:	b570      	push	{r4, r5, r6, lr}
 800988a:	4e0e      	ldr	r6, [pc, #56]	; (80098c4 <sbrk_aligned+0x3c>)
 800988c:	460c      	mov	r4, r1
 800988e:	6831      	ldr	r1, [r6, #0]
 8009890:	4605      	mov	r5, r0
 8009892:	b911      	cbnz	r1, 800989a <sbrk_aligned+0x12>
 8009894:	f000 fcc6 	bl	800a224 <_sbrk_r>
 8009898:	6030      	str	r0, [r6, #0]
 800989a:	4621      	mov	r1, r4
 800989c:	4628      	mov	r0, r5
 800989e:	f000 fcc1 	bl	800a224 <_sbrk_r>
 80098a2:	1c43      	adds	r3, r0, #1
 80098a4:	d00a      	beq.n	80098bc <sbrk_aligned+0x34>
 80098a6:	1cc4      	adds	r4, r0, #3
 80098a8:	f024 0403 	bic.w	r4, r4, #3
 80098ac:	42a0      	cmp	r0, r4
 80098ae:	d007      	beq.n	80098c0 <sbrk_aligned+0x38>
 80098b0:	1a21      	subs	r1, r4, r0
 80098b2:	4628      	mov	r0, r5
 80098b4:	f000 fcb6 	bl	800a224 <_sbrk_r>
 80098b8:	3001      	adds	r0, #1
 80098ba:	d101      	bne.n	80098c0 <sbrk_aligned+0x38>
 80098bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80098c0:	4620      	mov	r0, r4
 80098c2:	bd70      	pop	{r4, r5, r6, pc}
 80098c4:	2000168c 	.word	0x2000168c

080098c8 <_malloc_r>:
 80098c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80098cc:	1ccd      	adds	r5, r1, #3
 80098ce:	f025 0503 	bic.w	r5, r5, #3
 80098d2:	3508      	adds	r5, #8
 80098d4:	2d0c      	cmp	r5, #12
 80098d6:	bf38      	it	cc
 80098d8:	250c      	movcc	r5, #12
 80098da:	2d00      	cmp	r5, #0
 80098dc:	4607      	mov	r7, r0
 80098de:	db01      	blt.n	80098e4 <_malloc_r+0x1c>
 80098e0:	42a9      	cmp	r1, r5
 80098e2:	d905      	bls.n	80098f0 <_malloc_r+0x28>
 80098e4:	230c      	movs	r3, #12
 80098e6:	2600      	movs	r6, #0
 80098e8:	603b      	str	r3, [r7, #0]
 80098ea:	4630      	mov	r0, r6
 80098ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80098f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80099c4 <_malloc_r+0xfc>
 80098f4:	f000 f868 	bl	80099c8 <__malloc_lock>
 80098f8:	f8d8 3000 	ldr.w	r3, [r8]
 80098fc:	461c      	mov	r4, r3
 80098fe:	bb5c      	cbnz	r4, 8009958 <_malloc_r+0x90>
 8009900:	4629      	mov	r1, r5
 8009902:	4638      	mov	r0, r7
 8009904:	f7ff ffc0 	bl	8009888 <sbrk_aligned>
 8009908:	1c43      	adds	r3, r0, #1
 800990a:	4604      	mov	r4, r0
 800990c:	d155      	bne.n	80099ba <_malloc_r+0xf2>
 800990e:	f8d8 4000 	ldr.w	r4, [r8]
 8009912:	4626      	mov	r6, r4
 8009914:	2e00      	cmp	r6, #0
 8009916:	d145      	bne.n	80099a4 <_malloc_r+0xdc>
 8009918:	2c00      	cmp	r4, #0
 800991a:	d048      	beq.n	80099ae <_malloc_r+0xe6>
 800991c:	6823      	ldr	r3, [r4, #0]
 800991e:	4631      	mov	r1, r6
 8009920:	4638      	mov	r0, r7
 8009922:	eb04 0903 	add.w	r9, r4, r3
 8009926:	f000 fc7d 	bl	800a224 <_sbrk_r>
 800992a:	4581      	cmp	r9, r0
 800992c:	d13f      	bne.n	80099ae <_malloc_r+0xe6>
 800992e:	6821      	ldr	r1, [r4, #0]
 8009930:	4638      	mov	r0, r7
 8009932:	1a6d      	subs	r5, r5, r1
 8009934:	4629      	mov	r1, r5
 8009936:	f7ff ffa7 	bl	8009888 <sbrk_aligned>
 800993a:	3001      	adds	r0, #1
 800993c:	d037      	beq.n	80099ae <_malloc_r+0xe6>
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	442b      	add	r3, r5
 8009942:	6023      	str	r3, [r4, #0]
 8009944:	f8d8 3000 	ldr.w	r3, [r8]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d038      	beq.n	80099be <_malloc_r+0xf6>
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	42a2      	cmp	r2, r4
 8009950:	d12b      	bne.n	80099aa <_malloc_r+0xe2>
 8009952:	2200      	movs	r2, #0
 8009954:	605a      	str	r2, [r3, #4]
 8009956:	e00f      	b.n	8009978 <_malloc_r+0xb0>
 8009958:	6822      	ldr	r2, [r4, #0]
 800995a:	1b52      	subs	r2, r2, r5
 800995c:	d41f      	bmi.n	800999e <_malloc_r+0xd6>
 800995e:	2a0b      	cmp	r2, #11
 8009960:	d917      	bls.n	8009992 <_malloc_r+0xca>
 8009962:	1961      	adds	r1, r4, r5
 8009964:	42a3      	cmp	r3, r4
 8009966:	6025      	str	r5, [r4, #0]
 8009968:	bf18      	it	ne
 800996a:	6059      	strne	r1, [r3, #4]
 800996c:	6863      	ldr	r3, [r4, #4]
 800996e:	bf08      	it	eq
 8009970:	f8c8 1000 	streq.w	r1, [r8]
 8009974:	5162      	str	r2, [r4, r5]
 8009976:	604b      	str	r3, [r1, #4]
 8009978:	4638      	mov	r0, r7
 800997a:	f104 060b 	add.w	r6, r4, #11
 800997e:	f000 f829 	bl	80099d4 <__malloc_unlock>
 8009982:	f026 0607 	bic.w	r6, r6, #7
 8009986:	1d23      	adds	r3, r4, #4
 8009988:	1af2      	subs	r2, r6, r3
 800998a:	d0ae      	beq.n	80098ea <_malloc_r+0x22>
 800998c:	1b9b      	subs	r3, r3, r6
 800998e:	50a3      	str	r3, [r4, r2]
 8009990:	e7ab      	b.n	80098ea <_malloc_r+0x22>
 8009992:	42a3      	cmp	r3, r4
 8009994:	6862      	ldr	r2, [r4, #4]
 8009996:	d1dd      	bne.n	8009954 <_malloc_r+0x8c>
 8009998:	f8c8 2000 	str.w	r2, [r8]
 800999c:	e7ec      	b.n	8009978 <_malloc_r+0xb0>
 800999e:	4623      	mov	r3, r4
 80099a0:	6864      	ldr	r4, [r4, #4]
 80099a2:	e7ac      	b.n	80098fe <_malloc_r+0x36>
 80099a4:	4634      	mov	r4, r6
 80099a6:	6876      	ldr	r6, [r6, #4]
 80099a8:	e7b4      	b.n	8009914 <_malloc_r+0x4c>
 80099aa:	4613      	mov	r3, r2
 80099ac:	e7cc      	b.n	8009948 <_malloc_r+0x80>
 80099ae:	230c      	movs	r3, #12
 80099b0:	4638      	mov	r0, r7
 80099b2:	603b      	str	r3, [r7, #0]
 80099b4:	f000 f80e 	bl	80099d4 <__malloc_unlock>
 80099b8:	e797      	b.n	80098ea <_malloc_r+0x22>
 80099ba:	6025      	str	r5, [r4, #0]
 80099bc:	e7dc      	b.n	8009978 <_malloc_r+0xb0>
 80099be:	605b      	str	r3, [r3, #4]
 80099c0:	deff      	udf	#255	; 0xff
 80099c2:	bf00      	nop
 80099c4:	20001688 	.word	0x20001688

080099c8 <__malloc_lock>:
 80099c8:	4801      	ldr	r0, [pc, #4]	; (80099d0 <__malloc_lock+0x8>)
 80099ca:	f7ff b880 	b.w	8008ace <__retarget_lock_acquire_recursive>
 80099ce:	bf00      	nop
 80099d0:	20001684 	.word	0x20001684

080099d4 <__malloc_unlock>:
 80099d4:	4801      	ldr	r0, [pc, #4]	; (80099dc <__malloc_unlock+0x8>)
 80099d6:	f7ff b87b 	b.w	8008ad0 <__retarget_lock_release_recursive>
 80099da:	bf00      	nop
 80099dc:	20001684 	.word	0x20001684

080099e0 <_Balloc>:
 80099e0:	b570      	push	{r4, r5, r6, lr}
 80099e2:	69c6      	ldr	r6, [r0, #28]
 80099e4:	4604      	mov	r4, r0
 80099e6:	460d      	mov	r5, r1
 80099e8:	b976      	cbnz	r6, 8009a08 <_Balloc+0x28>
 80099ea:	2010      	movs	r0, #16
 80099ec:	f7ff ff44 	bl	8009878 <malloc>
 80099f0:	4602      	mov	r2, r0
 80099f2:	61e0      	str	r0, [r4, #28]
 80099f4:	b920      	cbnz	r0, 8009a00 <_Balloc+0x20>
 80099f6:	216b      	movs	r1, #107	; 0x6b
 80099f8:	4b17      	ldr	r3, [pc, #92]	; (8009a58 <_Balloc+0x78>)
 80099fa:	4818      	ldr	r0, [pc, #96]	; (8009a5c <_Balloc+0x7c>)
 80099fc:	f000 fc22 	bl	800a244 <__assert_func>
 8009a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a04:	6006      	str	r6, [r0, #0]
 8009a06:	60c6      	str	r6, [r0, #12]
 8009a08:	69e6      	ldr	r6, [r4, #28]
 8009a0a:	68f3      	ldr	r3, [r6, #12]
 8009a0c:	b183      	cbz	r3, 8009a30 <_Balloc+0x50>
 8009a0e:	69e3      	ldr	r3, [r4, #28]
 8009a10:	68db      	ldr	r3, [r3, #12]
 8009a12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a16:	b9b8      	cbnz	r0, 8009a48 <_Balloc+0x68>
 8009a18:	2101      	movs	r1, #1
 8009a1a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a1e:	1d72      	adds	r2, r6, #5
 8009a20:	4620      	mov	r0, r4
 8009a22:	0092      	lsls	r2, r2, #2
 8009a24:	f000 fc2c 	bl	800a280 <_calloc_r>
 8009a28:	b160      	cbz	r0, 8009a44 <_Balloc+0x64>
 8009a2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a2e:	e00e      	b.n	8009a4e <_Balloc+0x6e>
 8009a30:	2221      	movs	r2, #33	; 0x21
 8009a32:	2104      	movs	r1, #4
 8009a34:	4620      	mov	r0, r4
 8009a36:	f000 fc23 	bl	800a280 <_calloc_r>
 8009a3a:	69e3      	ldr	r3, [r4, #28]
 8009a3c:	60f0      	str	r0, [r6, #12]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d1e4      	bne.n	8009a0e <_Balloc+0x2e>
 8009a44:	2000      	movs	r0, #0
 8009a46:	bd70      	pop	{r4, r5, r6, pc}
 8009a48:	6802      	ldr	r2, [r0, #0]
 8009a4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a4e:	2300      	movs	r3, #0
 8009a50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a54:	e7f7      	b.n	8009a46 <_Balloc+0x66>
 8009a56:	bf00      	nop
 8009a58:	0800a95b 	.word	0x0800a95b
 8009a5c:	0800a9db 	.word	0x0800a9db

08009a60 <_Bfree>:
 8009a60:	b570      	push	{r4, r5, r6, lr}
 8009a62:	69c6      	ldr	r6, [r0, #28]
 8009a64:	4605      	mov	r5, r0
 8009a66:	460c      	mov	r4, r1
 8009a68:	b976      	cbnz	r6, 8009a88 <_Bfree+0x28>
 8009a6a:	2010      	movs	r0, #16
 8009a6c:	f7ff ff04 	bl	8009878 <malloc>
 8009a70:	4602      	mov	r2, r0
 8009a72:	61e8      	str	r0, [r5, #28]
 8009a74:	b920      	cbnz	r0, 8009a80 <_Bfree+0x20>
 8009a76:	218f      	movs	r1, #143	; 0x8f
 8009a78:	4b08      	ldr	r3, [pc, #32]	; (8009a9c <_Bfree+0x3c>)
 8009a7a:	4809      	ldr	r0, [pc, #36]	; (8009aa0 <_Bfree+0x40>)
 8009a7c:	f000 fbe2 	bl	800a244 <__assert_func>
 8009a80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a84:	6006      	str	r6, [r0, #0]
 8009a86:	60c6      	str	r6, [r0, #12]
 8009a88:	b13c      	cbz	r4, 8009a9a <_Bfree+0x3a>
 8009a8a:	69eb      	ldr	r3, [r5, #28]
 8009a8c:	6862      	ldr	r2, [r4, #4]
 8009a8e:	68db      	ldr	r3, [r3, #12]
 8009a90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a94:	6021      	str	r1, [r4, #0]
 8009a96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a9a:	bd70      	pop	{r4, r5, r6, pc}
 8009a9c:	0800a95b 	.word	0x0800a95b
 8009aa0:	0800a9db 	.word	0x0800a9db

08009aa4 <__multadd>:
 8009aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aa8:	4607      	mov	r7, r0
 8009aaa:	460c      	mov	r4, r1
 8009aac:	461e      	mov	r6, r3
 8009aae:	2000      	movs	r0, #0
 8009ab0:	690d      	ldr	r5, [r1, #16]
 8009ab2:	f101 0c14 	add.w	ip, r1, #20
 8009ab6:	f8dc 3000 	ldr.w	r3, [ip]
 8009aba:	3001      	adds	r0, #1
 8009abc:	b299      	uxth	r1, r3
 8009abe:	fb02 6101 	mla	r1, r2, r1, r6
 8009ac2:	0c1e      	lsrs	r6, r3, #16
 8009ac4:	0c0b      	lsrs	r3, r1, #16
 8009ac6:	fb02 3306 	mla	r3, r2, r6, r3
 8009aca:	b289      	uxth	r1, r1
 8009acc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ad0:	4285      	cmp	r5, r0
 8009ad2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009ad6:	f84c 1b04 	str.w	r1, [ip], #4
 8009ada:	dcec      	bgt.n	8009ab6 <__multadd+0x12>
 8009adc:	b30e      	cbz	r6, 8009b22 <__multadd+0x7e>
 8009ade:	68a3      	ldr	r3, [r4, #8]
 8009ae0:	42ab      	cmp	r3, r5
 8009ae2:	dc19      	bgt.n	8009b18 <__multadd+0x74>
 8009ae4:	6861      	ldr	r1, [r4, #4]
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	3101      	adds	r1, #1
 8009aea:	f7ff ff79 	bl	80099e0 <_Balloc>
 8009aee:	4680      	mov	r8, r0
 8009af0:	b928      	cbnz	r0, 8009afe <__multadd+0x5a>
 8009af2:	4602      	mov	r2, r0
 8009af4:	21ba      	movs	r1, #186	; 0xba
 8009af6:	4b0c      	ldr	r3, [pc, #48]	; (8009b28 <__multadd+0x84>)
 8009af8:	480c      	ldr	r0, [pc, #48]	; (8009b2c <__multadd+0x88>)
 8009afa:	f000 fba3 	bl	800a244 <__assert_func>
 8009afe:	6922      	ldr	r2, [r4, #16]
 8009b00:	f104 010c 	add.w	r1, r4, #12
 8009b04:	3202      	adds	r2, #2
 8009b06:	0092      	lsls	r2, r2, #2
 8009b08:	300c      	adds	r0, #12
 8009b0a:	f7fe fff0 	bl	8008aee <memcpy>
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4638      	mov	r0, r7
 8009b12:	f7ff ffa5 	bl	8009a60 <_Bfree>
 8009b16:	4644      	mov	r4, r8
 8009b18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b1c:	3501      	adds	r5, #1
 8009b1e:	615e      	str	r6, [r3, #20]
 8009b20:	6125      	str	r5, [r4, #16]
 8009b22:	4620      	mov	r0, r4
 8009b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b28:	0800a9ca 	.word	0x0800a9ca
 8009b2c:	0800a9db 	.word	0x0800a9db

08009b30 <__hi0bits>:
 8009b30:	0c02      	lsrs	r2, r0, #16
 8009b32:	0412      	lsls	r2, r2, #16
 8009b34:	4603      	mov	r3, r0
 8009b36:	b9ca      	cbnz	r2, 8009b6c <__hi0bits+0x3c>
 8009b38:	0403      	lsls	r3, r0, #16
 8009b3a:	2010      	movs	r0, #16
 8009b3c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009b40:	bf04      	itt	eq
 8009b42:	021b      	lsleq	r3, r3, #8
 8009b44:	3008      	addeq	r0, #8
 8009b46:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009b4a:	bf04      	itt	eq
 8009b4c:	011b      	lsleq	r3, r3, #4
 8009b4e:	3004      	addeq	r0, #4
 8009b50:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009b54:	bf04      	itt	eq
 8009b56:	009b      	lsleq	r3, r3, #2
 8009b58:	3002      	addeq	r0, #2
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	db05      	blt.n	8009b6a <__hi0bits+0x3a>
 8009b5e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009b62:	f100 0001 	add.w	r0, r0, #1
 8009b66:	bf08      	it	eq
 8009b68:	2020      	moveq	r0, #32
 8009b6a:	4770      	bx	lr
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	e7e5      	b.n	8009b3c <__hi0bits+0xc>

08009b70 <__lo0bits>:
 8009b70:	6803      	ldr	r3, [r0, #0]
 8009b72:	4602      	mov	r2, r0
 8009b74:	f013 0007 	ands.w	r0, r3, #7
 8009b78:	d00b      	beq.n	8009b92 <__lo0bits+0x22>
 8009b7a:	07d9      	lsls	r1, r3, #31
 8009b7c:	d421      	bmi.n	8009bc2 <__lo0bits+0x52>
 8009b7e:	0798      	lsls	r0, r3, #30
 8009b80:	bf49      	itett	mi
 8009b82:	085b      	lsrmi	r3, r3, #1
 8009b84:	089b      	lsrpl	r3, r3, #2
 8009b86:	2001      	movmi	r0, #1
 8009b88:	6013      	strmi	r3, [r2, #0]
 8009b8a:	bf5c      	itt	pl
 8009b8c:	2002      	movpl	r0, #2
 8009b8e:	6013      	strpl	r3, [r2, #0]
 8009b90:	4770      	bx	lr
 8009b92:	b299      	uxth	r1, r3
 8009b94:	b909      	cbnz	r1, 8009b9a <__lo0bits+0x2a>
 8009b96:	2010      	movs	r0, #16
 8009b98:	0c1b      	lsrs	r3, r3, #16
 8009b9a:	b2d9      	uxtb	r1, r3
 8009b9c:	b909      	cbnz	r1, 8009ba2 <__lo0bits+0x32>
 8009b9e:	3008      	adds	r0, #8
 8009ba0:	0a1b      	lsrs	r3, r3, #8
 8009ba2:	0719      	lsls	r1, r3, #28
 8009ba4:	bf04      	itt	eq
 8009ba6:	091b      	lsreq	r3, r3, #4
 8009ba8:	3004      	addeq	r0, #4
 8009baa:	0799      	lsls	r1, r3, #30
 8009bac:	bf04      	itt	eq
 8009bae:	089b      	lsreq	r3, r3, #2
 8009bb0:	3002      	addeq	r0, #2
 8009bb2:	07d9      	lsls	r1, r3, #31
 8009bb4:	d403      	bmi.n	8009bbe <__lo0bits+0x4e>
 8009bb6:	085b      	lsrs	r3, r3, #1
 8009bb8:	f100 0001 	add.w	r0, r0, #1
 8009bbc:	d003      	beq.n	8009bc6 <__lo0bits+0x56>
 8009bbe:	6013      	str	r3, [r2, #0]
 8009bc0:	4770      	bx	lr
 8009bc2:	2000      	movs	r0, #0
 8009bc4:	4770      	bx	lr
 8009bc6:	2020      	movs	r0, #32
 8009bc8:	4770      	bx	lr
	...

08009bcc <__i2b>:
 8009bcc:	b510      	push	{r4, lr}
 8009bce:	460c      	mov	r4, r1
 8009bd0:	2101      	movs	r1, #1
 8009bd2:	f7ff ff05 	bl	80099e0 <_Balloc>
 8009bd6:	4602      	mov	r2, r0
 8009bd8:	b928      	cbnz	r0, 8009be6 <__i2b+0x1a>
 8009bda:	f240 1145 	movw	r1, #325	; 0x145
 8009bde:	4b04      	ldr	r3, [pc, #16]	; (8009bf0 <__i2b+0x24>)
 8009be0:	4804      	ldr	r0, [pc, #16]	; (8009bf4 <__i2b+0x28>)
 8009be2:	f000 fb2f 	bl	800a244 <__assert_func>
 8009be6:	2301      	movs	r3, #1
 8009be8:	6144      	str	r4, [r0, #20]
 8009bea:	6103      	str	r3, [r0, #16]
 8009bec:	bd10      	pop	{r4, pc}
 8009bee:	bf00      	nop
 8009bf0:	0800a9ca 	.word	0x0800a9ca
 8009bf4:	0800a9db 	.word	0x0800a9db

08009bf8 <__multiply>:
 8009bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bfc:	4691      	mov	r9, r2
 8009bfe:	690a      	ldr	r2, [r1, #16]
 8009c00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009c04:	460c      	mov	r4, r1
 8009c06:	429a      	cmp	r2, r3
 8009c08:	bfbe      	ittt	lt
 8009c0a:	460b      	movlt	r3, r1
 8009c0c:	464c      	movlt	r4, r9
 8009c0e:	4699      	movlt	r9, r3
 8009c10:	6927      	ldr	r7, [r4, #16]
 8009c12:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009c16:	68a3      	ldr	r3, [r4, #8]
 8009c18:	6861      	ldr	r1, [r4, #4]
 8009c1a:	eb07 060a 	add.w	r6, r7, sl
 8009c1e:	42b3      	cmp	r3, r6
 8009c20:	b085      	sub	sp, #20
 8009c22:	bfb8      	it	lt
 8009c24:	3101      	addlt	r1, #1
 8009c26:	f7ff fedb 	bl	80099e0 <_Balloc>
 8009c2a:	b930      	cbnz	r0, 8009c3a <__multiply+0x42>
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009c32:	4b43      	ldr	r3, [pc, #268]	; (8009d40 <__multiply+0x148>)
 8009c34:	4843      	ldr	r0, [pc, #268]	; (8009d44 <__multiply+0x14c>)
 8009c36:	f000 fb05 	bl	800a244 <__assert_func>
 8009c3a:	f100 0514 	add.w	r5, r0, #20
 8009c3e:	462b      	mov	r3, r5
 8009c40:	2200      	movs	r2, #0
 8009c42:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009c46:	4543      	cmp	r3, r8
 8009c48:	d321      	bcc.n	8009c8e <__multiply+0x96>
 8009c4a:	f104 0314 	add.w	r3, r4, #20
 8009c4e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009c52:	f109 0314 	add.w	r3, r9, #20
 8009c56:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009c5a:	9202      	str	r2, [sp, #8]
 8009c5c:	1b3a      	subs	r2, r7, r4
 8009c5e:	3a15      	subs	r2, #21
 8009c60:	f022 0203 	bic.w	r2, r2, #3
 8009c64:	3204      	adds	r2, #4
 8009c66:	f104 0115 	add.w	r1, r4, #21
 8009c6a:	428f      	cmp	r7, r1
 8009c6c:	bf38      	it	cc
 8009c6e:	2204      	movcc	r2, #4
 8009c70:	9201      	str	r2, [sp, #4]
 8009c72:	9a02      	ldr	r2, [sp, #8]
 8009c74:	9303      	str	r3, [sp, #12]
 8009c76:	429a      	cmp	r2, r3
 8009c78:	d80c      	bhi.n	8009c94 <__multiply+0x9c>
 8009c7a:	2e00      	cmp	r6, #0
 8009c7c:	dd03      	ble.n	8009c86 <__multiply+0x8e>
 8009c7e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d05a      	beq.n	8009d3c <__multiply+0x144>
 8009c86:	6106      	str	r6, [r0, #16]
 8009c88:	b005      	add	sp, #20
 8009c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c8e:	f843 2b04 	str.w	r2, [r3], #4
 8009c92:	e7d8      	b.n	8009c46 <__multiply+0x4e>
 8009c94:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c98:	f1ba 0f00 	cmp.w	sl, #0
 8009c9c:	d023      	beq.n	8009ce6 <__multiply+0xee>
 8009c9e:	46a9      	mov	r9, r5
 8009ca0:	f04f 0c00 	mov.w	ip, #0
 8009ca4:	f104 0e14 	add.w	lr, r4, #20
 8009ca8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009cac:	f8d9 1000 	ldr.w	r1, [r9]
 8009cb0:	fa1f fb82 	uxth.w	fp, r2
 8009cb4:	b289      	uxth	r1, r1
 8009cb6:	fb0a 110b 	mla	r1, sl, fp, r1
 8009cba:	4461      	add	r1, ip
 8009cbc:	f8d9 c000 	ldr.w	ip, [r9]
 8009cc0:	0c12      	lsrs	r2, r2, #16
 8009cc2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009cc6:	fb0a c202 	mla	r2, sl, r2, ip
 8009cca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009cce:	b289      	uxth	r1, r1
 8009cd0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009cd4:	4577      	cmp	r7, lr
 8009cd6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009cda:	f849 1b04 	str.w	r1, [r9], #4
 8009cde:	d8e3      	bhi.n	8009ca8 <__multiply+0xb0>
 8009ce0:	9a01      	ldr	r2, [sp, #4]
 8009ce2:	f845 c002 	str.w	ip, [r5, r2]
 8009ce6:	9a03      	ldr	r2, [sp, #12]
 8009ce8:	3304      	adds	r3, #4
 8009cea:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009cee:	f1b9 0f00 	cmp.w	r9, #0
 8009cf2:	d021      	beq.n	8009d38 <__multiply+0x140>
 8009cf4:	46ae      	mov	lr, r5
 8009cf6:	f04f 0a00 	mov.w	sl, #0
 8009cfa:	6829      	ldr	r1, [r5, #0]
 8009cfc:	f104 0c14 	add.w	ip, r4, #20
 8009d00:	f8bc b000 	ldrh.w	fp, [ip]
 8009d04:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009d08:	b289      	uxth	r1, r1
 8009d0a:	fb09 220b 	mla	r2, r9, fp, r2
 8009d0e:	4452      	add	r2, sl
 8009d10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d14:	f84e 1b04 	str.w	r1, [lr], #4
 8009d18:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009d1c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d20:	f8be 1000 	ldrh.w	r1, [lr]
 8009d24:	4567      	cmp	r7, ip
 8009d26:	fb09 110a 	mla	r1, r9, sl, r1
 8009d2a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009d2e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009d32:	d8e5      	bhi.n	8009d00 <__multiply+0x108>
 8009d34:	9a01      	ldr	r2, [sp, #4]
 8009d36:	50a9      	str	r1, [r5, r2]
 8009d38:	3504      	adds	r5, #4
 8009d3a:	e79a      	b.n	8009c72 <__multiply+0x7a>
 8009d3c:	3e01      	subs	r6, #1
 8009d3e:	e79c      	b.n	8009c7a <__multiply+0x82>
 8009d40:	0800a9ca 	.word	0x0800a9ca
 8009d44:	0800a9db 	.word	0x0800a9db

08009d48 <__pow5mult>:
 8009d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d4c:	4615      	mov	r5, r2
 8009d4e:	f012 0203 	ands.w	r2, r2, #3
 8009d52:	4606      	mov	r6, r0
 8009d54:	460f      	mov	r7, r1
 8009d56:	d007      	beq.n	8009d68 <__pow5mult+0x20>
 8009d58:	4c25      	ldr	r4, [pc, #148]	; (8009df0 <__pow5mult+0xa8>)
 8009d5a:	3a01      	subs	r2, #1
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009d62:	f7ff fe9f 	bl	8009aa4 <__multadd>
 8009d66:	4607      	mov	r7, r0
 8009d68:	10ad      	asrs	r5, r5, #2
 8009d6a:	d03d      	beq.n	8009de8 <__pow5mult+0xa0>
 8009d6c:	69f4      	ldr	r4, [r6, #28]
 8009d6e:	b97c      	cbnz	r4, 8009d90 <__pow5mult+0x48>
 8009d70:	2010      	movs	r0, #16
 8009d72:	f7ff fd81 	bl	8009878 <malloc>
 8009d76:	4602      	mov	r2, r0
 8009d78:	61f0      	str	r0, [r6, #28]
 8009d7a:	b928      	cbnz	r0, 8009d88 <__pow5mult+0x40>
 8009d7c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009d80:	4b1c      	ldr	r3, [pc, #112]	; (8009df4 <__pow5mult+0xac>)
 8009d82:	481d      	ldr	r0, [pc, #116]	; (8009df8 <__pow5mult+0xb0>)
 8009d84:	f000 fa5e 	bl	800a244 <__assert_func>
 8009d88:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d8c:	6004      	str	r4, [r0, #0]
 8009d8e:	60c4      	str	r4, [r0, #12]
 8009d90:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009d94:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d98:	b94c      	cbnz	r4, 8009dae <__pow5mult+0x66>
 8009d9a:	f240 2171 	movw	r1, #625	; 0x271
 8009d9e:	4630      	mov	r0, r6
 8009da0:	f7ff ff14 	bl	8009bcc <__i2b>
 8009da4:	2300      	movs	r3, #0
 8009da6:	4604      	mov	r4, r0
 8009da8:	f8c8 0008 	str.w	r0, [r8, #8]
 8009dac:	6003      	str	r3, [r0, #0]
 8009dae:	f04f 0900 	mov.w	r9, #0
 8009db2:	07eb      	lsls	r3, r5, #31
 8009db4:	d50a      	bpl.n	8009dcc <__pow5mult+0x84>
 8009db6:	4639      	mov	r1, r7
 8009db8:	4622      	mov	r2, r4
 8009dba:	4630      	mov	r0, r6
 8009dbc:	f7ff ff1c 	bl	8009bf8 <__multiply>
 8009dc0:	4680      	mov	r8, r0
 8009dc2:	4639      	mov	r1, r7
 8009dc4:	4630      	mov	r0, r6
 8009dc6:	f7ff fe4b 	bl	8009a60 <_Bfree>
 8009dca:	4647      	mov	r7, r8
 8009dcc:	106d      	asrs	r5, r5, #1
 8009dce:	d00b      	beq.n	8009de8 <__pow5mult+0xa0>
 8009dd0:	6820      	ldr	r0, [r4, #0]
 8009dd2:	b938      	cbnz	r0, 8009de4 <__pow5mult+0x9c>
 8009dd4:	4622      	mov	r2, r4
 8009dd6:	4621      	mov	r1, r4
 8009dd8:	4630      	mov	r0, r6
 8009dda:	f7ff ff0d 	bl	8009bf8 <__multiply>
 8009dde:	6020      	str	r0, [r4, #0]
 8009de0:	f8c0 9000 	str.w	r9, [r0]
 8009de4:	4604      	mov	r4, r0
 8009de6:	e7e4      	b.n	8009db2 <__pow5mult+0x6a>
 8009de8:	4638      	mov	r0, r7
 8009dea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009dee:	bf00      	nop
 8009df0:	0800ab28 	.word	0x0800ab28
 8009df4:	0800a95b 	.word	0x0800a95b
 8009df8:	0800a9db 	.word	0x0800a9db

08009dfc <__lshift>:
 8009dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e00:	460c      	mov	r4, r1
 8009e02:	4607      	mov	r7, r0
 8009e04:	4691      	mov	r9, r2
 8009e06:	6923      	ldr	r3, [r4, #16]
 8009e08:	6849      	ldr	r1, [r1, #4]
 8009e0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e0e:	68a3      	ldr	r3, [r4, #8]
 8009e10:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e14:	f108 0601 	add.w	r6, r8, #1
 8009e18:	42b3      	cmp	r3, r6
 8009e1a:	db0b      	blt.n	8009e34 <__lshift+0x38>
 8009e1c:	4638      	mov	r0, r7
 8009e1e:	f7ff fddf 	bl	80099e0 <_Balloc>
 8009e22:	4605      	mov	r5, r0
 8009e24:	b948      	cbnz	r0, 8009e3a <__lshift+0x3e>
 8009e26:	4602      	mov	r2, r0
 8009e28:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009e2c:	4b27      	ldr	r3, [pc, #156]	; (8009ecc <__lshift+0xd0>)
 8009e2e:	4828      	ldr	r0, [pc, #160]	; (8009ed0 <__lshift+0xd4>)
 8009e30:	f000 fa08 	bl	800a244 <__assert_func>
 8009e34:	3101      	adds	r1, #1
 8009e36:	005b      	lsls	r3, r3, #1
 8009e38:	e7ee      	b.n	8009e18 <__lshift+0x1c>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	f100 0114 	add.w	r1, r0, #20
 8009e40:	f100 0210 	add.w	r2, r0, #16
 8009e44:	4618      	mov	r0, r3
 8009e46:	4553      	cmp	r3, sl
 8009e48:	db33      	blt.n	8009eb2 <__lshift+0xb6>
 8009e4a:	6920      	ldr	r0, [r4, #16]
 8009e4c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009e50:	f104 0314 	add.w	r3, r4, #20
 8009e54:	f019 091f 	ands.w	r9, r9, #31
 8009e58:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009e5c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009e60:	d02b      	beq.n	8009eba <__lshift+0xbe>
 8009e62:	468a      	mov	sl, r1
 8009e64:	2200      	movs	r2, #0
 8009e66:	f1c9 0e20 	rsb	lr, r9, #32
 8009e6a:	6818      	ldr	r0, [r3, #0]
 8009e6c:	fa00 f009 	lsl.w	r0, r0, r9
 8009e70:	4310      	orrs	r0, r2
 8009e72:	f84a 0b04 	str.w	r0, [sl], #4
 8009e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e7a:	459c      	cmp	ip, r3
 8009e7c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e80:	d8f3      	bhi.n	8009e6a <__lshift+0x6e>
 8009e82:	ebac 0304 	sub.w	r3, ip, r4
 8009e86:	3b15      	subs	r3, #21
 8009e88:	f023 0303 	bic.w	r3, r3, #3
 8009e8c:	3304      	adds	r3, #4
 8009e8e:	f104 0015 	add.w	r0, r4, #21
 8009e92:	4584      	cmp	ip, r0
 8009e94:	bf38      	it	cc
 8009e96:	2304      	movcc	r3, #4
 8009e98:	50ca      	str	r2, [r1, r3]
 8009e9a:	b10a      	cbz	r2, 8009ea0 <__lshift+0xa4>
 8009e9c:	f108 0602 	add.w	r6, r8, #2
 8009ea0:	3e01      	subs	r6, #1
 8009ea2:	4638      	mov	r0, r7
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	612e      	str	r6, [r5, #16]
 8009ea8:	f7ff fdda 	bl	8009a60 <_Bfree>
 8009eac:	4628      	mov	r0, r5
 8009eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009eb6:	3301      	adds	r3, #1
 8009eb8:	e7c5      	b.n	8009e46 <__lshift+0x4a>
 8009eba:	3904      	subs	r1, #4
 8009ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ec0:	459c      	cmp	ip, r3
 8009ec2:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ec6:	d8f9      	bhi.n	8009ebc <__lshift+0xc0>
 8009ec8:	e7ea      	b.n	8009ea0 <__lshift+0xa4>
 8009eca:	bf00      	nop
 8009ecc:	0800a9ca 	.word	0x0800a9ca
 8009ed0:	0800a9db 	.word	0x0800a9db

08009ed4 <__mcmp>:
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	690a      	ldr	r2, [r1, #16]
 8009ed8:	6900      	ldr	r0, [r0, #16]
 8009eda:	b530      	push	{r4, r5, lr}
 8009edc:	1a80      	subs	r0, r0, r2
 8009ede:	d10d      	bne.n	8009efc <__mcmp+0x28>
 8009ee0:	3314      	adds	r3, #20
 8009ee2:	3114      	adds	r1, #20
 8009ee4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ee8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009eec:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ef0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ef4:	4295      	cmp	r5, r2
 8009ef6:	d002      	beq.n	8009efe <__mcmp+0x2a>
 8009ef8:	d304      	bcc.n	8009f04 <__mcmp+0x30>
 8009efa:	2001      	movs	r0, #1
 8009efc:	bd30      	pop	{r4, r5, pc}
 8009efe:	42a3      	cmp	r3, r4
 8009f00:	d3f4      	bcc.n	8009eec <__mcmp+0x18>
 8009f02:	e7fb      	b.n	8009efc <__mcmp+0x28>
 8009f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009f08:	e7f8      	b.n	8009efc <__mcmp+0x28>
	...

08009f0c <__mdiff>:
 8009f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f10:	460d      	mov	r5, r1
 8009f12:	4607      	mov	r7, r0
 8009f14:	4611      	mov	r1, r2
 8009f16:	4628      	mov	r0, r5
 8009f18:	4614      	mov	r4, r2
 8009f1a:	f7ff ffdb 	bl	8009ed4 <__mcmp>
 8009f1e:	1e06      	subs	r6, r0, #0
 8009f20:	d111      	bne.n	8009f46 <__mdiff+0x3a>
 8009f22:	4631      	mov	r1, r6
 8009f24:	4638      	mov	r0, r7
 8009f26:	f7ff fd5b 	bl	80099e0 <_Balloc>
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	b928      	cbnz	r0, 8009f3a <__mdiff+0x2e>
 8009f2e:	f240 2137 	movw	r1, #567	; 0x237
 8009f32:	4b3a      	ldr	r3, [pc, #232]	; (800a01c <__mdiff+0x110>)
 8009f34:	483a      	ldr	r0, [pc, #232]	; (800a020 <__mdiff+0x114>)
 8009f36:	f000 f985 	bl	800a244 <__assert_func>
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009f40:	4610      	mov	r0, r2
 8009f42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f46:	bfa4      	itt	ge
 8009f48:	4623      	movge	r3, r4
 8009f4a:	462c      	movge	r4, r5
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	6861      	ldr	r1, [r4, #4]
 8009f50:	bfa6      	itte	ge
 8009f52:	461d      	movge	r5, r3
 8009f54:	2600      	movge	r6, #0
 8009f56:	2601      	movlt	r6, #1
 8009f58:	f7ff fd42 	bl	80099e0 <_Balloc>
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	b918      	cbnz	r0, 8009f68 <__mdiff+0x5c>
 8009f60:	f240 2145 	movw	r1, #581	; 0x245
 8009f64:	4b2d      	ldr	r3, [pc, #180]	; (800a01c <__mdiff+0x110>)
 8009f66:	e7e5      	b.n	8009f34 <__mdiff+0x28>
 8009f68:	f102 0814 	add.w	r8, r2, #20
 8009f6c:	46c2      	mov	sl, r8
 8009f6e:	f04f 0c00 	mov.w	ip, #0
 8009f72:	6927      	ldr	r7, [r4, #16]
 8009f74:	60c6      	str	r6, [r0, #12]
 8009f76:	692e      	ldr	r6, [r5, #16]
 8009f78:	f104 0014 	add.w	r0, r4, #20
 8009f7c:	f105 0914 	add.w	r9, r5, #20
 8009f80:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009f84:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f88:	3410      	adds	r4, #16
 8009f8a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8009f8e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f92:	fa1f f18b 	uxth.w	r1, fp
 8009f96:	4461      	add	r1, ip
 8009f98:	fa1f fc83 	uxth.w	ip, r3
 8009f9c:	0c1b      	lsrs	r3, r3, #16
 8009f9e:	eba1 010c 	sub.w	r1, r1, ip
 8009fa2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009fa6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009faa:	b289      	uxth	r1, r1
 8009fac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8009fb0:	454e      	cmp	r6, r9
 8009fb2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8009fb6:	f84a 1b04 	str.w	r1, [sl], #4
 8009fba:	d8e6      	bhi.n	8009f8a <__mdiff+0x7e>
 8009fbc:	1b73      	subs	r3, r6, r5
 8009fbe:	3b15      	subs	r3, #21
 8009fc0:	f023 0303 	bic.w	r3, r3, #3
 8009fc4:	3515      	adds	r5, #21
 8009fc6:	3304      	adds	r3, #4
 8009fc8:	42ae      	cmp	r6, r5
 8009fca:	bf38      	it	cc
 8009fcc:	2304      	movcc	r3, #4
 8009fce:	4418      	add	r0, r3
 8009fd0:	4443      	add	r3, r8
 8009fd2:	461e      	mov	r6, r3
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	4575      	cmp	r5, lr
 8009fd8:	d30e      	bcc.n	8009ff8 <__mdiff+0xec>
 8009fda:	f10e 0103 	add.w	r1, lr, #3
 8009fde:	1a09      	subs	r1, r1, r0
 8009fe0:	f021 0103 	bic.w	r1, r1, #3
 8009fe4:	3803      	subs	r0, #3
 8009fe6:	4586      	cmp	lr, r0
 8009fe8:	bf38      	it	cc
 8009fea:	2100      	movcc	r1, #0
 8009fec:	440b      	add	r3, r1
 8009fee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009ff2:	b189      	cbz	r1, 800a018 <__mdiff+0x10c>
 8009ff4:	6117      	str	r7, [r2, #16]
 8009ff6:	e7a3      	b.n	8009f40 <__mdiff+0x34>
 8009ff8:	f855 8b04 	ldr.w	r8, [r5], #4
 8009ffc:	fa1f f188 	uxth.w	r1, r8
 800a000:	4461      	add	r1, ip
 800a002:	140c      	asrs	r4, r1, #16
 800a004:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a008:	b289      	uxth	r1, r1
 800a00a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a00e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a012:	f846 1b04 	str.w	r1, [r6], #4
 800a016:	e7de      	b.n	8009fd6 <__mdiff+0xca>
 800a018:	3f01      	subs	r7, #1
 800a01a:	e7e8      	b.n	8009fee <__mdiff+0xe2>
 800a01c:	0800a9ca 	.word	0x0800a9ca
 800a020:	0800a9db 	.word	0x0800a9db

0800a024 <__d2b>:
 800a024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a026:	2101      	movs	r1, #1
 800a028:	4617      	mov	r7, r2
 800a02a:	461c      	mov	r4, r3
 800a02c:	9e08      	ldr	r6, [sp, #32]
 800a02e:	f7ff fcd7 	bl	80099e0 <_Balloc>
 800a032:	4605      	mov	r5, r0
 800a034:	b930      	cbnz	r0, 800a044 <__d2b+0x20>
 800a036:	4602      	mov	r2, r0
 800a038:	f240 310f 	movw	r1, #783	; 0x30f
 800a03c:	4b22      	ldr	r3, [pc, #136]	; (800a0c8 <__d2b+0xa4>)
 800a03e:	4823      	ldr	r0, [pc, #140]	; (800a0cc <__d2b+0xa8>)
 800a040:	f000 f900 	bl	800a244 <__assert_func>
 800a044:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a048:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a04c:	bb24      	cbnz	r4, 800a098 <__d2b+0x74>
 800a04e:	2f00      	cmp	r7, #0
 800a050:	9301      	str	r3, [sp, #4]
 800a052:	d026      	beq.n	800a0a2 <__d2b+0x7e>
 800a054:	4668      	mov	r0, sp
 800a056:	9700      	str	r7, [sp, #0]
 800a058:	f7ff fd8a 	bl	8009b70 <__lo0bits>
 800a05c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a060:	b1e8      	cbz	r0, 800a09e <__d2b+0x7a>
 800a062:	f1c0 0320 	rsb	r3, r0, #32
 800a066:	fa02 f303 	lsl.w	r3, r2, r3
 800a06a:	430b      	orrs	r3, r1
 800a06c:	40c2      	lsrs	r2, r0
 800a06e:	616b      	str	r3, [r5, #20]
 800a070:	9201      	str	r2, [sp, #4]
 800a072:	9b01      	ldr	r3, [sp, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	bf14      	ite	ne
 800a078:	2102      	movne	r1, #2
 800a07a:	2101      	moveq	r1, #1
 800a07c:	61ab      	str	r3, [r5, #24]
 800a07e:	6129      	str	r1, [r5, #16]
 800a080:	b1bc      	cbz	r4, 800a0b2 <__d2b+0x8e>
 800a082:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a086:	4404      	add	r4, r0
 800a088:	6034      	str	r4, [r6, #0]
 800a08a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a08e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a090:	6018      	str	r0, [r3, #0]
 800a092:	4628      	mov	r0, r5
 800a094:	b003      	add	sp, #12
 800a096:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a098:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a09c:	e7d7      	b.n	800a04e <__d2b+0x2a>
 800a09e:	6169      	str	r1, [r5, #20]
 800a0a0:	e7e7      	b.n	800a072 <__d2b+0x4e>
 800a0a2:	a801      	add	r0, sp, #4
 800a0a4:	f7ff fd64 	bl	8009b70 <__lo0bits>
 800a0a8:	9b01      	ldr	r3, [sp, #4]
 800a0aa:	2101      	movs	r1, #1
 800a0ac:	616b      	str	r3, [r5, #20]
 800a0ae:	3020      	adds	r0, #32
 800a0b0:	e7e5      	b.n	800a07e <__d2b+0x5a>
 800a0b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a0b6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a0ba:	6030      	str	r0, [r6, #0]
 800a0bc:	6918      	ldr	r0, [r3, #16]
 800a0be:	f7ff fd37 	bl	8009b30 <__hi0bits>
 800a0c2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a0c6:	e7e2      	b.n	800a08e <__d2b+0x6a>
 800a0c8:	0800a9ca 	.word	0x0800a9ca
 800a0cc:	0800a9db 	.word	0x0800a9db

0800a0d0 <__sflush_r>:
 800a0d0:	898a      	ldrh	r2, [r1, #12]
 800a0d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0d4:	4605      	mov	r5, r0
 800a0d6:	0710      	lsls	r0, r2, #28
 800a0d8:	460c      	mov	r4, r1
 800a0da:	d457      	bmi.n	800a18c <__sflush_r+0xbc>
 800a0dc:	684b      	ldr	r3, [r1, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	dc04      	bgt.n	800a0ec <__sflush_r+0x1c>
 800a0e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	dc01      	bgt.n	800a0ec <__sflush_r+0x1c>
 800a0e8:	2000      	movs	r0, #0
 800a0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0ee:	2e00      	cmp	r6, #0
 800a0f0:	d0fa      	beq.n	800a0e8 <__sflush_r+0x18>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0f8:	682f      	ldr	r7, [r5, #0]
 800a0fa:	6a21      	ldr	r1, [r4, #32]
 800a0fc:	602b      	str	r3, [r5, #0]
 800a0fe:	d032      	beq.n	800a166 <__sflush_r+0x96>
 800a100:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a102:	89a3      	ldrh	r3, [r4, #12]
 800a104:	075a      	lsls	r2, r3, #29
 800a106:	d505      	bpl.n	800a114 <__sflush_r+0x44>
 800a108:	6863      	ldr	r3, [r4, #4]
 800a10a:	1ac0      	subs	r0, r0, r3
 800a10c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a10e:	b10b      	cbz	r3, 800a114 <__sflush_r+0x44>
 800a110:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a112:	1ac0      	subs	r0, r0, r3
 800a114:	2300      	movs	r3, #0
 800a116:	4602      	mov	r2, r0
 800a118:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a11a:	4628      	mov	r0, r5
 800a11c:	6a21      	ldr	r1, [r4, #32]
 800a11e:	47b0      	blx	r6
 800a120:	1c43      	adds	r3, r0, #1
 800a122:	89a3      	ldrh	r3, [r4, #12]
 800a124:	d106      	bne.n	800a134 <__sflush_r+0x64>
 800a126:	6829      	ldr	r1, [r5, #0]
 800a128:	291d      	cmp	r1, #29
 800a12a:	d82b      	bhi.n	800a184 <__sflush_r+0xb4>
 800a12c:	4a28      	ldr	r2, [pc, #160]	; (800a1d0 <__sflush_r+0x100>)
 800a12e:	410a      	asrs	r2, r1
 800a130:	07d6      	lsls	r6, r2, #31
 800a132:	d427      	bmi.n	800a184 <__sflush_r+0xb4>
 800a134:	2200      	movs	r2, #0
 800a136:	6062      	str	r2, [r4, #4]
 800a138:	6922      	ldr	r2, [r4, #16]
 800a13a:	04d9      	lsls	r1, r3, #19
 800a13c:	6022      	str	r2, [r4, #0]
 800a13e:	d504      	bpl.n	800a14a <__sflush_r+0x7a>
 800a140:	1c42      	adds	r2, r0, #1
 800a142:	d101      	bne.n	800a148 <__sflush_r+0x78>
 800a144:	682b      	ldr	r3, [r5, #0]
 800a146:	b903      	cbnz	r3, 800a14a <__sflush_r+0x7a>
 800a148:	6560      	str	r0, [r4, #84]	; 0x54
 800a14a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a14c:	602f      	str	r7, [r5, #0]
 800a14e:	2900      	cmp	r1, #0
 800a150:	d0ca      	beq.n	800a0e8 <__sflush_r+0x18>
 800a152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a156:	4299      	cmp	r1, r3
 800a158:	d002      	beq.n	800a160 <__sflush_r+0x90>
 800a15a:	4628      	mov	r0, r5
 800a15c:	f7ff fb44 	bl	80097e8 <_free_r>
 800a160:	2000      	movs	r0, #0
 800a162:	6360      	str	r0, [r4, #52]	; 0x34
 800a164:	e7c1      	b.n	800a0ea <__sflush_r+0x1a>
 800a166:	2301      	movs	r3, #1
 800a168:	4628      	mov	r0, r5
 800a16a:	47b0      	blx	r6
 800a16c:	1c41      	adds	r1, r0, #1
 800a16e:	d1c8      	bne.n	800a102 <__sflush_r+0x32>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d0c5      	beq.n	800a102 <__sflush_r+0x32>
 800a176:	2b1d      	cmp	r3, #29
 800a178:	d001      	beq.n	800a17e <__sflush_r+0xae>
 800a17a:	2b16      	cmp	r3, #22
 800a17c:	d101      	bne.n	800a182 <__sflush_r+0xb2>
 800a17e:	602f      	str	r7, [r5, #0]
 800a180:	e7b2      	b.n	800a0e8 <__sflush_r+0x18>
 800a182:	89a3      	ldrh	r3, [r4, #12]
 800a184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a188:	81a3      	strh	r3, [r4, #12]
 800a18a:	e7ae      	b.n	800a0ea <__sflush_r+0x1a>
 800a18c:	690f      	ldr	r7, [r1, #16]
 800a18e:	2f00      	cmp	r7, #0
 800a190:	d0aa      	beq.n	800a0e8 <__sflush_r+0x18>
 800a192:	0793      	lsls	r3, r2, #30
 800a194:	bf18      	it	ne
 800a196:	2300      	movne	r3, #0
 800a198:	680e      	ldr	r6, [r1, #0]
 800a19a:	bf08      	it	eq
 800a19c:	694b      	ldreq	r3, [r1, #20]
 800a19e:	1bf6      	subs	r6, r6, r7
 800a1a0:	600f      	str	r7, [r1, #0]
 800a1a2:	608b      	str	r3, [r1, #8]
 800a1a4:	2e00      	cmp	r6, #0
 800a1a6:	dd9f      	ble.n	800a0e8 <__sflush_r+0x18>
 800a1a8:	4633      	mov	r3, r6
 800a1aa:	463a      	mov	r2, r7
 800a1ac:	4628      	mov	r0, r5
 800a1ae:	6a21      	ldr	r1, [r4, #32]
 800a1b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a1b4:	47e0      	blx	ip
 800a1b6:	2800      	cmp	r0, #0
 800a1b8:	dc06      	bgt.n	800a1c8 <__sflush_r+0xf8>
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a1c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1c4:	81a3      	strh	r3, [r4, #12]
 800a1c6:	e790      	b.n	800a0ea <__sflush_r+0x1a>
 800a1c8:	4407      	add	r7, r0
 800a1ca:	1a36      	subs	r6, r6, r0
 800a1cc:	e7ea      	b.n	800a1a4 <__sflush_r+0xd4>
 800a1ce:	bf00      	nop
 800a1d0:	dfbffffe 	.word	0xdfbffffe

0800a1d4 <_fflush_r>:
 800a1d4:	b538      	push	{r3, r4, r5, lr}
 800a1d6:	690b      	ldr	r3, [r1, #16]
 800a1d8:	4605      	mov	r5, r0
 800a1da:	460c      	mov	r4, r1
 800a1dc:	b913      	cbnz	r3, 800a1e4 <_fflush_r+0x10>
 800a1de:	2500      	movs	r5, #0
 800a1e0:	4628      	mov	r0, r5
 800a1e2:	bd38      	pop	{r3, r4, r5, pc}
 800a1e4:	b118      	cbz	r0, 800a1ee <_fflush_r+0x1a>
 800a1e6:	6a03      	ldr	r3, [r0, #32]
 800a1e8:	b90b      	cbnz	r3, 800a1ee <_fflush_r+0x1a>
 800a1ea:	f7fe fb23 	bl	8008834 <__sinit>
 800a1ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d0f3      	beq.n	800a1de <_fflush_r+0xa>
 800a1f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1f8:	07d0      	lsls	r0, r2, #31
 800a1fa:	d404      	bmi.n	800a206 <_fflush_r+0x32>
 800a1fc:	0599      	lsls	r1, r3, #22
 800a1fe:	d402      	bmi.n	800a206 <_fflush_r+0x32>
 800a200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a202:	f7fe fc64 	bl	8008ace <__retarget_lock_acquire_recursive>
 800a206:	4628      	mov	r0, r5
 800a208:	4621      	mov	r1, r4
 800a20a:	f7ff ff61 	bl	800a0d0 <__sflush_r>
 800a20e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a210:	4605      	mov	r5, r0
 800a212:	07da      	lsls	r2, r3, #31
 800a214:	d4e4      	bmi.n	800a1e0 <_fflush_r+0xc>
 800a216:	89a3      	ldrh	r3, [r4, #12]
 800a218:	059b      	lsls	r3, r3, #22
 800a21a:	d4e1      	bmi.n	800a1e0 <_fflush_r+0xc>
 800a21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a21e:	f7fe fc57 	bl	8008ad0 <__retarget_lock_release_recursive>
 800a222:	e7dd      	b.n	800a1e0 <_fflush_r+0xc>

0800a224 <_sbrk_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	2300      	movs	r3, #0
 800a228:	4d05      	ldr	r5, [pc, #20]	; (800a240 <_sbrk_r+0x1c>)
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	602b      	str	r3, [r5, #0]
 800a230:	f7f9 fa08 	bl	8003644 <_sbrk>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	d102      	bne.n	800a23e <_sbrk_r+0x1a>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	b103      	cbz	r3, 800a23e <_sbrk_r+0x1a>
 800a23c:	6023      	str	r3, [r4, #0]
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	20001680 	.word	0x20001680

0800a244 <__assert_func>:
 800a244:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a246:	4614      	mov	r4, r2
 800a248:	461a      	mov	r2, r3
 800a24a:	4b09      	ldr	r3, [pc, #36]	; (800a270 <__assert_func+0x2c>)
 800a24c:	4605      	mov	r5, r0
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	68d8      	ldr	r0, [r3, #12]
 800a252:	b14c      	cbz	r4, 800a268 <__assert_func+0x24>
 800a254:	4b07      	ldr	r3, [pc, #28]	; (800a274 <__assert_func+0x30>)
 800a256:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a25a:	9100      	str	r1, [sp, #0]
 800a25c:	462b      	mov	r3, r5
 800a25e:	4906      	ldr	r1, [pc, #24]	; (800a278 <__assert_func+0x34>)
 800a260:	f000 f842 	bl	800a2e8 <fiprintf>
 800a264:	f000 f852 	bl	800a30c <abort>
 800a268:	4b04      	ldr	r3, [pc, #16]	; (800a27c <__assert_func+0x38>)
 800a26a:	461c      	mov	r4, r3
 800a26c:	e7f3      	b.n	800a256 <__assert_func+0x12>
 800a26e:	bf00      	nop
 800a270:	20000068 	.word	0x20000068
 800a274:	0800ab3e 	.word	0x0800ab3e
 800a278:	0800ab4b 	.word	0x0800ab4b
 800a27c:	0800ab79 	.word	0x0800ab79

0800a280 <_calloc_r>:
 800a280:	b570      	push	{r4, r5, r6, lr}
 800a282:	fba1 5402 	umull	r5, r4, r1, r2
 800a286:	b934      	cbnz	r4, 800a296 <_calloc_r+0x16>
 800a288:	4629      	mov	r1, r5
 800a28a:	f7ff fb1d 	bl	80098c8 <_malloc_r>
 800a28e:	4606      	mov	r6, r0
 800a290:	b928      	cbnz	r0, 800a29e <_calloc_r+0x1e>
 800a292:	4630      	mov	r0, r6
 800a294:	bd70      	pop	{r4, r5, r6, pc}
 800a296:	220c      	movs	r2, #12
 800a298:	2600      	movs	r6, #0
 800a29a:	6002      	str	r2, [r0, #0]
 800a29c:	e7f9      	b.n	800a292 <_calloc_r+0x12>
 800a29e:	462a      	mov	r2, r5
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	f7fe fb40 	bl	8008926 <memset>
 800a2a6:	e7f4      	b.n	800a292 <_calloc_r+0x12>

0800a2a8 <__ascii_mbtowc>:
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	b901      	cbnz	r1, 800a2ae <__ascii_mbtowc+0x6>
 800a2ac:	a901      	add	r1, sp, #4
 800a2ae:	b142      	cbz	r2, 800a2c2 <__ascii_mbtowc+0x1a>
 800a2b0:	b14b      	cbz	r3, 800a2c6 <__ascii_mbtowc+0x1e>
 800a2b2:	7813      	ldrb	r3, [r2, #0]
 800a2b4:	600b      	str	r3, [r1, #0]
 800a2b6:	7812      	ldrb	r2, [r2, #0]
 800a2b8:	1e10      	subs	r0, r2, #0
 800a2ba:	bf18      	it	ne
 800a2bc:	2001      	movne	r0, #1
 800a2be:	b002      	add	sp, #8
 800a2c0:	4770      	bx	lr
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	e7fb      	b.n	800a2be <__ascii_mbtowc+0x16>
 800a2c6:	f06f 0001 	mvn.w	r0, #1
 800a2ca:	e7f8      	b.n	800a2be <__ascii_mbtowc+0x16>

0800a2cc <__ascii_wctomb>:
 800a2cc:	4603      	mov	r3, r0
 800a2ce:	4608      	mov	r0, r1
 800a2d0:	b141      	cbz	r1, 800a2e4 <__ascii_wctomb+0x18>
 800a2d2:	2aff      	cmp	r2, #255	; 0xff
 800a2d4:	d904      	bls.n	800a2e0 <__ascii_wctomb+0x14>
 800a2d6:	228a      	movs	r2, #138	; 0x8a
 800a2d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2dc:	601a      	str	r2, [r3, #0]
 800a2de:	4770      	bx	lr
 800a2e0:	2001      	movs	r0, #1
 800a2e2:	700a      	strb	r2, [r1, #0]
 800a2e4:	4770      	bx	lr
	...

0800a2e8 <fiprintf>:
 800a2e8:	b40e      	push	{r1, r2, r3}
 800a2ea:	b503      	push	{r0, r1, lr}
 800a2ec:	4601      	mov	r1, r0
 800a2ee:	ab03      	add	r3, sp, #12
 800a2f0:	4805      	ldr	r0, [pc, #20]	; (800a308 <fiprintf+0x20>)
 800a2f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2f6:	6800      	ldr	r0, [r0, #0]
 800a2f8:	9301      	str	r3, [sp, #4]
 800a2fa:	f000 f835 	bl	800a368 <_vfiprintf_r>
 800a2fe:	b002      	add	sp, #8
 800a300:	f85d eb04 	ldr.w	lr, [sp], #4
 800a304:	b003      	add	sp, #12
 800a306:	4770      	bx	lr
 800a308:	20000068 	.word	0x20000068

0800a30c <abort>:
 800a30c:	2006      	movs	r0, #6
 800a30e:	b508      	push	{r3, lr}
 800a310:	f000 fa02 	bl	800a718 <raise>
 800a314:	2001      	movs	r0, #1
 800a316:	f7f9 f922 	bl	800355e <_exit>

0800a31a <__sfputc_r>:
 800a31a:	6893      	ldr	r3, [r2, #8]
 800a31c:	b410      	push	{r4}
 800a31e:	3b01      	subs	r3, #1
 800a320:	2b00      	cmp	r3, #0
 800a322:	6093      	str	r3, [r2, #8]
 800a324:	da07      	bge.n	800a336 <__sfputc_r+0x1c>
 800a326:	6994      	ldr	r4, [r2, #24]
 800a328:	42a3      	cmp	r3, r4
 800a32a:	db01      	blt.n	800a330 <__sfputc_r+0x16>
 800a32c:	290a      	cmp	r1, #10
 800a32e:	d102      	bne.n	800a336 <__sfputc_r+0x1c>
 800a330:	bc10      	pop	{r4}
 800a332:	f000 b933 	b.w	800a59c <__swbuf_r>
 800a336:	6813      	ldr	r3, [r2, #0]
 800a338:	1c58      	adds	r0, r3, #1
 800a33a:	6010      	str	r0, [r2, #0]
 800a33c:	7019      	strb	r1, [r3, #0]
 800a33e:	4608      	mov	r0, r1
 800a340:	bc10      	pop	{r4}
 800a342:	4770      	bx	lr

0800a344 <__sfputs_r>:
 800a344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a346:	4606      	mov	r6, r0
 800a348:	460f      	mov	r7, r1
 800a34a:	4614      	mov	r4, r2
 800a34c:	18d5      	adds	r5, r2, r3
 800a34e:	42ac      	cmp	r4, r5
 800a350:	d101      	bne.n	800a356 <__sfputs_r+0x12>
 800a352:	2000      	movs	r0, #0
 800a354:	e007      	b.n	800a366 <__sfputs_r+0x22>
 800a356:	463a      	mov	r2, r7
 800a358:	4630      	mov	r0, r6
 800a35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a35e:	f7ff ffdc 	bl	800a31a <__sfputc_r>
 800a362:	1c43      	adds	r3, r0, #1
 800a364:	d1f3      	bne.n	800a34e <__sfputs_r+0xa>
 800a366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a368 <_vfiprintf_r>:
 800a368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a36c:	460d      	mov	r5, r1
 800a36e:	4614      	mov	r4, r2
 800a370:	4698      	mov	r8, r3
 800a372:	4606      	mov	r6, r0
 800a374:	b09d      	sub	sp, #116	; 0x74
 800a376:	b118      	cbz	r0, 800a380 <_vfiprintf_r+0x18>
 800a378:	6a03      	ldr	r3, [r0, #32]
 800a37a:	b90b      	cbnz	r3, 800a380 <_vfiprintf_r+0x18>
 800a37c:	f7fe fa5a 	bl	8008834 <__sinit>
 800a380:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a382:	07d9      	lsls	r1, r3, #31
 800a384:	d405      	bmi.n	800a392 <_vfiprintf_r+0x2a>
 800a386:	89ab      	ldrh	r3, [r5, #12]
 800a388:	059a      	lsls	r2, r3, #22
 800a38a:	d402      	bmi.n	800a392 <_vfiprintf_r+0x2a>
 800a38c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a38e:	f7fe fb9e 	bl	8008ace <__retarget_lock_acquire_recursive>
 800a392:	89ab      	ldrh	r3, [r5, #12]
 800a394:	071b      	lsls	r3, r3, #28
 800a396:	d501      	bpl.n	800a39c <_vfiprintf_r+0x34>
 800a398:	692b      	ldr	r3, [r5, #16]
 800a39a:	b99b      	cbnz	r3, 800a3c4 <_vfiprintf_r+0x5c>
 800a39c:	4629      	mov	r1, r5
 800a39e:	4630      	mov	r0, r6
 800a3a0:	f000 f93a 	bl	800a618 <__swsetup_r>
 800a3a4:	b170      	cbz	r0, 800a3c4 <_vfiprintf_r+0x5c>
 800a3a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a3a8:	07dc      	lsls	r4, r3, #31
 800a3aa:	d504      	bpl.n	800a3b6 <_vfiprintf_r+0x4e>
 800a3ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3b0:	b01d      	add	sp, #116	; 0x74
 800a3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3b6:	89ab      	ldrh	r3, [r5, #12]
 800a3b8:	0598      	lsls	r0, r3, #22
 800a3ba:	d4f7      	bmi.n	800a3ac <_vfiprintf_r+0x44>
 800a3bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a3be:	f7fe fb87 	bl	8008ad0 <__retarget_lock_release_recursive>
 800a3c2:	e7f3      	b.n	800a3ac <_vfiprintf_r+0x44>
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3c8:	2320      	movs	r3, #32
 800a3ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3ce:	2330      	movs	r3, #48	; 0x30
 800a3d0:	f04f 0901 	mov.w	r9, #1
 800a3d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a588 <_vfiprintf_r+0x220>
 800a3dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3e0:	4623      	mov	r3, r4
 800a3e2:	469a      	mov	sl, r3
 800a3e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3e8:	b10a      	cbz	r2, 800a3ee <_vfiprintf_r+0x86>
 800a3ea:	2a25      	cmp	r2, #37	; 0x25
 800a3ec:	d1f9      	bne.n	800a3e2 <_vfiprintf_r+0x7a>
 800a3ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a3f2:	d00b      	beq.n	800a40c <_vfiprintf_r+0xa4>
 800a3f4:	465b      	mov	r3, fp
 800a3f6:	4622      	mov	r2, r4
 800a3f8:	4629      	mov	r1, r5
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f7ff ffa2 	bl	800a344 <__sfputs_r>
 800a400:	3001      	adds	r0, #1
 800a402:	f000 80a9 	beq.w	800a558 <_vfiprintf_r+0x1f0>
 800a406:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a408:	445a      	add	r2, fp
 800a40a:	9209      	str	r2, [sp, #36]	; 0x24
 800a40c:	f89a 3000 	ldrb.w	r3, [sl]
 800a410:	2b00      	cmp	r3, #0
 800a412:	f000 80a1 	beq.w	800a558 <_vfiprintf_r+0x1f0>
 800a416:	2300      	movs	r3, #0
 800a418:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a41c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a420:	f10a 0a01 	add.w	sl, sl, #1
 800a424:	9304      	str	r3, [sp, #16]
 800a426:	9307      	str	r3, [sp, #28]
 800a428:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a42c:	931a      	str	r3, [sp, #104]	; 0x68
 800a42e:	4654      	mov	r4, sl
 800a430:	2205      	movs	r2, #5
 800a432:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a436:	4854      	ldr	r0, [pc, #336]	; (800a588 <_vfiprintf_r+0x220>)
 800a438:	f7fe fb4b 	bl	8008ad2 <memchr>
 800a43c:	9a04      	ldr	r2, [sp, #16]
 800a43e:	b9d8      	cbnz	r0, 800a478 <_vfiprintf_r+0x110>
 800a440:	06d1      	lsls	r1, r2, #27
 800a442:	bf44      	itt	mi
 800a444:	2320      	movmi	r3, #32
 800a446:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a44a:	0713      	lsls	r3, r2, #28
 800a44c:	bf44      	itt	mi
 800a44e:	232b      	movmi	r3, #43	; 0x2b
 800a450:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a454:	f89a 3000 	ldrb.w	r3, [sl]
 800a458:	2b2a      	cmp	r3, #42	; 0x2a
 800a45a:	d015      	beq.n	800a488 <_vfiprintf_r+0x120>
 800a45c:	4654      	mov	r4, sl
 800a45e:	2000      	movs	r0, #0
 800a460:	f04f 0c0a 	mov.w	ip, #10
 800a464:	9a07      	ldr	r2, [sp, #28]
 800a466:	4621      	mov	r1, r4
 800a468:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a46c:	3b30      	subs	r3, #48	; 0x30
 800a46e:	2b09      	cmp	r3, #9
 800a470:	d94d      	bls.n	800a50e <_vfiprintf_r+0x1a6>
 800a472:	b1b0      	cbz	r0, 800a4a2 <_vfiprintf_r+0x13a>
 800a474:	9207      	str	r2, [sp, #28]
 800a476:	e014      	b.n	800a4a2 <_vfiprintf_r+0x13a>
 800a478:	eba0 0308 	sub.w	r3, r0, r8
 800a47c:	fa09 f303 	lsl.w	r3, r9, r3
 800a480:	4313      	orrs	r3, r2
 800a482:	46a2      	mov	sl, r4
 800a484:	9304      	str	r3, [sp, #16]
 800a486:	e7d2      	b.n	800a42e <_vfiprintf_r+0xc6>
 800a488:	9b03      	ldr	r3, [sp, #12]
 800a48a:	1d19      	adds	r1, r3, #4
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	9103      	str	r1, [sp, #12]
 800a490:	2b00      	cmp	r3, #0
 800a492:	bfbb      	ittet	lt
 800a494:	425b      	neglt	r3, r3
 800a496:	f042 0202 	orrlt.w	r2, r2, #2
 800a49a:	9307      	strge	r3, [sp, #28]
 800a49c:	9307      	strlt	r3, [sp, #28]
 800a49e:	bfb8      	it	lt
 800a4a0:	9204      	strlt	r2, [sp, #16]
 800a4a2:	7823      	ldrb	r3, [r4, #0]
 800a4a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a4a6:	d10c      	bne.n	800a4c2 <_vfiprintf_r+0x15a>
 800a4a8:	7863      	ldrb	r3, [r4, #1]
 800a4aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a4ac:	d134      	bne.n	800a518 <_vfiprintf_r+0x1b0>
 800a4ae:	9b03      	ldr	r3, [sp, #12]
 800a4b0:	3402      	adds	r4, #2
 800a4b2:	1d1a      	adds	r2, r3, #4
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	9203      	str	r2, [sp, #12]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	bfb8      	it	lt
 800a4bc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a4c0:	9305      	str	r3, [sp, #20]
 800a4c2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a58c <_vfiprintf_r+0x224>
 800a4c6:	2203      	movs	r2, #3
 800a4c8:	4650      	mov	r0, sl
 800a4ca:	7821      	ldrb	r1, [r4, #0]
 800a4cc:	f7fe fb01 	bl	8008ad2 <memchr>
 800a4d0:	b138      	cbz	r0, 800a4e2 <_vfiprintf_r+0x17a>
 800a4d2:	2240      	movs	r2, #64	; 0x40
 800a4d4:	9b04      	ldr	r3, [sp, #16]
 800a4d6:	eba0 000a 	sub.w	r0, r0, sl
 800a4da:	4082      	lsls	r2, r0
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	3401      	adds	r4, #1
 800a4e0:	9304      	str	r3, [sp, #16]
 800a4e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4e6:	2206      	movs	r2, #6
 800a4e8:	4829      	ldr	r0, [pc, #164]	; (800a590 <_vfiprintf_r+0x228>)
 800a4ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4ee:	f7fe faf0 	bl	8008ad2 <memchr>
 800a4f2:	2800      	cmp	r0, #0
 800a4f4:	d03f      	beq.n	800a576 <_vfiprintf_r+0x20e>
 800a4f6:	4b27      	ldr	r3, [pc, #156]	; (800a594 <_vfiprintf_r+0x22c>)
 800a4f8:	bb1b      	cbnz	r3, 800a542 <_vfiprintf_r+0x1da>
 800a4fa:	9b03      	ldr	r3, [sp, #12]
 800a4fc:	3307      	adds	r3, #7
 800a4fe:	f023 0307 	bic.w	r3, r3, #7
 800a502:	3308      	adds	r3, #8
 800a504:	9303      	str	r3, [sp, #12]
 800a506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a508:	443b      	add	r3, r7
 800a50a:	9309      	str	r3, [sp, #36]	; 0x24
 800a50c:	e768      	b.n	800a3e0 <_vfiprintf_r+0x78>
 800a50e:	460c      	mov	r4, r1
 800a510:	2001      	movs	r0, #1
 800a512:	fb0c 3202 	mla	r2, ip, r2, r3
 800a516:	e7a6      	b.n	800a466 <_vfiprintf_r+0xfe>
 800a518:	2300      	movs	r3, #0
 800a51a:	f04f 0c0a 	mov.w	ip, #10
 800a51e:	4619      	mov	r1, r3
 800a520:	3401      	adds	r4, #1
 800a522:	9305      	str	r3, [sp, #20]
 800a524:	4620      	mov	r0, r4
 800a526:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a52a:	3a30      	subs	r2, #48	; 0x30
 800a52c:	2a09      	cmp	r2, #9
 800a52e:	d903      	bls.n	800a538 <_vfiprintf_r+0x1d0>
 800a530:	2b00      	cmp	r3, #0
 800a532:	d0c6      	beq.n	800a4c2 <_vfiprintf_r+0x15a>
 800a534:	9105      	str	r1, [sp, #20]
 800a536:	e7c4      	b.n	800a4c2 <_vfiprintf_r+0x15a>
 800a538:	4604      	mov	r4, r0
 800a53a:	2301      	movs	r3, #1
 800a53c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a540:	e7f0      	b.n	800a524 <_vfiprintf_r+0x1bc>
 800a542:	ab03      	add	r3, sp, #12
 800a544:	9300      	str	r3, [sp, #0]
 800a546:	462a      	mov	r2, r5
 800a548:	4630      	mov	r0, r6
 800a54a:	4b13      	ldr	r3, [pc, #76]	; (800a598 <_vfiprintf_r+0x230>)
 800a54c:	a904      	add	r1, sp, #16
 800a54e:	f7fd fd23 	bl	8007f98 <_printf_float>
 800a552:	4607      	mov	r7, r0
 800a554:	1c78      	adds	r0, r7, #1
 800a556:	d1d6      	bne.n	800a506 <_vfiprintf_r+0x19e>
 800a558:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a55a:	07d9      	lsls	r1, r3, #31
 800a55c:	d405      	bmi.n	800a56a <_vfiprintf_r+0x202>
 800a55e:	89ab      	ldrh	r3, [r5, #12]
 800a560:	059a      	lsls	r2, r3, #22
 800a562:	d402      	bmi.n	800a56a <_vfiprintf_r+0x202>
 800a564:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a566:	f7fe fab3 	bl	8008ad0 <__retarget_lock_release_recursive>
 800a56a:	89ab      	ldrh	r3, [r5, #12]
 800a56c:	065b      	lsls	r3, r3, #25
 800a56e:	f53f af1d 	bmi.w	800a3ac <_vfiprintf_r+0x44>
 800a572:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a574:	e71c      	b.n	800a3b0 <_vfiprintf_r+0x48>
 800a576:	ab03      	add	r3, sp, #12
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	462a      	mov	r2, r5
 800a57c:	4630      	mov	r0, r6
 800a57e:	4b06      	ldr	r3, [pc, #24]	; (800a598 <_vfiprintf_r+0x230>)
 800a580:	a904      	add	r1, sp, #16
 800a582:	f7fd ffa9 	bl	80084d8 <_printf_i>
 800a586:	e7e4      	b.n	800a552 <_vfiprintf_r+0x1ea>
 800a588:	0800ac7b 	.word	0x0800ac7b
 800a58c:	0800ac81 	.word	0x0800ac81
 800a590:	0800ac85 	.word	0x0800ac85
 800a594:	08007f99 	.word	0x08007f99
 800a598:	0800a345 	.word	0x0800a345

0800a59c <__swbuf_r>:
 800a59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a59e:	460e      	mov	r6, r1
 800a5a0:	4614      	mov	r4, r2
 800a5a2:	4605      	mov	r5, r0
 800a5a4:	b118      	cbz	r0, 800a5ae <__swbuf_r+0x12>
 800a5a6:	6a03      	ldr	r3, [r0, #32]
 800a5a8:	b90b      	cbnz	r3, 800a5ae <__swbuf_r+0x12>
 800a5aa:	f7fe f943 	bl	8008834 <__sinit>
 800a5ae:	69a3      	ldr	r3, [r4, #24]
 800a5b0:	60a3      	str	r3, [r4, #8]
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	071a      	lsls	r2, r3, #28
 800a5b6:	d525      	bpl.n	800a604 <__swbuf_r+0x68>
 800a5b8:	6923      	ldr	r3, [r4, #16]
 800a5ba:	b31b      	cbz	r3, 800a604 <__swbuf_r+0x68>
 800a5bc:	6823      	ldr	r3, [r4, #0]
 800a5be:	6922      	ldr	r2, [r4, #16]
 800a5c0:	b2f6      	uxtb	r6, r6
 800a5c2:	1a98      	subs	r0, r3, r2
 800a5c4:	6963      	ldr	r3, [r4, #20]
 800a5c6:	4637      	mov	r7, r6
 800a5c8:	4283      	cmp	r3, r0
 800a5ca:	dc04      	bgt.n	800a5d6 <__swbuf_r+0x3a>
 800a5cc:	4621      	mov	r1, r4
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f7ff fe00 	bl	800a1d4 <_fflush_r>
 800a5d4:	b9e0      	cbnz	r0, 800a610 <__swbuf_r+0x74>
 800a5d6:	68a3      	ldr	r3, [r4, #8]
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	60a3      	str	r3, [r4, #8]
 800a5dc:	6823      	ldr	r3, [r4, #0]
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	6022      	str	r2, [r4, #0]
 800a5e2:	701e      	strb	r6, [r3, #0]
 800a5e4:	6962      	ldr	r2, [r4, #20]
 800a5e6:	1c43      	adds	r3, r0, #1
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d004      	beq.n	800a5f6 <__swbuf_r+0x5a>
 800a5ec:	89a3      	ldrh	r3, [r4, #12]
 800a5ee:	07db      	lsls	r3, r3, #31
 800a5f0:	d506      	bpl.n	800a600 <__swbuf_r+0x64>
 800a5f2:	2e0a      	cmp	r6, #10
 800a5f4:	d104      	bne.n	800a600 <__swbuf_r+0x64>
 800a5f6:	4621      	mov	r1, r4
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	f7ff fdeb 	bl	800a1d4 <_fflush_r>
 800a5fe:	b938      	cbnz	r0, 800a610 <__swbuf_r+0x74>
 800a600:	4638      	mov	r0, r7
 800a602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a604:	4621      	mov	r1, r4
 800a606:	4628      	mov	r0, r5
 800a608:	f000 f806 	bl	800a618 <__swsetup_r>
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d0d5      	beq.n	800a5bc <__swbuf_r+0x20>
 800a610:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a614:	e7f4      	b.n	800a600 <__swbuf_r+0x64>
	...

0800a618 <__swsetup_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4b2a      	ldr	r3, [pc, #168]	; (800a6c4 <__swsetup_r+0xac>)
 800a61c:	4605      	mov	r5, r0
 800a61e:	6818      	ldr	r0, [r3, #0]
 800a620:	460c      	mov	r4, r1
 800a622:	b118      	cbz	r0, 800a62c <__swsetup_r+0x14>
 800a624:	6a03      	ldr	r3, [r0, #32]
 800a626:	b90b      	cbnz	r3, 800a62c <__swsetup_r+0x14>
 800a628:	f7fe f904 	bl	8008834 <__sinit>
 800a62c:	89a3      	ldrh	r3, [r4, #12]
 800a62e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a632:	0718      	lsls	r0, r3, #28
 800a634:	d422      	bmi.n	800a67c <__swsetup_r+0x64>
 800a636:	06d9      	lsls	r1, r3, #27
 800a638:	d407      	bmi.n	800a64a <__swsetup_r+0x32>
 800a63a:	2309      	movs	r3, #9
 800a63c:	602b      	str	r3, [r5, #0]
 800a63e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a642:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a646:	81a3      	strh	r3, [r4, #12]
 800a648:	e034      	b.n	800a6b4 <__swsetup_r+0x9c>
 800a64a:	0758      	lsls	r0, r3, #29
 800a64c:	d512      	bpl.n	800a674 <__swsetup_r+0x5c>
 800a64e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a650:	b141      	cbz	r1, 800a664 <__swsetup_r+0x4c>
 800a652:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a656:	4299      	cmp	r1, r3
 800a658:	d002      	beq.n	800a660 <__swsetup_r+0x48>
 800a65a:	4628      	mov	r0, r5
 800a65c:	f7ff f8c4 	bl	80097e8 <_free_r>
 800a660:	2300      	movs	r3, #0
 800a662:	6363      	str	r3, [r4, #52]	; 0x34
 800a664:	89a3      	ldrh	r3, [r4, #12]
 800a666:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a66a:	81a3      	strh	r3, [r4, #12]
 800a66c:	2300      	movs	r3, #0
 800a66e:	6063      	str	r3, [r4, #4]
 800a670:	6923      	ldr	r3, [r4, #16]
 800a672:	6023      	str	r3, [r4, #0]
 800a674:	89a3      	ldrh	r3, [r4, #12]
 800a676:	f043 0308 	orr.w	r3, r3, #8
 800a67a:	81a3      	strh	r3, [r4, #12]
 800a67c:	6923      	ldr	r3, [r4, #16]
 800a67e:	b94b      	cbnz	r3, 800a694 <__swsetup_r+0x7c>
 800a680:	89a3      	ldrh	r3, [r4, #12]
 800a682:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a686:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a68a:	d003      	beq.n	800a694 <__swsetup_r+0x7c>
 800a68c:	4621      	mov	r1, r4
 800a68e:	4628      	mov	r0, r5
 800a690:	f000 f883 	bl	800a79a <__smakebuf_r>
 800a694:	89a0      	ldrh	r0, [r4, #12]
 800a696:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a69a:	f010 0301 	ands.w	r3, r0, #1
 800a69e:	d00a      	beq.n	800a6b6 <__swsetup_r+0x9e>
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	60a3      	str	r3, [r4, #8]
 800a6a4:	6963      	ldr	r3, [r4, #20]
 800a6a6:	425b      	negs	r3, r3
 800a6a8:	61a3      	str	r3, [r4, #24]
 800a6aa:	6923      	ldr	r3, [r4, #16]
 800a6ac:	b943      	cbnz	r3, 800a6c0 <__swsetup_r+0xa8>
 800a6ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a6b2:	d1c4      	bne.n	800a63e <__swsetup_r+0x26>
 800a6b4:	bd38      	pop	{r3, r4, r5, pc}
 800a6b6:	0781      	lsls	r1, r0, #30
 800a6b8:	bf58      	it	pl
 800a6ba:	6963      	ldrpl	r3, [r4, #20]
 800a6bc:	60a3      	str	r3, [r4, #8]
 800a6be:	e7f4      	b.n	800a6aa <__swsetup_r+0x92>
 800a6c0:	2000      	movs	r0, #0
 800a6c2:	e7f7      	b.n	800a6b4 <__swsetup_r+0x9c>
 800a6c4:	20000068 	.word	0x20000068

0800a6c8 <_raise_r>:
 800a6c8:	291f      	cmp	r1, #31
 800a6ca:	b538      	push	{r3, r4, r5, lr}
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	460d      	mov	r5, r1
 800a6d0:	d904      	bls.n	800a6dc <_raise_r+0x14>
 800a6d2:	2316      	movs	r3, #22
 800a6d4:	6003      	str	r3, [r0, #0]
 800a6d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a6de:	b112      	cbz	r2, 800a6e6 <_raise_r+0x1e>
 800a6e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6e4:	b94b      	cbnz	r3, 800a6fa <_raise_r+0x32>
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f000 f830 	bl	800a74c <_getpid_r>
 800a6ec:	462a      	mov	r2, r5
 800a6ee:	4601      	mov	r1, r0
 800a6f0:	4620      	mov	r0, r4
 800a6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6f6:	f000 b817 	b.w	800a728 <_kill_r>
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d00a      	beq.n	800a714 <_raise_r+0x4c>
 800a6fe:	1c59      	adds	r1, r3, #1
 800a700:	d103      	bne.n	800a70a <_raise_r+0x42>
 800a702:	2316      	movs	r3, #22
 800a704:	6003      	str	r3, [r0, #0]
 800a706:	2001      	movs	r0, #1
 800a708:	e7e7      	b.n	800a6da <_raise_r+0x12>
 800a70a:	2400      	movs	r4, #0
 800a70c:	4628      	mov	r0, r5
 800a70e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a712:	4798      	blx	r3
 800a714:	2000      	movs	r0, #0
 800a716:	e7e0      	b.n	800a6da <_raise_r+0x12>

0800a718 <raise>:
 800a718:	4b02      	ldr	r3, [pc, #8]	; (800a724 <raise+0xc>)
 800a71a:	4601      	mov	r1, r0
 800a71c:	6818      	ldr	r0, [r3, #0]
 800a71e:	f7ff bfd3 	b.w	800a6c8 <_raise_r>
 800a722:	bf00      	nop
 800a724:	20000068 	.word	0x20000068

0800a728 <_kill_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	2300      	movs	r3, #0
 800a72c:	4d06      	ldr	r5, [pc, #24]	; (800a748 <_kill_r+0x20>)
 800a72e:	4604      	mov	r4, r0
 800a730:	4608      	mov	r0, r1
 800a732:	4611      	mov	r1, r2
 800a734:	602b      	str	r3, [r5, #0]
 800a736:	f7f8 ff02 	bl	800353e <_kill>
 800a73a:	1c43      	adds	r3, r0, #1
 800a73c:	d102      	bne.n	800a744 <_kill_r+0x1c>
 800a73e:	682b      	ldr	r3, [r5, #0]
 800a740:	b103      	cbz	r3, 800a744 <_kill_r+0x1c>
 800a742:	6023      	str	r3, [r4, #0]
 800a744:	bd38      	pop	{r3, r4, r5, pc}
 800a746:	bf00      	nop
 800a748:	20001680 	.word	0x20001680

0800a74c <_getpid_r>:
 800a74c:	f7f8 bef0 	b.w	8003530 <_getpid>

0800a750 <__swhatbuf_r>:
 800a750:	b570      	push	{r4, r5, r6, lr}
 800a752:	460c      	mov	r4, r1
 800a754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a758:	4615      	mov	r5, r2
 800a75a:	2900      	cmp	r1, #0
 800a75c:	461e      	mov	r6, r3
 800a75e:	b096      	sub	sp, #88	; 0x58
 800a760:	da0c      	bge.n	800a77c <__swhatbuf_r+0x2c>
 800a762:	89a3      	ldrh	r3, [r4, #12]
 800a764:	2100      	movs	r1, #0
 800a766:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a76a:	bf0c      	ite	eq
 800a76c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a770:	2340      	movne	r3, #64	; 0x40
 800a772:	2000      	movs	r0, #0
 800a774:	6031      	str	r1, [r6, #0]
 800a776:	602b      	str	r3, [r5, #0]
 800a778:	b016      	add	sp, #88	; 0x58
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
 800a77c:	466a      	mov	r2, sp
 800a77e:	f000 f849 	bl	800a814 <_fstat_r>
 800a782:	2800      	cmp	r0, #0
 800a784:	dbed      	blt.n	800a762 <__swhatbuf_r+0x12>
 800a786:	9901      	ldr	r1, [sp, #4]
 800a788:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a78c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a790:	4259      	negs	r1, r3
 800a792:	4159      	adcs	r1, r3
 800a794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a798:	e7eb      	b.n	800a772 <__swhatbuf_r+0x22>

0800a79a <__smakebuf_r>:
 800a79a:	898b      	ldrh	r3, [r1, #12]
 800a79c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a79e:	079d      	lsls	r5, r3, #30
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	460c      	mov	r4, r1
 800a7a4:	d507      	bpl.n	800a7b6 <__smakebuf_r+0x1c>
 800a7a6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a7aa:	6023      	str	r3, [r4, #0]
 800a7ac:	6123      	str	r3, [r4, #16]
 800a7ae:	2301      	movs	r3, #1
 800a7b0:	6163      	str	r3, [r4, #20]
 800a7b2:	b002      	add	sp, #8
 800a7b4:	bd70      	pop	{r4, r5, r6, pc}
 800a7b6:	466a      	mov	r2, sp
 800a7b8:	ab01      	add	r3, sp, #4
 800a7ba:	f7ff ffc9 	bl	800a750 <__swhatbuf_r>
 800a7be:	9900      	ldr	r1, [sp, #0]
 800a7c0:	4605      	mov	r5, r0
 800a7c2:	4630      	mov	r0, r6
 800a7c4:	f7ff f880 	bl	80098c8 <_malloc_r>
 800a7c8:	b948      	cbnz	r0, 800a7de <__smakebuf_r+0x44>
 800a7ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7ce:	059a      	lsls	r2, r3, #22
 800a7d0:	d4ef      	bmi.n	800a7b2 <__smakebuf_r+0x18>
 800a7d2:	f023 0303 	bic.w	r3, r3, #3
 800a7d6:	f043 0302 	orr.w	r3, r3, #2
 800a7da:	81a3      	strh	r3, [r4, #12]
 800a7dc:	e7e3      	b.n	800a7a6 <__smakebuf_r+0xc>
 800a7de:	89a3      	ldrh	r3, [r4, #12]
 800a7e0:	6020      	str	r0, [r4, #0]
 800a7e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7e6:	81a3      	strh	r3, [r4, #12]
 800a7e8:	9b00      	ldr	r3, [sp, #0]
 800a7ea:	6120      	str	r0, [r4, #16]
 800a7ec:	6163      	str	r3, [r4, #20]
 800a7ee:	9b01      	ldr	r3, [sp, #4]
 800a7f0:	b15b      	cbz	r3, 800a80a <__smakebuf_r+0x70>
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7f8:	f000 f81e 	bl	800a838 <_isatty_r>
 800a7fc:	b128      	cbz	r0, 800a80a <__smakebuf_r+0x70>
 800a7fe:	89a3      	ldrh	r3, [r4, #12]
 800a800:	f023 0303 	bic.w	r3, r3, #3
 800a804:	f043 0301 	orr.w	r3, r3, #1
 800a808:	81a3      	strh	r3, [r4, #12]
 800a80a:	89a3      	ldrh	r3, [r4, #12]
 800a80c:	431d      	orrs	r5, r3
 800a80e:	81a5      	strh	r5, [r4, #12]
 800a810:	e7cf      	b.n	800a7b2 <__smakebuf_r+0x18>
	...

0800a814 <_fstat_r>:
 800a814:	b538      	push	{r3, r4, r5, lr}
 800a816:	2300      	movs	r3, #0
 800a818:	4d06      	ldr	r5, [pc, #24]	; (800a834 <_fstat_r+0x20>)
 800a81a:	4604      	mov	r4, r0
 800a81c:	4608      	mov	r0, r1
 800a81e:	4611      	mov	r1, r2
 800a820:	602b      	str	r3, [r5, #0]
 800a822:	f7f8 feea 	bl	80035fa <_fstat>
 800a826:	1c43      	adds	r3, r0, #1
 800a828:	d102      	bne.n	800a830 <_fstat_r+0x1c>
 800a82a:	682b      	ldr	r3, [r5, #0]
 800a82c:	b103      	cbz	r3, 800a830 <_fstat_r+0x1c>
 800a82e:	6023      	str	r3, [r4, #0]
 800a830:	bd38      	pop	{r3, r4, r5, pc}
 800a832:	bf00      	nop
 800a834:	20001680 	.word	0x20001680

0800a838 <_isatty_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	2300      	movs	r3, #0
 800a83c:	4d05      	ldr	r5, [pc, #20]	; (800a854 <_isatty_r+0x1c>)
 800a83e:	4604      	mov	r4, r0
 800a840:	4608      	mov	r0, r1
 800a842:	602b      	str	r3, [r5, #0]
 800a844:	f7f8 fee8 	bl	8003618 <_isatty>
 800a848:	1c43      	adds	r3, r0, #1
 800a84a:	d102      	bne.n	800a852 <_isatty_r+0x1a>
 800a84c:	682b      	ldr	r3, [r5, #0]
 800a84e:	b103      	cbz	r3, 800a852 <_isatty_r+0x1a>
 800a850:	6023      	str	r3, [r4, #0]
 800a852:	bd38      	pop	{r3, r4, r5, pc}
 800a854:	20001680 	.word	0x20001680

0800a858 <_init>:
 800a858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85a:	bf00      	nop
 800a85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a85e:	bc08      	pop	{r3}
 800a860:	469e      	mov	lr, r3
 800a862:	4770      	bx	lr

0800a864 <_fini>:
 800a864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a866:	bf00      	nop
 800a868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a86a:	bc08      	pop	{r3}
 800a86c:	469e      	mov	lr, r3
 800a86e:	4770      	bx	lr
