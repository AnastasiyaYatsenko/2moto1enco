
2moto1enco.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a870  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  0800a980  0800a980  0001a980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad9c  0800ad9c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad9c  0800ad9c  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad9c  0800ad9c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ad9c  0800ad9c  0001ad9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ada4  0800ada4  0001ada4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800ada8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014b8  200001d8  0800af80  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001690  0800af80  00021690  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002274f  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004453  00000000  00000000  00042993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f8  00000000  00000000  00046de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001280  00000000  00000000  000485e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e4e7  00000000  00000000  00049860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019614  00000000  00000000  00067d47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009d7a4  00000000  00000000  0008135b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000757c  00000000  00000000  0011eb00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0012607c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a968 	.word	0x0800a968

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800a968 	.word	0x0800a968

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_f2uiz>:
 80010d0:	0042      	lsls	r2, r0, #1
 80010d2:	d20e      	bcs.n	80010f2 <__aeabi_f2uiz+0x22>
 80010d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d8:	d30b      	bcc.n	80010f2 <__aeabi_f2uiz+0x22>
 80010da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010e2:	d409      	bmi.n	80010f8 <__aeabi_f2uiz+0x28>
 80010e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010ec:	fa23 f002 	lsr.w	r0, r3, r2
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2uiz+0x32>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d102      	bne.n	8001108 <__aeabi_f2uiz+0x38>
 8001102:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001106:	4770      	bx	lr
 8001108:	f04f 0000 	mov.w	r0, #0
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop

08001110 <setCSLine>:
#include "AMT22.h"


void setCSLine(GPIO_TypeDef *encoderPort, uint16_t encoderPin,
		GPIO_PinState csLine) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(encoderPort, encoderPin, csLine);
 8001120:	787a      	ldrb	r2, [r7, #1]
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	4619      	mov	r1, r3
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f002 fe82 	bl	8003e30 <HAL_GPIO_WritePin>

}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <spiWriteRead>:


uint8_t spiWriteRead(SPI_HandleTypeDef *hspi, uint8_t sendByte,
		GPIO_TypeDef *encoderPort, uint16_t encoderPin, uint8_t releaseLine) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b088      	sub	sp, #32
 8001138:	af02      	add	r7, sp, #8
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	607a      	str	r2, [r7, #4]
 800113e:	461a      	mov	r2, r3
 8001140:	460b      	mov	r3, r1
 8001142:	72fb      	strb	r3, [r7, #11]
 8001144:	4613      	mov	r3, r2
 8001146:	813b      	strh	r3, [r7, #8]
	uint8_t data;
	setCSLine(encoderPort, encoderPin, GPIO_PIN_RESET);
 8001148:	893b      	ldrh	r3, [r7, #8]
 800114a:	2200      	movs	r2, #0
 800114c:	4619      	mov	r1, r3
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffde 	bl	8001110 <setCSLine>
	delay(docDelay);
 8001154:	2003      	movs	r0, #3
 8001156:	f000 f901 	bl	800135c <delay>
	HAL_SPI_TransmitReceive(hspi, &sendByte, &data, 1, 10);
 800115a:	f107 0217 	add.w	r2, r7, #23
 800115e:	f107 010b 	add.w	r1, r7, #11
 8001162:	230a      	movs	r3, #10
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2301      	movs	r3, #1
 8001168:	68f8      	ldr	r0, [r7, #12]
 800116a:	f003 fb7d 	bl	8004868 <HAL_SPI_TransmitReceive>
	delay(docDelay);
 800116e:	2003      	movs	r0, #3
 8001170:	f000 f8f4 	bl	800135c <delay>
	setCSLine(encoderPort, encoderPin, releaseLine);
 8001174:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001178:	893b      	ldrh	r3, [r7, #8]
 800117a:	4619      	mov	r1, r3
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffc7 	bl	8001110 <setCSLine>
	return data;
 8001182:	7dfb      	ldrb	r3, [r7, #23]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <getPositionSPI>:

uint16_t getPositionSPI(SPI_HandleTypeDef *hspi, GPIO_TypeDef *encoderPort,
		uint16_t encoderPin, uint8_t resolution) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b08c      	sub	sp, #48	; 0x30
 8001190:	af02      	add	r7, sp, #8
 8001192:	60f8      	str	r0, [r7, #12]
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	4611      	mov	r1, r2
 8001198:	461a      	mov	r2, r3
 800119a:	460b      	mov	r3, r1
 800119c:	80fb      	strh	r3, [r7, #6]
 800119e:	4613      	mov	r3, r2
 80011a0:	717b      	strb	r3, [r7, #5]

	DWT_Delay_Init();
 80011a2:	f000 f8ed 	bl	8001380 <DWT_Delay_Init>

	uint16_t currentPosition = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	84fb      	strh	r3, [r7, #38]	; 0x26
	uint8_t binaryArray[16];
	currentPosition = spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 0) << 8;
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	2200      	movs	r2, #0
 80011ae:	9200      	str	r2, [sp, #0]
 80011b0:	68ba      	ldr	r2, [r7, #8]
 80011b2:	2100      	movs	r1, #0
 80011b4:	68f8      	ldr	r0, [r7, #12]
 80011b6:	f7ff ffbd 	bl	8001134 <spiWriteRead>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b29b      	uxth	r3, r3
 80011be:	021b      	lsls	r3, r3, #8
 80011c0:	84fb      	strh	r3, [r7, #38]	; 0x26
	delay(docDelay);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 f8ca 	bl	800135c <delay>
	currentPosition |= spiWriteRead(hspi, AMT22_NOP, encoderPort, encoderPin, 1);
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	2201      	movs	r2, #1
 80011cc:	9200      	str	r2, [sp, #0]
 80011ce:	68ba      	ldr	r2, [r7, #8]
 80011d0:	2100      	movs	r1, #0
 80011d2:	68f8      	ldr	r0, [r7, #12]
 80011d4:	f7ff ffae 	bl	8001134 <spiWriteRead>
 80011d8:	4603      	mov	r3, r0
 80011da:	b29a      	uxth	r2, r3
 80011dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80011de:	4313      	orrs	r3, r2
 80011e0:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (int i = 0; i < 16; i++)
 80011e2:	2300      	movs	r3, #0
 80011e4:	623b      	str	r3, [r7, #32]
 80011e6:	e010      	b.n	800120a <getPositionSPI+0x7e>
		binaryArray[i] = (0x01) & (currentPosition >> (i));
 80011e8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	fa42 f303 	asr.w	r3, r2, r3
 80011f0:	b2db      	uxtb	r3, r3
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	b2d9      	uxtb	r1, r3
 80011f8:	f107 0210 	add.w	r2, r7, #16
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	4413      	add	r3, r2
 8001200:	460a      	mov	r2, r1
 8001202:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 16; i++)
 8001204:	6a3b      	ldr	r3, [r7, #32]
 8001206:	3301      	adds	r3, #1
 8001208:	623b      	str	r3, [r7, #32]
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	2b0f      	cmp	r3, #15
 800120e:	ddeb      	ble.n	80011e8 <getPositionSPI+0x5c>
	if ((binaryArray[15]
 8001210:	7ffb      	ldrb	r3, [r7, #31]
 8001212:	4619      	mov	r1, r3
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001214:	7f7a      	ldrb	r2, [r7, #29]
 8001216:	7efb      	ldrb	r3, [r7, #27]
 8001218:	4053      	eors	r3, r2
 800121a:	b2da      	uxtb	r2, r3
 800121c:	7e7b      	ldrb	r3, [r7, #25]
 800121e:	4053      	eors	r3, r2
 8001220:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001222:	7dfb      	ldrb	r3, [r7, #23]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001224:	4053      	eors	r3, r2
 8001226:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 8001228:	7d7b      	ldrb	r3, [r7, #21]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 800122a:	4053      	eors	r3, r2
 800122c:	b2da      	uxtb	r2, r3
					^ binaryArray[7] ^ binaryArray[5] ^ binaryArray[3]
 800122e:	7cfb      	ldrb	r3, [r7, #19]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001230:	4053      	eors	r3, r2
 8001232:	b2da      	uxtb	r2, r3
					^ binaryArray[1]))
 8001234:	7c7b      	ldrb	r3, [r7, #17]
			== !(binaryArray[13] ^ binaryArray[11] ^ binaryArray[9]
 8001236:	429a      	cmp	r2, r3
 8001238:	bf0c      	ite	eq
 800123a:	2301      	moveq	r3, #1
 800123c:	2300      	movne	r3, #0
 800123e:	b2db      	uxtb	r3, r3
	if ((binaryArray[15]
 8001240:	4299      	cmp	r1, r3
 8001242:	d11e      	bne.n	8001282 <getPositionSPI+0xf6>
			&& (binaryArray[14]
 8001244:	7fbb      	ldrb	r3, [r7, #30]
 8001246:	4619      	mov	r1, r3
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8001248:	7f3a      	ldrb	r2, [r7, #28]
 800124a:	7ebb      	ldrb	r3, [r7, #26]
 800124c:	4053      	eors	r3, r2
 800124e:	b2da      	uxtb	r2, r3
 8001250:	7e3b      	ldrb	r3, [r7, #24]
 8001252:	4053      	eors	r3, r2
 8001254:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8001256:	7dbb      	ldrb	r3, [r7, #22]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8001258:	4053      	eors	r3, r2
 800125a:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 800125c:	7d3b      	ldrb	r3, [r7, #20]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 800125e:	4053      	eors	r3, r2
 8001260:	b2da      	uxtb	r2, r3
							^ binaryArray[6] ^ binaryArray[4] ^ binaryArray[2]
 8001262:	7cbb      	ldrb	r3, [r7, #18]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 8001264:	4053      	eors	r3, r2
 8001266:	b2da      	uxtb	r2, r3
							^ binaryArray[0]))) {
 8001268:	7c3b      	ldrb	r3, [r7, #16]
					== !(binaryArray[12] ^ binaryArray[10] ^ binaryArray[8]
 800126a:	429a      	cmp	r2, r3
 800126c:	bf0c      	ite	eq
 800126e:	2301      	moveq	r3, #1
 8001270:	2300      	movne	r3, #0
 8001272:	b2db      	uxtb	r3, r3
			&& (binaryArray[14]
 8001274:	4299      	cmp	r1, r3
 8001276:	d104      	bne.n	8001282 <getPositionSPI+0xf6>
		currentPosition &= 0x3FFF;
 8001278:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800127a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800127e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001280:	e002      	b.n	8001288 <getPositionSPI+0xfc>
	} else {
		currentPosition = 0xFFFF; //bad position
 8001282:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001286:	84fb      	strh	r3, [r7, #38]	; 0x26
	}

	//If the resolution is 12-bits, and wasn't 0xFFFF, then shift position, otherwise do nothing
	if ((resolution == RES12) && (currentPosition != 0xFFFF))
 8001288:	797b      	ldrb	r3, [r7, #5]
 800128a:	2b0c      	cmp	r3, #12
 800128c:	d107      	bne.n	800129e <getPositionSPI+0x112>
 800128e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001290:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001294:	4293      	cmp	r3, r2
 8001296:	d002      	beq.n	800129e <getPositionSPI+0x112>
		currentPosition = currentPosition >> 2;
 8001298:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800129a:	089b      	lsrs	r3, r3, #2
 800129c:	84fb      	strh	r3, [r7, #38]	; 0x26
	return currentPosition;
 800129e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3728      	adds	r7, #40	; 0x28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <calculateAngle>:
	spiWriteRead(hspi, AMT22_ZERO, encoderPort, encoderPin, 1);
	delay( docDelayLong + docDelayLong);

}

float calculateAngle(uint16_t encoderValue, uint8_t bitDepth) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	460a      	mov	r2, r1
 80012b2:	80fb      	strh	r3, [r7, #6]
 80012b4:	4613      	mov	r3, r2
 80012b6:	717b      	strb	r3, [r7, #5]
	float angle = 0.0;
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
	if (bitDepth == 12) {
 80012be:	797b      	ldrb	r3, [r7, #5]
 80012c0:	2b0c      	cmp	r3, #12
 80012c2:	d11e      	bne.n	8001302 <calculateAngle+0x5a>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_12_BIT;
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff fce4 	bl	8000c94 <__aeabi_ui2f>
 80012cc:	4603      	mov	r3, r0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f8aa 	bl	8000428 <__aeabi_f2d>
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <calculateAngle+0xa8>)
 80012da:	f7ff f8fd 	bl	80004d8 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4610      	mov	r0, r2
 80012e4:	4619      	mov	r1, r3
 80012e6:	f04f 0200 	mov.w	r2, #0
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <calculateAngle+0xac>)
 80012ec:	f7ff fa1e 	bl	800072c <__aeabi_ddiv>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4610      	mov	r0, r2
 80012f6:	4619      	mov	r1, r3
 80012f8:	f7ff fbc6 	bl	8000a88 <__aeabi_d2f>
 80012fc:	4603      	mov	r3, r0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e020      	b.n	8001344 <calculateAngle+0x9c>
	} else if (bitDepth == 14) {
 8001302:	797b      	ldrb	r3, [r7, #5]
 8001304:	2b0e      	cmp	r3, #14
 8001306:	d11d      	bne.n	8001344 <calculateAngle+0x9c>
		angle = ((float) encoderValue * 360.00)/ ENCODER_RESOLUTION_14_BIT;
 8001308:	88fb      	ldrh	r3, [r7, #6]
 800130a:	4618      	mov	r0, r3
 800130c:	f7ff fcc2 	bl	8000c94 <__aeabi_ui2f>
 8001310:	4603      	mov	r3, r0
 8001312:	4618      	mov	r0, r3
 8001314:	f7ff f888 	bl	8000428 <__aeabi_f2d>
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <calculateAngle+0xa8>)
 800131e:	f7ff f8db 	bl	80004d8 <__aeabi_dmul>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f04f 0200 	mov.w	r2, #0
 800132e:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <calculateAngle+0xb0>)
 8001330:	f7ff f9fc 	bl	800072c <__aeabi_ddiv>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff fba4 	bl	8000a88 <__aeabi_d2f>
 8001340:	4603      	mov	r3, r0
 8001342:	60fb      	str	r3, [r7, #12]
	}

	// до 0.2 градусів за документацією
	//angle = roundf(angle * 100.0) / 100.0;
	return angle;
 8001344:	68fb      	ldr	r3, [r7, #12]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40768000 	.word	0x40768000
 8001354:	40b00000 	.word	0x40b00000
 8001358:	40d00000 	.word	0x40d00000

0800135c <delay>:
	spiWriteRead((SPI_HandleTypeDef*) &hspi, AMT22_RESET, encoderPort,	encoderPin, 1);
	delay(docDelayLong);
}

//блокуючий хуйовий метод, треба через неблокуючий мабуть
void delay(uint32_t delayTime) {
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

	DWT_Delay_us(delayTime);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f000 f83b 	bl	80013e0 <DWT_Delay_us>
//	while ((__HAL_TIM_GET_COUNTER(timer) - start_time) < delayTime) {
//		// wait suka
//	}
//	HAL_TIM_Base_Stop(timer);
//	__HAL_RCC_TIM2_CLK_DISABLE();
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <startDWT>:

int startDWT(){
 8001372:	b580      	push	{r7, lr}
 8001374:	af00      	add	r7, sp, #0

	 DWT_Delay_Init();
 8001376:	f000 f803 	bl	8001380 <DWT_Delay_Init>

}
 800137a:	bf00      	nop
 800137c:	4618      	mov	r0, r3
 800137e:	bd80      	pop	{r7, pc}

08001380 <DWT_Delay_Init>:
 */

#include "DWT_Delay.h"

uint32_t DWT_Delay_Init()
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <DWT_Delay_Init+0x58>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4a13      	ldr	r2, [pc, #76]	; (80013d8 <DWT_Delay_Init+0x58>)
 800138a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800138e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8001390:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <DWT_Delay_Init+0x58>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <DWT_Delay_Init+0x58>)
 8001396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800139a:	60d3      	str	r3, [r2, #12]

    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <DWT_Delay_Init+0x5c>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0e      	ldr	r2, [pc, #56]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80013a8:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0b      	ldr	r2, [pc, #44]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6013      	str	r3, [r2, #0]

    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]

    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80013ba:	bf00      	nop
    __ASM volatile ("NOP");
 80013bc:	bf00      	nop
    __ASM volatile ("NOP");
 80013be:	bf00      	nop

    /* Check if clock cycle counter has started */
    if(DWT->CYCCNT)
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <DWT_Delay_Init+0x5c>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <DWT_Delay_Init+0x4c>
    {
       return 0; /*clock cycle counter started*/
 80013c8:	2300      	movs	r3, #0
 80013ca:	e000      	b.n	80013ce <DWT_Delay_Init+0x4e>
    }
    else
    {
      return 1; /*clock cycle counter not started*/
 80013cc:	2301      	movs	r3, #1
    }
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	e000edf0 	.word	0xe000edf0
 80013dc:	e0001000 	.word	0xe0001000

080013e0 <DWT_Delay_us>:

// This Function Provides Delay In Microseconds Using DWT
void DWT_Delay_us(volatile uint32_t au32_microseconds)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t au32_initial_ticks = DWT->CYCCNT;
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <DWT_Delay_us+0x48>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	60fb      	str	r3, [r7, #12]
  uint32_t au32_ticks = (HAL_RCC_GetHCLKFreq() / 1000000);
 80013ee:	f003 f91d 	bl	800462c <HAL_RCC_GetHCLKFreq>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4a0d      	ldr	r2, [pc, #52]	; (800142c <DWT_Delay_us+0x4c>)
 80013f6:	fba2 2303 	umull	r2, r3, r2, r3
 80013fa:	0c9b      	lsrs	r3, r3, #18
 80013fc:	60bb      	str	r3, [r7, #8]
  au32_microseconds *= au32_ticks;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	68ba      	ldr	r2, [r7, #8]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - au32_initial_ticks) < au32_microseconds-au32_ticks);
 8001408:	bf00      	nop
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <DWT_Delay_us+0x48>)
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	1ad2      	subs	r2, r2, r3
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	1acb      	subs	r3, r1, r3
 8001418:	429a      	cmp	r2, r3
 800141a:	d3f6      	bcc.n	800140a <DWT_Delay_us+0x2a>
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e0001000 	.word	0xe0001000
 800142c:	431bde83 	.word	0x431bde83

08001430 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	e9c7 0100 	strd	r0, r1, [r7]
 800143a:	683a      	ldr	r2, [r7, #0]
 800143c:	6879      	ldr	r1, [r7, #4]
 800143e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8001442:	4610      	mov	r0, r2
 8001444:	4619      	mov	r1, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr

0800144e <_ZSt3absf>:

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f006 fd3e 	bl	8007ef0 <ceilf>
 8001474:	4603      	mov	r3, r0
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <_ZN7RoboArmC1Ehh>:
#include "RoboArm.h"
//#include "TMC2209.h"

RoboArm::RoboArm(uint8_t defaultAngleT, uint8_t defaultDistanseT) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	70fb      	strb	r3, [r7, #3]
 800148c:	4613      	mov	r3, r2
 800148e:	70bb      	strb	r3, [r7, #2]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a2e      	ldr	r2, [pc, #184]	; (800154c <_ZN7RoboArmC1Ehh+0xcc>)
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	645a      	str	r2, [r3, #68]	; 0x44
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	649a      	str	r2, [r3, #72]	; 0x48
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a2a      	ldr	r2, [pc, #168]	; (8001550 <_ZN7RoboArmC1Ehh+0xd0>)
 80014a6:	64da      	str	r2, [r3, #76]	; 0x4c
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	220e      	movs	r2, #14
 80014ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3370      	adds	r3, #112	; 0x70
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 fd2f 	bl	8001f18 <_ZN7TMC2209C1Ev>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3398      	adds	r3, #152	; 0x98
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fd2a 	bl	8001f18 <_ZN7TMC2209C1Ev>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	33c0      	adds	r3, #192	; 0xc0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fd25 	bl	8001f18 <_ZN7TMC2209C1Ev>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	f04f 0200 	mov.w	r2, #0
 80014ec:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f04f 0200 	mov.w	r2, #0
 80014f6:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f04f 0200 	mov.w	r2, #0
 800150a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f04f 0200 	mov.w	r2, #0
 8001526:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	defaultAngle = defaultAngleT;
 800152a:	78fb      	ldrb	r3, [r7, #3]
 800152c:	b29a      	uxth	r2, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f8a3 20f0 	strh.w	r2, [r3, #240]	; 0xf0
	defaultDistanse = defaultDistanseT;
 8001534:	78bb      	ldrb	r3, [r7, #2]
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f8a3 20f2 	strh.w	r2, [r3, #242]	; 0xf2


	startDWT();
 800153e:	f7ff ff18 	bl	8001372 <startDWT>
}
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4618      	mov	r0, r3
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	43200000 	.word	0x43200000
 8001550:	437a0000 	.word	0x437a0000

08001554 <_ZN7RoboArm13EmergencyStopEv>:

int RoboArm::CloseGripper() {
	return 0;
}

int RoboArm::EmergencyStop() {
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, GPIO_PIN_SET);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001564:	2201      	movs	r2, #1
 8001566:	4619      	mov	r1, r3
 8001568:	f002 fc62 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, GPIO_PIN_SET);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001574:	2201      	movs	r2, #1
 8001576:	4619      	mov	r1, r3
 8001578:	f002 fc5a 	bl	8003e30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, GPIO_PIN_SET);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001586:	2201      	movs	r2, #1
 8001588:	4619      	mov	r1, r3
 800158a:	f002 fc51 	bl	8003e30 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f003 fe83 	bl	80052a0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2104      	movs	r1, #4
 80015a0:	4618      	mov	r0, r3
 80015a2:	f003 fe7d 	bl	80052a0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim3M3, TIM_CHANNEL_3);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68db      	ldr	r3, [r3, #12]
 80015aa:	2108      	movs	r1, #8
 80015ac:	4618      	mov	r0, r3
 80015ae:	f003 fe77 	bl	80052a0 <HAL_TIM_PWM_Stop>

	HAL_TIM_Base_Stop_IT(htim1M1);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 fd52 	bl	8005060 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f003 fd4d 	bl	8005060 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim3M3);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 fd48 	bl	8005060 <HAL_TIM_Base_Stop_IT>

	return 0;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <_ZN7RoboArm15GetLastPositionEv>:
	return 0;

}
*/

int RoboArm::GetLastPosition() {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
	int attempts = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_ang = GetPosEncoders(1);
 80015e8:	2101      	movs	r1, #1
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f000 fa9b 	bl	8001b26 <_ZN7RoboArm14GetPosEncodersEh>
 80015f0:	6138      	str	r0, [r7, #16]
	while(posnowT_ang == 0xFFFF && ++attempts < 3)
 80015f2:	e004      	b.n	80015fe <_ZN7RoboArm15GetLastPositionEv+0x22>
		posnowT_ang = GetPosEncoders(1);
 80015f4:	2101      	movs	r1, #1
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fa95 	bl	8001b26 <_ZN7RoboArm14GetPosEncodersEh>
 80015fc:	6138      	str	r0, [r7, #16]
	while(posnowT_ang == 0xFFFF && ++attempts < 3)
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001604:	4293      	cmp	r3, r2
 8001606:	d107      	bne.n	8001618 <_ZN7RoboArm15GetLastPositionEv+0x3c>
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	3301      	adds	r3, #1
 800160c:	617b      	str	r3, [r7, #20]
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	2b02      	cmp	r3, #2
 8001612:	dc01      	bgt.n	8001618 <_ZN7RoboArm15GetLastPositionEv+0x3c>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <_ZN7RoboArm15GetLastPositionEv+0x3e>
 8001618:	2300      	movs	r3, #0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1ea      	bne.n	80015f4 <_ZN7RoboArm15GetLastPositionEv+0x18>
	lastPosAngle_Enc = GetAngleEncoders(posnowT_ang);
 800161e:	6939      	ldr	r1, [r7, #16]
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 fa6d 	bl	8001b00 <_ZN7RoboArm16GetAngleEncodersEm>
 8001626:	4602      	mov	r2, r0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
	attempts = 0;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_lin = GetPosEncoders(2);
 8001632:	2102      	movs	r1, #2
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f000 fa76 	bl	8001b26 <_ZN7RoboArm14GetPosEncodersEh>
 800163a:	60f8      	str	r0, [r7, #12]
	while(posnowT_lin == 0xFFFF && ++attempts < 3)
 800163c:	e004      	b.n	8001648 <_ZN7RoboArm15GetLastPositionEv+0x6c>
		posnowT_lin = GetPosEncoders(2);
 800163e:	2102      	movs	r1, #2
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fa70 	bl	8001b26 <_ZN7RoboArm14GetPosEncodersEh>
 8001646:	60f8      	str	r0, [r7, #12]
	while(posnowT_lin == 0xFFFF && ++attempts < 3)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800164e:	4293      	cmp	r3, r2
 8001650:	d107      	bne.n	8001662 <_ZN7RoboArm15GetLastPositionEv+0x86>
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2b02      	cmp	r3, #2
 800165c:	dc01      	bgt.n	8001662 <_ZN7RoboArm15GetLastPositionEv+0x86>
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <_ZN7RoboArm15GetLastPositionEv+0x88>
 8001662:	2300      	movs	r3, #0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d1ea      	bne.n	800163e <_ZN7RoboArm15GetLastPositionEv+0x62>
	float pos = GetAngleEncoders(posnowT_lin);
 8001668:	68f9      	ldr	r1, [r7, #12]
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 fa48 	bl	8001b00 <_ZN7RoboArm16GetAngleEncodersEm>
 8001670:	60b8      	str	r0, [r7, #8]
	lastPosLinear_Enc = pos*distMax/360.0;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	68b9      	ldr	r1, [r7, #8]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fb63 	bl	8000d44 <__aeabi_fmul>
 800167e:	4603      	mov	r3, r0
 8001680:	4906      	ldr	r1, [pc, #24]	; (800169c <_ZN7RoboArm15GetLastPositionEv+0xc0>)
 8001682:	4618      	mov	r0, r3
 8001684:	f7ff fc12 	bl	8000eac <__aeabi_fdiv>
 8001688:	4603      	mov	r3, r0
 800168a:	461a      	mov	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f8c3 20f8 	str.w	r2, [r3, #248]	; 0xf8
	return 0;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	43b40000 	.word	0x43b40000

080016a0 <_ZN7RoboArm11Move2MotorsEff>:

int RoboArm::Move2Motors(float angle, float distance) {
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b08f      	sub	sp, #60	; 0x3c
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]

	// TIM1 Х  enc1 -  угол 360  -  8 оборотов движка на 1 оборот энкодера
	// TIM2  Y  enc2 - линейный -  6,4516129 оборотов движка (это целое линейное перемещение с запасом) на 1 оборот энкодера

	HAL_TIM_PWM_Stop(htim1M1, TIM_CHANNEL_1);      //остановили PWM таймера
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2100      	movs	r1, #0
 80016b2:	4618      	mov	r0, r3
 80016b4:	f003 fdf4 	bl	80052a0 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(htim2M2, TIM_CHANNEL_2);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2104      	movs	r1, #4
 80016be:	4618      	mov	r0, r3
 80016c0:	f003 fdee 	bl	80052a0 <HAL_TIM_PWM_Stop>
	HAL_TIM_Base_Stop_IT(htim1M1);				// остановили прерывание таймеров
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f003 fcc9 	bl	8005060 <HAL_TIM_Base_Stop_IT>
	HAL_TIM_Base_Stop_IT(htim2M2);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f003 fcc4 	bl	8005060 <HAL_TIM_Base_Stop_IT>

	SetEnable(1, false);
 80016d8:	2200      	movs	r2, #0
 80016da:	2101      	movs	r1, #1
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f000 fbe2 	bl	8001ea6 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2102      	movs	r1, #2
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 fbdd 	bl	8001ea6 <_ZN7RoboArm9SetEnableEtb>

	GetLastPosition(); //update -> lastPosAngle lastPosLinear from ENCODER
 80016ec:	68f8      	ldr	r0, [r7, #12]
 80016ee:	f7ff ff75 	bl	80015dc <_ZN7RoboArm15GetLastPositionEv>
	float lastPosAngle = ShiftZeroAng(lastPosAngle_Enc);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80016f8:	4619      	mov	r1, r3
 80016fa:	68f8      	ldr	r0, [r7, #12]
 80016fc:	f000 fb04 	bl	8001d08 <_ZN7RoboArm12ShiftZeroAngEf>
 8001700:	6338      	str	r0, [r7, #48]	; 0x30
	float lastPosLinear = ShiftZeroLin(lastPosLinear_Enc);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	f8d3 30f8 	ldr.w	r3, [r3, #248]	; 0xf8
 8001708:	4619      	mov	r1, r3
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 fb20 	bl	8001d50 <_ZN7RoboArm12ShiftZeroLinEf>
 8001710:	62f8      	str	r0, [r7, #44]	; 0x2c

	float pos_ang = abs(lastPosAngle - angle);
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001716:	f7ff fa0b 	bl	8000b30 <__aeabi_fsub>
 800171a:	4603      	mov	r3, r0
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fe96 	bl	800144e <_ZSt3absf>
 8001722:	62b8      	str	r0, [r7, #40]	; 0x28
	float inverse_pos_ang = abs(360.0 - pos_ang);
 8001724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001726:	f7fe fe7f 	bl	8000428 <__aeabi_f2d>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	f04f 0000 	mov.w	r0, #0
 8001732:	497b      	ldr	r1, [pc, #492]	; (8001920 <_ZN7RoboArm11Move2MotorsEff+0x280>)
 8001734:	f7fe fd18 	bl	8000168 <__aeabi_dsub>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4610      	mov	r0, r2
 800173e:	4619      	mov	r1, r3
 8001740:	f7ff fe76 	bl	8001430 <_ZSt3absd>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff f99c 	bl	8000a88 <__aeabi_d2f>
 8001750:	4603      	mov	r3, r0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
	float actualPosAngle;

	/* виставили в яку сторону ехать мотору*/
	if (inverse_pos_ang < pos_ang) {
 8001754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001758:	f7ff fc92 	bl	8001080 <__aeabi_fcmplt>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d021      	beq.n	80017a6 <_ZN7RoboArm11Move2MotorsEff+0x106>
		actualPosAngle = inverse_pos_ang;
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 8001766:	68b9      	ldr	r1, [r7, #8]
 8001768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800176a:	f7ff fc89 	bl	8001080 <__aeabi_fcmplt>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d008      	beq.n	8001786 <_ZN7RoboArm11Move2MotorsEff+0xe6>
			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6958      	ldr	r0, [r3, #20]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8b1b      	ldrh	r3, [r3, #24]
 800177c:	2200      	movs	r2, #0
 800177e:	4619      	mov	r1, r3
 8001780:	f002 fb56 	bl	8003e30 <HAL_GPIO_WritePin>
 8001784:	e030      	b.n	80017e8 <_ZN7RoboArm11Move2MotorsEff+0x148>
//			tmcd_angle.enableInverseMotorDirection();
		} else if (lastPosAngle > angle) {
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800178a:	f7ff fc97 	bl	80010bc <__aeabi_fcmpgt>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d029      	beq.n	80017e8 <_ZN7RoboArm11Move2MotorsEff+0x148>
			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6958      	ldr	r0, [r3, #20]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	8b1b      	ldrh	r3, [r3, #24]
 800179c:	2201      	movs	r2, #1
 800179e:	4619      	mov	r1, r3
 80017a0:	f002 fb46 	bl	8003e30 <HAL_GPIO_WritePin>
 80017a4:	e020      	b.n	80017e8 <_ZN7RoboArm11Move2MotorsEff+0x148>
//			tmcd_angle.disableInverseMotorDirection();
		}
	}
	else {
		actualPosAngle = pos_ang;
 80017a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017a8:	637b      	str	r3, [r7, #52]	; 0x34
		if (lastPosAngle < angle) {
 80017aa:	68b9      	ldr	r1, [r7, #8]
 80017ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017ae:	f7ff fc67 	bl	8001080 <__aeabi_fcmplt>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <_ZN7RoboArm11Move2MotorsEff+0x12a>
			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_SET);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6958      	ldr	r0, [r3, #20]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8b1b      	ldrh	r3, [r3, #24]
 80017c0:	2201      	movs	r2, #1
 80017c2:	4619      	mov	r1, r3
 80017c4:	f002 fb34 	bl	8003e30 <HAL_GPIO_WritePin>
 80017c8:	e00e      	b.n	80017e8 <_ZN7RoboArm11Move2MotorsEff+0x148>
//			tmcd_angle.disableInverseMotorDirection();
		} else if (lastPosAngle > angle) {
 80017ca:	68b9      	ldr	r1, [r7, #8]
 80017cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80017ce:	f7ff fc75 	bl	80010bc <__aeabi_fcmpgt>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d007      	beq.n	80017e8 <_ZN7RoboArm11Move2MotorsEff+0x148>
			HAL_GPIO_WritePin(Dir1_GPIO_Port_M1, Dir1_Pin_M1, GPIO_PIN_RESET);
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6958      	ldr	r0, [r3, #20]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	8b1b      	ldrh	r3, [r3, #24]
 80017e0:	2200      	movs	r2, #0
 80017e2:	4619      	mov	r1, r3
 80017e4:	f002 fb24 	bl	8003e30 <HAL_GPIO_WritePin>
//	if (lastPosLinear < distance) {
//		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
//	} else if (lastPosLinear > distance) {
//		HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
//	}
	if (lastPosLinear < distance) {
 80017e8:	6879      	ldr	r1, [r7, #4]
 80017ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017ec:	f7ff fc48 	bl	8001080 <__aeabi_fcmplt>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d005      	beq.n	8001802 <_ZN7RoboArm11Move2MotorsEff+0x162>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_RESET);
			tmcd_linear.enableInverseMotorDirection();
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3370      	adds	r3, #112	; 0x70
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 fc78 	bl	80020f0 <_ZN7TMC220927enableInverseMotorDirectionEv>
 8001800:	e00b      	b.n	800181a <_ZN7RoboArm11Move2MotorsEff+0x17a>
		} else if (lastPosLinear > distance) {
 8001802:	6879      	ldr	r1, [r7, #4]
 8001804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001806:	f7ff fc59 	bl	80010bc <__aeabi_fcmpgt>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d004      	beq.n	800181a <_ZN7RoboArm11Move2MotorsEff+0x17a>
//			HAL_GPIO_WritePin(Dir2_GPIO_Port_M2, Dir2_Pin_M2, GPIO_PIN_SET);
			tmcd_linear.disableInverseMotorDirection();
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	3370      	adds	r3, #112	; 0x70
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fc7b 	bl	8002110 <_ZN7TMC220928disableInverseMotorDirectionEv>
		}

//	actualPosAngle = abs(lastPosAngle - angle);
	float actualPosDistance = abs(lastPosLinear - distance);
 800181a:	6879      	ldr	r1, [r7, #4]
 800181c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800181e:	f7ff f987 	bl	8000b30 <__aeabi_fsub>
 8001822:	4603      	mov	r3, r0
 8001824:	4618      	mov	r0, r3
 8001826:	f7ff fe12 	bl	800144e <_ZSt3absf>
 800182a:	6238      	str	r0, [r7, #32]

	//set microstepping TODO
	anglePsteps = (actualPosAngle * (8 * motorStep * drvMicroSteps)) / 360; //angle to steps
 800182c:	493d      	ldr	r1, [pc, #244]	; (8001924 <_ZN7RoboArm11Move2MotorsEff+0x284>)
 800182e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001830:	f7ff fa88 	bl	8000d44 <__aeabi_fmul>
 8001834:	4603      	mov	r3, r0
 8001836:	493c      	ldr	r1, [pc, #240]	; (8001928 <_ZN7RoboArm11Move2MotorsEff+0x288>)
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fb37 	bl	8000eac <__aeabi_fdiv>
 800183e:	4603      	mov	r3, r0
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fc45 	bl	80010d0 <__aeabi_f2uiz>
 8001846:	4602      	mov	r2, r0
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	649a      	str	r2, [r3, #72]	; 0x48
//	anglePsteps = anglePsteps+(anglePsteps*0.05);
	distPsteps = actualPosDistance * linearStepsMil; //steps to distanse
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	6a39      	ldr	r1, [r7, #32]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fa76 	bl	8000d44 <__aeabi_fmul>
 8001858:	4603      	mov	r3, r0
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff fc38 	bl	80010d0 <__aeabi_f2uiz>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	645a      	str	r2, [r3, #68]	; 0x44
//	lastPosLinear = distance;

// 1, 2, 3, 4, 6, 8, 9, 12, 18, 24, 36 и 72 - Це можлива обрана максимальна швидкість для мотора з більшої кількістю кроків. Це дільник таймера

//	uint32_t periodM1 = 1200; //reduse to 600-400 mks for 32 microsteps
	uint32_t periodM1 = 600;
 8001866:	f44f 7316 	mov.w	r3, #600	; 0x258
 800186a:	61fb      	str	r3, [r7, #28]
	uint32_t psc = 72-1;
 800186c:	2347      	movs	r3, #71	; 0x47
 800186e:	61bb      	str	r3, [r7, #24]

	float delimiter=1;
 8001870:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001874:	617b      	str	r3, [r7, #20]
	float mnoj=1;
 8001876:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800187a:	613b      	str	r3, [r7, #16]

	if (anglePsteps > distPsteps) {
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	429a      	cmp	r2, r3
 8001886:	d951      	bls.n	800192c <_ZN7RoboArm11Move2MotorsEff+0x28c>

		htim1M1->Instance->PSC = psc;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	69ba      	ldr	r2, [r7, #24]
 8001890:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = periodM1;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	69fa      	ldr	r2, [r7, #28]
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
		htim1M1->Instance->CCR1 = periodM1/2;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	0852      	lsrs	r2, r2, #1
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34

		delimiter = float(anglePsteps) / float(distPsteps);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff f9f1 	bl	8000c94 <__aeabi_ui2f>
 80018b2:	4604      	mov	r4, r0
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff f9eb 	bl	8000c94 <__aeabi_ui2f>
 80018be:	4603      	mov	r3, r0
 80018c0:	4619      	mov	r1, r3
 80018c2:	4620      	mov	r0, r4
 80018c4:	f7ff faf2 	bl	8000eac <__aeabi_fdiv>
 80018c8:	4603      	mov	r3, r0
 80018ca:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 80018cc:	69f8      	ldr	r0, [r7, #28]
 80018ce:	f7ff f9e1 	bl	8000c94 <__aeabi_ui2f>
 80018d2:	4603      	mov	r3, r0
 80018d4:	6979      	ldr	r1, [r7, #20]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fa34 	bl	8000d44 <__aeabi_fmul>
 80018dc:	4603      	mov	r3, r0
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fdc1 	bl	8001466 <_ZSt4ceilf>
 80018e4:	6138      	str	r0, [r7, #16]

		htim2M2->Instance->PSC = psc;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = mnoj;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	681c      	ldr	r4, [r3, #0]
 80018f6:	6938      	ldr	r0, [r7, #16]
 80018f8:	f7ff fbea 	bl	80010d0 <__aeabi_f2uiz>
 80018fc:	4603      	mov	r3, r0
 80018fe:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim2M2->Instance->CCR2 = mnoj / 2;
 8001900:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001904:	6938      	ldr	r0, [r7, #16]
 8001906:	f7ff fad1 	bl	8000eac <__aeabi_fdiv>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	681c      	ldr	r4, [r3, #0]
 8001914:	4610      	mov	r0, r2
 8001916:	f7ff fbdb 	bl	80010d0 <__aeabi_f2uiz>
 800191a:	4603      	mov	r3, r0
 800191c:	63a3      	str	r3, [r4, #56]	; 0x38
 800191e:	e056      	b.n	80019ce <_ZN7RoboArm11Move2MotorsEff+0x32e>
 8001920:	40768000 	.word	0x40768000
 8001924:	47480000 	.word	0x47480000
 8001928:	43b40000 	.word	0x43b40000

	} else if (anglePsteps < distPsteps) {
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	429a      	cmp	r2, r3
 8001936:	d24a      	bcs.n	80019ce <_ZN7RoboArm11Move2MotorsEff+0x32e>

		htim2M2->Instance->PSC = psc;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	69ba      	ldr	r2, [r7, #24]
 8001940:	629a      	str	r2, [r3, #40]	; 0x28
		htim2M2->Instance->ARR = periodM1;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	62da      	str	r2, [r3, #44]	; 0x2c
		htim2M2->Instance->CCR2 = periodM1 / 2;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	0852      	lsrs	r2, r2, #1
 8001956:	639a      	str	r2, [r3, #56]	; 0x38

		delimiter = float(distPsteps) / float(anglePsteps);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff f999 	bl	8000c94 <__aeabi_ui2f>
 8001962:	4604      	mov	r4, r0
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff f993 	bl	8000c94 <__aeabi_ui2f>
 800196e:	4603      	mov	r3, r0
 8001970:	4619      	mov	r1, r3
 8001972:	4620      	mov	r0, r4
 8001974:	f7ff fa9a 	bl	8000eac <__aeabi_fdiv>
 8001978:	4603      	mov	r3, r0
 800197a:	617b      	str	r3, [r7, #20]
		mnoj = ceil(periodM1 * delimiter);
 800197c:	69f8      	ldr	r0, [r7, #28]
 800197e:	f7ff f989 	bl	8000c94 <__aeabi_ui2f>
 8001982:	4603      	mov	r3, r0
 8001984:	6979      	ldr	r1, [r7, #20]
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff f9dc 	bl	8000d44 <__aeabi_fmul>
 800198c:	4603      	mov	r3, r0
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff fd69 	bl	8001466 <_ZSt4ceilf>
 8001994:	6138      	str	r0, [r7, #16]

		htim1M1->Instance->PSC = psc;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	629a      	str	r2, [r3, #40]	; 0x28
		htim1M1->Instance->ARR = mnoj;
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	681c      	ldr	r4, [r3, #0]
 80019a6:	6938      	ldr	r0, [r7, #16]
 80019a8:	f7ff fb92 	bl	80010d0 <__aeabi_f2uiz>
 80019ac:	4603      	mov	r3, r0
 80019ae:	62e3      	str	r3, [r4, #44]	; 0x2c
		htim1M1->Instance->CCR1 = mnoj / 2;
 80019b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019b4:	6938      	ldr	r0, [r7, #16]
 80019b6:	f7ff fa79 	bl	8000eac <__aeabi_fdiv>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	681c      	ldr	r4, [r3, #0]
 80019c4:	4610      	mov	r0, r2
 80019c6:	f7ff fb83 	bl	80010d0 <__aeabi_f2uiz>
 80019ca:	4603      	mov	r3, r0
 80019cc:	6363      	str	r3, [r4, #52]	; 0x34
//		htim1M1->Instance->PSC = psc;
//		htim1M1->Instance->ARR = mnoj;
//		htim1M1->Instance->CCR1 = mnoj / 2;
//	}

	stateMoveM1 = true;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	stateMoveM2 = true;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2201      	movs	r2, #1
 80019da:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef

	SetEnable(1, true);
 80019de:	2201      	movs	r2, #1
 80019e0:	2101      	movs	r1, #1
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 fa5f 	bl	8001ea6 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 80019e8:	2201      	movs	r2, #1
 80019ea:	2102      	movs	r1, #2
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f000 fa5a 	bl	8001ea6 <_ZN7RoboArm9SetEnableEtb>

	HAL_TIM_PWM_Start(htim1M1, TIM_CHANNEL_1);
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2100      	movs	r1, #0
 80019f8:	4618      	mov	r0, r3
 80019fa:	f003 fbaf 	bl	800515c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(htim2M2, TIM_CHANNEL_2);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2104      	movs	r1, #4
 8001a04:	4618      	mov	r0, r3
 8001a06:	f003 fba9 	bl	800515c <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start_IT(htim1M1);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fad4 	bl	8004fbc <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(htim2M2);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 facf 	bl	8004fbc <HAL_TIM_Base_Start_IT>

	return 0;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	373c      	adds	r7, #60	; 0x3c
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd90      	pop	{r4, r7, pc}

08001a28 <_ZN7RoboArm13setPrintStateEb>:

int RoboArm::OpenGripper() {
	return 0;
}

int RoboArm::setPrintState(bool state) {
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	70fb      	strb	r3, [r7, #3]
	if (state) {
 8001a34:	78fb      	ldrb	r3, [r7, #3]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d004      	beq.n	8001a44 <_ZN7RoboArm13setPrintStateEb+0x1c>
		PrintAllState = true;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
 8001a42:	e003      	b.n	8001a4c <_ZN7RoboArm13setPrintStateEb+0x24>
	} else {
		PrintAllState = false;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
	}
	return 0;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	370c      	adds	r7, #12
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bc80      	pop	{r7}
 8001a56:	4770      	bx	lr

08001a58 <_ZN7RoboArm13getPrintStateEv>:

bool RoboArm::getPrintState() {
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	if (PrintAllState) {
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <_ZN7RoboArm13getPrintStateEv+0x16>
		return true;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e000      	b.n	8001a70 <_ZN7RoboArm13getPrintStateEv+0x18>
	} else {
		return false;
 8001a6e:	2300      	movs	r3, #0
	}
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr

08001a7a <_ZN7RoboArm17SetMicrosteps4AllEh>:


int RoboArm::SetMicrosteps4All(uint8_t microsteps_per_step){
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b082      	sub	sp, #8
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	70fb      	strb	r3, [r7, #3]

	tmcd_angle.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3398      	adds	r3, #152	; 0x98
 8001a8a:	78fa      	ldrb	r2, [r7, #3]
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 facc 	bl	800202c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_gripper.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	33c0      	adds	r3, #192	; 0xc0
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	4611      	mov	r1, r2
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f000 fac5 	bl	800202c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>
	tmcd_linear.setMicrostepsPerStepPowerOfTwo(microsteps_per_step);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3370      	adds	r3, #112	; 0x70
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 fabe 	bl	800202c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>

	return 0;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>:

int RoboArm::SetSettEncoders(SPI_HandleTypeDef &arm_hspi1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc1T, uint16_t CS_Pin_Enc1T,
		GPIO_TypeDef *CS_GPIO_Port_Enc2T, uint16_t CS_Pin_Enc2T,
		uint8_t ResolutionEncodersT) {
 8001aba:	b480      	push	{r7}
 8001abc:	b085      	sub	sp, #20
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	60f8      	str	r0, [r7, #12]
 8001ac2:	60b9      	str	r1, [r7, #8]
 8001ac4:	607a      	str	r2, [r7, #4]
 8001ac6:	807b      	strh	r3, [r7, #2]

	arm_hspi1 = &arm_hspi1T;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
	CS_GPIO_Port_Enc1 = CS_GPIO_Port_Enc1T;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	65da      	str	r2, [r3, #92]	; 0x5c
	CS_Pin_Enc1 = CS_Pin_Enc1T;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	CS_Pin_Enc2 = CS_Pin_Enc2T;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8bba      	ldrh	r2, [r7, #28]
 8001ae0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	CS_GPIO_Port_Enc2 = CS_GPIO_Port_Enc2T;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	665a      	str	r2, [r3, #100]	; 0x64
	ResolutionEncoders = ResolutionEncodersT;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	return 0;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr

08001b00 <_ZN7RoboArm16GetAngleEncodersEm>:

float RoboArm::GetAngleEncoders(uint32_t encoderValue) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
	//	https://www.cuidevices.com/product/resource/amt22.pdf
	return calculateAngle(encoderValue, ResolutionEncoders);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b14:	4619      	mov	r1, r3
 8001b16:	4610      	mov	r0, r2
 8001b18:	f7ff fbc6 	bl	80012a8 <calculateAngle>
 8001b1c:	4603      	mov	r3, r0
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_ZN7RoboArm14GetPosEncodersEh>:

uint32_t RoboArm::GetPosEncoders(uint8_t numEnc) {
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	460b      	mov	r3, r1
 8001b30:	70fb      	strb	r3, [r7, #3]
	switch (numEnc) {
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d002      	beq.n	8001b3e <_ZN7RoboArm14GetPosEncodersEh+0x18>
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d013      	beq.n	8001b64 <_ZN7RoboArm14GetPosEncodersEh+0x3e>
 8001b3c:	e025      	b.n	8001b8a <_ZN7RoboArm14GetPosEncodersEh+0x64>
	case 1:
		posNowEnc1 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc1, CS_Pin_Enc1,
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b52:	f7ff fb1b 	bl	800118c <getPositionSPI>
 8001b56:	4603      	mov	r3, r0
 8001b58:	461a      	mov	r2, r3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	669a      	str	r2, [r3, #104]	; 0x68
				ResolutionEncoders);
		return posNowEnc1;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b62:	e013      	b.n	8001b8c <_ZN7RoboArm14GetPosEncodersEh+0x66>
		break;
	case 2:
		posNowEnc2 = getPositionSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b78:	f7ff fb08 	bl	800118c <getPositionSPI>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	461a      	mov	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	66da      	str	r2, [r3, #108]	; 0x6c
				ResolutionEncoders);
		return posNowEnc2;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b88:	e000      	b.n	8001b8c <_ZN7RoboArm14GetPosEncodersEh+0x66>
		break;
	default:
		return 1;
 8001b8a:	2301      	movs	r3, #1
		break;
	}
	return 0;
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <_ZN7RoboArm15SetSoftwareZeroEv>:
	setZeroSPI(arm_hspi1, CS_GPIO_Port_Enc2, CS_Pin_Enc2);
	HAL_Delay(250);
	return 0;
}

int RoboArm::SetSoftwareZero() {
 8001b94:	b5b0      	push	{r4, r5, r7, lr}
 8001b96:	b086      	sub	sp, #24
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
//	ang_zero = GetPosEncoders(1);
//	lin_zero = GetPosEncoders(2);

	int attempts = 0;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	617b      	str	r3, [r7, #20]
	uint32_t posnowT_1 = GetPosEncoders(1);
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffbf 	bl	8001b26 <_ZN7RoboArm14GetPosEncodersEh>
 8001ba8:	6138      	str	r0, [r7, #16]

	while(posnowT_1 == 0xFFFF && ++attempts < 3)
 8001baa:	e004      	b.n	8001bb6 <_ZN7RoboArm15SetSoftwareZeroEv+0x22>
		posnowT_1 = GetPosEncoders(1); //try again
 8001bac:	2101      	movs	r1, #1
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ffb9 	bl	8001b26 <_ZN7RoboArm14GetPosEncodersEh>
 8001bb4:	6138      	str	r0, [r7, #16]
	while(posnowT_1 == 0xFFFF && ++attempts < 3)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d107      	bne.n	8001bd0 <_ZN7RoboArm15SetSoftwareZeroEv+0x3c>
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	dc01      	bgt.n	8001bd0 <_ZN7RoboArm15SetSoftwareZeroEv+0x3c>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e000      	b.n	8001bd2 <_ZN7RoboArm15SetSoftwareZeroEv+0x3e>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1ea      	bne.n	8001bac <_ZN7RoboArm15SetSoftwareZeroEv+0x18>

	attempts = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]

	//			float ang = posnowT*360/16384;
	ang_zero = GetAngleEncoders(posnowT_1) - defaultAngle;// - defaultAngle; //0, 120, 240
 8001bda:	6939      	ldr	r1, [r7, #16]
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff ff8f 	bl	8001b00 <_ZN7RoboArm16GetAngleEncodersEm>
 8001be2:	4604      	mov	r4, r0
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff f856 	bl	8000c9c <__aeabi_i2f>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7fe ff9b 	bl	8000b30 <__aeabi_fsub>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461a      	mov	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	if (ang_zero < 0.0)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c0a:	f04f 0100 	mov.w	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fa36 	bl	8001080 <__aeabi_fcmplt>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00b      	beq.n	8001c32 <_ZN7RoboArm15SetSoftwareZeroEv+0x9e>
		ang_zero = 360.0 + ang_zero;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001c20:	4937      	ldr	r1, [pc, #220]	; (8001d00 <_ZN7RoboArm15SetSoftwareZeroEv+0x16c>)
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe ff86 	bl	8000b34 <__addsf3>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	//			un_send.params.ang = angleT;

	uint32_t posnowT_2 = GetPosEncoders(2);
 8001c32:	2102      	movs	r1, #2
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff ff76 	bl	8001b26 <_ZN7RoboArm14GetPosEncodersEh>
 8001c3a:	60f8      	str	r0, [r7, #12]
	while(posnowT_2 == 0xFFFF && ++attempts < 3)
 8001c3c:	e004      	b.n	8001c48 <_ZN7RoboArm15SetSoftwareZeroEv+0xb4>
		posnowT_2 = GetPosEncoders(2); //try again
 8001c3e:	2102      	movs	r1, #2
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff ff70 	bl	8001b26 <_ZN7RoboArm14GetPosEncodersEh>
 8001c46:	60f8      	str	r0, [r7, #12]
	while(posnowT_2 == 0xFFFF && ++attempts < 3)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d107      	bne.n	8001c62 <_ZN7RoboArm15SetSoftwareZeroEv+0xce>
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	3301      	adds	r3, #1
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	dc01      	bgt.n	8001c62 <_ZN7RoboArm15SetSoftwareZeroEv+0xce>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <_ZN7RoboArm15SetSoftwareZeroEv+0xd0>
 8001c62:	2300      	movs	r3, #0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1ea      	bne.n	8001c3e <_ZN7RoboArm15SetSoftwareZeroEv+0xaa>
	float ang_pos = GetAngleEncoders(posnowT_2);
 8001c68:	68f9      	ldr	r1, [r7, #12]
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ff48 	bl	8001b00 <_ZN7RoboArm16GetAngleEncodersEm>
 8001c70:	60b8      	str	r0, [r7, #8]
	lin_zero = ang_pos*distMax/360.0 - defaultDistanse;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c76:	68b9      	ldr	r1, [r7, #8]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f7ff f863 	bl	8000d44 <__aeabi_fmul>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fbd1 	bl	8000428 <__aeabi_f2d>
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <_ZN7RoboArm15SetSoftwareZeroEv+0x170>)
 8001c8c:	f7fe fd4e 	bl	800072c <__aeabi_ddiv>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4614      	mov	r4, r2
 8001c96:	461d      	mov	r5, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	; 0xf2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fbb0 	bl	8000404 <__aeabi_i2d>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4620      	mov	r0, r4
 8001caa:	4629      	mov	r1, r5
 8001cac:	f7fe fa5c 	bl	8000168 <__aeabi_dsub>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4610      	mov	r0, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f7fe fee6 	bl	8000a88 <__aeabi_d2f>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if (lin_zero < 0.0)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001cca:	f04f 0100 	mov.w	r1, #0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7ff f9d6 	bl	8001080 <__aeabi_fcmplt>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00d      	beq.n	8001cf6 <_ZN7RoboArm15SetSoftwareZeroEv+0x162>
		lin_zero = distMax + lin_zero;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f7fe ff24 	bl	8000b34 <__addsf3>
 8001cec:	4603      	mov	r3, r0
 8001cee:	461a      	mov	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	return 0;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bdb0      	pop	{r4, r5, r7, pc}
 8001d00:	43b40000 	.word	0x43b40000
 8001d04:	40768000 	.word	0x40768000

08001d08 <_ZN7RoboArm12ShiftZeroAngEf>:
	if (lin_actual > distMax)
		lin_actual -= distMax;
	return lin_actual;
}

float RoboArm::ShiftZeroAng(float ang_actual){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
	float ang = ang_actual - ang_zero;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8001d18:	4619      	mov	r1, r3
 8001d1a:	6838      	ldr	r0, [r7, #0]
 8001d1c:	f7fe ff08 	bl	8000b30 <__aeabi_fsub>
 8001d20:	4603      	mov	r3, r0
 8001d22:	60fb      	str	r3, [r7, #12]
	if (ang < 0.0)
 8001d24:	f04f 0100 	mov.w	r1, #0
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f7ff f9a9 	bl	8001080 <__aeabi_fcmplt>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <_ZN7RoboArm12ShiftZeroAngEf+0x38>
		ang = 360.0 + ang;
 8001d34:	4905      	ldr	r1, [pc, #20]	; (8001d4c <_ZN7RoboArm12ShiftZeroAngEf+0x44>)
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f7fe fefc 	bl	8000b34 <__addsf3>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60fb      	str	r3, [r7, #12]
	return ang;
 8001d40:	68fb      	ldr	r3, [r7, #12]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3710      	adds	r7, #16
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	43b40000 	.word	0x43b40000

08001d50 <_ZN7RoboArm12ShiftZeroLinEf>:

float RoboArm::ShiftZeroLin(float lin_actual){
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
	float lin = lin_actual - lin_zero;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8001d60:	4619      	mov	r1, r3
 8001d62:	6838      	ldr	r0, [r7, #0]
 8001d64:	f7fe fee4 	bl	8000b30 <__aeabi_fsub>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	60fb      	str	r3, [r7, #12]
	if (lin < 0.0)
 8001d6c:	f04f 0100 	mov.w	r1, #0
 8001d70:	68f8      	ldr	r0, [r7, #12]
 8001d72:	f7ff f985 	bl	8001080 <__aeabi_fcmplt>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <_ZN7RoboArm12ShiftZeroLinEf+0x3c>
		lin = distMax + lin;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	4619      	mov	r1, r3
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7fe fed6 	bl	8000b34 <__addsf3>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	60fb      	str	r3, [r7, #12]
	return lin;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_t>:
		GPIO_TypeDef *Dir1_GPIO_Port_M1T, uint16_t Dir1_Pin_M1T,
		GPIO_TypeDef *Dir2_GPIO_Port_M2T, uint16_t Dir2_Pin_M2T,
		GPIO_TypeDef *Dir3_GPIO_Port_M3T, uint16_t Dir3_Pin_M3T,
		GPIO_TypeDef *En1_GPIO_Port_M1T, uint16_t En1_Pin_M1T,
		GPIO_TypeDef *En2_GPIO_Port_M2T, uint16_t En2_Pin_M2T,
		GPIO_TypeDef *En3_GPIO_Port_M3T, uint16_t En3_Pin_M3T){
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	60f8      	str	r0, [r7, #12]
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
//		UART_HandleTypeDef &huart_tmcT) {
	htim1M1 = &htim1;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	605a      	str	r2, [r3, #4]
	htim2M2 = &htim2;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	609a      	str	r2, [r3, #8]
	htim3M3 = &htim3;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	60da      	str	r2, [r3, #12]

	Dir1_GPIO_Port_M1 = Dir1_GPIO_Port_M1T;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	69fa      	ldr	r2, [r7, #28]
 8001dba:	615a      	str	r2, [r3, #20]
	Dir1_Pin_M1 = Dir1_Pin_M1T;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8c3a      	ldrh	r2, [r7, #32]
 8001dc0:	831a      	strh	r2, [r3, #24]
	Dir2_GPIO_Port_M2 = Dir2_GPIO_Port_M2T;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc6:	61da      	str	r2, [r3, #28]
	Dir2_Pin_M2 = Dir2_Pin_M2T;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001dcc:	841a      	strh	r2, [r3, #32]
	Dir3_GPIO_Port_M3 = Dir3_GPIO_Port_M3T;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dd2:	625a      	str	r2, [r3, #36]	; 0x24
	Dir3_Pin_M3 = Dir3_Pin_M3T;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001dd8:	851a      	strh	r2, [r3, #40]	; 0x28

	En1_GPIO_Port_M1 = En1_GPIO_Port_M1T;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dde:	62da      	str	r2, [r3, #44]	; 0x2c
	En1_Pin_M1 = En1_Pin_M1T;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001de4:	861a      	strh	r2, [r3, #48]	; 0x30
	En2_GPIO_Port_M2 = En2_GPIO_Port_M2T;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dea:	635a      	str	r2, [r3, #52]	; 0x34
	En2_Pin_M2 = En2_Pin_M2T;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8001df2:	871a      	strh	r2, [r3, #56]	; 0x38
	En3_GPIO_Port_M3 = En3_GPIO_Port_M3T;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001df8:	63da      	str	r2, [r3, #60]	; 0x3c
	En3_Pin_M3 = En3_Pin_M3T;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8001e00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

	SetEnable(1, true);
 8001e04:	2201      	movs	r2, #1
 8001e06:	2101      	movs	r1, #1
 8001e08:	68f8      	ldr	r0, [r7, #12]
 8001e0a:	f000 f84c 	bl	8001ea6 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, true);
 8001e0e:	2201      	movs	r2, #1
 8001e10:	2102      	movs	r1, #2
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 f847 	bl	8001ea6 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, true);
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2103      	movs	r1, #3
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 f842 	bl	8001ea6 <_ZN7RoboArm9SetEnableEtb>

	tmcd_angle.setup(&huartTmc, 115200, tmcd_angle.SERIAL_ADDRESS_0);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f103 0098 	add.w	r0, r3, #152	; 0x98
 8001e28:	2300      	movs	r3, #0
 8001e2a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e2e:	68b9      	ldr	r1, [r7, #8]
 8001e30:	f000 f88e 	bl	8001f50 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_gripper.setup(&huartTmc, 115200, tmcd_gripper.SERIAL_ADDRESS_1);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	f000 f885 	bl	8001f50 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>
	tmcd_linear.setup(&huartTmc, 115200, tmcd_linear.SERIAL_ADDRESS_3);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e52:	68b9      	ldr	r1, [r7, #8]
 8001e54:	f000 f87c 	bl	8001f50 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>

	tmcd_angle.enable();
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3398      	adds	r3, #152	; 0x98
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f000 f88b 	bl	8001f78 <_ZN7TMC22096enableEv>

//	tmcd_angle.disableAutomaticCurrentScaling();
//	tmcd_angle.disableAutomaticGradientAdaptation();

	tmcd_gripper.enable();
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	33c0      	adds	r3, #192	; 0xc0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f000 f886 	bl	8001f78 <_ZN7TMC22096enableEv>

//	tmcd_gripper.disableAutomaticCurrentScaling();
//	tmcd_gripper.disableAutomaticGradientAdaptation();

	tmcd_linear.enable();
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3370      	adds	r3, #112	; 0x70
 8001e70:	4618      	mov	r0, r3
 8001e72:	f000 f881 	bl	8001f78 <_ZN7TMC22096enableEv>

//	tmcd_linear.disableAutomaticCurrentScaling();
//	tmcd_linear.disableAutomaticGradientAdaptation();

	SetMicrosteps4All(5);
 8001e76:	2105      	movs	r1, #5
 8001e78:	68f8      	ldr	r0, [r7, #12]
 8001e7a:	f7ff fdfe 	bl	8001a7a <_ZN7RoboArm17SetMicrosteps4AllEh>



	SetEnable(1, false);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2101      	movs	r1, #1
 8001e82:	68f8      	ldr	r0, [r7, #12]
 8001e84:	f000 f80f 	bl	8001ea6 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(2, false);
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2102      	movs	r1, #2
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f80a 	bl	8001ea6 <_ZN7RoboArm9SetEnableEtb>
	SetEnable(3, false);
 8001e92:	2200      	movs	r2, #0
 8001e94:	2103      	movs	r1, #3
 8001e96:	68f8      	ldr	r0, [r7, #12]
 8001e98:	f000 f805 	bl	8001ea6 <_ZN7RoboArm9SetEnableEtb>

	return 0;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <_ZN7RoboArm9SetEnableEtb>:

int RoboArm::SetEnable(uint16_t numMotor, bool state) {
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b084      	sub	sp, #16
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	807b      	strh	r3, [r7, #2]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	707b      	strb	r3, [r7, #1]

	GPIO_PinState pinSet;

	if (state) {
 8001eb6:	787b      	ldrb	r3, [r7, #1]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d002      	beq.n	8001ec2 <_ZN7RoboArm9SetEnableEtb+0x1c>
		pinSet = GPIO_PIN_RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	73fb      	strb	r3, [r7, #15]
 8001ec0:	e001      	b.n	8001ec6 <_ZN7RoboArm9SetEnableEtb+0x20>
	} else {
		pinSet = GPIO_PIN_SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	73fb      	strb	r3, [r7, #15]
	}

	if (numMotor == 1) {
 8001ec6:	887b      	ldrh	r3, [r7, #2]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d108      	bne.n	8001ede <_ZN7RoboArm9SetEnableEtb+0x38>
		HAL_GPIO_WritePin(En1_GPIO_Port_M1, En1_Pin_M1, pinSet);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8001ed4:	7bfa      	ldrb	r2, [r7, #15]
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f001 ffaa 	bl	8003e30 <HAL_GPIO_WritePin>
 8001edc:	e017      	b.n	8001f0e <_ZN7RoboArm9SetEnableEtb+0x68>
	} else if (numMotor == 2) {
 8001ede:	887b      	ldrh	r3, [r7, #2]
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d108      	bne.n	8001ef6 <_ZN7RoboArm9SetEnableEtb+0x50>
		HAL_GPIO_WritePin(En2_GPIO_Port_M2, En2_Pin_M2, pinSet);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001eec:	7bfa      	ldrb	r2, [r7, #15]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	f001 ff9e 	bl	8003e30 <HAL_GPIO_WritePin>
 8001ef4:	e00b      	b.n	8001f0e <_ZN7RoboArm9SetEnableEtb+0x68>
	} else if (numMotor == 3) {
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d108      	bne.n	8001f0e <_ZN7RoboArm9SetEnableEtb+0x68>
		HAL_GPIO_WritePin(En3_GPIO_Port_M3, En3_Pin_M3, pinSet);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001f06:	7bfa      	ldrb	r2, [r7, #15]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f001 ff91 	bl	8003e30 <HAL_GPIO_WritePin>
	}

	return 0;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <_ZN7TMC2209C1Ev>:
//
// ----------------------------------------------------------------------------
#include "TMC2209.h"
#include "main.h"

TMC2209::TMC2209() {
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2203      	movs	r2, #3
 8001f24:	f883 2020 	strb.w	r2, [r3, #32]
	serial_baud_rate_ = 115200;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f2e:	601a      	str	r2, [r3, #0]
	serial_address_ = SERIAL_ADDRESS_3;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2203      	movs	r2, #3
 8001f34:	711a      	strb	r2, [r3, #4]
	hardware_enable_pin_ = -1;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f3c:	80da      	strh	r2, [r3, #6]
	cool_step_enabled_ = false;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	761a      	strb	r2, [r3, #24]
}
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <_ZN7TMC22095setupEP20__UART_HandleTypeDeflNS_13SerialAddressE>:

void TMC2209::setup(UART_HandleTypeDef *tmc_uart,long serial_baud_rate, SerialAddress serial_address) {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	60f8      	str	r0, [r7, #12]
 8001f58:	60b9      	str	r1, [r7, #8]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	70fb      	strb	r3, [r7, #3]
	tmcuart=tmc_uart;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	68ba      	ldr	r2, [r7, #8]
 8001f62:	609a      	str	r2, [r3, #8]
	initialize(serial_baud_rate, serial_address);
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	461a      	mov	r2, r3
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f904 	bl	8002178 <_ZN7TMC220910initializeElNS_13SerialAddressE>
}
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <_ZN7TMC22096enableEv>:

//  pinMode(hardware_enable_pin_, OUTPUT);
//  digitalWrite(hardware_enable_pin_, HIGH);
}

void TMC2209::enable() {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	db0f      	blt.n	8001faa <_ZN7TMC22096enableEv+0x32>
		HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_RESET);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2120      	movs	r1, #32
 8001f8e:	4810      	ldr	r0, [pc, #64]	; (8001fd0 <_ZN7TMC22096enableEv+0x58>)
 8001f90:	f001 ff4e 	bl	8003e30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_RESET);
 8001f94:	2200      	movs	r2, #0
 8001f96:	2101      	movs	r1, #1
 8001f98:	480d      	ldr	r0, [pc, #52]	; (8001fd0 <_ZN7TMC22096enableEv+0x58>)
 8001f9a:	f001 ff49 	bl	8003e30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fa4:	480b      	ldr	r0, [pc, #44]	; (8001fd4 <_ZN7TMC22096enableEv+0x5c>)
 8001fa6:	f001 ff43 	bl	8003e30 <HAL_GPIO_WritePin>
		//  digitalWrite(hardware_enable_pin_, LOW);
	}
	chopper_config_.toff = toff_;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	b2d9      	uxtb	r1, r3
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	7f13      	ldrb	r3, [r2, #28]
 8001fba:	f361 0303 	bfi	r3, r1, #0, #4
 8001fbe:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 fa0e 	bl	80023e2 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40010800 	.word	0x40010800
 8001fd4:	40010c00 	.word	0x40010c00

08001fd8 <_ZN7TMC22097disableEv>:

void TMC2209::disable() {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	if (hardware_enable_pin_ >= 0) {
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	db0f      	blt.n	800200a <_ZN7TMC22097disableEv+0x32>
		//digitalWrite(hardware_enable_pin_, HIGH);
		HAL_GPIO_WritePin(En1_GPIO_Port, En1_Pin, GPIO_PIN_SET);
 8001fea:	2201      	movs	r2, #1
 8001fec:	2120      	movs	r1, #32
 8001fee:	480d      	ldr	r0, [pc, #52]	; (8002024 <_ZN7TMC22097disableEv+0x4c>)
 8001ff0:	f001 ff1e 	bl	8003e30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En2_GPIO_Port, En2_Pin, GPIO_PIN_SET);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	480a      	ldr	r0, [pc, #40]	; (8002024 <_ZN7TMC22097disableEv+0x4c>)
 8001ffa:	f001 ff19 	bl	8003e30 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(En3_GPIO_Port, En3_Pin, GPIO_PIN_SET);
 8001ffe:	2201      	movs	r2, #1
 8002000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002004:	4808      	ldr	r0, [pc, #32]	; (8002028 <_ZN7TMC22097disableEv+0x50>)
 8002006:	f001 ff13 	bl	8003e30 <HAL_GPIO_WritePin>
	}
	chopper_config_.toff = TOFF_DISABLE;
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	7f13      	ldrb	r3, [r2, #28]
 800200e:	f36f 0303 	bfc	r3, #0, #4
 8002012:	7713      	strb	r3, [r2, #28]
	writeStoredChopperConfig();
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 f9e4 	bl	80023e2 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 800201a:	bf00      	nop
 800201c:	3708      	adds	r7, #8
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40010800 	.word	0x40010800
 8002028:	40010c00 	.word	0x40010c00

0800202c <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh>:
		++exponent;
	}
	setMicrostepsPerStepPowerOfTwo(exponent);
}

void TMC2209::setMicrostepsPerStepPowerOfTwo(uint8_t exponent) {
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
	switch (exponent) {
 8002038:	78fb      	ldrb	r3, [r7, #3]
 800203a:	2b07      	cmp	r3, #7
 800203c:	d84a      	bhi.n	80020d4 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xa8>
 800203e:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0x18>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	08002065 	.word	0x08002065
 8002048:	08002073 	.word	0x08002073
 800204c:	08002081 	.word	0x08002081
 8002050:	0800208f 	.word	0x0800208f
 8002054:	0800209d 	.word	0x0800209d
 8002058:	080020ab 	.word	0x080020ab
 800205c:	080020b9 	.word	0x080020b9
 8002060:	080020c7 	.word	0x080020c7
	case 0: {
		chopper_config_.mres = MRES_001;
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	7fd3      	ldrb	r3, [r2, #31]
 8002068:	2108      	movs	r1, #8
 800206a:	f361 0303 	bfi	r3, r1, #0, #4
 800206e:	77d3      	strb	r3, [r2, #31]
		break;
 8002070:	e036      	b.n	80020e0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 1: {
		chopper_config_.mres = MRES_002;
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	7fd3      	ldrb	r3, [r2, #31]
 8002076:	2107      	movs	r1, #7
 8002078:	f361 0303 	bfi	r3, r1, #0, #4
 800207c:	77d3      	strb	r3, [r2, #31]
		break;
 800207e:	e02f      	b.n	80020e0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 2: {
		chopper_config_.mres = MRES_004;
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	7fd3      	ldrb	r3, [r2, #31]
 8002084:	2106      	movs	r1, #6
 8002086:	f361 0303 	bfi	r3, r1, #0, #4
 800208a:	77d3      	strb	r3, [r2, #31]
		break;
 800208c:	e028      	b.n	80020e0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 3: {
		chopper_config_.mres = MRES_008;
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	7fd3      	ldrb	r3, [r2, #31]
 8002092:	2105      	movs	r1, #5
 8002094:	f361 0303 	bfi	r3, r1, #0, #4
 8002098:	77d3      	strb	r3, [r2, #31]
		break;
 800209a:	e021      	b.n	80020e0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 4: {
		chopper_config_.mres = MRES_016;
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	7fd3      	ldrb	r3, [r2, #31]
 80020a0:	2104      	movs	r1, #4
 80020a2:	f361 0303 	bfi	r3, r1, #0, #4
 80020a6:	77d3      	strb	r3, [r2, #31]
		break;
 80020a8:	e01a      	b.n	80020e0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 5: {
		chopper_config_.mres = MRES_032;
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	7fd3      	ldrb	r3, [r2, #31]
 80020ae:	2103      	movs	r1, #3
 80020b0:	f361 0303 	bfi	r3, r1, #0, #4
 80020b4:	77d3      	strb	r3, [r2, #31]
		break;
 80020b6:	e013      	b.n	80020e0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 6: {
		chopper_config_.mres = MRES_064;
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	7fd3      	ldrb	r3, [r2, #31]
 80020bc:	2102      	movs	r1, #2
 80020be:	f361 0303 	bfi	r3, r1, #0, #4
 80020c2:	77d3      	strb	r3, [r2, #31]
		break;
 80020c4:	e00c      	b.n	80020e0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 7: {
		chopper_config_.mres = MRES_128;
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	7fd3      	ldrb	r3, [r2, #31]
 80020ca:	2101      	movs	r1, #1
 80020cc:	f361 0303 	bfi	r3, r1, #0, #4
 80020d0:	77d3      	strb	r3, [r2, #31]
		break;
 80020d2:	e005      	b.n	80020e0 <_ZN7TMC220930setMicrostepsPerStepPowerOfTwoEh+0xb4>
	}
	case 8:
	default: {
		chopper_config_.mres = MRES_256;
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	7fd3      	ldrb	r3, [r2, #31]
 80020d8:	f36f 0303 	bfc	r3, #0, #4
 80020dc:	77d3      	strb	r3, [r2, #31]
		break;
 80020de:	bf00      	nop
	}
	}
	writeStoredChopperConfig();
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 f97e 	bl	80023e2 <_ZN7TMC220924writeStoredChopperConfigEv>
}
 80020e6:	bf00      	nop
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop

080020f0 <_ZN7TMC220927enableInverseMotorDirectionEv>:
	driver_current_.ihold = hold_current;
	driver_current_.iholddelay = hold_delay;
	writeStoredDriverCurrent();
}

void TMC2209::enableInverseMotorDirection() {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 1;
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	7b13      	ldrb	r3, [r2, #12]
 80020fc:	f043 0308 	orr.w	r3, r3, #8
 8002100:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 f95e 	bl	80023c4 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <_ZN7TMC220928disableInverseMotorDirectionEv>:

void TMC2209::disableInverseMotorDirection() {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	global_config_.shaft = 0;
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	7b13      	ldrb	r3, [r2, #12]
 800211c:	f36f 03c3 	bfc	r3, #3, #1
 8002120:	7313      	strb	r3, [r2, #12]
	writeStoredGlobalConfig();
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f94e 	bl	80023c4 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <_ZN7TMC220930disableAutomaticCurrentScalingEv>:
void TMC2209::enableAutomaticCurrentScaling() {
	pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_ON;
	writeStoredPwmConfig();
}

void TMC2209::disableAutomaticCurrentScaling() {
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	pwm_config_.pwm_autoscale = STEPPER_DRIVER_FEATURE_OFF;
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 800213e:	f36f 0382 	bfc	r3, #2, #1
 8002142:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	writeStoredPwmConfig();
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f95a 	bl	8002400 <_ZN7TMC220920writeStoredPwmConfigEv>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZN7TMC220934disableAutomaticGradientAdaptationEv>:
void TMC2209::enableAutomaticGradientAdaptation() {
	pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_ON;
	writeStoredPwmConfig();
}

void TMC2209::disableAutomaticGradientAdaptation() {
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	pwm_config_.pwm_autograd = STEPPER_DRIVER_FEATURE_OFF;
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	f892 3026 	ldrb.w	r3, [r2, #38]	; 0x26
 8002162:	f36f 03c3 	bfc	r3, #3, #1
 8002166:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	writeStoredPwmConfig();
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f948 	bl	8002400 <_ZN7TMC220920writeStoredPwmConfigEv>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <_ZN7TMC220910initializeElNS_13SerialAddressE>:
	return read(ADDRESS_MSCNT);
}

// private
/* EDITED */
void TMC2209::initialize(long serial_baud_rate, SerialAddress serial_address) {
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	4613      	mov	r3, r2
 8002184:	71fb      	strb	r3, [r7, #7]
	serial_baud_rate_ = serial_baud_rate;
 8002186:	68ba      	ldr	r2, [r7, #8]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	601a      	str	r2, [r3, #0]

	setOperationModeToSerial(serial_address);
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	4619      	mov	r1, r3
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 f810 	bl	80021b6 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>
	setRegistersToDefaults();
 8002196:	68f8      	ldr	r0, [r7, #12]
 8002198:	f000 f834 	bl	8002204 <_ZN7TMC220922setRegistersToDefaultsEv>

	//minimizeMotorCurrent();
	disable();
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f7ff ff1b 	bl	8001fd8 <_ZN7TMC22097disableEv>
	disableAutomaticCurrentScaling();
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff ffc4 	bl	8002130 <_ZN7TMC220930disableAutomaticCurrentScalingEv>
	disableAutomaticGradientAdaptation();
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7ff ffd3 	bl	8002154 <_ZN7TMC220934disableAutomaticGradientAdaptationEv>
}
 80021ae:	bf00      	nop
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_ZN7TMC220924setOperationModeToSerialENS_13SerialAddressE>:

//	  tmcuart->RxXferCount = 0;

}

void TMC2209::setOperationModeToSerial(SerialAddress serial_address) {
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	460b      	mov	r3, r1
 80021c0:	70fb      	strb	r3, [r7, #3]
	serial_address_ = serial_address;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	711a      	strb	r2, [r3, #4]

	global_config_.bytes = 0;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	60da      	str	r2, [r3, #12]
	global_config_.i_scale_analog = 0;
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	7b13      	ldrb	r3, [r2, #12]
 80021d2:	f36f 0300 	bfc	r3, #0, #1
 80021d6:	7313      	strb	r3, [r2, #12]
	global_config_.pdn_disable = 1;
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	7b13      	ldrb	r3, [r2, #12]
 80021dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021e0:	7313      	strb	r3, [r2, #12]
	global_config_.mstep_reg_select = 1;
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	7b13      	ldrb	r3, [r2, #12]
 80021e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021ea:	7313      	strb	r3, [r2, #12]
	global_config_.multistep_filt = 1;
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	7b53      	ldrb	r3, [r2, #13]
 80021f0:	f043 0301 	orr.w	r3, r3, #1
 80021f4:	7353      	strb	r3, [r2, #13]

	writeStoredGlobalConfig();
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f000 f8e4 	bl	80023c4 <_ZN7TMC220923writeStoredGlobalConfigEv>
}
 80021fc:	bf00      	nop
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_ZN7TMC220922setRegistersToDefaultsEv>:

void TMC2209::setRegistersToDefaults() {
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
	driver_current_.bytes = 0;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	611a      	str	r2, [r3, #16]
	driver_current_.ihold = IHOLD_DEFAULT;
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	7c13      	ldrb	r3, [r2, #16]
 8002216:	2110      	movs	r1, #16
 8002218:	f361 0304 	bfi	r3, r1, #0, #5
 800221c:	7413      	strb	r3, [r2, #16]
	driver_current_.irun = IRUN_DEFAULT;
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	7c53      	ldrb	r3, [r2, #17]
 8002222:	f043 031f 	orr.w	r3, r3, #31
 8002226:	7453      	strb	r3, [r2, #17]
	driver_current_.iholddelay = IHOLDDELAY_DEFAULT;
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	7c93      	ldrb	r3, [r2, #18]
 800222c:	2101      	movs	r1, #1
 800222e:	f361 0303 	bfi	r3, r1, #0, #4
 8002232:	7493      	strb	r3, [r2, #18]
	write(ADDRESS_IHOLD_IRUN, driver_current_.bytes);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	461a      	mov	r2, r3
 800223a:	2110      	movs	r1, #16
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f000 f885 	bl	800234c <_ZN7TMC22095writeEhm>

	chopper_config_.bytes = CHOPPER_CONFIG_DEFAULT;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a2a      	ldr	r2, [pc, #168]	; (80022f0 <_ZN7TMC220922setRegistersToDefaultsEv+0xec>)
 8002246:	61da      	str	r2, [r3, #28]
	chopper_config_.tbl = TBL_DEFAULT;
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	69d3      	ldr	r3, [r2, #28]
 800224c:	2102      	movs	r1, #2
 800224e:	f361 33d0 	bfi	r3, r1, #15, #2
 8002252:	61d3      	str	r3, [r2, #28]
	chopper_config_.hend = HEND_DEFAULT;
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	8b93      	ldrh	r3, [r2, #28]
 8002258:	f36f 13ca 	bfc	r3, #7, #4
 800225c:	8393      	strh	r3, [r2, #28]
	chopper_config_.hstart = HSTART_DEFAULT;
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	7f13      	ldrb	r3, [r2, #28]
 8002262:	2105      	movs	r1, #5
 8002264:	f361 1306 	bfi	r3, r1, #4, #3
 8002268:	7713      	strb	r3, [r2, #28]
	chopper_config_.toff = TOFF_DEFAULT;
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	7f13      	ldrb	r3, [r2, #28]
 800226e:	2103      	movs	r1, #3
 8002270:	f361 0303 	bfi	r3, r1, #0, #4
 8002274:	7713      	strb	r3, [r2, #28]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	461a      	mov	r2, r3
 800227c:	216c      	movs	r1, #108	; 0x6c
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f864 	bl	800234c <_ZN7TMC22095writeEhm>

	pwm_config_.bytes = PWM_CONFIG_DEFAULT;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a1b      	ldr	r2, [pc, #108]	; (80022f4 <_ZN7TMC220922setRegistersToDefaultsEv+0xf0>)
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228e:	461a      	mov	r2, r3
 8002290:	2170      	movs	r1, #112	; 0x70
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 f85a 	bl	800234c <_ZN7TMC22095writeEhm>

	cool_config_.bytes = COOLCONF_DEFAULT;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	615a      	str	r2, [r3, #20]
	write(ADDRESS_COOLCONF, cool_config_.bytes);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	461a      	mov	r2, r3
 80022a4:	2142      	movs	r1, #66	; 0x42
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f000 f850 	bl	800234c <_ZN7TMC22095writeEhm>

	write(ADDRESS_TPOWERDOWN, TPOWERDOWN_DEFAULT);
 80022ac:	2214      	movs	r2, #20
 80022ae:	2111      	movs	r1, #17
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f000 f84b 	bl	800234c <_ZN7TMC22095writeEhm>
	write(ADDRESS_TPWMTHRS, TPWMTHRS_DEFAULT);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2113      	movs	r1, #19
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f846 	bl	800234c <_ZN7TMC22095writeEhm>
	write(ADDRESS_VACTUAL, VACTUAL_DEFAULT);
 80022c0:	2200      	movs	r2, #0
 80022c2:	2122      	movs	r1, #34	; 0x22
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f841 	bl	800234c <_ZN7TMC22095writeEhm>
	write(ADDRESS_TCOOLTHRS, TCOOLTHRS_DEFAULT);
 80022ca:	2200      	movs	r2, #0
 80022cc:	2114      	movs	r1, #20
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 f83c 	bl	800234c <_ZN7TMC22095writeEhm>
	write(ADDRESS_SGTHRS, SGTHRS_DEFAULT);
 80022d4:	2200      	movs	r2, #0
 80022d6:	2140      	movs	r1, #64	; 0x40
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f000 f837 	bl	800234c <_ZN7TMC22095writeEhm>
	write(ADDRESS_COOLCONF, COOLCONF_DEFAULT);
 80022de:	2200      	movs	r2, #0
 80022e0:	2142      	movs	r1, #66	; 0x42
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f832 	bl	800234c <_ZN7TMC22095writeEhm>
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	10000053 	.word	0x10000053
 80022f4:	c10d0024 	.word	0xc10d0024

080022f8 <_ZN7TMC220911reverseDataEm>:
	driver_current_.irun = CURRENT_SETTING_MIN;
	driver_current_.ihold = CURRENT_SETTING_MIN;
	writeStoredDriverCurrent();
}

uint32_t TMC2209::reverseData(uint32_t data) {
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
	uint32_t reversed_data = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
	uint8_t right_shift;
	uint8_t left_shift;
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8002306:	2300      	movs	r3, #0
 8002308:	72fb      	strb	r3, [r7, #11]
 800230a:	e016      	b.n	800233a <_ZN7TMC220911reverseDataEm+0x42>
		right_shift = (DATA_SIZE - i - 1) * BITS_PER_BYTE;
 800230c:	7afb      	ldrb	r3, [r7, #11]
 800230e:	f1c3 0303 	rsb	r3, r3, #3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	72bb      	strb	r3, [r7, #10]
		left_shift = i * BITS_PER_BYTE;
 8002318:	7afb      	ldrb	r3, [r7, #11]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	727b      	strb	r3, [r7, #9]
		reversed_data |= ((data >> right_shift) & BYTE_MAX_VALUE) << left_shift;
 800231e:	7abb      	ldrb	r3, [r7, #10]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	fa22 f303 	lsr.w	r3, r2, r3
 8002326:	b2da      	uxtb	r2, r3
 8002328:	7a7b      	ldrb	r3, [r7, #9]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	4313      	orrs	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < DATA_SIZE; ++i) {
 8002334:	7afb      	ldrb	r3, [r7, #11]
 8002336:	3301      	adds	r3, #1
 8002338:	72fb      	strb	r3, [r7, #11]
 800233a:	7afb      	ldrb	r3, [r7, #11]
 800233c:	2b03      	cmp	r3, #3
 800233e:	d9e5      	bls.n	800230c <_ZN7TMC220911reverseDataEm+0x14>
	}
	return reversed_data;
 8002340:	68fb      	ldr	r3, [r7, #12]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <_ZN7TMC22095writeEhm>:
	for (uint8_t i = 0; i < datagram_size; ++i) {
		byte = serialRead();
	}*/
}

void TMC2209::write(uint8_t register_address, uint32_t data) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	460b      	mov	r3, r1
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	72fb      	strb	r3, [r7, #11]
	WriteReadReplyDatagram write_datagram;
	write_datagram.bytes = 0;
 800235a:	f04f 0200 	mov.w	r2, #0
 800235e:	f04f 0300 	mov.w	r3, #0
 8002362:	e9c7 2304 	strd	r2, r3, [r7, #16]
	write_datagram.sync = SYNC;
 8002366:	7c3b      	ldrb	r3, [r7, #16]
 8002368:	2205      	movs	r2, #5
 800236a:	f362 0303 	bfi	r3, r2, #0, #4
 800236e:	743b      	strb	r3, [r7, #16]
	write_datagram.serial_address = serial_address_;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	791b      	ldrb	r3, [r3, #4]
 8002374:	747b      	strb	r3, [r7, #17]
	write_datagram.register_address = register_address;
 8002376:	7afb      	ldrb	r3, [r7, #11]
 8002378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800237c:	b2da      	uxtb	r2, r3
 800237e:	7cbb      	ldrb	r3, [r7, #18]
 8002380:	f362 0306 	bfi	r3, r2, #0, #7
 8002384:	74bb      	strb	r3, [r7, #18]
	write_datagram.rw = RW_WRITE;
 8002386:	7cbb      	ldrb	r3, [r7, #18]
 8002388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800238c:	74bb      	strb	r3, [r7, #18]
	write_datagram.data = reverseData(data);
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f7ff ffb1 	bl	80022f8 <_ZN7TMC220911reverseDataEm>
 8002396:	4603      	mov	r3, r0
 8002398:	f8c7 3013 	str.w	r3, [r7, #19]
	write_datagram.crc = calculateCrc(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 800239c:	f107 0310 	add.w	r3, r7, #16
 80023a0:	2208      	movs	r2, #8
 80023a2:	4619      	mov	r1, r3
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 f83a 	bl	800241e <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>
 80023aa:	4603      	mov	r3, r0
 80023ac:	75fb      	strb	r3, [r7, #23]
	sendDatagramUnidirectional(write_datagram, WRITE_READ_REPLY_DATAGRAM_SIZE);
 80023ae:	f107 0310 	add.w	r3, r7, #16
 80023b2:	2208      	movs	r2, #8
 80023b4:	4619      	mov	r1, r3
 80023b6:	68f8      	ldr	r0, [r7, #12]
 80023b8:	f000 f880 	bl	80024bc <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>
}
 80023bc:	bf00      	nop
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <_ZN7TMC220923writeStoredGlobalConfigEv>:
uint8_t TMC2209::holdDelaySettingToPercent(uint8_t hold_delay_setting) {
	uint8_t percent = map(hold_delay_setting, HOLD_DELAY_MIN, HOLD_DELAY_MAX, PERCENT_MIN, PERCENT_MAX);
	return percent;
}

void TMC2209::writeStoredGlobalConfig() {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
	write(ADDRESS_GCONF, global_config_.bytes);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	461a      	mov	r2, r3
 80023d2:	2100      	movs	r1, #0
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f7ff ffb9 	bl	800234c <_ZN7TMC22095writeEhm>
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_ZN7TMC220924writeStoredChopperConfigEv>:
	if (cool_step_enabled_) {
		write(ADDRESS_COOLCONF, cool_config_.bytes);
	}
}

void TMC2209::writeStoredChopperConfig() {
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
	write(ADDRESS_CHOPCONF, chopper_config_.bytes);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	461a      	mov	r2, r3
 80023f0:	216c      	movs	r1, #108	; 0x6c
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f7ff ffaa 	bl	800234c <_ZN7TMC22095writeEhm>
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}

08002400 <_ZN7TMC220920writeStoredPwmConfigEv>:

uint32_t TMC2209::readChopperConfigBytes() {
	return read(ADDRESS_CHOPCONF);
}

void TMC2209::writeStoredPwmConfig() {
 8002400:	b580      	push	{r7, lr}
 8002402:	b082      	sub	sp, #8
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
	write(ADDRESS_PWMCONF, pwm_config_.bytes);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	461a      	mov	r2, r3
 800240e:	2170      	movs	r1, #112	; 0x70
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff9b 	bl	800234c <_ZN7TMC22095writeEhm>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h>:
uint8_t TMC2209::calculateCrc(Datagram &datagram, uint8_t datagram_size) {
 800241e:	b4f0      	push	{r4, r5, r6, r7}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	60f8      	str	r0, [r7, #12]
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	4613      	mov	r3, r2
 800242a:	71fb      	strb	r3, [r7, #7]
	uint8_t crc = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	75fb      	strb	r3, [r7, #23]
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 8002430:	2300      	movs	r3, #0
 8002432:	757b      	strb	r3, [r7, #21]
 8002434:	e037      	b.n	80024a6 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x88>
		byte = (datagram.bytes >> (i * BITS_PER_BYTE)) & BYTE_MAX_VALUE;
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243c:	7d79      	ldrb	r1, [r7, #21]
 800243e:	00c9      	lsls	r1, r1, #3
 8002440:	f1c1 0620 	rsb	r6, r1, #32
 8002444:	f1a1 0020 	sub.w	r0, r1, #32
 8002448:	fa22 f401 	lsr.w	r4, r2, r1
 800244c:	fa03 f606 	lsl.w	r6, r3, r6
 8002450:	4334      	orrs	r4, r6
 8002452:	fa23 f000 	lsr.w	r0, r3, r0
 8002456:	4304      	orrs	r4, r0
 8002458:	fa23 f501 	lsr.w	r5, r3, r1
 800245c:	4623      	mov	r3, r4
 800245e:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8002460:	2300      	movs	r3, #0
 8002462:	753b      	strb	r3, [r7, #20]
 8002464:	e019      	b.n	800249a <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x7c>
			if ((crc >> 7) ^ (byte & 0x01)) {
 8002466:	7dfb      	ldrb	r3, [r7, #23]
 8002468:	09db      	lsrs	r3, r3, #7
 800246a:	b2da      	uxtb	r2, r3
 800246c:	7dbb      	ldrb	r3, [r7, #22]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	b2db      	uxtb	r3, r3
 8002474:	429a      	cmp	r2, r3
 8002476:	d007      	beq.n	8002488 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x6a>
				crc = (crc << 1) ^ 0x07;
 8002478:	7dfb      	ldrb	r3, [r7, #23]
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	b25b      	sxtb	r3, r3
 800247e:	f083 0307 	eor.w	r3, r3, #7
 8002482:	b25b      	sxtb	r3, r3
 8002484:	75fb      	strb	r3, [r7, #23]
 8002486:	e002      	b.n	800248e <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x70>
				crc = crc << 1;
 8002488:	7dfb      	ldrb	r3, [r7, #23]
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	75fb      	strb	r3, [r7, #23]
			byte = byte >> 1;
 800248e:	7dbb      	ldrb	r3, [r7, #22]
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	75bb      	strb	r3, [r7, #22]
		for (uint8_t j = 0; j < BITS_PER_BYTE; ++j) {
 8002494:	7d3b      	ldrb	r3, [r7, #20]
 8002496:	3301      	adds	r3, #1
 8002498:	753b      	strb	r3, [r7, #20]
 800249a:	7d3b      	ldrb	r3, [r7, #20]
 800249c:	2b07      	cmp	r3, #7
 800249e:	d9e2      	bls.n	8002466 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x48>
	for (uint8_t i = 0; i < (datagram_size - 1); ++i) {
 80024a0:	7d7b      	ldrb	r3, [r7, #21]
 80024a2:	3301      	adds	r3, #1
 80024a4:	757b      	strb	r3, [r7, #21]
 80024a6:	7d7a      	ldrb	r2, [r7, #21]
 80024a8:	79fb      	ldrb	r3, [r7, #7]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	429a      	cmp	r2, r3
 80024ae:	dbc2      	blt.n	8002436 <_ZN7TMC220912calculateCrcINS_22WriteReadReplyDatagramEEEhRT_h+0x18>
	return crc;
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bcf0      	pop	{r4, r5, r6, r7}
 80024ba:	4770      	bx	lr

080024bc <_ZN7TMC220926sendDatagramUnidirectionalINS_22WriteReadReplyDatagramEEEvRT_h>:
void TMC2209::sendDatagramUnidirectional(Datagram &datagram, uint8_t datagram_size) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b084      	sub	sp, #16
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	4613      	mov	r3, r2
 80024c8:	71fb      	strb	r3, [r7, #7]
	HAL_HalfDuplex_EnableTransmitter(tmcuart);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f004 f807 	bl	80064e2 <HAL_HalfDuplex_EnableTransmitter>
	HAL_UART_Transmit(tmcuart, (uint8_t *)(&datagram), datagram_size, HAL_MAX_DELAY);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	6898      	ldr	r0, [r3, #8]
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	b29a      	uxth	r2, r3
 80024dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	f003 fca6 	bl	8005e32 <HAL_UART_Transmit>
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
	...

080024f0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	60b9      	str	r1, [r7, #8]
 80024fa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a06      	ldr	r2, [pc, #24]	; (8002518 <vApplicationGetIdleTaskMemory+0x28>)
 8002500:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	4a05      	ldr	r2, [pc, #20]	; (800251c <vApplicationGetIdleTaskMemory+0x2c>)
 8002506:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	bc80      	pop	{r7}
 8002516:	4770      	bx	lr
 8002518:	200001f4 	.word	0x200001f4
 800251c:	20000294 	.word	0x20000294

08002520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002520:	b5b0      	push	{r4, r5, r7, lr}
 8002522:	b0a4      	sub	sp, #144	; 0x90
 8002524:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002526:	f001 f93b 	bl	80037a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800252a:	f000 f899 	bl	8002660 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800252e:	f000 fae9 	bl	8002b04 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8002532:	f000 f923 	bl	800277c <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8002536:	f000 f9b9 	bl	80028ac <_ZL12MX_TIM2_Initv>
  MX_SPI1_Init();
 800253a:	f000 f8e3 	bl	8002704 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 800253e:	f000 fa85 	bl	8002a4c <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8002542:	f000 fab1 	bl	8002aa8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM3_Init();
 8002546:	f000 fa19 	bl	800297c <_ZL12MX_TIM3_Initv>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Init(&htim1);
 800254a:	4837      	ldr	r0, [pc, #220]	; (8002628 <main+0x108>)
 800254c:	f002 fcde 	bl	8004f0c <HAL_TIM_Base_Init>
	HAL_TIM_Base_Init(&htim2);
 8002550:	4836      	ldr	r0, [pc, #216]	; (800262c <main+0x10c>)
 8002552:	f002 fcdb 	bl	8004f0c <HAL_TIM_Base_Init>

	arm.SetSettMotors(huart2,htim1, htim2, htim3, Dir1_GPIO_Port, Dir1_Pin,
 8002556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800255a:	930c      	str	r3, [sp, #48]	; 0x30
 800255c:	4b34      	ldr	r3, [pc, #208]	; (8002630 <main+0x110>)
 800255e:	930b      	str	r3, [sp, #44]	; 0x2c
 8002560:	2301      	movs	r3, #1
 8002562:	930a      	str	r3, [sp, #40]	; 0x28
 8002564:	4b33      	ldr	r3, [pc, #204]	; (8002634 <main+0x114>)
 8002566:	9309      	str	r3, [sp, #36]	; 0x24
 8002568:	2320      	movs	r3, #32
 800256a:	9308      	str	r3, [sp, #32]
 800256c:	4b31      	ldr	r3, [pc, #196]	; (8002634 <main+0x114>)
 800256e:	9307      	str	r3, [sp, #28]
 8002570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002574:	9306      	str	r3, [sp, #24]
 8002576:	4b2e      	ldr	r3, [pc, #184]	; (8002630 <main+0x110>)
 8002578:	9305      	str	r3, [sp, #20]
 800257a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800257e:	9304      	str	r3, [sp, #16]
 8002580:	4b2b      	ldr	r3, [pc, #172]	; (8002630 <main+0x110>)
 8002582:	9303      	str	r3, [sp, #12]
 8002584:	2340      	movs	r3, #64	; 0x40
 8002586:	9302      	str	r3, [sp, #8]
 8002588:	4b2a      	ldr	r3, [pc, #168]	; (8002634 <main+0x114>)
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	4b2a      	ldr	r3, [pc, #168]	; (8002638 <main+0x118>)
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	4b26      	ldr	r3, [pc, #152]	; (800262c <main+0x10c>)
 8002592:	4a25      	ldr	r2, [pc, #148]	; (8002628 <main+0x108>)
 8002594:	4929      	ldr	r1, [pc, #164]	; (800263c <main+0x11c>)
 8002596:	482a      	ldr	r0, [pc, #168]	; (8002640 <main+0x120>)
 8002598:	f7ff fbfd 	bl	8001d96 <_ZN7RoboArm13SetSettMotorsER20__UART_HandleTypeDefR17TIM_HandleTypeDefS3_S3_P12GPIO_TypeDeftS5_tS5_tS5_tS5_tS5_t>
			Dir2_GPIO_Port, Dir2_Pin, Dir3_GPIO_Port, Dir3_Pin, En1_GPIO_Port,
			En1_Pin, En2_GPIO_Port, En2_Pin, En3_GPIO_Port, En3_Pin);

	arm.SetSettEncoders(hspi1, CS1_GPIO_Port, CS1_Pin, CS2_GPIO_Port, CS2_Pin,
 800259c:	230e      	movs	r3, #14
 800259e:	9302      	str	r3, [sp, #8]
 80025a0:	2302      	movs	r3, #2
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	4b22      	ldr	r3, [pc, #136]	; (8002630 <main+0x110>)
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	2301      	movs	r3, #1
 80025aa:	4a21      	ldr	r2, [pc, #132]	; (8002630 <main+0x110>)
 80025ac:	4925      	ldr	r1, [pc, #148]	; (8002644 <main+0x124>)
 80025ae:	4824      	ldr	r0, [pc, #144]	; (8002640 <main+0x120>)
 80025b0:	f7ff fa83 	bl	8001aba <_ZN7RoboArm15SetSettEncodersER19__SPI_HandleTypeDefP12GPIO_TypeDeftS3_th>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80025b4:	4b24      	ldr	r3, [pc, #144]	; (8002648 <main+0x128>)
 80025b6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80025ba:	461d      	mov	r5, r3
 80025bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80025c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80025cc:	2100      	movs	r1, #0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f004 faa8 	bl	8006b24 <osThreadCreate>
 80025d4:	4603      	mov	r3, r0
 80025d6:	4a1d      	ldr	r2, [pc, #116]	; (800264c <main+0x12c>)
 80025d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of myAMT22Task */
  osThreadDef(myAMT22Task, StartAMT22Data, osPriorityIdle, 0, 128);
 80025da:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <main+0x130>)
 80025dc:	f107 0420 	add.w	r4, r7, #32
 80025e0:	461d      	mov	r5, r3
 80025e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80025ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myAMT22TaskHandle = osThreadCreate(osThread(myAMT22Task), NULL);
 80025ee:	f107 0320 	add.w	r3, r7, #32
 80025f2:	2100      	movs	r1, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	f004 fa95 	bl	8006b24 <osThreadCreate>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4a15      	ldr	r2, [pc, #84]	; (8002654 <main+0x134>)
 80025fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of myUARTTask */
  osThreadDef(myUARTTask, StartUARTData, osPriorityIdle, 0, 128);
 8002600:	4b15      	ldr	r3, [pc, #84]	; (8002658 <main+0x138>)
 8002602:	1d3c      	adds	r4, r7, #4
 8002604:	461d      	mov	r5, r3
 8002606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800260a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800260e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myUARTTaskHandle = osThreadCreate(osThread(myUARTTask), NULL);
 8002612:	1d3b      	adds	r3, r7, #4
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f004 fa84 	bl	8006b24 <osThreadCreate>
 800261c:	4603      	mov	r3, r0
 800261e:	4a0f      	ldr	r2, [pc, #60]	; (800265c <main+0x13c>)
 8002620:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002622:	f004 fa78 	bl	8006b16 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 8002626:	e7fe      	b.n	8002626 <main+0x106>
 8002628:	200004ec 	.word	0x200004ec
 800262c:	20000534 	.word	0x20000534
 8002630:	40010c00 	.word	0x40010c00
 8002634:	40010800 	.word	0x40010800
 8002638:	2000057c 	.word	0x2000057c
 800263c:	2000060c 	.word	0x2000060c
 8002640:	20000694 	.word	0x20000694
 8002644:	20000494 	.word	0x20000494
 8002648:	0800a98c 	.word	0x0800a98c
 800264c:	20000654 	.word	0x20000654
 8002650:	0800a9b4 	.word	0x0800a9b4
 8002654:	20000658 	.word	0x20000658
 8002658:	0800a9dc 	.word	0x0800a9dc
 800265c:	2000065c 	.word	0x2000065c

08002660 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b090      	sub	sp, #64	; 0x40
 8002664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002666:	f107 0318 	add.w	r3, r7, #24
 800266a:	2228      	movs	r2, #40	; 0x28
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f006 f9e1 	bl	8008a36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002674:	1d3b      	adds	r3, r7, #4
 8002676:	2200      	movs	r2, #0
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	605a      	str	r2, [r3, #4]
 800267c:	609a      	str	r2, [r3, #8]
 800267e:	60da      	str	r2, [r3, #12]
 8002680:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002682:	2301      	movs	r3, #1
 8002684:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800268a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002690:	2301      	movs	r3, #1
 8002692:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002694:	2302      	movs	r3, #2
 8002696:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800269c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800269e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80026a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026a4:	f107 0318 	add.w	r3, r7, #24
 80026a8:	4618      	mov	r0, r3
 80026aa:	f001 fbf3 	bl	8003e94 <HAL_RCC_OscConfig>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d001      	beq.n	80026c2 <_Z18SystemClock_Configv+0x62>
  {
    Error_Handler();
 80026be:	f000 fc83 	bl	8002fc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c2:	230f      	movs	r3, #15
 80026c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026c6:	2302      	movs	r3, #2
 80026c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026d4:	2300      	movs	r3, #0
 80026d6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026d8:	1d3b      	adds	r3, r7, #4
 80026da:	2102      	movs	r1, #2
 80026dc:	4618      	mov	r0, r3
 80026de:	f001 fe5b 	bl	8004398 <HAL_RCC_ClockConfig>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf14      	ite	ne
 80026e8:	2301      	movne	r3, #1
 80026ea:	2300      	moveq	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <_Z18SystemClock_Configv+0x96>
  {
    Error_Handler();
 80026f2:	f000 fc69 	bl	8002fc8 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80026f6:	f001 ff39 	bl	800456c <HAL_RCC_EnableCSS>
}
 80026fa:	bf00      	nop
 80026fc:	3740      	adds	r7, #64	; 0x40
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
	...

08002704 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <_ZL12MX_SPI1_Initv+0x70>)
 800270a:	4a1b      	ldr	r2, [pc, #108]	; (8002778 <_ZL12MX_SPI1_Initv+0x74>)
 800270c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800270e:	4b19      	ldr	r3, [pc, #100]	; (8002774 <_ZL12MX_SPI1_Initv+0x70>)
 8002710:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002714:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002716:	4b17      	ldr	r3, [pc, #92]	; (8002774 <_ZL12MX_SPI1_Initv+0x70>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800271c:	4b15      	ldr	r3, [pc, #84]	; (8002774 <_ZL12MX_SPI1_Initv+0x70>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002722:	4b14      	ldr	r3, [pc, #80]	; (8002774 <_ZL12MX_SPI1_Initv+0x70>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002728:	4b12      	ldr	r3, [pc, #72]	; (8002774 <_ZL12MX_SPI1_Initv+0x70>)
 800272a:	2200      	movs	r2, #0
 800272c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800272e:	4b11      	ldr	r3, [pc, #68]	; (8002774 <_ZL12MX_SPI1_Initv+0x70>)
 8002730:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002734:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002736:	4b0f      	ldr	r3, [pc, #60]	; (8002774 <_ZL12MX_SPI1_Initv+0x70>)
 8002738:	2218      	movs	r2, #24
 800273a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800273c:	4b0d      	ldr	r3, [pc, #52]	; (8002774 <_ZL12MX_SPI1_Initv+0x70>)
 800273e:	2200      	movs	r2, #0
 8002740:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <_ZL12MX_SPI1_Initv+0x70>)
 8002744:	2200      	movs	r2, #0
 8002746:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002748:	4b0a      	ldr	r3, [pc, #40]	; (8002774 <_ZL12MX_SPI1_Initv+0x70>)
 800274a:	2200      	movs	r2, #0
 800274c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <_ZL12MX_SPI1_Initv+0x70>)
 8002750:	220a      	movs	r2, #10
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002754:	4807      	ldr	r0, [pc, #28]	; (8002774 <_ZL12MX_SPI1_Initv+0x70>)
 8002756:	f002 f803 	bl	8004760 <HAL_SPI_Init>
 800275a:	4603      	mov	r3, r0
 800275c:	2b00      	cmp	r3, #0
 800275e:	bf14      	ite	ne
 8002760:	2301      	movne	r3, #1
 8002762:	2300      	moveq	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800276a:	f000 fc2d 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800276e:	bf00      	nop
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	20000494 	.word	0x20000494
 8002778:	40013000 	.word	0x40013000

0800277c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b092      	sub	sp, #72	; 0x48
 8002780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002782:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002786:	2200      	movs	r2, #0
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800278c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	605a      	str	r2, [r3, #4]
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	60da      	str	r2, [r3, #12]
 800279a:	611a      	str	r2, [r3, #16]
 800279c:	615a      	str	r2, [r3, #20]
 800279e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	2220      	movs	r2, #32
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f006 f945 	bl	8008a36 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80027ac:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <_ZL12MX_TIM1_Initv+0x128>)
 80027ae:	4a3e      	ldr	r2, [pc, #248]	; (80028a8 <_ZL12MX_TIM1_Initv+0x12c>)
 80027b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72;
 80027b2:	4b3c      	ldr	r3, [pc, #240]	; (80028a4 <_ZL12MX_TIM1_Initv+0x128>)
 80027b4:	2248      	movs	r2, #72	; 0x48
 80027b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b8:	4b3a      	ldr	r3, [pc, #232]	; (80028a4 <_ZL12MX_TIM1_Initv+0x128>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80027be:	4b39      	ldr	r3, [pc, #228]	; (80028a4 <_ZL12MX_TIM1_Initv+0x128>)
 80027c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80027c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c6:	4b37      	ldr	r3, [pc, #220]	; (80028a4 <_ZL12MX_TIM1_Initv+0x128>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80027cc:	4b35      	ldr	r3, [pc, #212]	; (80028a4 <_ZL12MX_TIM1_Initv+0x128>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027d2:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <_ZL12MX_TIM1_Initv+0x128>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027d8:	4832      	ldr	r0, [pc, #200]	; (80028a4 <_ZL12MX_TIM1_Initv+0x128>)
 80027da:	f002 fc6f 	bl	80050bc <HAL_TIM_PWM_Init>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	bf14      	ite	ne
 80027e4:	2301      	movne	r3, #1
 80027e6:	2300      	moveq	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <_ZL12MX_TIM1_Initv+0x76>
  {
    Error_Handler();
 80027ee:	f000 fbeb 	bl	8002fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027fe:	4619      	mov	r1, r3
 8002800:	4828      	ldr	r0, [pc, #160]	; (80028a4 <_ZL12MX_TIM1_Initv+0x128>)
 8002802:	f003 f9ad 	bl	8005b60 <HAL_TIMEx_MasterConfigSynchronization>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	bf14      	ite	ne
 800280c:	2301      	movne	r3, #1
 800280e:	2300      	moveq	r3, #0
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <_ZL12MX_TIM1_Initv+0x9e>
  {
    Error_Handler();
 8002816:	f000 fbd7 	bl	8002fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800281a:	2360      	movs	r3, #96	; 0x60
 800281c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800281e:	2300      	movs	r3, #0
 8002820:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002822:	2300      	movs	r3, #0
 8002824:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002826:	2300      	movs	r3, #0
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800282e:	2300      	movs	r3, #0
 8002830:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002836:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800283a:	2200      	movs	r2, #0
 800283c:	4619      	mov	r1, r3
 800283e:	4819      	ldr	r0, [pc, #100]	; (80028a4 <_ZL12MX_TIM1_Initv+0x128>)
 8002840:	f002 fe9a 	bl	8005578 <HAL_TIM_PWM_ConfigChannel>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	bf14      	ite	ne
 800284a:	2301      	movne	r3, #1
 800284c:	2300      	moveq	r3, #0
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <_ZL12MX_TIM1_Initv+0xdc>
  {
    Error_Handler();
 8002854:	f000 fbb8 	bl	8002fc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800286c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002870:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002872:	2300      	movs	r3, #0
 8002874:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002876:	1d3b      	adds	r3, r7, #4
 8002878:	4619      	mov	r1, r3
 800287a:	480a      	ldr	r0, [pc, #40]	; (80028a4 <_ZL12MX_TIM1_Initv+0x128>)
 800287c:	f003 f9ce 	bl	8005c1c <HAL_TIMEx_ConfigBreakDeadTime>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	bf14      	ite	ne
 8002886:	2301      	movne	r3, #1
 8002888:	2300      	moveq	r3, #0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 8002890:	f000 fb9a 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002894:	4803      	ldr	r0, [pc, #12]	; (80028a4 <_ZL12MX_TIM1_Initv+0x128>)
 8002896:	f000 fcbb 	bl	8003210 <HAL_TIM_MspPostInit>

}
 800289a:	bf00      	nop
 800289c:	3748      	adds	r7, #72	; 0x48
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	200004ec 	.word	0x200004ec
 80028a8:	40012c00 	.word	0x40012c00

080028ac <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08a      	sub	sp, #40	; 0x28
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028b2:	f107 0320 	add.w	r3, r7, #32
 80028b6:	2200      	movs	r2, #0
 80028b8:	601a      	str	r2, [r3, #0]
 80028ba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80028bc:	1d3b      	adds	r3, r7, #4
 80028be:	2200      	movs	r2, #0
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	605a      	str	r2, [r3, #4]
 80028c4:	609a      	str	r2, [r3, #8]
 80028c6:	60da      	str	r2, [r3, #12]
 80028c8:	611a      	str	r2, [r3, #16]
 80028ca:	615a      	str	r2, [r3, #20]
 80028cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80028ce:	4b2a      	ldr	r3, [pc, #168]	; (8002978 <_ZL12MX_TIM2_Initv+0xcc>)
 80028d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80028d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72;
 80028d6:	4b28      	ldr	r3, [pc, #160]	; (8002978 <_ZL12MX_TIM2_Initv+0xcc>)
 80028d8:	2248      	movs	r2, #72	; 0x48
 80028da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028dc:	4b26      	ldr	r3, [pc, #152]	; (8002978 <_ZL12MX_TIM2_Initv+0xcc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80028e2:	4b25      	ldr	r3, [pc, #148]	; (8002978 <_ZL12MX_TIM2_Initv+0xcc>)
 80028e4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80028e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ea:	4b23      	ldr	r3, [pc, #140]	; (8002978 <_ZL12MX_TIM2_Initv+0xcc>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80028f0:	4b21      	ldr	r3, [pc, #132]	; (8002978 <_ZL12MX_TIM2_Initv+0xcc>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80028f6:	4820      	ldr	r0, [pc, #128]	; (8002978 <_ZL12MX_TIM2_Initv+0xcc>)
 80028f8:	f002 fbe0 	bl	80050bc <HAL_TIM_PWM_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf14      	ite	ne
 8002902:	2301      	movne	r3, #1
 8002904:	2300      	moveq	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 800290c:	f000 fb5c 	bl	8002fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002914:	2300      	movs	r3, #0
 8002916:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002918:	f107 0320 	add.w	r3, r7, #32
 800291c:	4619      	mov	r1, r3
 800291e:	4816      	ldr	r0, [pc, #88]	; (8002978 <_ZL12MX_TIM2_Initv+0xcc>)
 8002920:	f003 f91e 	bl	8005b60 <HAL_TIMEx_MasterConfigSynchronization>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	bf14      	ite	ne
 800292a:	2301      	movne	r3, #1
 800292c:	2300      	moveq	r3, #0
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8002934:	f000 fb48 	bl	8002fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002938:	2360      	movs	r3, #96	; 0x60
 800293a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	2204      	movs	r2, #4
 800294c:	4619      	mov	r1, r3
 800294e:	480a      	ldr	r0, [pc, #40]	; (8002978 <_ZL12MX_TIM2_Initv+0xcc>)
 8002950:	f002 fe12 	bl	8005578 <HAL_TIM_PWM_ConfigChannel>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	bf14      	ite	ne
 800295a:	2301      	movne	r3, #1
 800295c:	2300      	moveq	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8002964:	f000 fb30 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002968:	4803      	ldr	r0, [pc, #12]	; (8002978 <_ZL12MX_TIM2_Initv+0xcc>)
 800296a:	f000 fc51 	bl	8003210 <HAL_TIM_MspPostInit>

}
 800296e:	bf00      	nop
 8002970:	3728      	adds	r7, #40	; 0x28
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	20000534 	.word	0x20000534

0800297c <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08a      	sub	sp, #40	; 0x28
 8002980:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002982:	f107 0320 	add.w	r3, r7, #32
 8002986:	2200      	movs	r2, #0
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800298c:	1d3b      	adds	r3, r7, #4
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	605a      	str	r2, [r3, #4]
 8002994:	609a      	str	r2, [r3, #8]
 8002996:	60da      	str	r2, [r3, #12]
 8002998:	611a      	str	r2, [r3, #16]
 800299a:	615a      	str	r2, [r3, #20]
 800299c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800299e:	4b29      	ldr	r3, [pc, #164]	; (8002a44 <_ZL12MX_TIM3_Initv+0xc8>)
 80029a0:	4a29      	ldr	r2, [pc, #164]	; (8002a48 <_ZL12MX_TIM3_Initv+0xcc>)
 80029a2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72;
 80029a4:	4b27      	ldr	r3, [pc, #156]	; (8002a44 <_ZL12MX_TIM3_Initv+0xc8>)
 80029a6:	2248      	movs	r2, #72	; 0x48
 80029a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029aa:	4b26      	ldr	r3, [pc, #152]	; (8002a44 <_ZL12MX_TIM3_Initv+0xc8>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80029b0:	4b24      	ldr	r3, [pc, #144]	; (8002a44 <_ZL12MX_TIM3_Initv+0xc8>)
 80029b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029b8:	4b22      	ldr	r3, [pc, #136]	; (8002a44 <_ZL12MX_TIM3_Initv+0xc8>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029be:	4b21      	ldr	r3, [pc, #132]	; (8002a44 <_ZL12MX_TIM3_Initv+0xc8>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80029c4:	481f      	ldr	r0, [pc, #124]	; (8002a44 <_ZL12MX_TIM3_Initv+0xc8>)
 80029c6:	f002 fb79 	bl	80050bc <HAL_TIM_PWM_Init>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf14      	ite	ne
 80029d0:	2301      	movne	r3, #1
 80029d2:	2300      	moveq	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <_ZL12MX_TIM3_Initv+0x62>
  {
    Error_Handler();
 80029da:	f000 faf5 	bl	8002fc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029de:	2300      	movs	r3, #0
 80029e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029e2:	2300      	movs	r3, #0
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80029e6:	f107 0320 	add.w	r3, r7, #32
 80029ea:	4619      	mov	r1, r3
 80029ec:	4815      	ldr	r0, [pc, #84]	; (8002a44 <_ZL12MX_TIM3_Initv+0xc8>)
 80029ee:	f003 f8b7 	bl	8005b60 <HAL_TIMEx_MasterConfigSynchronization>
 80029f2:	4603      	mov	r3, r0
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	bf14      	ite	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	2300      	moveq	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 8002a02:	f000 fae1 	bl	8002fc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a06:	2360      	movs	r3, #96	; 0x60
 8002a08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a12:	2300      	movs	r3, #0
 8002a14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a16:	1d3b      	adds	r3, r7, #4
 8002a18:	2204      	movs	r2, #4
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4809      	ldr	r0, [pc, #36]	; (8002a44 <_ZL12MX_TIM3_Initv+0xc8>)
 8002a1e:	f002 fdab 	bl	8005578 <HAL_TIM_PWM_ConfigChannel>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf14      	ite	ne
 8002a28:	2301      	movne	r3, #1
 8002a2a:	2300      	moveq	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <_ZL12MX_TIM3_Initv+0xba>
  {
    Error_Handler();
 8002a32:	f000 fac9 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002a36:	4803      	ldr	r0, [pc, #12]	; (8002a44 <_ZL12MX_TIM3_Initv+0xc8>)
 8002a38:	f000 fbea 	bl	8003210 <HAL_TIM_MspPostInit>

}
 8002a3c:	bf00      	nop
 8002a3e:	3728      	adds	r7, #40	; 0x28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	2000057c 	.word	0x2000057c
 8002a48:	40000400 	.word	0x40000400

08002a4c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a50:	4b13      	ldr	r3, [pc, #76]	; (8002aa0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a52:	4a14      	ldr	r2, [pc, #80]	; (8002aa4 <_ZL19MX_USART1_UART_Initv+0x58>)
 8002a54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a60:	2200      	movs	r2, #0
 8002a62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a64:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a6a:	4b0d      	ldr	r3, [pc, #52]	; (8002aa0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a72:	220c      	movs	r2, #12
 8002a74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a76:	4b0a      	ldr	r3, [pc, #40]	; (8002aa0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a7c:	4b08      	ldr	r3, [pc, #32]	; (8002aa0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a82:	4807      	ldr	r0, [pc, #28]	; (8002aa0 <_ZL19MX_USART1_UART_Initv+0x54>)
 8002a84:	f003 f92d 	bl	8005ce2 <HAL_UART_Init>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf14      	ite	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	2300      	moveq	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8002a98:	f000 fa96 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a9c:	bf00      	nop
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	200005c4 	.word	0x200005c4
 8002aa4:	40013800 	.word	0x40013800

08002aa8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
//
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002aac:	4b13      	ldr	r3, [pc, #76]	; (8002afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002aae:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <_ZL19MX_USART2_UART_Initv+0x58>)
 8002ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002ab2:	4b12      	ldr	r3, [pc, #72]	; (8002afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ab4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002aba:	4b10      	ldr	r3, [pc, #64]	; (8002afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ac0:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ace:	220c      	movs	r2, #12
 8002ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ad2:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ad8:	4b08      	ldr	r3, [pc, #32]	; (8002afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	61da      	str	r2, [r3, #28]
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8002ade:	4807      	ldr	r0, [pc, #28]	; (8002afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8002ae0:	f003 f94f 	bl	8005d82 <HAL_HalfDuplex_Init>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bf14      	ite	ne
 8002aea:	2301      	movne	r3, #1
 8002aec:	2300      	moveq	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8002af4:	f000 fa68 	bl	8002fc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
//
  /* USER CODE END USART2_Init 2 */

}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	2000060c 	.word	0x2000060c
 8002b00:	40004400 	.word	0x40004400

08002b04 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b088      	sub	sp, #32
 8002b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0a:	f107 0310 	add.w	r3, r7, #16
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b18:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <_ZL12MX_GPIO_Initv+0x114>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	4a3e      	ldr	r2, [pc, #248]	; (8002c18 <_ZL12MX_GPIO_Initv+0x114>)
 8002b1e:	f043 0310 	orr.w	r3, r3, #16
 8002b22:	6193      	str	r3, [r2, #24]
 8002b24:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <_ZL12MX_GPIO_Initv+0x114>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b30:	4b39      	ldr	r3, [pc, #228]	; (8002c18 <_ZL12MX_GPIO_Initv+0x114>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	4a38      	ldr	r2, [pc, #224]	; (8002c18 <_ZL12MX_GPIO_Initv+0x114>)
 8002b36:	f043 0320 	orr.w	r3, r3, #32
 8002b3a:	6193      	str	r3, [r2, #24]
 8002b3c:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <_ZL12MX_GPIO_Initv+0x114>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f003 0320 	and.w	r3, r3, #32
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b48:	4b33      	ldr	r3, [pc, #204]	; (8002c18 <_ZL12MX_GPIO_Initv+0x114>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	4a32      	ldr	r2, [pc, #200]	; (8002c18 <_ZL12MX_GPIO_Initv+0x114>)
 8002b4e:	f043 0304 	orr.w	r3, r3, #4
 8002b52:	6193      	str	r3, [r2, #24]
 8002b54:	4b30      	ldr	r3, [pc, #192]	; (8002c18 <_ZL12MX_GPIO_Initv+0x114>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b60:	4b2d      	ldr	r3, [pc, #180]	; (8002c18 <_ZL12MX_GPIO_Initv+0x114>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	4a2c      	ldr	r2, [pc, #176]	; (8002c18 <_ZL12MX_GPIO_Initv+0x114>)
 8002b66:	f043 0308 	orr.w	r3, r3, #8
 8002b6a:	6193      	str	r3, [r2, #24]
 8002b6c:	4b2a      	ldr	r3, [pc, #168]	; (8002c18 <_ZL12MX_GPIO_Initv+0x114>)
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	603b      	str	r3, [r7, #0]
 8002b76:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b7e:	4827      	ldr	r0, [pc, #156]	; (8002c1c <_ZL12MX_GPIO_Initv+0x118>)
 8002b80:	f001 f956 	bl	8003e30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, En2_Pin|En1_Pin|Dir1_Pin|EndCap4_Pin
 8002b84:	2200      	movs	r2, #0
 8002b86:	f649 0161 	movw	r1, #39009	; 0x9861
 8002b8a:	4825      	ldr	r0, [pc, #148]	; (8002c20 <_ZL12MX_GPIO_Initv+0x11c>)
 8002b8c:	f001 f950 	bl	8003e30 <HAL_GPIO_WritePin>
                          |Buser_Pin|Reserved_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS1_Pin|CS2_Pin|Dir2_Pin|Led1_Pin
 8002b90:	2200      	movs	r2, #0
 8002b92:	f64d 71c3 	movw	r1, #57283	; 0xdfc3
 8002b96:	4823      	ldr	r0, [pc, #140]	; (8002c24 <_ZL12MX_GPIO_Initv+0x120>)
 8002b98:	f001 f94a 	bl	8003e30 <HAL_GPIO_WritePin>
                          |EndCap1_Pin|EndCap2_Pin|S1_Pin|S2_Pin
                          |EndCap3_Pin|En3_Pin|Dir3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 8002b9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ba0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002baa:	2302      	movs	r3, #2
 8002bac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8002bae:	f107 0310 	add.w	r3, r7, #16
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4819      	ldr	r0, [pc, #100]	; (8002c1c <_ZL12MX_GPIO_Initv+0x118>)
 8002bb6:	f000 ffb7 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : En2_Pin En1_Pin Dir1_Pin EndCap4_Pin
                           Buser_Pin Reserved_Pin */
  GPIO_InitStruct.Pin = En2_Pin|En1_Pin|Dir1_Pin|EndCap4_Pin
 8002bba:	f649 0361 	movw	r3, #39009	; 0x9861
 8002bbe:	613b      	str	r3, [r7, #16]
                          |Buser_Pin|Reserved_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bcc:	f107 0310 	add.w	r3, r7, #16
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	4813      	ldr	r0, [pc, #76]	; (8002c20 <_ZL12MX_GPIO_Initv+0x11c>)
 8002bd4:	f000 ffa8 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8002bd8:	2310      	movs	r3, #16
 8002bda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	4619      	mov	r1, r3
 8002bea:	480d      	ldr	r0, [pc, #52]	; (8002c20 <_ZL12MX_GPIO_Initv+0x11c>)
 8002bec:	f000 ff9c 	bl	8003b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS2_Pin Dir2_Pin Led1_Pin
                           EndCap1_Pin EndCap2_Pin S1_Pin S2_Pin
                           EndCap3_Pin En3_Pin Dir3_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin|Dir2_Pin|Led1_Pin
 8002bf0:	f64d 73c3 	movw	r3, #57283	; 0xdfc3
 8002bf4:	613b      	str	r3, [r7, #16]
                          |EndCap1_Pin|EndCap2_Pin|S1_Pin|S2_Pin
                          |EndCap3_Pin|En3_Pin|Dir3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c02:	f107 0310 	add.w	r3, r7, #16
 8002c06:	4619      	mov	r1, r3
 8002c08:	4806      	ldr	r0, [pc, #24]	; (8002c24 <_ZL12MX_GPIO_Initv+0x120>)
 8002c0a:	f000 ff8d 	bl	8003b28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c0e:	bf00      	nop
 8002c10:	3720      	adds	r7, #32
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40021000 	.word	0x40021000
 8002c1c:	40011000 	.word	0x40011000
 8002c20:	40010800 	.word	0x40010800
 8002c24:	40010c00 	.word	0x40010c00

08002c28 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
	//UNUSED(huart);
	if (huart == &huart1) {
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <HAL_UART_RxCpltCallback+0x80>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d12e      	bne.n	8002c96 <HAL_UART_RxCpltCallback+0x6e>
//		if(!strcmp(rx_buffer,"TEXT")) {
//		}

//		uint8_t data[] = { '\\', 0x8f, 0xf8, 'B', 'q', '}', 0x16, 'C', 1, 1, 0, 0 };
		memcpy(un.bytes, rx_buffer, sizeof(rx_buffer));
 8002c38:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <HAL_UART_RxCpltCallback+0x84>)
 8002c3a:	4a1d      	ldr	r2, [pc, #116]	; (8002cb0 <HAL_UART_RxCpltCallback+0x88>)
 8002c3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002c3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		switch (un.params.hold) {
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_UART_RxCpltCallback+0x84>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b4b      	cmp	r3, #75	; 0x4b
 8002c48:	d018      	beq.n	8002c7c <HAL_UART_RxCpltCallback+0x54>
 8002c4a:	2b4b      	cmp	r3, #75	; 0x4b
 8002c4c:	dc19      	bgt.n	8002c82 <HAL_UART_RxCpltCallback+0x5a>
 8002c4e:	2b32      	cmp	r3, #50	; 0x32
 8002c50:	d010      	beq.n	8002c74 <HAL_UART_RxCpltCallback+0x4c>
 8002c52:	2b32      	cmp	r3, #50	; 0x32
 8002c54:	dc15      	bgt.n	8002c82 <HAL_UART_RxCpltCallback+0x5a>
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	dc02      	bgt.n	8002c60 <HAL_UART_RxCpltCallback+0x38>
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	da03      	bge.n	8002c66 <HAL_UART_RxCpltCallback+0x3e>
 8002c5e:	e010      	b.n	8002c82 <HAL_UART_RxCpltCallback+0x5a>
 8002c60:	2b19      	cmp	r3, #25
 8002c62:	d004      	beq.n	8002c6e <HAL_UART_RxCpltCallback+0x46>
 8002c64:	e00d      	b.n	8002c82 <HAL_UART_RxCpltCallback+0x5a>
		case 0:
		case 1:
			startFirstMove = true;
 8002c66:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_UART_RxCpltCallback+0x8c>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
			break;
 8002c6c:	e009      	b.n	8002c82 <HAL_UART_RxCpltCallback+0x5a>
		case 25:
			stopBeforeReboot = true;
 8002c6e:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <HAL_UART_RxCpltCallback+0x90>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
		case 50:
			sendDataFlag = true;
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <HAL_UART_RxCpltCallback+0x94>)
 8002c76:	2201      	movs	r2, #1
 8002c78:	701a      	strb	r2, [r3, #0]
			break;
 8002c7a:	e002      	b.n	8002c82 <HAL_UART_RxCpltCallback+0x5a>
		case 75:
			setZeroFlag = true;
 8002c7c:	4b10      	ldr	r3, [pc, #64]	; (8002cc0 <HAL_UART_RxCpltCallback+0x98>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]
		}
		memset(rx_buffer, 0, sizeof(rx_buffer));
 8002c82:	220c      	movs	r2, #12
 8002c84:	2100      	movs	r1, #0
 8002c86:	480a      	ldr	r0, [pc, #40]	; (8002cb0 <HAL_UART_RxCpltCallback+0x88>)
 8002c88:	f005 fed5 	bl	8008a36 <memset>
		HAL_GPIO_TogglePin(Led_GPIO_Port, Led_Pin);
 8002c8c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c90:	480c      	ldr	r0, [pc, #48]	; (8002cc4 <HAL_UART_RxCpltCallback+0x9c>)
 8002c92:	f001 f8e5 	bl	8003e60 <HAL_GPIO_TogglePin>
	}
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8002c96:	220c      	movs	r2, #12
 8002c98:	4905      	ldr	r1, [pc, #20]	; (8002cb0 <HAL_UART_RxCpltCallback+0x88>)
 8002c9a:	4803      	ldr	r0, [pc, #12]	; (8002ca8 <HAL_UART_RxCpltCallback+0x80>)
 8002c9c:	f003 f94c 	bl	8005f38 <HAL_UART_Receive_IT>
}
 8002ca0:	bf00      	nop
 8002ca2:	3708      	adds	r7, #8
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	200005c4 	.word	0x200005c4
 8002cac:	20000674 	.word	0x20000674
 8002cb0:	20000660 	.word	0x20000660
 8002cb4:	2000066c 	.word	0x2000066c
 8002cb8:	2000066e 	.word	0x2000066e
 8002cbc:	2000066d 	.word	0x2000066d
 8002cc0:	2000066f 	.word	0x2000066f
 8002cc4:	40011000 	.word	0x40011000

08002cc8 <_Z16StartDefaultTaskPKv>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	arm.setPrintState(false);
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4812      	ldr	r0, [pc, #72]	; (8002d1c <_Z16StartDefaultTaskPKv+0x54>)
 8002cd4:	f7fe fea8 	bl	8001a28 <_ZN7RoboArm13setPrintStateEb>
	/* Infinite loop */
	for (;;) {
		if (startFirstMove) {
 8002cd8:	4b11      	ldr	r3, [pc, #68]	; (8002d20 <_Z16StartDefaultTaskPKv+0x58>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <_Z16StartDefaultTaskPKv+0x2e>
			startFirstMove = false;
 8002ce0:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <_Z16StartDefaultTaskPKv+0x58>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	701a      	strb	r2, [r3, #0]
//			float angle = arm.UnshiftZeroAng(un.params.ang);
//			uint16_t distance = arm.UnshiftZeroLin(un.params.lin);
//			arm.Move2Motors(angle, distance);
			arm.Move2Motors(un.params.ang, un.params.lin);
 8002ce6:	4b0f      	ldr	r3, [pc, #60]	; (8002d24 <_Z16StartDefaultTaskPKv+0x5c>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4a0e      	ldr	r2, [pc, #56]	; (8002d24 <_Z16StartDefaultTaskPKv+0x5c>)
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	4619      	mov	r1, r3
 8002cf0:	480a      	ldr	r0, [pc, #40]	; (8002d1c <_Z16StartDefaultTaskPKv+0x54>)
 8002cf2:	f7fe fcd5 	bl	80016a0 <_ZN7RoboArm11Move2MotorsEff>
//			arm.Move2MotorsSimu(un.params.ang, un.params.lin);
//			arm.Move2MotorsSimu(recAngleF, recDist);
			//steppingyakkazavmaxim(2000, 230);
		}

		if (timerFT1 && timerFT2) {
 8002cf6:	4b0c      	ldr	r3, [pc, #48]	; (8002d28 <_Z16StartDefaultTaskPKv+0x60>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d009      	beq.n	8002d12 <_Z16StartDefaultTaskPKv+0x4a>
 8002cfe:	4b0b      	ldr	r3, [pc, #44]	; (8002d2c <_Z16StartDefaultTaskPKv+0x64>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d005      	beq.n	8002d12 <_Z16StartDefaultTaskPKv+0x4a>

			timerFT1 = false;
 8002d06:	4b08      	ldr	r3, [pc, #32]	; (8002d28 <_Z16StartDefaultTaskPKv+0x60>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
			timerFT2 = false;
 8002d0c:	4b07      	ldr	r3, [pc, #28]	; (8002d2c <_Z16StartDefaultTaskPKv+0x64>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	701a      	strb	r2, [r3, #0]

		//	arm.correctPosition();

		}

		osDelay(1);
 8002d12:	2001      	movs	r0, #1
 8002d14:	f003 ff52 	bl	8006bbc <osDelay>
		if (startFirstMove) {
 8002d18:	e7de      	b.n	8002cd8 <_Z16StartDefaultTaskPKv+0x10>
 8002d1a:	bf00      	nop
 8002d1c:	20000694 	.word	0x20000694
 8002d20:	2000066c 	.word	0x2000066c
 8002d24:	20000674 	.word	0x20000674
 8002d28:	20000670 	.word	0x20000670
 8002d2c:	20000671 	.word	0x20000671

08002d30 <_Z14StartAMT22DataPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartAMT22Data */
void StartAMT22Data(void const * argument)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
//
//		HAL_UART_Transmit(&huart1, (uint8_t*) str, strlen(str),
//				HAL_MAX_DELAY);


		osDelay(1000);
 8002d38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d3c:	f003 ff3e 	bl	8006bbc <osDelay>
 8002d40:	e7fa      	b.n	8002d38 <_Z14StartAMT22DataPKv+0x8>
	...

08002d44 <_Z13StartUARTDataPKv>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUARTData */
void StartUARTData(void const * argument)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08a      	sub	sp, #40	; 0x28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartUARTData */
	HAL_UART_Receive_IT(&huart1, rx_buffer, sizeof(rx_buffer));
 8002d4c:	220c      	movs	r2, #12
 8002d4e:	495f      	ldr	r1, [pc, #380]	; (8002ecc <_Z13StartUARTDataPKv+0x188>)
 8002d50:	485f      	ldr	r0, [pc, #380]	; (8002ed0 <_Z13StartUARTDataPKv+0x18c>)
 8002d52:	f003 f8f1 	bl	8005f38 <HAL_UART_Receive_IT>
	uint32_t posnowT_1, posnowT_2;
//	float angleT = 0;
//	uint32_t linearDist = 0;
//	flagReadEnc = 1;
//	uint32_t distPmm = 0;
	arm.setPrintState(true);
 8002d56:	2101      	movs	r1, #1
 8002d58:	485e      	ldr	r0, [pc, #376]	; (8002ed4 <_Z13StartUARTDataPKv+0x190>)
 8002d5a:	f7fe fe65 	bl	8001a28 <_ZN7RoboArm13setPrintStateEb>
	/* Infinite loop */
	for (;;) {

		if (arm.getPrintState() && sendDataFlag) {
 8002d5e:	485d      	ldr	r0, [pc, #372]	; (8002ed4 <_Z13StartUARTDataPKv+0x190>)
 8002d60:	f7fe fe7a 	bl	8001a58 <_ZN7RoboArm13getPrintStateEv>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d005      	beq.n	8002d76 <_Z13StartUARTDataPKv+0x32>
 8002d6a:	4b5b      	ldr	r3, [pc, #364]	; (8002ed8 <_Z13StartUARTDataPKv+0x194>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <_Z13StartUARTDataPKv+0x32>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <_Z13StartUARTDataPKv+0x34>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d06c      	beq.n	8002e56 <_Z13StartUARTDataPKv+0x112>
			sendDataFlag = false;
 8002d7c:	4b56      	ldr	r3, [pc, #344]	; (8002ed8 <_Z13StartUARTDataPKv+0x194>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]

			int attempts = 0;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]

			posnowT_1 = arm.GetPosEncoders(1);
 8002d86:	2101      	movs	r1, #1
 8002d88:	4852      	ldr	r0, [pc, #328]	; (8002ed4 <_Z13StartUARTDataPKv+0x190>)
 8002d8a:	f7fe fecc 	bl	8001b26 <_ZN7RoboArm14GetPosEncodersEh>
 8002d8e:	6278      	str	r0, [r7, #36]	; 0x24
//			//if the position returned was 0xFFFF we know that there was an error calculating the checksum
			//make 3 attempts for position. we will pre-increment attempts because we'll use the number later and want an accurate count
			while (posnowT_1 == 0xFFFF && ++attempts < 3)
 8002d90:	e004      	b.n	8002d9c <_Z13StartUARTDataPKv+0x58>
				posnowT_1 = arm.GetPosEncoders(1); //try again
 8002d92:	2101      	movs	r1, #1
 8002d94:	484f      	ldr	r0, [pc, #316]	; (8002ed4 <_Z13StartUARTDataPKv+0x190>)
 8002d96:	f7fe fec6 	bl	8001b26 <_ZN7RoboArm14GetPosEncodersEh>
 8002d9a:	6278      	str	r0, [r7, #36]	; 0x24
			while (posnowT_1 == 0xFFFF && ++attempts < 3)
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d107      	bne.n	8002db6 <_Z13StartUARTDataPKv+0x72>
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	3301      	adds	r3, #1
 8002daa:	61fb      	str	r3, [r7, #28]
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	dc01      	bgt.n	8002db6 <_Z13StartUARTDataPKv+0x72>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <_Z13StartUARTDataPKv+0x74>
 8002db6:	2300      	movs	r3, #0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ea      	bne.n	8002d92 <_Z13StartUARTDataPKv+0x4e>

//			float ang = posnowT_1*360/16384;
			float ang_actual = arm.GetAngleEncoders(posnowT_1);
 8002dbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dbe:	4845      	ldr	r0, [pc, #276]	; (8002ed4 <_Z13StartUARTDataPKv+0x190>)
 8002dc0:	f7fe fe9e 	bl	8001b00 <_ZN7RoboArm16GetAngleEncodersEm>
 8002dc4:	61b8      	str	r0, [r7, #24]
			float ang = arm.ShiftZeroAng(ang_actual);
 8002dc6:	69b9      	ldr	r1, [r7, #24]
 8002dc8:	4842      	ldr	r0, [pc, #264]	; (8002ed4 <_Z13StartUARTDataPKv+0x190>)
 8002dca:	f7fe ff9d 	bl	8001d08 <_ZN7RoboArm12ShiftZeroAngEf>
 8002dce:	6178      	str	r0, [r7, #20]

			attempts = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
//			un_send.params.ang = angleT;

			posnowT_2 = arm.GetPosEncoders(2);
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	483f      	ldr	r0, [pc, #252]	; (8002ed4 <_Z13StartUARTDataPKv+0x190>)
 8002dd8:	f7fe fea5 	bl	8001b26 <_ZN7RoboArm14GetPosEncodersEh>
 8002ddc:	6238      	str	r0, [r7, #32]
			while (posnowT_2 == 0xFFFF && ++attempts < 3)
 8002dde:	e004      	b.n	8002dea <_Z13StartUARTDataPKv+0xa6>
				posnowT_2 = arm.GetPosEncoders(2); //try again
 8002de0:	2102      	movs	r1, #2
 8002de2:	483c      	ldr	r0, [pc, #240]	; (8002ed4 <_Z13StartUARTDataPKv+0x190>)
 8002de4:	f7fe fe9f 	bl	8001b26 <_ZN7RoboArm14GetPosEncodersEh>
 8002de8:	6238      	str	r0, [r7, #32]
			while (posnowT_2 == 0xFFFF && ++attempts < 3)
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d107      	bne.n	8002e04 <_Z13StartUARTDataPKv+0xc0>
 8002df4:	69fb      	ldr	r3, [r7, #28]
 8002df6:	3301      	adds	r3, #1
 8002df8:	61fb      	str	r3, [r7, #28]
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	dc01      	bgt.n	8002e04 <_Z13StartUARTDataPKv+0xc0>
 8002e00:	2301      	movs	r3, #1
 8002e02:	e000      	b.n	8002e06 <_Z13StartUARTDataPKv+0xc2>
 8002e04:	2300      	movs	r3, #0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1ea      	bne.n	8002de0 <_Z13StartUARTDataPKv+0x9c>

			float ang_pos = arm.GetAngleEncoders(posnowT_2);
 8002e0a:	6a39      	ldr	r1, [r7, #32]
 8002e0c:	4831      	ldr	r0, [pc, #196]	; (8002ed4 <_Z13StartUARTDataPKv+0x190>)
 8002e0e:	f7fe fe77 	bl	8001b00 <_ZN7RoboArm16GetAngleEncodersEm>
 8002e12:	6138      	str	r0, [r7, #16]
			float pos_actual = ang_pos * arm.distMax / 360.0;
 8002e14:	4b2f      	ldr	r3, [pc, #188]	; (8002ed4 <_Z13StartUARTDataPKv+0x190>)
 8002e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e18:	6939      	ldr	r1, [r7, #16]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7fd ff92 	bl	8000d44 <__aeabi_fmul>
 8002e20:	4603      	mov	r3, r0
 8002e22:	492e      	ldr	r1, [pc, #184]	; (8002edc <_Z13StartUARTDataPKv+0x198>)
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fe f841 	bl	8000eac <__aeabi_fdiv>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	60fb      	str	r3, [r7, #12]
			float pos = arm.ShiftZeroLin(pos_actual);
 8002e2e:	68f9      	ldr	r1, [r7, #12]
 8002e30:	4828      	ldr	r0, [pc, #160]	; (8002ed4 <_Z13StartUARTDataPKv+0x190>)
 8002e32:	f7fe ff8d 	bl	8001d50 <_ZN7RoboArm12ShiftZeroLinEf>
 8002e36:	60b8      	str	r0, [r7, #8]
//					* (6.45 / 360);
//			uint32_t mils = distPsteps / arm.linearStepsMil;
//
//			un_send.params.lin = mils;
//			un_send.params.hold = 0;
			un_send.params.lin = pos;
 8002e38:	4a29      	ldr	r2, [pc, #164]	; (8002ee0 <_Z13StartUARTDataPKv+0x19c>)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	6013      	str	r3, [r2, #0]
			un_send.params.ang = ang;
 8002e3e:	4a28      	ldr	r2, [pc, #160]	; (8002ee0 <_Z13StartUARTDataPKv+0x19c>)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	6053      	str	r3, [r2, #4]
			un_send.params.hold = 0;
 8002e44:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <_Z13StartUARTDataPKv+0x19c>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	609a      	str	r2, [r3, #8]
//					0x09,0x0a,0x0b,0x0c};
//
//			size_t s = sizeof(un_send);

//			sprintf(str, "%.2f:", un_send.params.ang);//, send_params.lin, 100);
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002e4a:	230c      	movs	r3, #12
 8002e4c:	220c      	movs	r2, #12
 8002e4e:	4924      	ldr	r1, [pc, #144]	; (8002ee0 <_Z13StartUARTDataPKv+0x19c>)
 8002e50:	481f      	ldr	r0, [pc, #124]	; (8002ed0 <_Z13StartUARTDataPKv+0x18c>)
 8002e52:	f002 ffee 	bl	8005e32 <HAL_UART_Transmit>
//			HAL_UART_Transmit(&huart1, (uint8_t*)str, sizeof(str), 12);
//			sendDataFlag = false;

		}

		if (stopBeforeReboot) {
 8002e56:	4b23      	ldr	r3, [pc, #140]	; (8002ee4 <_Z13StartUARTDataPKv+0x1a0>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d016      	beq.n	8002e8c <_Z13StartUARTDataPKv+0x148>
			stopBeforeReboot = false;
 8002e5e:	4b21      	ldr	r3, [pc, #132]	; (8002ee4 <_Z13StartUARTDataPKv+0x1a0>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	701a      	strb	r2, [r3, #0]
			arm.EmergencyStop();
 8002e64:	481b      	ldr	r0, [pc, #108]	; (8002ed4 <_Z13StartUARTDataPKv+0x190>)
 8002e66:	f7fe fb75 	bl	8001554 <_ZN7RoboArm13EmergencyStopEv>
			un_send.params.lin = 0;
 8002e6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ee0 <_Z13StartUARTDataPKv+0x19c>)
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002e72:	4b1b      	ldr	r3, [pc, #108]	; (8002ee0 <_Z13StartUARTDataPKv+0x19c>)
 8002e74:	f04f 0200 	mov.w	r2, #0
 8002e78:	605a      	str	r2, [r3, #4]
			un_send.params.hold = 10;
 8002e7a:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <_Z13StartUARTDataPKv+0x19c>)
 8002e7c:	220a      	movs	r2, #10
 8002e7e:	609a      	str	r2, [r3, #8]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002e80:	230c      	movs	r3, #12
 8002e82:	220c      	movs	r2, #12
 8002e84:	4916      	ldr	r1, [pc, #88]	; (8002ee0 <_Z13StartUARTDataPKv+0x19c>)
 8002e86:	4812      	ldr	r0, [pc, #72]	; (8002ed0 <_Z13StartUARTDataPKv+0x18c>)
 8002e88:	f002 ffd3 	bl	8005e32 <HAL_UART_Transmit>
					12);
		}

		if (setZeroFlag) {
 8002e8c:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <_Z13StartUARTDataPKv+0x1a4>)
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d016      	beq.n	8002ec2 <_Z13StartUARTDataPKv+0x17e>
			setZeroFlag = false;
 8002e94:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <_Z13StartUARTDataPKv+0x1a4>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	701a      	strb	r2, [r3, #0]
//			arm.SetZeroEncoders();
			arm.SetSoftwareZero();
 8002e9a:	480e      	ldr	r0, [pc, #56]	; (8002ed4 <_Z13StartUARTDataPKv+0x190>)
 8002e9c:	f7fe fe7a 	bl	8001b94 <_ZN7RoboArm15SetSoftwareZeroEv>
			un_send.params.lin = 0;
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <_Z13StartUARTDataPKv+0x19c>)
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
			un_send.params.ang = 0;
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <_Z13StartUARTDataPKv+0x19c>)
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	605a      	str	r2, [r3, #4]
			un_send.params.hold = 10;
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	; (8002ee0 <_Z13StartUARTDataPKv+0x19c>)
 8002eb2:	220a      	movs	r2, #10
 8002eb4:	609a      	str	r2, [r3, #8]
			HAL_UART_Transmit(&huart1, un_send.bytes, sizeof(un_send.bytes),
 8002eb6:	230c      	movs	r3, #12
 8002eb8:	220c      	movs	r2, #12
 8002eba:	4909      	ldr	r1, [pc, #36]	; (8002ee0 <_Z13StartUARTDataPKv+0x19c>)
 8002ebc:	4804      	ldr	r0, [pc, #16]	; (8002ed0 <_Z13StartUARTDataPKv+0x18c>)
 8002ebe:	f002 ffb8 	bl	8005e32 <HAL_UART_Transmit>
					12);
		}

		osDelay(500);
 8002ec2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ec6:	f003 fe79 	bl	8006bbc <osDelay>
	}
 8002eca:	e748      	b.n	8002d5e <_Z13StartUARTDataPKv+0x1a>
 8002ecc:	20000660 	.word	0x20000660
 8002ed0:	200005c4 	.word	0x200005c4
 8002ed4:	20000694 	.word	0x20000694
 8002ed8:	2000066d 	.word	0x2000066d
 8002edc:	43b40000 	.word	0x43b40000
 8002ee0:	20000680 	.word	0x20000680
 8002ee4:	2000066e 	.word	0x2000066e
 8002ee8:	2000066f 	.word	0x2000066f

08002eec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim->Instance == TIM1)/*Проверяем от какого таймера пришёл CallBack тут надо проверить точность*/
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a2a      	ldr	r2, [pc, #168]	; (8002fa4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d121      	bne.n	8002f42 <HAL_TIM_PeriodElapsedCallback+0x56>
	{
		cntImpulse1++;
 8002efe:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3301      	adds	r3, #1
 8002f04:	4a28      	ldr	r2, [pc, #160]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f06:	6013      	str	r3, [r2, #0]
		if (cntImpulse1 >= arm.anglePsteps) {
 8002f08:	4b28      	ldr	r3, [pc, #160]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002f0c:	4b26      	ldr	r3, [pc, #152]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d83c      	bhi.n	8002f8e <HAL_TIM_PeriodElapsedCallback+0xa2>

			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002f14:	2100      	movs	r1, #0
 8002f16:	4826      	ldr	r0, [pc, #152]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002f18:	f002 f9c2 	bl	80052a0 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim1);
 8002f1c:	4824      	ldr	r0, [pc, #144]	; (8002fb0 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002f1e:	f002 f89f 	bl	8005060 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(1, false);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2101      	movs	r1, #1
 8002f26:	4821      	ldr	r0, [pc, #132]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f28:	f7fe ffbd 	bl	8001ea6 <_ZN7RoboArm9SetEnableEtb>
			cntImpulse1 = 0;
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]
			arm.stateMoveM1 = false;
 8002f32:	4b1e      	ldr	r3, [pc, #120]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
			timerFT1 = true;
 8002f3a:	4b1e      	ldr	r3, [pc, #120]	; (8002fb4 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	701a      	strb	r2, [r3, #0]
 8002f40:	e025      	b.n	8002f8e <HAL_TIM_PeriodElapsedCallback+0xa2>
		}

	} else if (htim->Instance == TIM2) {
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4a:	d120      	bne.n	8002f8e <HAL_TIM_PeriodElapsedCallback+0xa2>

		cntImpulse2++;
 8002f4c:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	3301      	adds	r3, #1
 8002f52:	4a19      	ldr	r2, [pc, #100]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002f54:	6013      	str	r3, [r2, #0]
		if (cntImpulse2 >= arm.distPsteps) {
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f5a:	4b17      	ldr	r3, [pc, #92]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d815      	bhi.n	8002f8e <HAL_TIM_PeriodElapsedCallback+0xa2>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_2);
 8002f62:	2104      	movs	r1, #4
 8002f64:	4815      	ldr	r0, [pc, #84]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002f66:	f002 f99b 	bl	80052a0 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim2);
 8002f6a:	4814      	ldr	r0, [pc, #80]	; (8002fbc <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002f6c:	f002 f878 	bl	8005060 <HAL_TIM_Base_Stop_IT>
			arm.SetEnable(2, false);
 8002f70:	2200      	movs	r2, #0
 8002f72:	2102      	movs	r1, #2
 8002f74:	480d      	ldr	r0, [pc, #52]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f76:	f7fe ff96 	bl	8001ea6 <_ZN7RoboArm9SetEnableEtb>
			cntImpulse2 = 0;
 8002f7a:	4b0f      	ldr	r3, [pc, #60]	; (8002fb8 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
			arm.stateMoveM2 = false;
 8002f80:	4b0a      	ldr	r3, [pc, #40]	; (8002fac <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
			timerFT2 = true;
 8002f88:	4b0d      	ldr	r3, [pc, #52]	; (8002fc0 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
		}
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a0c      	ldr	r2, [pc, #48]	; (8002fc4 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d101      	bne.n	8002f9c <HAL_TIM_PeriodElapsedCallback+0xb0>
    HAL_IncTick();
 8002f98:	f000 fc18 	bl	80037cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	40012c00 	.word	0x40012c00
 8002fa8:	2000068c 	.word	0x2000068c
 8002fac:	20000694 	.word	0x20000694
 8002fb0:	200004ec 	.word	0x200004ec
 8002fb4:	20000670 	.word	0x20000670
 8002fb8:	20000690 	.word	0x20000690
 8002fbc:	20000534 	.word	0x20000534
 8002fc0:	20000671 	.word	0x20000671
 8002fc4:	40000800 	.word	0x40000800

08002fc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fcc:	b672      	cpsid	i
}
 8002fce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002fd0:	e7fe      	b.n	8002fd0 <Error_Handler+0x8>
	...

08002fd4 <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d109      	bne.n	8002ff8 <_Z41__static_initialization_and_destruction_0ii+0x24>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d104      	bne.n	8002ff8 <_Z41__static_initialization_and_destruction_0ii+0x24>
RoboArm arm(0, 124);
 8002fee:	227c      	movs	r2, #124	; 0x7c
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	4803      	ldr	r0, [pc, #12]	; (8003000 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 8002ff4:	f7fe fa44 	bl	8001480 <_ZN7RoboArmC1Ehh>
}
 8002ff8:	bf00      	nop
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	20000694 	.word	0x20000694

08003004 <_GLOBAL__sub_I_hspi1>:
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
 8003008:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800300c:	2001      	movs	r0, #1
 800300e:	f7ff ffe1 	bl	8002fd4 <_Z41__static_initialization_and_destruction_0ii>
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <HAL_MspInit+0x78>)
 800301c:	699b      	ldr	r3, [r3, #24]
 800301e:	4a1b      	ldr	r2, [pc, #108]	; (800308c <HAL_MspInit+0x78>)
 8003020:	f043 0301 	orr.w	r3, r3, #1
 8003024:	6193      	str	r3, [r2, #24]
 8003026:	4b19      	ldr	r3, [pc, #100]	; (800308c <HAL_MspInit+0x78>)
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	60bb      	str	r3, [r7, #8]
 8003030:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003032:	4b16      	ldr	r3, [pc, #88]	; (800308c <HAL_MspInit+0x78>)
 8003034:	69db      	ldr	r3, [r3, #28]
 8003036:	4a15      	ldr	r2, [pc, #84]	; (800308c <HAL_MspInit+0x78>)
 8003038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303c:	61d3      	str	r3, [r2, #28]
 800303e:	4b13      	ldr	r3, [pc, #76]	; (800308c <HAL_MspInit+0x78>)
 8003040:	69db      	ldr	r3, [r3, #28]
 8003042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003046:	607b      	str	r3, [r7, #4]
 8003048:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800304a:	2200      	movs	r2, #0
 800304c:	210f      	movs	r1, #15
 800304e:	f06f 0001 	mvn.w	r0, #1
 8003052:	f000 fc8c 	bl	800396e <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8003056:	2200      	movs	r2, #0
 8003058:	2105      	movs	r1, #5
 800305a:	2005      	movs	r0, #5
 800305c:	f000 fc87 	bl	800396e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8003060:	2005      	movs	r0, #5
 8003062:	f000 fca0 	bl	80039a6 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_MspInit+0x7c>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	4a04      	ldr	r2, [pc, #16]	; (8003090 <HAL_MspInit+0x7c>)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40021000 	.word	0x40021000
 8003090:	40010000 	.word	0x40010000

08003094 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b08a      	sub	sp, #40	; 0x28
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800309c:	f107 0314 	add.w	r3, r7, #20
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	609a      	str	r2, [r3, #8]
 80030a8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a26      	ldr	r2, [pc, #152]	; (8003148 <HAL_SPI_MspInit+0xb4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d145      	bne.n	8003140 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030b4:	4b25      	ldr	r3, [pc, #148]	; (800314c <HAL_SPI_MspInit+0xb8>)
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	4a24      	ldr	r2, [pc, #144]	; (800314c <HAL_SPI_MspInit+0xb8>)
 80030ba:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030be:	6193      	str	r3, [r2, #24]
 80030c0:	4b22      	ldr	r3, [pc, #136]	; (800314c <HAL_SPI_MspInit+0xb8>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c8:	613b      	str	r3, [r7, #16]
 80030ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030cc:	4b1f      	ldr	r3, [pc, #124]	; (800314c <HAL_SPI_MspInit+0xb8>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	4a1e      	ldr	r2, [pc, #120]	; (800314c <HAL_SPI_MspInit+0xb8>)
 80030d2:	f043 0308 	orr.w	r3, r3, #8
 80030d6:	6193      	str	r3, [r2, #24]
 80030d8:	4b1c      	ldr	r3, [pc, #112]	; (800314c <HAL_SPI_MspInit+0xb8>)
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	f003 0308 	and.w	r3, r3, #8
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80030e4:	2328      	movs	r3, #40	; 0x28
 80030e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e8:	2302      	movs	r3, #2
 80030ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030ec:	2303      	movs	r3, #3
 80030ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030f0:	f107 0314 	add.w	r3, r7, #20
 80030f4:	4619      	mov	r1, r3
 80030f6:	4816      	ldr	r0, [pc, #88]	; (8003150 <HAL_SPI_MspInit+0xbc>)
 80030f8:	f000 fd16 	bl	8003b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80030fc:	2310      	movs	r3, #16
 80030fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003104:	2300      	movs	r3, #0
 8003106:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003108:	f107 0314 	add.w	r3, r7, #20
 800310c:	4619      	mov	r1, r3
 800310e:	4810      	ldr	r0, [pc, #64]	; (8003150 <HAL_SPI_MspInit+0xbc>)
 8003110:	f000 fd0a 	bl	8003b28 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8003114:	4b0f      	ldr	r3, [pc, #60]	; (8003154 <HAL_SPI_MspInit+0xc0>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	627b      	str	r3, [r7, #36]	; 0x24
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	627b      	str	r3, [r7, #36]	; 0x24
 800312a:	4a0a      	ldr	r2, [pc, #40]	; (8003154 <HAL_SPI_MspInit+0xc0>)
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8003130:	2200      	movs	r2, #0
 8003132:	2105      	movs	r1, #5
 8003134:	2023      	movs	r0, #35	; 0x23
 8003136:	f000 fc1a 	bl	800396e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800313a:	2023      	movs	r0, #35	; 0x23
 800313c:	f000 fc33 	bl	80039a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003140:	bf00      	nop
 8003142:	3728      	adds	r7, #40	; 0x28
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40013000 	.word	0x40013000
 800314c:	40021000 	.word	0x40021000
 8003150:	40010c00 	.word	0x40010c00
 8003154:	40010000 	.word	0x40010000

08003158 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a27      	ldr	r2, [pc, #156]	; (8003204 <HAL_TIM_PWM_MspInit+0xac>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d114      	bne.n	8003194 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800316a:	4b27      	ldr	r3, [pc, #156]	; (8003208 <HAL_TIM_PWM_MspInit+0xb0>)
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	4a26      	ldr	r2, [pc, #152]	; (8003208 <HAL_TIM_PWM_MspInit+0xb0>)
 8003170:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003174:	6193      	str	r3, [r2, #24]
 8003176:	4b24      	ldr	r3, [pc, #144]	; (8003208 <HAL_TIM_PWM_MspInit+0xb0>)
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8003182:	2200      	movs	r2, #0
 8003184:	2105      	movs	r1, #5
 8003186:	2019      	movs	r0, #25
 8003188:	f000 fbf1 	bl	800396e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800318c:	2019      	movs	r0, #25
 800318e:	f000 fc0a 	bl	80039a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003192:	e032      	b.n	80031fa <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM2)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319c:	d114      	bne.n	80031c8 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800319e:	4b1a      	ldr	r3, [pc, #104]	; (8003208 <HAL_TIM_PWM_MspInit+0xb0>)
 80031a0:	69db      	ldr	r3, [r3, #28]
 80031a2:	4a19      	ldr	r2, [pc, #100]	; (8003208 <HAL_TIM_PWM_MspInit+0xb0>)
 80031a4:	f043 0301 	orr.w	r3, r3, #1
 80031a8:	61d3      	str	r3, [r2, #28]
 80031aa:	4b17      	ldr	r3, [pc, #92]	; (8003208 <HAL_TIM_PWM_MspInit+0xb0>)
 80031ac:	69db      	ldr	r3, [r3, #28]
 80031ae:	f003 0301 	and.w	r3, r3, #1
 80031b2:	613b      	str	r3, [r7, #16]
 80031b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80031b6:	2200      	movs	r2, #0
 80031b8:	2105      	movs	r1, #5
 80031ba:	201c      	movs	r0, #28
 80031bc:	f000 fbd7 	bl	800396e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80031c0:	201c      	movs	r0, #28
 80031c2:	f000 fbf0 	bl	80039a6 <HAL_NVIC_EnableIRQ>
}
 80031c6:	e018      	b.n	80031fa <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM3)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a0f      	ldr	r2, [pc, #60]	; (800320c <HAL_TIM_PWM_MspInit+0xb4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d113      	bne.n	80031fa <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031d2:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <HAL_TIM_PWM_MspInit+0xb0>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4a0c      	ldr	r2, [pc, #48]	; (8003208 <HAL_TIM_PWM_MspInit+0xb0>)
 80031d8:	f043 0302 	orr.w	r3, r3, #2
 80031dc:	61d3      	str	r3, [r2, #28]
 80031de:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_TIM_PWM_MspInit+0xb0>)
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	f003 0302 	and.w	r3, r3, #2
 80031e6:	60fb      	str	r3, [r7, #12]
 80031e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2105      	movs	r1, #5
 80031ee:	201d      	movs	r0, #29
 80031f0:	f000 fbbd 	bl	800396e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80031f4:	201d      	movs	r0, #29
 80031f6:	f000 fbd6 	bl	80039a6 <HAL_NVIC_EnableIRQ>
}
 80031fa:	bf00      	nop
 80031fc:	3718      	adds	r7, #24
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	40012c00 	.word	0x40012c00
 8003208:	40021000 	.word	0x40021000
 800320c:	40000400 	.word	0x40000400

08003210 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b08a      	sub	sp, #40	; 0x28
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003218:	f107 0318 	add.w	r3, r7, #24
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	609a      	str	r2, [r3, #8]
 8003224:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a2e      	ldr	r2, [pc, #184]	; (80032e4 <HAL_TIM_MspPostInit+0xd4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d119      	bne.n	8003264 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003230:	4b2d      	ldr	r3, [pc, #180]	; (80032e8 <HAL_TIM_MspPostInit+0xd8>)
 8003232:	699b      	ldr	r3, [r3, #24]
 8003234:	4a2c      	ldr	r2, [pc, #176]	; (80032e8 <HAL_TIM_MspPostInit+0xd8>)
 8003236:	f043 0304 	orr.w	r3, r3, #4
 800323a:	6193      	str	r3, [r2, #24]
 800323c:	4b2a      	ldr	r3, [pc, #168]	; (80032e8 <HAL_TIM_MspPostInit+0xd8>)
 800323e:	699b      	ldr	r3, [r3, #24]
 8003240:	f003 0304 	and.w	r3, r3, #4
 8003244:	617b      	str	r3, [r7, #20]
 8003246:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003248:	f44f 7380 	mov.w	r3, #256	; 0x100
 800324c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324e:	2302      	movs	r3, #2
 8003250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	2302      	movs	r3, #2
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003256:	f107 0318 	add.w	r3, r7, #24
 800325a:	4619      	mov	r1, r3
 800325c:	4823      	ldr	r0, [pc, #140]	; (80032ec <HAL_TIM_MspPostInit+0xdc>)
 800325e:	f000 fc63 	bl	8003b28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003262:	e03a      	b.n	80032da <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM2)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800326c:	d118      	bne.n	80032a0 <HAL_TIM_MspPostInit+0x90>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800326e:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <HAL_TIM_MspPostInit+0xd8>)
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	4a1d      	ldr	r2, [pc, #116]	; (80032e8 <HAL_TIM_MspPostInit+0xd8>)
 8003274:	f043 0304 	orr.w	r3, r3, #4
 8003278:	6193      	str	r3, [r2, #24]
 800327a:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <HAL_TIM_MspPostInit+0xd8>)
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	f003 0304 	and.w	r3, r3, #4
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003286:	2302      	movs	r3, #2
 8003288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328e:	2302      	movs	r3, #2
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003292:	f107 0318 	add.w	r3, r7, #24
 8003296:	4619      	mov	r1, r3
 8003298:	4814      	ldr	r0, [pc, #80]	; (80032ec <HAL_TIM_MspPostInit+0xdc>)
 800329a:	f000 fc45 	bl	8003b28 <HAL_GPIO_Init>
}
 800329e:	e01c      	b.n	80032da <HAL_TIM_MspPostInit+0xca>
  else if(htim->Instance==TIM3)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a12      	ldr	r2, [pc, #72]	; (80032f0 <HAL_TIM_MspPostInit+0xe0>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d117      	bne.n	80032da <HAL_TIM_MspPostInit+0xca>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032aa:	4b0f      	ldr	r3, [pc, #60]	; (80032e8 <HAL_TIM_MspPostInit+0xd8>)
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	4a0e      	ldr	r2, [pc, #56]	; (80032e8 <HAL_TIM_MspPostInit+0xd8>)
 80032b0:	f043 0304 	orr.w	r3, r3, #4
 80032b4:	6193      	str	r3, [r2, #24]
 80032b6:	4b0c      	ldr	r3, [pc, #48]	; (80032e8 <HAL_TIM_MspPostInit+0xd8>)
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	60fb      	str	r3, [r7, #12]
 80032c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032c2:	2380      	movs	r3, #128	; 0x80
 80032c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c6:	2302      	movs	r3, #2
 80032c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ca:	2302      	movs	r3, #2
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ce:	f107 0318 	add.w	r3, r7, #24
 80032d2:	4619      	mov	r1, r3
 80032d4:	4805      	ldr	r0, [pc, #20]	; (80032ec <HAL_TIM_MspPostInit+0xdc>)
 80032d6:	f000 fc27 	bl	8003b28 <HAL_GPIO_Init>
}
 80032da:	bf00      	nop
 80032dc:	3728      	adds	r7, #40	; 0x28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40012c00 	.word	0x40012c00
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40010800 	.word	0x40010800
 80032f0:	40000400 	.word	0x40000400

080032f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	; 0x28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 0318 	add.w	r3, r7, #24
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a39      	ldr	r2, [pc, #228]	; (80033f4 <HAL_UART_MspInit+0x100>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d13a      	bne.n	800338a <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003314:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <HAL_UART_MspInit+0x104>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	4a37      	ldr	r2, [pc, #220]	; (80033f8 <HAL_UART_MspInit+0x104>)
 800331a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800331e:	6193      	str	r3, [r2, #24]
 8003320:	4b35      	ldr	r3, [pc, #212]	; (80033f8 <HAL_UART_MspInit+0x104>)
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332c:	4b32      	ldr	r3, [pc, #200]	; (80033f8 <HAL_UART_MspInit+0x104>)
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	4a31      	ldr	r2, [pc, #196]	; (80033f8 <HAL_UART_MspInit+0x104>)
 8003332:	f043 0304 	orr.w	r3, r3, #4
 8003336:	6193      	str	r3, [r2, #24]
 8003338:	4b2f      	ldr	r3, [pc, #188]	; (80033f8 <HAL_UART_MspInit+0x104>)
 800333a:	699b      	ldr	r3, [r3, #24]
 800333c:	f003 0304 	and.w	r3, r3, #4
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800334a:	2302      	movs	r3, #2
 800334c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800334e:	2303      	movs	r3, #3
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003352:	f107 0318 	add.w	r3, r7, #24
 8003356:	4619      	mov	r1, r3
 8003358:	4828      	ldr	r0, [pc, #160]	; (80033fc <HAL_UART_MspInit+0x108>)
 800335a:	f000 fbe5 	bl	8003b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800335e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003364:	2300      	movs	r3, #0
 8003366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003368:	2300      	movs	r3, #0
 800336a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800336c:	f107 0318 	add.w	r3, r7, #24
 8003370:	4619      	mov	r1, r3
 8003372:	4822      	ldr	r0, [pc, #136]	; (80033fc <HAL_UART_MspInit+0x108>)
 8003374:	f000 fbd8 	bl	8003b28 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8003378:	2200      	movs	r2, #0
 800337a:	2105      	movs	r1, #5
 800337c:	2025      	movs	r0, #37	; 0x25
 800337e:	f000 faf6 	bl	800396e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003382:	2025      	movs	r0, #37	; 0x25
 8003384:	f000 fb0f 	bl	80039a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003388:	e030      	b.n	80033ec <HAL_UART_MspInit+0xf8>
  else if(huart->Instance==USART2)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <HAL_UART_MspInit+0x10c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d12b      	bne.n	80033ec <HAL_UART_MspInit+0xf8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003394:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <HAL_UART_MspInit+0x104>)
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	4a17      	ldr	r2, [pc, #92]	; (80033f8 <HAL_UART_MspInit+0x104>)
 800339a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800339e:	61d3      	str	r3, [r2, #28]
 80033a0:	4b15      	ldr	r3, [pc, #84]	; (80033f8 <HAL_UART_MspInit+0x104>)
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ac:	4b12      	ldr	r3, [pc, #72]	; (80033f8 <HAL_UART_MspInit+0x104>)
 80033ae:	699b      	ldr	r3, [r3, #24]
 80033b0:	4a11      	ldr	r2, [pc, #68]	; (80033f8 <HAL_UART_MspInit+0x104>)
 80033b2:	f043 0304 	orr.w	r3, r3, #4
 80033b6:	6193      	str	r3, [r2, #24]
 80033b8:	4b0f      	ldr	r3, [pc, #60]	; (80033f8 <HAL_UART_MspInit+0x104>)
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	f003 0304 	and.w	r3, r3, #4
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033c4:	2304      	movs	r3, #4
 80033c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033c8:	2312      	movs	r3, #18
 80033ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80033cc:	2303      	movs	r3, #3
 80033ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033d0:	f107 0318 	add.w	r3, r7, #24
 80033d4:	4619      	mov	r1, r3
 80033d6:	4809      	ldr	r0, [pc, #36]	; (80033fc <HAL_UART_MspInit+0x108>)
 80033d8:	f000 fba6 	bl	8003b28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80033dc:	2200      	movs	r2, #0
 80033de:	2105      	movs	r1, #5
 80033e0:	2026      	movs	r0, #38	; 0x26
 80033e2:	f000 fac4 	bl	800396e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033e6:	2026      	movs	r0, #38	; 0x26
 80033e8:	f000 fadd 	bl	80039a6 <HAL_NVIC_EnableIRQ>
}
 80033ec:	bf00      	nop
 80033ee:	3728      	adds	r7, #40	; 0x28
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40013800 	.word	0x40013800
 80033f8:	40021000 	.word	0x40021000
 80033fc:	40010800 	.word	0x40010800
 8003400:	40004400 	.word	0x40004400

08003404 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b08e      	sub	sp, #56	; 0x38
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800340c:	2300      	movs	r3, #0
 800340e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800341a:	4b34      	ldr	r3, [pc, #208]	; (80034ec <HAL_InitTick+0xe8>)
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	4a33      	ldr	r2, [pc, #204]	; (80034ec <HAL_InitTick+0xe8>)
 8003420:	f043 0304 	orr.w	r3, r3, #4
 8003424:	61d3      	str	r3, [r2, #28]
 8003426:	4b31      	ldr	r3, [pc, #196]	; (80034ec <HAL_InitTick+0xe8>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003432:	f107 0210 	add.w	r2, r7, #16
 8003436:	f107 0314 	add.w	r3, r7, #20
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f001 f927 	bl	8004690 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003448:	2b00      	cmp	r3, #0
 800344a:	d103      	bne.n	8003454 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800344c:	f001 f8f8 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8003450:	6378      	str	r0, [r7, #52]	; 0x34
 8003452:	e004      	b.n	800345e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003454:	f001 f8f4 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8003458:	4603      	mov	r3, r0
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800345e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003460:	4a23      	ldr	r2, [pc, #140]	; (80034f0 <HAL_InitTick+0xec>)
 8003462:	fba2 2303 	umull	r2, r3, r2, r3
 8003466:	0c9b      	lsrs	r3, r3, #18
 8003468:	3b01      	subs	r3, #1
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800346c:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <HAL_InitTick+0xf0>)
 800346e:	4a22      	ldr	r2, [pc, #136]	; (80034f8 <HAL_InitTick+0xf4>)
 8003470:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8003472:	4b20      	ldr	r3, [pc, #128]	; (80034f4 <HAL_InitTick+0xf0>)
 8003474:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003478:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800347a:	4a1e      	ldr	r2, [pc, #120]	; (80034f4 <HAL_InitTick+0xf0>)
 800347c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8003480:	4b1c      	ldr	r3, [pc, #112]	; (80034f4 <HAL_InitTick+0xf0>)
 8003482:	2200      	movs	r2, #0
 8003484:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003486:	4b1b      	ldr	r3, [pc, #108]	; (80034f4 <HAL_InitTick+0xf0>)
 8003488:	2200      	movs	r2, #0
 800348a:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800348c:	4b19      	ldr	r3, [pc, #100]	; (80034f4 <HAL_InitTick+0xf0>)
 800348e:	2200      	movs	r2, #0
 8003490:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8003492:	4818      	ldr	r0, [pc, #96]	; (80034f4 <HAL_InitTick+0xf0>)
 8003494:	f001 fd3a 	bl	8004f0c <HAL_TIM_Base_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800349e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d11b      	bne.n	80034de <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80034a6:	4813      	ldr	r0, [pc, #76]	; (80034f4 <HAL_InitTick+0xf0>)
 80034a8:	f001 fd88 	bl	8004fbc <HAL_TIM_Base_Start_IT>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80034b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d111      	bne.n	80034de <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80034ba:	201e      	movs	r0, #30
 80034bc:	f000 fa73 	bl	80039a6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b0f      	cmp	r3, #15
 80034c4:	d808      	bhi.n	80034d8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80034c6:	2200      	movs	r2, #0
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	201e      	movs	r0, #30
 80034cc:	f000 fa4f 	bl	800396e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80034d0:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <HAL_InitTick+0xf8>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6013      	str	r3, [r2, #0]
 80034d6:	e002      	b.n	80034de <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80034de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3738      	adds	r7, #56	; 0x38
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40021000 	.word	0x40021000
 80034f0:	431bde83 	.word	0x431bde83
 80034f4:	200007a8 	.word	0x200007a8
 80034f8:	40000800 	.word	0x40000800
 80034fc:	20000004 	.word	0x20000004

08003500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8003504:	f001 f8f4 	bl	80046f0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003508:	e7fe      	b.n	8003508 <NMI_Handler+0x8>

0800350a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800350e:	e7fe      	b.n	800350e <HardFault_Handler+0x4>

08003510 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003514:	e7fe      	b.n	8003514 <MemManage_Handler+0x4>

08003516 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003516:	b480      	push	{r7}
 8003518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800351a:	e7fe      	b.n	800351a <BusFault_Handler+0x4>

0800351c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003520:	e7fe      	b.n	8003520 <UsageFault_Handler+0x4>

08003522 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003522:	b480      	push	{r7}
 8003524:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003526:	bf00      	nop
 8003528:	46bd      	mov	sp, r7
 800352a:	bc80      	pop	{r7}
 800352c:	4770      	bx	lr

0800352e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800352e:	b480      	push	{r7}
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8003532:	bf00      	nop
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
	...

0800353c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003540:	4802      	ldr	r0, [pc, #8]	; (800354c <TIM1_UP_IRQHandler+0x10>)
 8003542:	f001 ff11 	bl	8005368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8003546:	bf00      	nop
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	200004ec 	.word	0x200004ec

08003550 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003554:	4802      	ldr	r0, [pc, #8]	; (8003560 <TIM2_IRQHandler+0x10>)
 8003556:	f001 ff07 	bl	8005368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000534 	.word	0x20000534

08003564 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <TIM3_IRQHandler+0x10>)
 800356a:	f001 fefd 	bl	8005368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	2000057c 	.word	0x2000057c

08003578 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800357c:	4802      	ldr	r0, [pc, #8]	; (8003588 <TIM4_IRQHandler+0x10>)
 800357e:	f001 fef3 	bl	8005368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200007a8 	.word	0x200007a8

0800358c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8003590:	4802      	ldr	r0, [pc, #8]	; (800359c <SPI1_IRQHandler+0x10>)
 8003592:	f001 fb19 	bl	8004bc8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000494 	.word	0x20000494

080035a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80035a4:	4802      	ldr	r0, [pc, #8]	; (80035b0 <USART1_IRQHandler+0x10>)
 80035a6:	f002 fced 	bl	8005f84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200005c4 	.word	0x200005c4

080035b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80035b8:	4802      	ldr	r0, [pc, #8]	; (80035c4 <USART2_IRQHandler+0x10>)
 80035ba:	f002 fce3 	bl	8005f84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	2000060c 	.word	0x2000060c

080035c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035c8:	b480      	push	{r7}
 80035ca:	af00      	add	r7, sp, #0
  return 1;
 80035cc:	2301      	movs	r3, #1
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc80      	pop	{r7}
 80035d4:	4770      	bx	lr

080035d6 <_kill>:

int _kill(int pid, int sig)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035e0:	f005 fad2 	bl	8008b88 <__errno>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2216      	movs	r2, #22
 80035e8:	601a      	str	r2, [r3, #0]
  return -1;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <_exit>:

void _exit (int status)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ffe7 	bl	80035d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003608:	e7fe      	b.n	8003608 <_exit+0x12>

0800360a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b086      	sub	sp, #24
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	e00a      	b.n	8003632 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800361c:	f3af 8000 	nop.w
 8003620:	4601      	mov	r1, r0
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	60ba      	str	r2, [r7, #8]
 8003628:	b2ca      	uxtb	r2, r1
 800362a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	3301      	adds	r3, #1
 8003630:	617b      	str	r3, [r7, #20]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	429a      	cmp	r2, r3
 8003638:	dbf0      	blt.n	800361c <_read+0x12>
  }

  return len;
 800363a:	687b      	ldr	r3, [r7, #4]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3718      	adds	r7, #24
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	e009      	b.n	800366a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	60ba      	str	r2, [r7, #8]
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	4618      	mov	r0, r3
 8003660:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	3301      	adds	r3, #1
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	429a      	cmp	r2, r3
 8003670:	dbf1      	blt.n	8003656 <_write+0x12>
  }
  return len;
 8003672:	687b      	ldr	r3, [r7, #4]
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <_close>:

int _close(int file)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003688:	4618      	mov	r0, r3
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036a2:	605a      	str	r2, [r3, #4]
  return 0;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc80      	pop	{r7}
 80036ae:	4770      	bx	lr

080036b0 <_isatty>:

int _isatty(int file)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036b8:	2301      	movs	r3, #1
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr

080036c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b085      	sub	sp, #20
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3714      	adds	r7, #20
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr

080036dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b086      	sub	sp, #24
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036e4:	4a14      	ldr	r2, [pc, #80]	; (8003738 <_sbrk+0x5c>)
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <_sbrk+0x60>)
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036f0:	4b13      	ldr	r3, [pc, #76]	; (8003740 <_sbrk+0x64>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036f8:	4b11      	ldr	r3, [pc, #68]	; (8003740 <_sbrk+0x64>)
 80036fa:	4a12      	ldr	r2, [pc, #72]	; (8003744 <_sbrk+0x68>)
 80036fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036fe:	4b10      	ldr	r3, [pc, #64]	; (8003740 <_sbrk+0x64>)
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	429a      	cmp	r2, r3
 800370a:	d207      	bcs.n	800371c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800370c:	f005 fa3c 	bl	8008b88 <__errno>
 8003710:	4603      	mov	r3, r0
 8003712:	220c      	movs	r2, #12
 8003714:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800371a:	e009      	b.n	8003730 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800371c:	4b08      	ldr	r3, [pc, #32]	; (8003740 <_sbrk+0x64>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003722:	4b07      	ldr	r3, [pc, #28]	; (8003740 <_sbrk+0x64>)
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4413      	add	r3, r2
 800372a:	4a05      	ldr	r2, [pc, #20]	; (8003740 <_sbrk+0x64>)
 800372c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800372e:	68fb      	ldr	r3, [r7, #12]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20005000 	.word	0x20005000
 800373c:	00000400 	.word	0x00000400
 8003740:	200007f0 	.word	0x200007f0
 8003744:	20001690 	.word	0x20001690

08003748 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	bc80      	pop	{r7}
 8003752:	4770      	bx	lr

08003754 <Reset_Handler>:
 8003754:	f7ff fff8 	bl	8003748 <SystemInit>
 8003758:	480b      	ldr	r0, [pc, #44]	; (8003788 <LoopFillZerobss+0xe>)
 800375a:	490c      	ldr	r1, [pc, #48]	; (800378c <LoopFillZerobss+0x12>)
 800375c:	4a0c      	ldr	r2, [pc, #48]	; (8003790 <LoopFillZerobss+0x16>)
 800375e:	2300      	movs	r3, #0
 8003760:	e002      	b.n	8003768 <LoopCopyDataInit>

08003762 <CopyDataInit>:
 8003762:	58d4      	ldr	r4, [r2, r3]
 8003764:	50c4      	str	r4, [r0, r3]
 8003766:	3304      	adds	r3, #4

08003768 <LoopCopyDataInit>:
 8003768:	18c4      	adds	r4, r0, r3
 800376a:	428c      	cmp	r4, r1
 800376c:	d3f9      	bcc.n	8003762 <CopyDataInit>
 800376e:	4a09      	ldr	r2, [pc, #36]	; (8003794 <LoopFillZerobss+0x1a>)
 8003770:	4c09      	ldr	r4, [pc, #36]	; (8003798 <LoopFillZerobss+0x1e>)
 8003772:	2300      	movs	r3, #0
 8003774:	e001      	b.n	800377a <LoopFillZerobss>

08003776 <FillZerobss>:
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	3204      	adds	r2, #4

0800377a <LoopFillZerobss>:
 800377a:	42a2      	cmp	r2, r4
 800377c:	d3fb      	bcc.n	8003776 <FillZerobss>
 800377e:	f005 fa09 	bl	8008b94 <__libc_init_array>
 8003782:	f7fe fecd 	bl	8002520 <main>
 8003786:	4770      	bx	lr
 8003788:	20000000 	.word	0x20000000
 800378c:	200001d8 	.word	0x200001d8
 8003790:	0800ada8 	.word	0x0800ada8
 8003794:	200001d8 	.word	0x200001d8
 8003798:	20001690 	.word	0x20001690

0800379c <ADC1_2_IRQHandler>:
 800379c:	e7fe      	b.n	800379c <ADC1_2_IRQHandler>
	...

080037a0 <HAL_Init>:
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	4b08      	ldr	r3, [pc, #32]	; (80037c8 <HAL_Init+0x28>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a07      	ldr	r2, [pc, #28]	; (80037c8 <HAL_Init+0x28>)
 80037aa:	f043 0310 	orr.w	r3, r3, #16
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	2003      	movs	r0, #3
 80037b2:	f000 f8d1 	bl	8003958 <HAL_NVIC_SetPriorityGrouping>
 80037b6:	200f      	movs	r0, #15
 80037b8:	f7ff fe24 	bl	8003404 <HAL_InitTick>
 80037bc:	f7ff fc2a 	bl	8003014 <HAL_MspInit>
 80037c0:	2300      	movs	r3, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	40022000 	.word	0x40022000

080037cc <HAL_IncTick>:
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	4b05      	ldr	r3, [pc, #20]	; (80037e8 <HAL_IncTick+0x1c>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	461a      	mov	r2, r3
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <HAL_IncTick+0x20>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4413      	add	r3, r2
 80037dc:	4a03      	ldr	r2, [pc, #12]	; (80037ec <HAL_IncTick+0x20>)
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	bf00      	nop
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr
 80037e8:	20000008 	.word	0x20000008
 80037ec:	200007f4 	.word	0x200007f4

080037f0 <HAL_GetTick>:
 80037f0:	b480      	push	{r7}
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	4b02      	ldr	r3, [pc, #8]	; (8003800 <HAL_GetTick+0x10>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr
 8003800:	200007f4 	.word	0x200007f4

08003804 <__NVIC_SetPriorityGrouping>:
 8003804:	b480      	push	{r7}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0307 	and.w	r3, r3, #7
 8003812:	60fb      	str	r3, [r7, #12]
 8003814:	4b0c      	ldr	r3, [pc, #48]	; (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	68ba      	ldr	r2, [r7, #8]
 800381c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003820:	4013      	ands	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	021a      	lsls	r2, r3, #8
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	4313      	orrs	r3, r2
 800382c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	4a04      	ldr	r2, [pc, #16]	; (8003848 <__NVIC_SetPriorityGrouping+0x44>)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	60d3      	str	r3, [r2, #12]
 800383c:	bf00      	nop
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop
 8003848:	e000ed00 	.word	0xe000ed00

0800384c <__NVIC_GetPriorityGrouping>:
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
 8003850:	4b04      	ldr	r3, [pc, #16]	; (8003864 <__NVIC_GetPriorityGrouping+0x18>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	0a1b      	lsrs	r3, r3, #8
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	4618      	mov	r0, r3
 800385c:	46bd      	mov	sp, r7
 800385e:	bc80      	pop	{r7}
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	e000ed00 	.word	0xe000ed00

08003868 <__NVIC_EnableIRQ>:
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	4603      	mov	r3, r0
 8003870:	71fb      	strb	r3, [r7, #7]
 8003872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003876:	2b00      	cmp	r3, #0
 8003878:	db0b      	blt.n	8003892 <__NVIC_EnableIRQ+0x2a>
 800387a:	79fb      	ldrb	r3, [r7, #7]
 800387c:	f003 021f 	and.w	r2, r3, #31
 8003880:	4906      	ldr	r1, [pc, #24]	; (800389c <__NVIC_EnableIRQ+0x34>)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	095b      	lsrs	r3, r3, #5
 8003888:	2001      	movs	r0, #1
 800388a:	fa00 f202 	lsl.w	r2, r0, r2
 800388e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003892:	bf00      	nop
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	e000e100 	.word	0xe000e100

080038a0 <__NVIC_SetPriority>:
 80038a0:	b480      	push	{r7}
 80038a2:	b083      	sub	sp, #12
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4603      	mov	r3, r0
 80038a8:	6039      	str	r1, [r7, #0]
 80038aa:	71fb      	strb	r3, [r7, #7]
 80038ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	db0a      	blt.n	80038ca <__NVIC_SetPriority+0x2a>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	490c      	ldr	r1, [pc, #48]	; (80038ec <__NVIC_SetPriority+0x4c>)
 80038ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038be:	0112      	lsls	r2, r2, #4
 80038c0:	b2d2      	uxtb	r2, r2
 80038c2:	440b      	add	r3, r1
 80038c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80038c8:	e00a      	b.n	80038e0 <__NVIC_SetPriority+0x40>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	4908      	ldr	r1, [pc, #32]	; (80038f0 <__NVIC_SetPriority+0x50>)
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	3b04      	subs	r3, #4
 80038d8:	0112      	lsls	r2, r2, #4
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	440b      	add	r3, r1
 80038de:	761a      	strb	r2, [r3, #24]
 80038e0:	bf00      	nop
 80038e2:	370c      	adds	r7, #12
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	e000e100 	.word	0xe000e100
 80038f0:	e000ed00 	.word	0xe000ed00

080038f4 <NVIC_EncodePriority>:
 80038f4:	b480      	push	{r7}
 80038f6:	b089      	sub	sp, #36	; 0x24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	61fb      	str	r3, [r7, #28]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	f1c3 0307 	rsb	r3, r3, #7
 800390e:	2b04      	cmp	r3, #4
 8003910:	bf28      	it	cs
 8003912:	2304      	movcs	r3, #4
 8003914:	61bb      	str	r3, [r7, #24]
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3304      	adds	r3, #4
 800391a:	2b06      	cmp	r3, #6
 800391c:	d902      	bls.n	8003924 <NVIC_EncodePriority+0x30>
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	3b03      	subs	r3, #3
 8003922:	e000      	b.n	8003926 <NVIC_EncodePriority+0x32>
 8003924:	2300      	movs	r3, #0
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	fa02 f303 	lsl.w	r3, r2, r3
 8003932:	43da      	mvns	r2, r3
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	401a      	ands	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	409a      	lsls	r2, r3
 800393c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	43d9      	mvns	r1, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	400b      	ands	r3, r1
 800394c:	4313      	orrs	r3, r2
 800394e:	4618      	mov	r0, r3
 8003950:	3724      	adds	r7, #36	; 0x24
 8003952:	46bd      	mov	sp, r7
 8003954:	bc80      	pop	{r7}
 8003956:	4770      	bx	lr

08003958 <HAL_NVIC_SetPriorityGrouping>:
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f7ff ff4f 	bl	8003804 <__NVIC_SetPriorityGrouping>
 8003966:	bf00      	nop
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <HAL_NVIC_SetPriority>:
 800396e:	b580      	push	{r7, lr}
 8003970:	b086      	sub	sp, #24
 8003972:	af00      	add	r7, sp, #0
 8003974:	4603      	mov	r3, r0
 8003976:	60b9      	str	r1, [r7, #8]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	73fb      	strb	r3, [r7, #15]
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]
 8003980:	f7ff ff64 	bl	800384c <__NVIC_GetPriorityGrouping>
 8003984:	6178      	str	r0, [r7, #20]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	6978      	ldr	r0, [r7, #20]
 800398c:	f7ff ffb2 	bl	80038f4 <NVIC_EncodePriority>
 8003990:	4602      	mov	r2, r0
 8003992:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ff81 	bl	80038a0 <__NVIC_SetPriority>
 800399e:	bf00      	nop
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}

080039a6 <HAL_NVIC_EnableIRQ>:
 80039a6:	b580      	push	{r7, lr}
 80039a8:	b082      	sub	sp, #8
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	4603      	mov	r3, r0
 80039ae:	71fb      	strb	r3, [r7, #7]
 80039b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff ff57 	bl	8003868 <__NVIC_EnableIRQ>
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_DMA_Abort>:
 80039c2:	b480      	push	{r7}
 80039c4:	b085      	sub	sp, #20
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d008      	beq.n	80039ec <HAL_DMA_Abort+0x2a>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2204      	movs	r2, #4
 80039de:	639a      	str	r2, [r3, #56]	; 0x38
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f883 2020 	strb.w	r2, [r3, #32]
 80039e8:	2301      	movs	r3, #1
 80039ea:	e020      	b.n	8003a2e <HAL_DMA_Abort+0x6c>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 020e 	bic.w	r2, r2, #14
 80039fa:	601a      	str	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 0201 	bic.w	r2, r2, #1
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a14:	2101      	movs	r1, #1
 8003a16:	fa01 f202 	lsl.w	r2, r1, r2
 8003a1a:	605a      	str	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	f883 2020 	strb.w	r2, [r3, #32]
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bc80      	pop	{r7}
 8003a36:	4770      	bx	lr

08003a38 <HAL_DMA_Abort_IT>:
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	2300      	movs	r3, #0
 8003a42:	73fb      	strb	r3, [r7, #15]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d005      	beq.n	8003a5c <HAL_DMA_Abort_IT+0x24>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2204      	movs	r2, #4
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
 8003a5a:	e051      	b.n	8003b00 <HAL_DMA_Abort_IT+0xc8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 020e 	bic.w	r2, r2, #14
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f022 0201 	bic.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a22      	ldr	r2, [pc, #136]	; (8003b0c <HAL_DMA_Abort_IT+0xd4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d029      	beq.n	8003ada <HAL_DMA_Abort_IT+0xa2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a21      	ldr	r2, [pc, #132]	; (8003b10 <HAL_DMA_Abort_IT+0xd8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d022      	beq.n	8003ad6 <HAL_DMA_Abort_IT+0x9e>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1f      	ldr	r2, [pc, #124]	; (8003b14 <HAL_DMA_Abort_IT+0xdc>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d01a      	beq.n	8003ad0 <HAL_DMA_Abort_IT+0x98>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1e      	ldr	r2, [pc, #120]	; (8003b18 <HAL_DMA_Abort_IT+0xe0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d012      	beq.n	8003aca <HAL_DMA_Abort_IT+0x92>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a1c      	ldr	r2, [pc, #112]	; (8003b1c <HAL_DMA_Abort_IT+0xe4>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00a      	beq.n	8003ac4 <HAL_DMA_Abort_IT+0x8c>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1b      	ldr	r2, [pc, #108]	; (8003b20 <HAL_DMA_Abort_IT+0xe8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d102      	bne.n	8003abe <HAL_DMA_Abort_IT+0x86>
 8003ab8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003abc:	e00e      	b.n	8003adc <HAL_DMA_Abort_IT+0xa4>
 8003abe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ac2:	e00b      	b.n	8003adc <HAL_DMA_Abort_IT+0xa4>
 8003ac4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac8:	e008      	b.n	8003adc <HAL_DMA_Abort_IT+0xa4>
 8003aca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ace:	e005      	b.n	8003adc <HAL_DMA_Abort_IT+0xa4>
 8003ad0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ad4:	e002      	b.n	8003adc <HAL_DMA_Abort_IT+0xa4>
 8003ad6:	2310      	movs	r3, #16
 8003ad8:	e000      	b.n	8003adc <HAL_DMA_Abort_IT+0xa4>
 8003ada:	2301      	movs	r3, #1
 8003adc:	4a11      	ldr	r2, [pc, #68]	; (8003b24 <HAL_DMA_Abort_IT+0xec>)
 8003ade:	6053      	str	r3, [r2, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2020 	strb.w	r2, [r3, #32]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d003      	beq.n	8003b00 <HAL_DMA_Abort_IT+0xc8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	4798      	blx	r3
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	40020008 	.word	0x40020008
 8003b10:	4002001c 	.word	0x4002001c
 8003b14:	40020030 	.word	0x40020030
 8003b18:	40020044 	.word	0x40020044
 8003b1c:	40020058 	.word	0x40020058
 8003b20:	4002006c 	.word	0x4002006c
 8003b24:	40020000 	.word	0x40020000

08003b28 <HAL_GPIO_Init>:
 8003b28:	b480      	push	{r7}
 8003b2a:	b08b      	sub	sp, #44	; 0x2c
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
 8003b32:	2300      	movs	r3, #0
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	2300      	movs	r3, #0
 8003b38:	623b      	str	r3, [r7, #32]
 8003b3a:	e169      	b.n	8003e10 <HAL_GPIO_Init+0x2e8>
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	69fa      	ldr	r2, [r7, #28]
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	429a      	cmp	r2, r3
 8003b56:	f040 8158 	bne.w	8003e0a <HAL_GPIO_Init+0x2e2>
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	4a9a      	ldr	r2, [pc, #616]	; (8003dc8 <HAL_GPIO_Init+0x2a0>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d05e      	beq.n	8003c22 <HAL_GPIO_Init+0xfa>
 8003b64:	4a98      	ldr	r2, [pc, #608]	; (8003dc8 <HAL_GPIO_Init+0x2a0>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d875      	bhi.n	8003c56 <HAL_GPIO_Init+0x12e>
 8003b6a:	4a98      	ldr	r2, [pc, #608]	; (8003dcc <HAL_GPIO_Init+0x2a4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d058      	beq.n	8003c22 <HAL_GPIO_Init+0xfa>
 8003b70:	4a96      	ldr	r2, [pc, #600]	; (8003dcc <HAL_GPIO_Init+0x2a4>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d86f      	bhi.n	8003c56 <HAL_GPIO_Init+0x12e>
 8003b76:	4a96      	ldr	r2, [pc, #600]	; (8003dd0 <HAL_GPIO_Init+0x2a8>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d052      	beq.n	8003c22 <HAL_GPIO_Init+0xfa>
 8003b7c:	4a94      	ldr	r2, [pc, #592]	; (8003dd0 <HAL_GPIO_Init+0x2a8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d869      	bhi.n	8003c56 <HAL_GPIO_Init+0x12e>
 8003b82:	4a94      	ldr	r2, [pc, #592]	; (8003dd4 <HAL_GPIO_Init+0x2ac>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d04c      	beq.n	8003c22 <HAL_GPIO_Init+0xfa>
 8003b88:	4a92      	ldr	r2, [pc, #584]	; (8003dd4 <HAL_GPIO_Init+0x2ac>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d863      	bhi.n	8003c56 <HAL_GPIO_Init+0x12e>
 8003b8e:	4a92      	ldr	r2, [pc, #584]	; (8003dd8 <HAL_GPIO_Init+0x2b0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d046      	beq.n	8003c22 <HAL_GPIO_Init+0xfa>
 8003b94:	4a90      	ldr	r2, [pc, #576]	; (8003dd8 <HAL_GPIO_Init+0x2b0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d85d      	bhi.n	8003c56 <HAL_GPIO_Init+0x12e>
 8003b9a:	2b12      	cmp	r3, #18
 8003b9c:	d82a      	bhi.n	8003bf4 <HAL_GPIO_Init+0xcc>
 8003b9e:	2b12      	cmp	r3, #18
 8003ba0:	d859      	bhi.n	8003c56 <HAL_GPIO_Init+0x12e>
 8003ba2:	a201      	add	r2, pc, #4	; (adr r2, 8003ba8 <HAL_GPIO_Init+0x80>)
 8003ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ba8:	08003c23 	.word	0x08003c23
 8003bac:	08003bfd 	.word	0x08003bfd
 8003bb0:	08003c0f 	.word	0x08003c0f
 8003bb4:	08003c51 	.word	0x08003c51
 8003bb8:	08003c57 	.word	0x08003c57
 8003bbc:	08003c57 	.word	0x08003c57
 8003bc0:	08003c57 	.word	0x08003c57
 8003bc4:	08003c57 	.word	0x08003c57
 8003bc8:	08003c57 	.word	0x08003c57
 8003bcc:	08003c57 	.word	0x08003c57
 8003bd0:	08003c57 	.word	0x08003c57
 8003bd4:	08003c57 	.word	0x08003c57
 8003bd8:	08003c57 	.word	0x08003c57
 8003bdc:	08003c57 	.word	0x08003c57
 8003be0:	08003c57 	.word	0x08003c57
 8003be4:	08003c57 	.word	0x08003c57
 8003be8:	08003c57 	.word	0x08003c57
 8003bec:	08003c05 	.word	0x08003c05
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	4a79      	ldr	r2, [pc, #484]	; (8003ddc <HAL_GPIO_Init+0x2b4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d013      	beq.n	8003c22 <HAL_GPIO_Init+0xfa>
 8003bfa:	e02c      	b.n	8003c56 <HAL_GPIO_Init+0x12e>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	623b      	str	r3, [r7, #32]
 8003c02:	e029      	b.n	8003c58 <HAL_GPIO_Init+0x130>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	623b      	str	r3, [r7, #32]
 8003c0c:	e024      	b.n	8003c58 <HAL_GPIO_Init+0x130>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	3308      	adds	r3, #8
 8003c14:	623b      	str	r3, [r7, #32]
 8003c16:	e01f      	b.n	8003c58 <HAL_GPIO_Init+0x130>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	330c      	adds	r3, #12
 8003c1e:	623b      	str	r3, [r7, #32]
 8003c20:	e01a      	b.n	8003c58 <HAL_GPIO_Init+0x130>
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d102      	bne.n	8003c30 <HAL_GPIO_Init+0x108>
 8003c2a:	2304      	movs	r3, #4
 8003c2c:	623b      	str	r3, [r7, #32]
 8003c2e:	e013      	b.n	8003c58 <HAL_GPIO_Init+0x130>
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d105      	bne.n	8003c44 <HAL_GPIO_Init+0x11c>
 8003c38:	2308      	movs	r3, #8
 8003c3a:	623b      	str	r3, [r7, #32]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	611a      	str	r2, [r3, #16]
 8003c42:	e009      	b.n	8003c58 <HAL_GPIO_Init+0x130>
 8003c44:	2308      	movs	r3, #8
 8003c46:	623b      	str	r3, [r7, #32]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	615a      	str	r2, [r3, #20]
 8003c4e:	e003      	b.n	8003c58 <HAL_GPIO_Init+0x130>
 8003c50:	2300      	movs	r3, #0
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	e000      	b.n	8003c58 <HAL_GPIO_Init+0x130>
 8003c56:	bf00      	nop
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	2bff      	cmp	r3, #255	; 0xff
 8003c5c:	d801      	bhi.n	8003c62 <HAL_GPIO_Init+0x13a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	e001      	b.n	8003c66 <HAL_GPIO_Init+0x13e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
 8003c66:	617b      	str	r3, [r7, #20]
 8003c68:	69bb      	ldr	r3, [r7, #24]
 8003c6a:	2bff      	cmp	r3, #255	; 0xff
 8003c6c:	d802      	bhi.n	8003c74 <HAL_GPIO_Init+0x14c>
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	e002      	b.n	8003c7a <HAL_GPIO_Init+0x152>
 8003c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c76:	3b08      	subs	r3, #8
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	613b      	str	r3, [r7, #16]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	210f      	movs	r1, #15
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	fa01 f303 	lsl.w	r3, r1, r3
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	401a      	ands	r2, r3
 8003c8c:	6a39      	ldr	r1, [r7, #32]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	fa01 f303 	lsl.w	r3, r1, r3
 8003c94:	431a      	orrs	r2, r3
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 80b1 	beq.w	8003e0a <HAL_GPIO_Init+0x2e2>
 8003ca8:	4b4d      	ldr	r3, [pc, #308]	; (8003de0 <HAL_GPIO_Init+0x2b8>)
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	4a4c      	ldr	r2, [pc, #304]	; (8003de0 <HAL_GPIO_Init+0x2b8>)
 8003cae:	f043 0301 	orr.w	r3, r3, #1
 8003cb2:	6193      	str	r3, [r2, #24]
 8003cb4:	4b4a      	ldr	r3, [pc, #296]	; (8003de0 <HAL_GPIO_Init+0x2b8>)
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	f003 0301 	and.w	r3, r3, #1
 8003cbc:	60bb      	str	r3, [r7, #8]
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	4a48      	ldr	r2, [pc, #288]	; (8003de4 <HAL_GPIO_Init+0x2bc>)
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc4:	089b      	lsrs	r3, r3, #2
 8003cc6:	3302      	adds	r3, #2
 8003cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	220f      	movs	r2, #15
 8003cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a40      	ldr	r2, [pc, #256]	; (8003de8 <HAL_GPIO_Init+0x2c0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d013      	beq.n	8003d14 <HAL_GPIO_Init+0x1ec>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a3f      	ldr	r2, [pc, #252]	; (8003dec <HAL_GPIO_Init+0x2c4>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d00d      	beq.n	8003d10 <HAL_GPIO_Init+0x1e8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	4a3e      	ldr	r2, [pc, #248]	; (8003df0 <HAL_GPIO_Init+0x2c8>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d007      	beq.n	8003d0c <HAL_GPIO_Init+0x1e4>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a3d      	ldr	r2, [pc, #244]	; (8003df4 <HAL_GPIO_Init+0x2cc>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d101      	bne.n	8003d08 <HAL_GPIO_Init+0x1e0>
 8003d04:	2303      	movs	r3, #3
 8003d06:	e006      	b.n	8003d16 <HAL_GPIO_Init+0x1ee>
 8003d08:	2304      	movs	r3, #4
 8003d0a:	e004      	b.n	8003d16 <HAL_GPIO_Init+0x1ee>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e002      	b.n	8003d16 <HAL_GPIO_Init+0x1ee>
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <HAL_GPIO_Init+0x1ee>
 8003d14:	2300      	movs	r3, #0
 8003d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d18:	f002 0203 	and.w	r2, r2, #3
 8003d1c:	0092      	lsls	r2, r2, #2
 8003d1e:	4093      	lsls	r3, r2
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	492f      	ldr	r1, [pc, #188]	; (8003de4 <HAL_GPIO_Init+0x2bc>)
 8003d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2a:	089b      	lsrs	r3, r3, #2
 8003d2c:	3302      	adds	r3, #2
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d006      	beq.n	8003d4e <HAL_GPIO_Init+0x226>
 8003d40:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	492c      	ldr	r1, [pc, #176]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	608b      	str	r3, [r1, #8]
 8003d4c:	e006      	b.n	8003d5c <HAL_GPIO_Init+0x234>
 8003d4e:	4b2a      	ldr	r3, [pc, #168]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	43db      	mvns	r3, r3
 8003d56:	4928      	ldr	r1, [pc, #160]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	608b      	str	r3, [r1, #8]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d006      	beq.n	8003d76 <HAL_GPIO_Init+0x24e>
 8003d68:	4b23      	ldr	r3, [pc, #140]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003d6a:	68da      	ldr	r2, [r3, #12]
 8003d6c:	4922      	ldr	r1, [pc, #136]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60cb      	str	r3, [r1, #12]
 8003d74:	e006      	b.n	8003d84 <HAL_GPIO_Init+0x25c>
 8003d76:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	491e      	ldr	r1, [pc, #120]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003d80:	4013      	ands	r3, r2
 8003d82:	60cb      	str	r3, [r1, #12]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d006      	beq.n	8003d9e <HAL_GPIO_Init+0x276>
 8003d90:	4b19      	ldr	r3, [pc, #100]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	4918      	ldr	r1, [pc, #96]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	604b      	str	r3, [r1, #4]
 8003d9c:	e006      	b.n	8003dac <HAL_GPIO_Init+0x284>
 8003d9e:	4b16      	ldr	r3, [pc, #88]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003da0:	685a      	ldr	r2, [r3, #4]
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	43db      	mvns	r3, r3
 8003da6:	4914      	ldr	r1, [pc, #80]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003da8:	4013      	ands	r3, r2
 8003daa:	604b      	str	r3, [r1, #4]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d021      	beq.n	8003dfc <HAL_GPIO_Init+0x2d4>
 8003db8:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	490e      	ldr	r1, [pc, #56]	; (8003df8 <HAL_GPIO_Init+0x2d0>)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	600b      	str	r3, [r1, #0]
 8003dc4:	e021      	b.n	8003e0a <HAL_GPIO_Init+0x2e2>
 8003dc6:	bf00      	nop
 8003dc8:	10320000 	.word	0x10320000
 8003dcc:	10310000 	.word	0x10310000
 8003dd0:	10220000 	.word	0x10220000
 8003dd4:	10210000 	.word	0x10210000
 8003dd8:	10120000 	.word	0x10120000
 8003ddc:	10110000 	.word	0x10110000
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40010000 	.word	0x40010000
 8003de8:	40010800 	.word	0x40010800
 8003dec:	40010c00 	.word	0x40010c00
 8003df0:	40011000 	.word	0x40011000
 8003df4:	40011400 	.word	0x40011400
 8003df8:	40010400 	.word	0x40010400
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <HAL_GPIO_Init+0x304>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	43db      	mvns	r3, r3
 8003e04:	4909      	ldr	r1, [pc, #36]	; (8003e2c <HAL_GPIO_Init+0x304>)
 8003e06:	4013      	ands	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]
 8003e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	f47f ae8e 	bne.w	8003b3c <HAL_GPIO_Init+0x14>
 8003e20:	bf00      	nop
 8003e22:	bf00      	nop
 8003e24:	372c      	adds	r7, #44	; 0x2c
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr
 8003e2c:	40010400 	.word	0x40010400

08003e30 <HAL_GPIO_WritePin>:
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	807b      	strh	r3, [r7, #2]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	707b      	strb	r3, [r7, #1]
 8003e40:	787b      	ldrb	r3, [r7, #1]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d003      	beq.n	8003e4e <HAL_GPIO_WritePin+0x1e>
 8003e46:	887a      	ldrh	r2, [r7, #2]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	611a      	str	r2, [r3, #16]
 8003e4c:	e003      	b.n	8003e56 <HAL_GPIO_WritePin+0x26>
 8003e4e:	887b      	ldrh	r3, [r7, #2]
 8003e50:	041a      	lsls	r2, r3, #16
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	611a      	str	r2, [r3, #16]
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bc80      	pop	{r7}
 8003e5e:	4770      	bx	lr

08003e60 <HAL_GPIO_TogglePin>:
 8003e60:	b480      	push	{r7}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	460b      	mov	r3, r1
 8003e6a:	807b      	strh	r3, [r7, #2]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	887a      	ldrh	r2, [r7, #2]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4013      	ands	r3, r2
 8003e78:	041a      	lsls	r2, r3, #16
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	43d9      	mvns	r1, r3
 8003e7e:	887b      	ldrh	r3, [r7, #2]
 8003e80:	400b      	ands	r3, r1
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	611a      	str	r2, [r3, #16]
 8003e88:	bf00      	nop
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bc80      	pop	{r7}
 8003e90:	4770      	bx	lr
	...

08003e94 <HAL_RCC_OscConfig>:
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x12>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e272      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0301 	and.w	r3, r3, #1
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 8087 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x12e>
 8003eb4:	4b92      	ldr	r3, [pc, #584]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f003 030c 	and.w	r3, r3, #12
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d00c      	beq.n	8003eda <HAL_RCC_OscConfig+0x46>
 8003ec0:	4b8f      	ldr	r3, [pc, #572]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f003 030c 	and.w	r3, r3, #12
 8003ec8:	2b08      	cmp	r3, #8
 8003eca:	d112      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x5e>
 8003ecc:	4b8c      	ldr	r3, [pc, #560]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed8:	d10b      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x5e>
 8003eda:	4b89      	ldr	r3, [pc, #548]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d06c      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x12c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d168      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x12c>
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e24c      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003efa:	d106      	bne.n	8003f0a <HAL_RCC_OscConfig+0x76>
 8003efc:	4b80      	ldr	r3, [pc, #512]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a7f      	ldr	r2, [pc, #508]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003f02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e02e      	b.n	8003f68 <HAL_RCC_OscConfig+0xd4>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10c      	bne.n	8003f2c <HAL_RCC_OscConfig+0x98>
 8003f12:	4b7b      	ldr	r3, [pc, #492]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a7a      	ldr	r2, [pc, #488]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003f18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	4b78      	ldr	r3, [pc, #480]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a77      	ldr	r2, [pc, #476]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003f24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e01d      	b.n	8003f68 <HAL_RCC_OscConfig+0xd4>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0xbc>
 8003f36:	4b72      	ldr	r3, [pc, #456]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a71      	ldr	r2, [pc, #452]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	4b6f      	ldr	r3, [pc, #444]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a6e      	ldr	r2, [pc, #440]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCC_OscConfig+0xd4>
 8003f50:	4b6b      	ldr	r3, [pc, #428]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a6a      	ldr	r2, [pc, #424]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	4b68      	ldr	r3, [pc, #416]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a67      	ldr	r2, [pc, #412]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d013      	beq.n	8003f98 <HAL_RCC_OscConfig+0x104>
 8003f70:	f7ff fc3e 	bl	80037f0 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0xf6>
 8003f78:	f7ff fc3a 	bl	80037f0 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	; 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0xf6>
 8003f86:	2303      	movs	r3, #3
 8003f88:	e200      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 8003f8a:	4b5d      	ldr	r3, [pc, #372]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0xe4>
 8003f96:	e014      	b.n	8003fc2 <HAL_RCC_OscConfig+0x12e>
 8003f98:	f7ff fc2a 	bl	80037f0 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x11e>
 8003fa0:	f7ff fc26 	bl	80037f0 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	; 0x64
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x11e>
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e1ec      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 8003fb2:	4b53      	ldr	r3, [pc, #332]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x10c>
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCC_OscConfig+0x12e>
 8003fc0:	bf00      	nop
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d063      	beq.n	8004096 <HAL_RCC_OscConfig+0x202>
 8003fce:	4b4c      	ldr	r3, [pc, #304]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x15e>
 8003fda:	4b49      	ldr	r3, [pc, #292]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f003 030c 	and.w	r3, r3, #12
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d11c      	bne.n	8004020 <HAL_RCC_OscConfig+0x18c>
 8003fe6:	4b46      	ldr	r3, [pc, #280]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d116      	bne.n	8004020 <HAL_RCC_OscConfig+0x18c>
 8003ff2:	4b43      	ldr	r3, [pc, #268]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d005      	beq.n	800400a <HAL_RCC_OscConfig+0x176>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d001      	beq.n	800400a <HAL_RCC_OscConfig+0x176>
 8004006:	2301      	movs	r3, #1
 8004008:	e1c0      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 800400a:	4b3d      	ldr	r3, [pc, #244]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4939      	ldr	r1, [pc, #228]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]
 800401e:	e03a      	b.n	8004096 <HAL_RCC_OscConfig+0x202>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	691b      	ldr	r3, [r3, #16]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d020      	beq.n	800406a <HAL_RCC_OscConfig+0x1d6>
 8004028:	4b36      	ldr	r3, [pc, #216]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	f7ff fbdf 	bl	80037f0 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x1b4>
 8004036:	f7ff fbdb 	bl	80037f0 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x1b4>
 8004044:	2303      	movs	r3, #3
 8004046:	e1a1      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 8004048:	4b2d      	ldr	r3, [pc, #180]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCC_OscConfig+0x1a2>
 8004054:	4b2a      	ldr	r3, [pc, #168]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4927      	ldr	r1, [pc, #156]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 8004064:	4313      	orrs	r3, r2
 8004066:	600b      	str	r3, [r1, #0]
 8004068:	e015      	b.n	8004096 <HAL_RCC_OscConfig+0x202>
 800406a:	4b26      	ldr	r3, [pc, #152]	; (8004104 <HAL_RCC_OscConfig+0x270>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	f7ff fbbe 	bl	80037f0 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x1f6>
 8004078:	f7ff fbba 	bl	80037f0 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x1f6>
 8004086:	2303      	movs	r3, #3
 8004088:	e180      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 800408a:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x1e4>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d03a      	beq.n	8004118 <HAL_RCC_OscConfig+0x284>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d019      	beq.n	80040de <HAL_RCC_OscConfig+0x24a>
 80040aa:	4b17      	ldr	r3, [pc, #92]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	f7ff fb9e 	bl	80037f0 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x236>
 80040b8:	f7ff fb9a 	bl	80037f0 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x236>
 80040c6:	2303      	movs	r3, #3
 80040c8:	e160      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 80040ca:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <HAL_RCC_OscConfig+0x26c>)
 80040cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0x224>
 80040d6:	2001      	movs	r0, #1
 80040d8:	f000 fb1e 	bl	8004718 <RCC_Delay>
 80040dc:	e01c      	b.n	8004118 <HAL_RCC_OscConfig+0x284>
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <HAL_RCC_OscConfig+0x274>)
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
 80040e4:	f7ff fb84 	bl	80037f0 <HAL_GetTick>
 80040e8:	6138      	str	r0, [r7, #16]
 80040ea:	e00f      	b.n	800410c <HAL_RCC_OscConfig+0x278>
 80040ec:	f7ff fb80 	bl	80037f0 <HAL_GetTick>
 80040f0:	4602      	mov	r2, r0
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d908      	bls.n	800410c <HAL_RCC_OscConfig+0x278>
 80040fa:	2303      	movs	r3, #3
 80040fc:	e146      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000
 8004104:	42420000 	.word	0x42420000
 8004108:	42420480 	.word	0x42420480
 800410c:	4b92      	ldr	r3, [pc, #584]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 800410e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d1e9      	bne.n	80040ec <HAL_RCC_OscConfig+0x258>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0304 	and.w	r3, r3, #4
 8004120:	2b00      	cmp	r3, #0
 8004122:	f000 80a6 	beq.w	8004272 <HAL_RCC_OscConfig+0x3de>
 8004126:	2300      	movs	r3, #0
 8004128:	75fb      	strb	r3, [r7, #23]
 800412a:	4b8b      	ldr	r3, [pc, #556]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 800412c:	69db      	ldr	r3, [r3, #28]
 800412e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10d      	bne.n	8004152 <HAL_RCC_OscConfig+0x2be>
 8004136:	4b88      	ldr	r3, [pc, #544]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	4a87      	ldr	r2, [pc, #540]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 800413c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004140:	61d3      	str	r3, [r2, #28]
 8004142:	4b85      	ldr	r3, [pc, #532]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800414a:	60bb      	str	r3, [r7, #8]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	2301      	movs	r3, #1
 8004150:	75fb      	strb	r3, [r7, #23]
 8004152:	4b82      	ldr	r3, [pc, #520]	; (800435c <HAL_RCC_OscConfig+0x4c8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d118      	bne.n	8004190 <HAL_RCC_OscConfig+0x2fc>
 800415e:	4b7f      	ldr	r3, [pc, #508]	; (800435c <HAL_RCC_OscConfig+0x4c8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a7e      	ldr	r2, [pc, #504]	; (800435c <HAL_RCC_OscConfig+0x4c8>)
 8004164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004168:	6013      	str	r3, [r2, #0]
 800416a:	f7ff fb41 	bl	80037f0 <HAL_GetTick>
 800416e:	6138      	str	r0, [r7, #16]
 8004170:	e008      	b.n	8004184 <HAL_RCC_OscConfig+0x2f0>
 8004172:	f7ff fb3d 	bl	80037f0 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	2b64      	cmp	r3, #100	; 0x64
 800417e:	d901      	bls.n	8004184 <HAL_RCC_OscConfig+0x2f0>
 8004180:	2303      	movs	r3, #3
 8004182:	e103      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 8004184:	4b75      	ldr	r3, [pc, #468]	; (800435c <HAL_RCC_OscConfig+0x4c8>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0f0      	beq.n	8004172 <HAL_RCC_OscConfig+0x2de>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d106      	bne.n	80041a6 <HAL_RCC_OscConfig+0x312>
 8004198:	4b6f      	ldr	r3, [pc, #444]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 800419a:	6a1b      	ldr	r3, [r3, #32]
 800419c:	4a6e      	ldr	r2, [pc, #440]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 800419e:	f043 0301 	orr.w	r3, r3, #1
 80041a2:	6213      	str	r3, [r2, #32]
 80041a4:	e02d      	b.n	8004202 <HAL_RCC_OscConfig+0x36e>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10c      	bne.n	80041c8 <HAL_RCC_OscConfig+0x334>
 80041ae:	4b6a      	ldr	r3, [pc, #424]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	4a69      	ldr	r2, [pc, #420]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	6213      	str	r3, [r2, #32]
 80041ba:	4b67      	ldr	r3, [pc, #412]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	4a66      	ldr	r2, [pc, #408]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80041c0:	f023 0304 	bic.w	r3, r3, #4
 80041c4:	6213      	str	r3, [r2, #32]
 80041c6:	e01c      	b.n	8004202 <HAL_RCC_OscConfig+0x36e>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b05      	cmp	r3, #5
 80041ce:	d10c      	bne.n	80041ea <HAL_RCC_OscConfig+0x356>
 80041d0:	4b61      	ldr	r3, [pc, #388]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	4a60      	ldr	r2, [pc, #384]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80041d6:	f043 0304 	orr.w	r3, r3, #4
 80041da:	6213      	str	r3, [r2, #32]
 80041dc:	4b5e      	ldr	r3, [pc, #376]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	4a5d      	ldr	r2, [pc, #372]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	6213      	str	r3, [r2, #32]
 80041e8:	e00b      	b.n	8004202 <HAL_RCC_OscConfig+0x36e>
 80041ea:	4b5b      	ldr	r3, [pc, #364]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	4a5a      	ldr	r2, [pc, #360]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80041f0:	f023 0301 	bic.w	r3, r3, #1
 80041f4:	6213      	str	r3, [r2, #32]
 80041f6:	4b58      	ldr	r3, [pc, #352]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	4a57      	ldr	r2, [pc, #348]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80041fc:	f023 0304 	bic.w	r3, r3, #4
 8004200:	6213      	str	r3, [r2, #32]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d015      	beq.n	8004236 <HAL_RCC_OscConfig+0x3a2>
 800420a:	f7ff faf1 	bl	80037f0 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]
 8004210:	e00a      	b.n	8004228 <HAL_RCC_OscConfig+0x394>
 8004212:	f7ff faed 	bl	80037f0 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004220:	4293      	cmp	r3, r2
 8004222:	d901      	bls.n	8004228 <HAL_RCC_OscConfig+0x394>
 8004224:	2303      	movs	r3, #3
 8004226:	e0b1      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 8004228:	4b4b      	ldr	r3, [pc, #300]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	f003 0302 	and.w	r3, r3, #2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d0ee      	beq.n	8004212 <HAL_RCC_OscConfig+0x37e>
 8004234:	e014      	b.n	8004260 <HAL_RCC_OscConfig+0x3cc>
 8004236:	f7ff fadb 	bl	80037f0 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]
 800423c:	e00a      	b.n	8004254 <HAL_RCC_OscConfig+0x3c0>
 800423e:	f7ff fad7 	bl	80037f0 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	f241 3288 	movw	r2, #5000	; 0x1388
 800424c:	4293      	cmp	r3, r2
 800424e:	d901      	bls.n	8004254 <HAL_RCC_OscConfig+0x3c0>
 8004250:	2303      	movs	r3, #3
 8004252:	e09b      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 8004254:	4b40      	ldr	r3, [pc, #256]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ee      	bne.n	800423e <HAL_RCC_OscConfig+0x3aa>
 8004260:	7dfb      	ldrb	r3, [r7, #23]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d105      	bne.n	8004272 <HAL_RCC_OscConfig+0x3de>
 8004266:	4b3c      	ldr	r3, [pc, #240]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	4a3b      	ldr	r2, [pc, #236]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 800426c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004270:	61d3      	str	r3, [r2, #28]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	69db      	ldr	r3, [r3, #28]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f000 8087 	beq.w	800438a <HAL_RCC_OscConfig+0x4f6>
 800427c:	4b36      	ldr	r3, [pc, #216]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 030c 	and.w	r3, r3, #12
 8004284:	2b08      	cmp	r3, #8
 8004286:	d061      	beq.n	800434c <HAL_RCC_OscConfig+0x4b8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	2b02      	cmp	r3, #2
 800428e:	d146      	bne.n	800431e <HAL_RCC_OscConfig+0x48a>
 8004290:	4b33      	ldr	r3, [pc, #204]	; (8004360 <HAL_RCC_OscConfig+0x4cc>)
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	f7ff faab 	bl	80037f0 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x41c>
 800429e:	f7ff faa7 	bl	80037f0 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x41c>
 80042ac:	2303      	movs	r3, #3
 80042ae:	e06d      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 80042b0:	4b29      	ldr	r3, [pc, #164]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f0      	bne.n	800429e <HAL_RCC_OscConfig+0x40a>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c4:	d108      	bne.n	80042d8 <HAL_RCC_OscConfig+0x444>
 80042c6:	4b24      	ldr	r3, [pc, #144]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	4921      	ldr	r1, [pc, #132]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	604b      	str	r3, [r1, #4]
 80042d8:	4b1f      	ldr	r3, [pc, #124]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a19      	ldr	r1, [r3, #32]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	430b      	orrs	r3, r1
 80042ea:	491b      	ldr	r1, [pc, #108]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 80042ec:	4313      	orrs	r3, r2
 80042ee:	604b      	str	r3, [r1, #4]
 80042f0:	4b1b      	ldr	r3, [pc, #108]	; (8004360 <HAL_RCC_OscConfig+0x4cc>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	f7ff fa7b 	bl	80037f0 <HAL_GetTick>
 80042fa:	6138      	str	r0, [r7, #16]
 80042fc:	e008      	b.n	8004310 <HAL_RCC_OscConfig+0x47c>
 80042fe:	f7ff fa77 	bl	80037f0 <HAL_GetTick>
 8004302:	4602      	mov	r2, r0
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	1ad3      	subs	r3, r2, r3
 8004308:	2b02      	cmp	r3, #2
 800430a:	d901      	bls.n	8004310 <HAL_RCC_OscConfig+0x47c>
 800430c:	2303      	movs	r3, #3
 800430e:	e03d      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 8004310:	4b11      	ldr	r3, [pc, #68]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d0f0      	beq.n	80042fe <HAL_RCC_OscConfig+0x46a>
 800431c:	e035      	b.n	800438a <HAL_RCC_OscConfig+0x4f6>
 800431e:	4b10      	ldr	r3, [pc, #64]	; (8004360 <HAL_RCC_OscConfig+0x4cc>)
 8004320:	2200      	movs	r2, #0
 8004322:	601a      	str	r2, [r3, #0]
 8004324:	f7ff fa64 	bl	80037f0 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0x4aa>
 800432c:	f7ff fa60 	bl	80037f0 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b02      	cmp	r3, #2
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0x4aa>
 800433a:	2303      	movs	r3, #3
 800433c:	e026      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 800433e:	4b06      	ldr	r3, [pc, #24]	; (8004358 <HAL_RCC_OscConfig+0x4c4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0x498>
 800434a:	e01e      	b.n	800438a <HAL_RCC_OscConfig+0x4f6>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	69db      	ldr	r3, [r3, #28]
 8004350:	2b01      	cmp	r3, #1
 8004352:	d107      	bne.n	8004364 <HAL_RCC_OscConfig+0x4d0>
 8004354:	2301      	movs	r3, #1
 8004356:	e019      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 8004358:	40021000 	.word	0x40021000
 800435c:	40007000 	.word	0x40007000
 8004360:	42420060 	.word	0x42420060
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCC_OscConfig+0x500>)
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	429a      	cmp	r2, r3
 8004376:	d106      	bne.n	8004386 <HAL_RCC_OscConfig+0x4f2>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	429a      	cmp	r2, r3
 8004384:	d001      	beq.n	800438a <HAL_RCC_OscConfig+0x4f6>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <HAL_RCC_OscConfig+0x4f8>
 800438a:	2300      	movs	r3, #0
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000

08004398 <HAL_RCC_ClockConfig>:
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_RCC_ClockConfig+0x14>
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0d0      	b.n	800454e <HAL_RCC_ClockConfig+0x1b6>
 80043ac:	4b6a      	ldr	r3, [pc, #424]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d910      	bls.n	80043dc <HAL_RCC_ClockConfig+0x44>
 80043ba:	4b67      	ldr	r3, [pc, #412]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f023 0207 	bic.w	r2, r3, #7
 80043c2:	4965      	ldr	r1, [pc, #404]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]
 80043ca:	4b63      	ldr	r3, [pc, #396]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0307 	and.w	r3, r3, #7
 80043d2:	683a      	ldr	r2, [r7, #0]
 80043d4:	429a      	cmp	r2, r3
 80043d6:	d001      	beq.n	80043dc <HAL_RCC_ClockConfig+0x44>
 80043d8:	2301      	movs	r3, #1
 80043da:	e0b8      	b.n	800454e <HAL_RCC_ClockConfig+0x1b6>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d020      	beq.n	800442a <HAL_RCC_ClockConfig+0x92>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d005      	beq.n	8004400 <HAL_RCC_ClockConfig+0x68>
 80043f4:	4b59      	ldr	r3, [pc, #356]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	4a58      	ldr	r2, [pc, #352]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 80043fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043fe:	6053      	str	r3, [r2, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d005      	beq.n	8004418 <HAL_RCC_ClockConfig+0x80>
 800440c:	4b53      	ldr	r3, [pc, #332]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	4a52      	ldr	r2, [pc, #328]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004412:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004416:	6053      	str	r3, [r2, #4]
 8004418:	4b50      	ldr	r3, [pc, #320]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	494d      	ldr	r1, [pc, #308]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004426:	4313      	orrs	r3, r2
 8004428:	604b      	str	r3, [r1, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d040      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x120>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d107      	bne.n	800444e <HAL_RCC_ClockConfig+0xb6>
 800443e:	4b47      	ldr	r3, [pc, #284]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d115      	bne.n	8004476 <HAL_RCC_ClockConfig+0xde>
 800444a:	2301      	movs	r3, #1
 800444c:	e07f      	b.n	800454e <HAL_RCC_ClockConfig+0x1b6>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d107      	bne.n	8004466 <HAL_RCC_ClockConfig+0xce>
 8004456:	4b41      	ldr	r3, [pc, #260]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d109      	bne.n	8004476 <HAL_RCC_ClockConfig+0xde>
 8004462:	2301      	movs	r3, #1
 8004464:	e073      	b.n	800454e <HAL_RCC_ClockConfig+0x1b6>
 8004466:	4b3d      	ldr	r3, [pc, #244]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_ClockConfig+0xde>
 8004472:	2301      	movs	r3, #1
 8004474:	e06b      	b.n	800454e <HAL_RCC_ClockConfig+0x1b6>
 8004476:	4b39      	ldr	r3, [pc, #228]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f023 0203 	bic.w	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	4936      	ldr	r1, [pc, #216]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
 8004488:	f7ff f9b2 	bl	80037f0 <HAL_GetTick>
 800448c:	60f8      	str	r0, [r7, #12]
 800448e:	e00a      	b.n	80044a6 <HAL_RCC_ClockConfig+0x10e>
 8004490:	f7ff f9ae 	bl	80037f0 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	f241 3288 	movw	r2, #5000	; 0x1388
 800449e:	4293      	cmp	r3, r2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_ClockConfig+0x10e>
 80044a2:	2303      	movs	r3, #3
 80044a4:	e053      	b.n	800454e <HAL_RCC_ClockConfig+0x1b6>
 80044a6:	4b2d      	ldr	r3, [pc, #180]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 020c 	and.w	r2, r3, #12
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d1eb      	bne.n	8004490 <HAL_RCC_ClockConfig+0xf8>
 80044b8:	4b27      	ldr	r3, [pc, #156]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d210      	bcs.n	80044e8 <HAL_RCC_ClockConfig+0x150>
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f023 0207 	bic.w	r2, r3, #7
 80044ce:	4922      	ldr	r1, [pc, #136]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]
 80044d6:	4b20      	ldr	r3, [pc, #128]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d001      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x150>
 80044e4:	2301      	movs	r3, #1
 80044e6:	e032      	b.n	800454e <HAL_RCC_ClockConfig+0x1b6>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0304 	and.w	r3, r3, #4
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_RCC_ClockConfig+0x16e>
 80044f4:	4b19      	ldr	r3, [pc, #100]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4916      	ldr	r1, [pc, #88]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004502:	4313      	orrs	r3, r2
 8004504:	604b      	str	r3, [r1, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0308 	and.w	r3, r3, #8
 800450e:	2b00      	cmp	r3, #0
 8004510:	d009      	beq.n	8004526 <HAL_RCC_ClockConfig+0x18e>
 8004512:	4b12      	ldr	r3, [pc, #72]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	00db      	lsls	r3, r3, #3
 8004520:	490e      	ldr	r1, [pc, #56]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004522:	4313      	orrs	r3, r2
 8004524:	604b      	str	r3, [r1, #4]
 8004526:	f000 f82d 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 800452a:	4602      	mov	r2, r0
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 030f 	and.w	r3, r3, #15
 8004536:	490a      	ldr	r1, [pc, #40]	; (8004560 <HAL_RCC_ClockConfig+0x1c8>)
 8004538:	5ccb      	ldrb	r3, [r1, r3]
 800453a:	fa22 f303 	lsr.w	r3, r2, r3
 800453e:	4a09      	ldr	r2, [pc, #36]	; (8004564 <HAL_RCC_ClockConfig+0x1cc>)
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	4b09      	ldr	r3, [pc, #36]	; (8004568 <HAL_RCC_ClockConfig+0x1d0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fe ff5c 	bl	8003404 <HAL_InitTick>
 800454c:	2300      	movs	r3, #0
 800454e:	4618      	mov	r0, r3
 8004550:	3710      	adds	r7, #16
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	40022000 	.word	0x40022000
 800455c:	40021000 	.word	0x40021000
 8004560:	0800aa00 	.word	0x0800aa00
 8004564:	20000000 	.word	0x20000000
 8004568:	20000004 	.word	0x20000004

0800456c <HAL_RCC_EnableCSS>:
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
 8004570:	4b03      	ldr	r3, [pc, #12]	; (8004580 <HAL_RCC_EnableCSS+0x14>)
 8004572:	2201      	movs	r2, #1
 8004574:	601a      	str	r2, [r3, #0]
 8004576:	bf00      	nop
 8004578:	46bd      	mov	sp, r7
 800457a:	bc80      	pop	{r7}
 800457c:	4770      	bx	lr
 800457e:	bf00      	nop
 8004580:	4242004c 	.word	0x4242004c

08004584 <HAL_RCC_GetSysClockFreq>:
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
 800458a:	2300      	movs	r3, #0
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	2300      	movs	r3, #0
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	2300      	movs	r3, #0
 8004594:	617b      	str	r3, [r7, #20]
 8004596:	2300      	movs	r3, #0
 8004598:	607b      	str	r3, [r7, #4]
 800459a:	2300      	movs	r3, #0
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <HAL_RCC_GetSysClockFreq+0x94>)
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	60fb      	str	r3, [r7, #12]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f003 030c 	and.w	r3, r3, #12
 80045aa:	2b04      	cmp	r3, #4
 80045ac:	d002      	beq.n	80045b4 <HAL_RCC_GetSysClockFreq+0x30>
 80045ae:	2b08      	cmp	r3, #8
 80045b0:	d003      	beq.n	80045ba <HAL_RCC_GetSysClockFreq+0x36>
 80045b2:	e027      	b.n	8004604 <HAL_RCC_GetSysClockFreq+0x80>
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <HAL_RCC_GetSysClockFreq+0x98>)
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	e027      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x86>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	0c9b      	lsrs	r3, r3, #18
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	4a17      	ldr	r2, [pc, #92]	; (8004620 <HAL_RCC_GetSysClockFreq+0x9c>)
 80045c4:	5cd3      	ldrb	r3, [r2, r3]
 80045c6:	607b      	str	r3, [r7, #4]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d010      	beq.n	80045f4 <HAL_RCC_GetSysClockFreq+0x70>
 80045d2:	4b11      	ldr	r3, [pc, #68]	; (8004618 <HAL_RCC_GetSysClockFreq+0x94>)
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	0c5b      	lsrs	r3, r3, #17
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	4a11      	ldr	r2, [pc, #68]	; (8004624 <HAL_RCC_GetSysClockFreq+0xa0>)
 80045de:	5cd3      	ldrb	r3, [r2, r3]
 80045e0:	60bb      	str	r3, [r7, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a0d      	ldr	r2, [pc, #52]	; (800461c <HAL_RCC_GetSysClockFreq+0x98>)
 80045e6:	fb03 f202 	mul.w	r2, r3, r2
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	617b      	str	r3, [r7, #20]
 80045f2:	e004      	b.n	80045fe <HAL_RCC_GetSysClockFreq+0x7a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a0c      	ldr	r2, [pc, #48]	; (8004628 <HAL_RCC_GetSysClockFreq+0xa4>)
 80045f8:	fb02 f303 	mul.w	r3, r2, r3
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	613b      	str	r3, [r7, #16]
 8004602:	e002      	b.n	800460a <HAL_RCC_GetSysClockFreq+0x86>
 8004604:	4b05      	ldr	r3, [pc, #20]	; (800461c <HAL_RCC_GetSysClockFreq+0x98>)
 8004606:	613b      	str	r3, [r7, #16]
 8004608:	bf00      	nop
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	4618      	mov	r0, r3
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	bc80      	pop	{r7}
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	40021000 	.word	0x40021000
 800461c:	007a1200 	.word	0x007a1200
 8004620:	0800aa18 	.word	0x0800aa18
 8004624:	0800aa28 	.word	0x0800aa28
 8004628:	003d0900 	.word	0x003d0900

0800462c <HAL_RCC_GetHCLKFreq>:
 800462c:	b480      	push	{r7}
 800462e:	af00      	add	r7, sp, #0
 8004630:	4b02      	ldr	r3, [pc, #8]	; (800463c <HAL_RCC_GetHCLKFreq+0x10>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	bc80      	pop	{r7}
 800463a:	4770      	bx	lr
 800463c:	20000000 	.word	0x20000000

08004640 <HAL_RCC_GetPCLK1Freq>:
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
 8004644:	f7ff fff2 	bl	800462c <HAL_RCC_GetHCLKFreq>
 8004648:	4602      	mov	r2, r0
 800464a:	4b05      	ldr	r3, [pc, #20]	; (8004660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	0a1b      	lsrs	r3, r3, #8
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	4903      	ldr	r1, [pc, #12]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004656:	5ccb      	ldrb	r3, [r1, r3]
 8004658:	fa22 f303 	lsr.w	r3, r2, r3
 800465c:	4618      	mov	r0, r3
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	0800aa10 	.word	0x0800aa10

08004668 <HAL_RCC_GetPCLK2Freq>:
 8004668:	b580      	push	{r7, lr}
 800466a:	af00      	add	r7, sp, #0
 800466c:	f7ff ffde 	bl	800462c <HAL_RCC_GetHCLKFreq>
 8004670:	4602      	mov	r2, r0
 8004672:	4b05      	ldr	r3, [pc, #20]	; (8004688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	0adb      	lsrs	r3, r3, #11
 8004678:	f003 0307 	and.w	r3, r3, #7
 800467c:	4903      	ldr	r1, [pc, #12]	; (800468c <HAL_RCC_GetPCLK2Freq+0x24>)
 800467e:	5ccb      	ldrb	r3, [r1, r3]
 8004680:	fa22 f303 	lsr.w	r3, r2, r3
 8004684:	4618      	mov	r0, r3
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40021000 	.word	0x40021000
 800468c:	0800aa10 	.word	0x0800aa10

08004690 <HAL_RCC_GetClockConfig>:
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	220f      	movs	r2, #15
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	4b11      	ldr	r3, [pc, #68]	; (80046e8 <HAL_RCC_GetClockConfig+0x58>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f003 0203 	and.w	r2, r3, #3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	605a      	str	r2, [r3, #4]
 80046ac:	4b0e      	ldr	r3, [pc, #56]	; (80046e8 <HAL_RCC_GetClockConfig+0x58>)
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	609a      	str	r2, [r3, #8]
 80046b8:	4b0b      	ldr	r3, [pc, #44]	; (80046e8 <HAL_RCC_GetClockConfig+0x58>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	60da      	str	r2, [r3, #12]
 80046c4:	4b08      	ldr	r3, [pc, #32]	; (80046e8 <HAL_RCC_GetClockConfig+0x58>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	08db      	lsrs	r3, r3, #3
 80046ca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	611a      	str	r2, [r3, #16]
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <HAL_RCC_GetClockConfig+0x5c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0207 	and.w	r2, r3, #7
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	601a      	str	r2, [r3, #0]
 80046de:	bf00      	nop
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr
 80046e8:	40021000 	.word	0x40021000
 80046ec:	40022000 	.word	0x40022000

080046f0 <HAL_RCC_NMI_IRQHandler>:
 80046f0:	b580      	push	{r7, lr}
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_RCC_NMI_IRQHandler+0x20>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fc:	2b80      	cmp	r3, #128	; 0x80
 80046fe:	d104      	bne.n	800470a <HAL_RCC_NMI_IRQHandler+0x1a>
 8004700:	f000 f828 	bl	8004754 <HAL_RCC_CSSCallback>
 8004704:	4b03      	ldr	r3, [pc, #12]	; (8004714 <HAL_RCC_NMI_IRQHandler+0x24>)
 8004706:	2280      	movs	r2, #128	; 0x80
 8004708:	701a      	strb	r2, [r3, #0]
 800470a:	bf00      	nop
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40021000 	.word	0x40021000
 8004714:	4002100a 	.word	0x4002100a

08004718 <RCC_Delay>:
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <RCC_Delay+0x34>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a0a      	ldr	r2, [pc, #40]	; (8004750 <RCC_Delay+0x38>)
 8004726:	fba2 2303 	umull	r2, r3, r2, r3
 800472a:	0a5b      	lsrs	r3, r3, #9
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	fb02 f303 	mul.w	r3, r2, r3
 8004732:	60fb      	str	r3, [r7, #12]
 8004734:	bf00      	nop
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	1e5a      	subs	r2, r3, #1
 800473a:	60fa      	str	r2, [r7, #12]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f9      	bne.n	8004734 <RCC_Delay+0x1c>
 8004740:	bf00      	nop
 8004742:	bf00      	nop
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	bc80      	pop	{r7}
 800474a:	4770      	bx	lr
 800474c:	20000000 	.word	0x20000000
 8004750:	10624dd3 	.word	0x10624dd3

08004754 <HAL_RCC_CSSCallback>:
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
 8004758:	bf00      	nop
 800475a:	46bd      	mov	sp, r7
 800475c:	bc80      	pop	{r7}
 800475e:	4770      	bx	lr

08004760 <HAL_SPI_Init>:
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_SPI_Init+0x12>
 800476e:	2301      	movs	r3, #1
 8004770:	e076      	b.n	8004860 <HAL_SPI_Init+0x100>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d108      	bne.n	800478c <HAL_SPI_Init+0x2c>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004782:	d009      	beq.n	8004798 <HAL_SPI_Init+0x38>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	61da      	str	r2, [r3, #28]
 800478a:	e005      	b.n	8004798 <HAL_SPI_Init+0x38>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	611a      	str	r2, [r3, #16]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	615a      	str	r2, [r3, #20]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	629a      	str	r2, [r3, #40]	; 0x28
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_SPI_Init+0x58>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fe fc6e 	bl	8003094 <HAL_SPI_MspInit>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481c:	ea42 0103 	orr.w	r1, r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	0c1a      	lsrs	r2, r3, #16
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f002 0204 	and.w	r2, r2, #4
 800483e:	605a      	str	r2, [r3, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	69da      	ldr	r2, [r3, #28]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800484e:	61da      	str	r2, [r3, #28]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	655a      	str	r2, [r3, #84]	; 0x54
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800485e:	2300      	movs	r3, #0
 8004860:	4618      	mov	r0, r3
 8004862:	3708      	adds	r7, #8
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_SPI_TransmitReceive>:
 8004868:	b580      	push	{r7, lr}
 800486a:	b08c      	sub	sp, #48	; 0x30
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	807b      	strh	r3, [r7, #2]
 8004876:	2301      	movs	r3, #1
 8004878:	62fb      	str	r3, [r7, #44]	; 0x2c
 800487a:	2300      	movs	r3, #0
 800487c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <HAL_SPI_TransmitReceive+0x26>
 800488a:	2302      	movs	r3, #2
 800488c:	e198      	b.n	8004bc0 <HAL_SPI_TransmitReceive+0x358>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004896:	f7fe ffab 	bl	80037f0 <HAL_GetTick>
 800489a:	6278      	str	r0, [r7, #36]	; 0x24
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	61fb      	str	r3, [r7, #28]
 80048ac:	887b      	ldrh	r3, [r7, #2]
 80048ae:	837b      	strh	r3, [r7, #26]
 80048b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d00f      	beq.n	80048d8 <HAL_SPI_TransmitReceive+0x70>
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048be:	d107      	bne.n	80048d0 <HAL_SPI_TransmitReceive+0x68>
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d103      	bne.n	80048d0 <HAL_SPI_TransmitReceive+0x68>
 80048c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d003      	beq.n	80048d8 <HAL_SPI_TransmitReceive+0x70>
 80048d0:	2302      	movs	r3, #2
 80048d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048d6:	e16d      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x34c>
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <HAL_SPI_TransmitReceive+0x82>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d002      	beq.n	80048ea <HAL_SPI_TransmitReceive+0x82>
 80048e4:	887b      	ldrh	r3, [r7, #2]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d103      	bne.n	80048f2 <HAL_SPI_TransmitReceive+0x8a>
 80048ea:	2301      	movs	r3, #1
 80048ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80048f0:	e160      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x34c>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d003      	beq.n	8004906 <HAL_SPI_TransmitReceive+0x9e>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2205      	movs	r2, #5
 8004902:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2200      	movs	r2, #0
 800490a:	655a      	str	r2, [r3, #84]	; 0x54
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	639a      	str	r2, [r3, #56]	; 0x38
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	887a      	ldrh	r2, [r7, #2]
 8004916:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	887a      	ldrh	r2, [r7, #2]
 800491c:	879a      	strh	r2, [r3, #60]	; 0x3c
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	68ba      	ldr	r2, [r7, #8]
 8004922:	631a      	str	r2, [r3, #48]	; 0x30
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	887a      	ldrh	r2, [r7, #2]
 8004928:	86da      	strh	r2, [r3, #54]	; 0x36
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	887a      	ldrh	r2, [r7, #2]
 800492e:	869a      	strh	r2, [r3, #52]	; 0x34
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2200      	movs	r2, #0
 8004934:	641a      	str	r2, [r3, #64]	; 0x40
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2200      	movs	r2, #0
 800493a:	645a      	str	r2, [r3, #68]	; 0x44
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004946:	2b40      	cmp	r3, #64	; 0x40
 8004948:	d007      	beq.n	800495a <HAL_SPI_TransmitReceive+0xf2>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004962:	d17c      	bne.n	8004a5e <HAL_SPI_TransmitReceive+0x1f6>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <HAL_SPI_TransmitReceive+0x10a>
 800496c:	8b7b      	ldrh	r3, [r7, #26]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d16a      	bne.n	8004a48 <HAL_SPI_TransmitReceive+0x1e0>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	881a      	ldrh	r2, [r3, #0]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	60da      	str	r2, [r3, #12]
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	1c9a      	adds	r2, r3, #2
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800498c:	b29b      	uxth	r3, r3
 800498e:	3b01      	subs	r3, #1
 8004990:	b29a      	uxth	r2, r3
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	86da      	strh	r2, [r3, #54]	; 0x36
 8004996:	e057      	b.n	8004a48 <HAL_SPI_TransmitReceive+0x1e0>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d11b      	bne.n	80049de <HAL_SPI_TransmitReceive+0x176>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d016      	beq.n	80049de <HAL_SPI_TransmitReceive+0x176>
 80049b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d113      	bne.n	80049de <HAL_SPI_TransmitReceive+0x176>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	881a      	ldrh	r2, [r3, #0]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60da      	str	r2, [r3, #12]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	1c9a      	adds	r2, r3, #2
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	631a      	str	r2, [r3, #48]	; 0x30
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80049da:	2300      	movs	r3, #0
 80049dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d119      	bne.n	8004a20 <HAL_SPI_TransmitReceive+0x1b8>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d014      	beq.n	8004a20 <HAL_SPI_TransmitReceive+0x1b8>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68da      	ldr	r2, [r3, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a00:	b292      	uxth	r2, r2
 8004a02:	801a      	strh	r2, [r3, #0]
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	1c9a      	adds	r2, r3, #2
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	639a      	str	r2, [r3, #56]	; 0x38
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	3b01      	subs	r3, #1
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a20:	f7fe fee6 	bl	80037f0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d80b      	bhi.n	8004a48 <HAL_SPI_TransmitReceive+0x1e0>
 8004a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a36:	d007      	beq.n	8004a48 <HAL_SPI_TransmitReceive+0x1e0>
 8004a38:	2303      	movs	r3, #3
 8004a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004a46:	e0b5      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x34c>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1a2      	bne.n	8004998 <HAL_SPI_TransmitReceive+0x130>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d19d      	bne.n	8004998 <HAL_SPI_TransmitReceive+0x130>
 8004a5c:	e080      	b.n	8004b60 <HAL_SPI_TransmitReceive+0x2f8>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_SPI_TransmitReceive+0x204>
 8004a66:	8b7b      	ldrh	r3, [r7, #26]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d16f      	bne.n	8004b4c <HAL_SPI_TransmitReceive+0x2e4>
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	7812      	ldrb	r2, [r2, #0]
 8004a78:	701a      	strb	r2, [r3, #0]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	631a      	str	r2, [r3, #48]	; 0x30
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	86da      	strh	r2, [r3, #54]	; 0x36
 8004a92:	e05b      	b.n	8004b4c <HAL_SPI_TransmitReceive+0x2e4>
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 0302 	and.w	r3, r3, #2
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d11c      	bne.n	8004adc <HAL_SPI_TransmitReceive+0x274>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d017      	beq.n	8004adc <HAL_SPI_TransmitReceive+0x274>
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d114      	bne.n	8004adc <HAL_SPI_TransmitReceive+0x274>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	330c      	adds	r3, #12
 8004abc:	7812      	ldrb	r2, [r2, #0]
 8004abe:	701a      	strb	r2, [r3, #0]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	631a      	str	r2, [r3, #48]	; 0x30
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ace:	b29b      	uxth	r3, r3
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ad8:	2300      	movs	r3, #0
 8004ada:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d119      	bne.n	8004b1e <HAL_SPI_TransmitReceive+0x2b6>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d014      	beq.n	8004b1e <HAL_SPI_TransmitReceive+0x2b6>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68da      	ldr	r2, [r3, #12]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004afe:	b2d2      	uxtb	r2, r2
 8004b00:	701a      	strb	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	639a      	str	r2, [r3, #56]	; 0x38
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	3b01      	subs	r3, #1
 8004b14:	b29a      	uxth	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b1e:	f7fe fe67 	bl	80037f0 <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d803      	bhi.n	8004b36 <HAL_SPI_TransmitReceive+0x2ce>
 8004b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b34:	d102      	bne.n	8004b3c <HAL_SPI_TransmitReceive+0x2d4>
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d107      	bne.n	8004b4c <HAL_SPI_TransmitReceive+0x2e4>
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004b4a:	e033      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x34c>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d19e      	bne.n	8004a94 <HAL_SPI_TransmitReceive+0x22c>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d199      	bne.n	8004a94 <HAL_SPI_TransmitReceive+0x22c>
 8004b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b62:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004b64:	68f8      	ldr	r0, [r7, #12]
 8004b66:	f000 f9b3 	bl	8004ed0 <SPI_EndRxTxTransaction>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d006      	beq.n	8004b7e <HAL_SPI_TransmitReceive+0x316>
 8004b70:	2301      	movs	r3, #1
 8004b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	655a      	str	r2, [r3, #84]	; 0x54
 8004b7c:	e01a      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x34c>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10a      	bne.n	8004b9c <HAL_SPI_TransmitReceive+0x334>
 8004b86:	2300      	movs	r3, #0
 8004b88:	617b      	str	r3, [r7, #20]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	617b      	str	r3, [r7, #20]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	617b      	str	r3, [r7, #20]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d003      	beq.n	8004bac <HAL_SPI_TransmitReceive+0x344>
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004baa:	e003      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x34c>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004bbc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3730      	adds	r7, #48	; 0x30
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <HAL_SPI_IRQHandler>:
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	61fb      	str	r3, [r7, #28]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	61bb      	str	r3, [r7, #24]
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10e      	bne.n	8004c08 <HAL_SPI_IRQHandler+0x40>
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d009      	beq.n	8004c08 <HAL_SPI_IRQHandler+0x40>
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d004      	beq.n	8004c08 <HAL_SPI_IRQHandler+0x40>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
 8004c06:	e0b7      	b.n	8004d78 <HAL_SPI_IRQHandler+0x1b0>
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d009      	beq.n	8004c26 <HAL_SPI_IRQHandler+0x5e>
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d004      	beq.n	8004c26 <HAL_SPI_IRQHandler+0x5e>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	4798      	blx	r3
 8004c24:	e0a8      	b.n	8004d78 <HAL_SPI_IRQHandler+0x1b0>
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	f003 0320 	and.w	r3, r3, #32
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d105      	bne.n	8004c3c <HAL_SPI_IRQHandler+0x74>
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	f000 809e 	beq.w	8004d78 <HAL_SPI_IRQHandler+0x1b0>
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	f003 0320 	and.w	r3, r3, #32
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f000 8098 	beq.w	8004d78 <HAL_SPI_IRQHandler+0x1b0>
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d023      	beq.n	8004c9a <HAL_SPI_IRQHandler+0xd2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d011      	beq.n	8004c82 <HAL_SPI_IRQHandler+0xba>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	f043 0204 	orr.w	r2, r3, #4
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	655a      	str	r2, [r3, #84]	; 0x54
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	e00b      	b.n	8004c9a <HAL_SPI_IRQHandler+0xd2>
 8004c82:	2300      	movs	r3, #0
 8004c84:	613b      	str	r3, [r7, #16]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	613b      	str	r3, [r7, #16]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	e06e      	b.n	8004d78 <HAL_SPI_IRQHandler+0x1b0>
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	f003 0320 	and.w	r3, r3, #32
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d014      	beq.n	8004cce <HAL_SPI_IRQHandler+0x106>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	f043 0201 	orr.w	r2, r3, #1
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	655a      	str	r2, [r3, #84]	; 0x54
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cca:	601a      	str	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d04f      	beq.n	8004d76 <HAL_SPI_IRQHandler+0x1ae>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ce4:	605a      	str	r2, [r3, #4]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2201      	movs	r2, #1
 8004cea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d104      	bne.n	8004d02 <HAL_SPI_IRQHandler+0x13a>
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	f003 0301 	and.w	r3, r3, #1
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d034      	beq.n	8004d6c <HAL_SPI_IRQHandler+0x1a4>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	685a      	ldr	r2, [r3, #4]
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f022 0203 	bic.w	r2, r2, #3
 8004d10:	605a      	str	r2, [r3, #4]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d011      	beq.n	8004d3e <HAL_SPI_IRQHandler+0x176>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1e:	4a18      	ldr	r2, [pc, #96]	; (8004d80 <HAL_SPI_IRQHandler+0x1b8>)
 8004d20:	635a      	str	r2, [r3, #52]	; 0x34
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d26:	4618      	mov	r0, r3
 8004d28:	f7fe fe86 	bl	8003a38 <HAL_DMA_Abort_IT>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d005      	beq.n	8004d3e <HAL_SPI_IRQHandler+0x176>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d016      	beq.n	8004d74 <HAL_SPI_IRQHandler+0x1ac>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4a:	4a0d      	ldr	r2, [pc, #52]	; (8004d80 <HAL_SPI_IRQHandler+0x1b8>)
 8004d4c:	635a      	str	r2, [r3, #52]	; 0x34
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fe fe70 	bl	8003a38 <HAL_DMA_Abort_IT>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00a      	beq.n	8004d74 <HAL_SPI_IRQHandler+0x1ac>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	655a      	str	r2, [r3, #84]	; 0x54
 8004d6a:	e003      	b.n	8004d74 <HAL_SPI_IRQHandler+0x1ac>
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f809 	bl	8004d84 <HAL_SPI_ErrorCallback>
 8004d72:	e000      	b.n	8004d76 <HAL_SPI_IRQHandler+0x1ae>
 8004d74:	bf00      	nop
 8004d76:	bf00      	nop
 8004d78:	3720      	adds	r7, #32
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	08004d97 	.word	0x08004d97

08004d84 <HAL_SPI_ErrorCallback>:
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc80      	pop	{r7}
 8004d94:	4770      	bx	lr

08004d96 <SPI_DMAAbortOnError>:
 8004d96:	b580      	push	{r7, lr}
 8004d98:	b084      	sub	sp, #16
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2200      	movs	r2, #0
 8004dae:	86da      	strh	r2, [r3, #54]	; 0x36
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff ffe7 	bl	8004d84 <HAL_SPI_ErrorCallback>
 8004db6:	bf00      	nop
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
	...

08004dc0 <SPI_WaitFlagStateUntilTimeout>:
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b088      	sub	sp, #32
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	71fb      	strb	r3, [r7, #7]
 8004dd0:	f7fe fd0e 	bl	80037f0 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	4413      	add	r3, r2
 8004dde:	61fb      	str	r3, [r7, #28]
 8004de0:	f7fe fd06 	bl	80037f0 <HAL_GetTick>
 8004de4:	61b8      	str	r0, [r7, #24]
 8004de6:	4b39      	ldr	r3, [pc, #228]	; (8004ecc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	015b      	lsls	r3, r3, #5
 8004dec:	0d1b      	lsrs	r3, r3, #20
 8004dee:	69fa      	ldr	r2, [r7, #28]
 8004df0:	fb02 f303 	mul.w	r3, r2, r3
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	e054      	b.n	8004ea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dfe:	d050      	beq.n	8004ea2 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8004e00:	f7fe fcf6 	bl	80037f0 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d902      	bls.n	8004e16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d13d      	bne.n	8004e92 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e24:	605a      	str	r2, [r3, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e2e:	d111      	bne.n	8004e54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e38:	d004      	beq.n	8004e44 <SPI_WaitFlagStateUntilTimeout+0x84>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e42:	d107      	bne.n	8004e54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e5c:	d10f      	bne.n	8004e7e <SPI_WaitFlagStateUntilTimeout+0xbe>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004e8e:	2303      	movs	r3, #3
 8004e90:	e017      	b.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0x102>
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d101      	bne.n	8004e9c <SPI_WaitFlagStateUntilTimeout+0xdc>
 8004e98:	2300      	movs	r3, #0
 8004e9a:	61fb      	str	r3, [r7, #28]
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	3b01      	subs	r3, #1
 8004ea0:	617b      	str	r3, [r7, #20]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	68ba      	ldr	r2, [r7, #8]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	bf0c      	ite	eq
 8004eb2:	2301      	moveq	r3, #1
 8004eb4:	2300      	movne	r3, #0
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	461a      	mov	r2, r3
 8004eba:	79fb      	ldrb	r3, [r7, #7]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d19b      	bne.n	8004df8 <SPI_WaitFlagStateUntilTimeout+0x38>
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3720      	adds	r7, #32
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	bf00      	nop
 8004ecc:	20000000 	.word	0x20000000

08004ed0 <SPI_EndRxTxTransaction>:
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b086      	sub	sp, #24
 8004ed4:	af02      	add	r7, sp, #8
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	9300      	str	r3, [sp, #0]
 8004ee0:	68bb      	ldr	r3, [r7, #8]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2180      	movs	r1, #128	; 0x80
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f7ff ff6a 	bl	8004dc0 <SPI_WaitFlagStateUntilTimeout>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d007      	beq.n	8004f02 <SPI_EndRxTxTransaction+0x32>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef6:	f043 0220 	orr.w	r2, r3, #32
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54
 8004efe:	2303      	movs	r3, #3
 8004f00:	e000      	b.n	8004f04 <SPI_EndRxTxTransaction+0x34>
 8004f02:	2300      	movs	r3, #0
 8004f04:	4618      	mov	r0, r3
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIM_Base_Init>:
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <HAL_TIM_Base_Init+0x12>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e041      	b.n	8004fa2 <HAL_TIM_Base_Init+0x96>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d106      	bne.n	8004f38 <HAL_TIM_Base_Init+0x2c>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f839 	bl	8004faa <HAL_TIM_Base_MspInit>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3304      	adds	r3, #4
 8004f48:	4619      	mov	r1, r3
 8004f4a:	4610      	mov	r0, r2
 8004f4c:	f000 fbfa 	bl	8005744 <TIM_Base_SetConfig>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_TIM_Base_MspInit>:
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
 8004fb2:	bf00      	nop
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIM_Base_Start_IT>:
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d001      	beq.n	8004fd4 <HAL_TIM_Base_Start_IT+0x18>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e03a      	b.n	800504a <HAL_TIM_Base_Start_IT+0x8e>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68da      	ldr	r2, [r3, #12]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	60da      	str	r2, [r3, #12]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a18      	ldr	r2, [pc, #96]	; (8005054 <HAL_TIM_Base_Start_IT+0x98>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d00e      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x58>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffe:	d009      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x58>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a14      	ldr	r2, [pc, #80]	; (8005058 <HAL_TIM_Base_Start_IT+0x9c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d004      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x58>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a13      	ldr	r2, [pc, #76]	; (800505c <HAL_TIM_Base_Start_IT+0xa0>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d111      	bne.n	8005038 <HAL_TIM_Base_Start_IT+0x7c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689b      	ldr	r3, [r3, #8]
 800501a:	f003 0307 	and.w	r3, r3, #7
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2b06      	cmp	r3, #6
 8005024:	d010      	beq.n	8005048 <HAL_TIM_Base_Start_IT+0x8c>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f042 0201 	orr.w	r2, r2, #1
 8005034:	601a      	str	r2, [r3, #0]
 8005036:	e007      	b.n	8005048 <HAL_TIM_Base_Start_IT+0x8c>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	2300      	movs	r3, #0
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	40012c00 	.word	0x40012c00
 8005058:	40000400 	.word	0x40000400
 800505c:	40000800 	.word	0x40000800

08005060 <HAL_TIM_Base_Stop_IT>:
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0201 	bic.w	r2, r2, #1
 8005076:	60da      	str	r2, [r3, #12]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6a1a      	ldr	r2, [r3, #32]
 800507e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005082:	4013      	ands	r3, r2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d10f      	bne.n	80050a8 <HAL_TIM_Base_Stop_IT+0x48>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	6a1a      	ldr	r2, [r3, #32]
 800508e:	f240 4344 	movw	r3, #1092	; 0x444
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d107      	bne.n	80050a8 <HAL_TIM_Base_Stop_IT+0x48>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	601a      	str	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050b0:	2300      	movs	r3, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bc80      	pop	{r7}
 80050ba:	4770      	bx	lr

080050bc <HAL_TIM_PWM_Init>:
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <HAL_TIM_PWM_Init+0x12>
 80050ca:	2301      	movs	r3, #1
 80050cc:	e041      	b.n	8005152 <HAL_TIM_PWM_Init+0x96>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d106      	bne.n	80050e8 <HAL_TIM_PWM_Init+0x2c>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f7fe f838 	bl	8003158 <HAL_TIM_PWM_MspInit>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3304      	adds	r3, #4
 80050f8:	4619      	mov	r1, r3
 80050fa:	4610      	mov	r0, r2
 80050fc:	f000 fb22 	bl	8005744 <TIM_Base_SetConfig>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005150:	2300      	movs	r3, #0
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
	...

0800515c <HAL_TIM_PWM_Start>:
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d109      	bne.n	8005180 <HAL_TIM_PWM_Start+0x24>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005172:	b2db      	uxtb	r3, r3
 8005174:	2b01      	cmp	r3, #1
 8005176:	bf14      	ite	ne
 8005178:	2301      	movne	r3, #1
 800517a:	2300      	moveq	r3, #0
 800517c:	b2db      	uxtb	r3, r3
 800517e:	e022      	b.n	80051c6 <HAL_TIM_PWM_Start+0x6a>
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2b04      	cmp	r3, #4
 8005184:	d109      	bne.n	800519a <HAL_TIM_PWM_Start+0x3e>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800518c:	b2db      	uxtb	r3, r3
 800518e:	2b01      	cmp	r3, #1
 8005190:	bf14      	ite	ne
 8005192:	2301      	movne	r3, #1
 8005194:	2300      	moveq	r3, #0
 8005196:	b2db      	uxtb	r3, r3
 8005198:	e015      	b.n	80051c6 <HAL_TIM_PWM_Start+0x6a>
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d109      	bne.n	80051b4 <HAL_TIM_PWM_Start+0x58>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	bf14      	ite	ne
 80051ac:	2301      	movne	r3, #1
 80051ae:	2300      	moveq	r3, #0
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	e008      	b.n	80051c6 <HAL_TIM_PWM_Start+0x6a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	bf14      	ite	ne
 80051c0:	2301      	movne	r3, #1
 80051c2:	2300      	moveq	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <HAL_TIM_PWM_Start+0x72>
 80051ca:	2301      	movs	r3, #1
 80051cc:	e05e      	b.n	800528c <HAL_TIM_PWM_Start+0x130>
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d104      	bne.n	80051de <HAL_TIM_PWM_Start+0x82>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051dc:	e013      	b.n	8005206 <HAL_TIM_PWM_Start+0xaa>
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d104      	bne.n	80051ee <HAL_TIM_PWM_Start+0x92>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051ec:	e00b      	b.n	8005206 <HAL_TIM_PWM_Start+0xaa>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b08      	cmp	r3, #8
 80051f2:	d104      	bne.n	80051fe <HAL_TIM_PWM_Start+0xa2>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051fc:	e003      	b.n	8005206 <HAL_TIM_PWM_Start+0xaa>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2201      	movs	r2, #1
 800520c:	6839      	ldr	r1, [r7, #0]
 800520e:	4618      	mov	r0, r3
 8005210:	f000 fc82 	bl	8005b18 <TIM_CCxChannelCmd>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a1e      	ldr	r2, [pc, #120]	; (8005294 <HAL_TIM_PWM_Start+0x138>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d107      	bne.n	800522e <HAL_TIM_PWM_Start+0xd2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800522c:	645a      	str	r2, [r3, #68]	; 0x44
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a18      	ldr	r2, [pc, #96]	; (8005294 <HAL_TIM_PWM_Start+0x138>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d00e      	beq.n	8005256 <HAL_TIM_PWM_Start+0xfa>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005240:	d009      	beq.n	8005256 <HAL_TIM_PWM_Start+0xfa>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a14      	ldr	r2, [pc, #80]	; (8005298 <HAL_TIM_PWM_Start+0x13c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d004      	beq.n	8005256 <HAL_TIM_PWM_Start+0xfa>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a12      	ldr	r2, [pc, #72]	; (800529c <HAL_TIM_PWM_Start+0x140>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d111      	bne.n	800527a <HAL_TIM_PWM_Start+0x11e>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 0307 	and.w	r3, r3, #7
 8005260:	60fb      	str	r3, [r7, #12]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2b06      	cmp	r3, #6
 8005266:	d010      	beq.n	800528a <HAL_TIM_PWM_Start+0x12e>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0201 	orr.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	e007      	b.n	800528a <HAL_TIM_PWM_Start+0x12e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f042 0201 	orr.w	r2, r2, #1
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	2300      	movs	r3, #0
 800528c:	4618      	mov	r0, r3
 800528e:	3710      	adds	r7, #16
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40012c00 	.word	0x40012c00
 8005298:	40000400 	.word	0x40000400
 800529c:	40000800 	.word	0x40000800

080052a0 <HAL_TIM_PWM_Stop>:
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fc30 	bl	8005b18 <TIM_CCxChannelCmd>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a29      	ldr	r2, [pc, #164]	; (8005364 <HAL_TIM_PWM_Stop+0xc4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d117      	bne.n	80052f2 <HAL_TIM_PWM_Stop+0x52>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6a1a      	ldr	r2, [r3, #32]
 80052c8:	f241 1311 	movw	r3, #4369	; 0x1111
 80052cc:	4013      	ands	r3, r2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10f      	bne.n	80052f2 <HAL_TIM_PWM_Stop+0x52>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	6a1a      	ldr	r2, [r3, #32]
 80052d8:	f240 4344 	movw	r3, #1092	; 0x444
 80052dc:	4013      	ands	r3, r2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d107      	bne.n	80052f2 <HAL_TIM_PWM_Stop+0x52>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80052f0:	645a      	str	r2, [r3, #68]	; 0x44
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6a1a      	ldr	r2, [r3, #32]
 80052f8:	f241 1311 	movw	r3, #4369	; 0x1111
 80052fc:	4013      	ands	r3, r2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10f      	bne.n	8005322 <HAL_TIM_PWM_Stop+0x82>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6a1a      	ldr	r2, [r3, #32]
 8005308:	f240 4344 	movw	r3, #1092	; 0x444
 800530c:	4013      	ands	r3, r2
 800530e:	2b00      	cmp	r3, #0
 8005310:	d107      	bne.n	8005322 <HAL_TIM_PWM_Stop+0x82>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0201 	bic.w	r2, r2, #1
 8005320:	601a      	str	r2, [r3, #0]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d104      	bne.n	8005332 <HAL_TIM_PWM_Stop+0x92>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005330:	e013      	b.n	800535a <HAL_TIM_PWM_Stop+0xba>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b04      	cmp	r3, #4
 8005336:	d104      	bne.n	8005342 <HAL_TIM_PWM_Stop+0xa2>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005340:	e00b      	b.n	800535a <HAL_TIM_PWM_Stop+0xba>
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b08      	cmp	r3, #8
 8005346:	d104      	bne.n	8005352 <HAL_TIM_PWM_Stop+0xb2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005350:	e003      	b.n	800535a <HAL_TIM_PWM_Stop+0xba>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800535a:	2300      	movs	r3, #0
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40012c00 	.word	0x40012c00

08005368 <HAL_TIM_IRQHandler>:
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b02      	cmp	r3, #2
 800537c:	d122      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x5c>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	68db      	ldr	r3, [r3, #12]
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b02      	cmp	r3, #2
 800538a:	d11b      	bne.n	80053c4 <HAL_TIM_IRQHandler+0x5c>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0202 	mvn.w	r2, #2
 8005394:	611a      	str	r2, [r3, #16]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	771a      	strb	r2, [r3, #28]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_TIM_IRQHandler+0x4a>
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f9af 	bl	800570e <HAL_TIM_IC_CaptureCallback>
 80053b0:	e005      	b.n	80053be <HAL_TIM_IRQHandler+0x56>
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 f9a2 	bl	80056fc <HAL_TIM_OC_DelayElapsedCallback>
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f9b1 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	771a      	strb	r2, [r3, #28]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	f003 0304 	and.w	r3, r3, #4
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d122      	bne.n	8005418 <HAL_TIM_IRQHandler+0xb0>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	f003 0304 	and.w	r3, r3, #4
 80053dc:	2b04      	cmp	r3, #4
 80053de:	d11b      	bne.n	8005418 <HAL_TIM_IRQHandler+0xb0>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f06f 0204 	mvn.w	r2, #4
 80053e8:	611a      	str	r2, [r3, #16]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2202      	movs	r2, #2
 80053ee:	771a      	strb	r2, [r3, #28]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699b      	ldr	r3, [r3, #24]
 80053f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_TIM_IRQHandler+0x9e>
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f985 	bl	800570e <HAL_TIM_IC_CaptureCallback>
 8005404:	e005      	b.n	8005412 <HAL_TIM_IRQHandler+0xaa>
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f978 	bl	80056fc <HAL_TIM_OC_DelayElapsedCallback>
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 f987 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2200      	movs	r2, #0
 8005416:	771a      	strb	r2, [r3, #28]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0308 	and.w	r3, r3, #8
 8005422:	2b08      	cmp	r3, #8
 8005424:	d122      	bne.n	800546c <HAL_TIM_IRQHandler+0x104>
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b08      	cmp	r3, #8
 8005432:	d11b      	bne.n	800546c <HAL_TIM_IRQHandler+0x104>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f06f 0208 	mvn.w	r2, #8
 800543c:	611a      	str	r2, [r3, #16]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2204      	movs	r2, #4
 8005442:	771a      	strb	r2, [r3, #28]
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f003 0303 	and.w	r3, r3, #3
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <HAL_TIM_IRQHandler+0xf2>
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f95b 	bl	800570e <HAL_TIM_IC_CaptureCallback>
 8005458:	e005      	b.n	8005466 <HAL_TIM_IRQHandler+0xfe>
 800545a:	6878      	ldr	r0, [r7, #4]
 800545c:	f000 f94e 	bl	80056fc <HAL_TIM_OC_DelayElapsedCallback>
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f000 f95d 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	771a      	strb	r2, [r3, #28]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	f003 0310 	and.w	r3, r3, #16
 8005476:	2b10      	cmp	r3, #16
 8005478:	d122      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x158>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f003 0310 	and.w	r3, r3, #16
 8005484:	2b10      	cmp	r3, #16
 8005486:	d11b      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x158>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f06f 0210 	mvn.w	r2, #16
 8005490:	611a      	str	r2, [r3, #16]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2208      	movs	r2, #8
 8005496:	771a      	strb	r2, [r3, #28]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	69db      	ldr	r3, [r3, #28]
 800549e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_TIM_IRQHandler+0x146>
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f931 	bl	800570e <HAL_TIM_IC_CaptureCallback>
 80054ac:	e005      	b.n	80054ba <HAL_TIM_IRQHandler+0x152>
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f924 	bl	80056fc <HAL_TIM_OC_DelayElapsedCallback>
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f933 	bl	8005720 <HAL_TIM_PWM_PulseFinishedCallback>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	771a      	strb	r2, [r3, #28]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d10e      	bne.n	80054ec <HAL_TIM_IRQHandler+0x184>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0301 	and.w	r3, r3, #1
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d107      	bne.n	80054ec <HAL_TIM_IRQHandler+0x184>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0201 	mvn.w	r2, #1
 80054e4:	611a      	str	r2, [r3, #16]
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f7fd fd00 	bl	8002eec <HAL_TIM_PeriodElapsedCallback>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f6:	2b80      	cmp	r3, #128	; 0x80
 80054f8:	d10e      	bne.n	8005518 <HAL_TIM_IRQHandler+0x1b0>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005504:	2b80      	cmp	r3, #128	; 0x80
 8005506:	d107      	bne.n	8005518 <HAL_TIM_IRQHandler+0x1b0>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005510:	611a      	str	r2, [r3, #16]
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 fbdc 	bl	8005cd0 <HAL_TIMEx_BreakCallback>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005522:	2b40      	cmp	r3, #64	; 0x40
 8005524:	d10e      	bne.n	8005544 <HAL_TIM_IRQHandler+0x1dc>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005530:	2b40      	cmp	r3, #64	; 0x40
 8005532:	d107      	bne.n	8005544 <HAL_TIM_IRQHandler+0x1dc>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800553c:	611a      	str	r2, [r3, #16]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f8f7 	bl	8005732 <HAL_TIM_TriggerCallback>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0320 	and.w	r3, r3, #32
 800554e:	2b20      	cmp	r3, #32
 8005550:	d10e      	bne.n	8005570 <HAL_TIM_IRQHandler+0x208>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b20      	cmp	r3, #32
 800555e:	d107      	bne.n	8005570 <HAL_TIM_IRQHandler+0x208>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0220 	mvn.w	r2, #32
 8005568:	611a      	str	r2, [r3, #16]
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fba7 	bl	8005cbe <HAL_TIMEx_CommutCallback>
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_TIM_PWM_ConfigChannel>:
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	2300      	movs	r3, #0
 8005586:	75fb      	strb	r3, [r7, #23]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800558e:	2b01      	cmp	r3, #1
 8005590:	d101      	bne.n	8005596 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005592:	2302      	movs	r3, #2
 8005594:	e0ae      	b.n	80056f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b0c      	cmp	r3, #12
 80055a2:	f200 809f 	bhi.w	80056e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80055a6:	a201      	add	r2, pc, #4	; (adr r2, 80055ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80055a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ac:	080055e1 	.word	0x080055e1
 80055b0:	080056e5 	.word	0x080056e5
 80055b4:	080056e5 	.word	0x080056e5
 80055b8:	080056e5 	.word	0x080056e5
 80055bc:	08005621 	.word	0x08005621
 80055c0:	080056e5 	.word	0x080056e5
 80055c4:	080056e5 	.word	0x080056e5
 80055c8:	080056e5 	.word	0x080056e5
 80055cc:	08005663 	.word	0x08005663
 80055d0:	080056e5 	.word	0x080056e5
 80055d4:	080056e5 	.word	0x080056e5
 80055d8:	080056e5 	.word	0x080056e5
 80055dc:	080056a3 	.word	0x080056a3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	68b9      	ldr	r1, [r7, #8]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 f90e 	bl	8005808 <TIM_OC1_SetConfig>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699a      	ldr	r2, [r3, #24]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0208 	orr.w	r2, r2, #8
 80055fa:	619a      	str	r2, [r3, #24]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0204 	bic.w	r2, r2, #4
 800560a:	619a      	str	r2, [r3, #24]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6999      	ldr	r1, [r3, #24]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	430a      	orrs	r2, r1
 800561c:	619a      	str	r2, [r3, #24]
 800561e:	e064      	b.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x172>
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68b9      	ldr	r1, [r7, #8]
 8005626:	4618      	mov	r0, r3
 8005628:	f000 f954 	bl	80058d4 <TIM_OC2_SetConfig>
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	699a      	ldr	r2, [r3, #24]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800563a:	619a      	str	r2, [r3, #24]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564a:	619a      	str	r2, [r3, #24]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6999      	ldr	r1, [r3, #24]
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	021a      	lsls	r2, r3, #8
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	619a      	str	r2, [r3, #24]
 8005660:	e043      	b.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x172>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68b9      	ldr	r1, [r7, #8]
 8005668:	4618      	mov	r0, r3
 800566a:	f000 f99d 	bl	80059a8 <TIM_OC3_SetConfig>
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f042 0208 	orr.w	r2, r2, #8
 800567c:	61da      	str	r2, [r3, #28]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f022 0204 	bic.w	r2, r2, #4
 800568c:	61da      	str	r2, [r3, #28]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69d9      	ldr	r1, [r3, #28]
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	691a      	ldr	r2, [r3, #16]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	430a      	orrs	r2, r1
 800569e:	61da      	str	r2, [r3, #28]
 80056a0:	e023      	b.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x172>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68b9      	ldr	r1, [r7, #8]
 80056a8:	4618      	mov	r0, r3
 80056aa:	f000 f9e7 	bl	8005a7c <TIM_OC4_SetConfig>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056bc:	61da      	str	r2, [r3, #28]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69da      	ldr	r2, [r3, #28]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056cc:	61da      	str	r2, [r3, #28]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69d9      	ldr	r1, [r3, #28]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	021a      	lsls	r2, r3, #8
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	430a      	orrs	r2, r1
 80056e0:	61da      	str	r2, [r3, #28]
 80056e2:	e002      	b.n	80056ea <HAL_TIM_PWM_ConfigChannel+0x172>
 80056e4:	2301      	movs	r3, #1
 80056e6:	75fb      	strb	r3, [r7, #23]
 80056e8:	bf00      	nop
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80056f2:	7dfb      	ldrb	r3, [r7, #23]
 80056f4:	4618      	mov	r0, r3
 80056f6:	3718      	adds	r7, #24
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <HAL_TIM_OC_DelayElapsedCallback>:
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	bf00      	nop
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	bc80      	pop	{r7}
 800570c:	4770      	bx	lr

0800570e <HAL_TIM_IC_CaptureCallback>:
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	bc80      	pop	{r7}
 800571e:	4770      	bx	lr

08005720 <HAL_TIM_PWM_PulseFinishedCallback>:
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	bc80      	pop	{r7}
 8005730:	4770      	bx	lr

08005732 <HAL_TIM_TriggerCallback>:
 8005732:	b480      	push	{r7}
 8005734:	b083      	sub	sp, #12
 8005736:	af00      	add	r7, sp, #0
 8005738:	6078      	str	r0, [r7, #4]
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	bc80      	pop	{r7}
 8005742:	4770      	bx	lr

08005744 <TIM_Base_SetConfig>:
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a29      	ldr	r2, [pc, #164]	; (80057fc <TIM_Base_SetConfig+0xb8>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d00b      	beq.n	8005774 <TIM_Base_SetConfig+0x30>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005762:	d007      	beq.n	8005774 <TIM_Base_SetConfig+0x30>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a26      	ldr	r2, [pc, #152]	; (8005800 <TIM_Base_SetConfig+0xbc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d003      	beq.n	8005774 <TIM_Base_SetConfig+0x30>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a25      	ldr	r2, [pc, #148]	; (8005804 <TIM_Base_SetConfig+0xc0>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d108      	bne.n	8005786 <TIM_Base_SetConfig+0x42>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4313      	orrs	r3, r2
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <TIM_Base_SetConfig+0xb8>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00b      	beq.n	80057a6 <TIM_Base_SetConfig+0x62>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005794:	d007      	beq.n	80057a6 <TIM_Base_SetConfig+0x62>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a19      	ldr	r2, [pc, #100]	; (8005800 <TIM_Base_SetConfig+0xbc>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d003      	beq.n	80057a6 <TIM_Base_SetConfig+0x62>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a18      	ldr	r2, [pc, #96]	; (8005804 <TIM_Base_SetConfig+0xc0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d108      	bne.n	80057b8 <TIM_Base_SetConfig+0x74>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ac:	60fb      	str	r3, [r7, #12]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	629a      	str	r2, [r3, #40]	; 0x28
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a07      	ldr	r2, [pc, #28]	; (80057fc <TIM_Base_SetConfig+0xb8>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d103      	bne.n	80057ec <TIM_Base_SetConfig+0xa8>
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	691a      	ldr	r2, [r3, #16]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	631a      	str	r2, [r3, #48]	; 0x30
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	615a      	str	r2, [r3, #20]
 80057f2:	bf00      	nop
 80057f4:	3714      	adds	r7, #20
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bc80      	pop	{r7}
 80057fa:	4770      	bx	lr
 80057fc:	40012c00 	.word	0x40012c00
 8005800:	40000400 	.word	0x40000400
 8005804:	40000800 	.word	0x40000800

08005808 <TIM_OC1_SetConfig>:
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	f023 0201 	bic.w	r2, r3, #1
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	621a      	str	r2, [r3, #32]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005836:	60fb      	str	r3, [r7, #12]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f023 0303 	bic.w	r3, r3, #3
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	f023 0302 	bic.w	r3, r3, #2
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a1c      	ldr	r2, [pc, #112]	; (80058d0 <TIM_OC1_SetConfig+0xc8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d10c      	bne.n	800587e <TIM_OC1_SetConfig+0x76>
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f023 0308 	bic.w	r3, r3, #8
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4313      	orrs	r3, r2
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	f023 0304 	bic.w	r3, r3, #4
 800587c:	617b      	str	r3, [r7, #20]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a13      	ldr	r2, [pc, #76]	; (80058d0 <TIM_OC1_SetConfig+0xc8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d111      	bne.n	80058aa <TIM_OC1_SetConfig+0xa2>
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800588c:	613b      	str	r3, [r7, #16]
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	695b      	ldr	r3, [r3, #20]
 800589a:	693a      	ldr	r2, [r7, #16]
 800589c:	4313      	orrs	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	693a      	ldr	r2, [r7, #16]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	613b      	str	r3, [r7, #16]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	605a      	str	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	619a      	str	r2, [r3, #24]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	635a      	str	r2, [r3, #52]	; 0x34
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	621a      	str	r2, [r3, #32]
 80058c4:	bf00      	nop
 80058c6:	371c      	adds	r7, #28
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bc80      	pop	{r7}
 80058cc:	4770      	bx	lr
 80058ce:	bf00      	nop
 80058d0:	40012c00 	.word	0x40012c00

080058d4 <TIM_OC2_SetConfig>:
 80058d4:	b480      	push	{r7}
 80058d6:	b087      	sub	sp, #28
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a1b      	ldr	r3, [r3, #32]
 80058e2:	617b      	str	r3, [r7, #20]
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	f023 0210 	bic.w	r2, r3, #16
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	621a      	str	r2, [r3, #32]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	613b      	str	r3, [r7, #16]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	60fb      	str	r3, [r7, #12]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800590a:	60fb      	str	r3, [r7, #12]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f023 0320 	bic.w	r3, r3, #32
 800591e:	617b      	str	r3, [r7, #20]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	697a      	ldr	r2, [r7, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a1d      	ldr	r2, [pc, #116]	; (80059a4 <TIM_OC2_SetConfig+0xd0>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d10d      	bne.n	8005950 <TIM_OC2_SetConfig+0x7c>
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800593a:	617b      	str	r3, [r7, #20]
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800594e:	617b      	str	r3, [r7, #20]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a14      	ldr	r2, [pc, #80]	; (80059a4 <TIM_OC2_SetConfig+0xd0>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d113      	bne.n	8005980 <TIM_OC2_SetConfig+0xac>
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800595e:	613b      	str	r3, [r7, #16]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005966:	613b      	str	r3, [r7, #16]
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	695b      	ldr	r3, [r3, #20]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	693a      	ldr	r2, [r7, #16]
 8005970:	4313      	orrs	r3, r2
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	4313      	orrs	r3, r2
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	605a      	str	r2, [r3, #4]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	619a      	str	r2, [r3, #24]
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	685a      	ldr	r2, [r3, #4]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	639a      	str	r2, [r3, #56]	; 0x38
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	621a      	str	r2, [r3, #32]
 800599a:	bf00      	nop
 800599c:	371c      	adds	r7, #28
 800599e:	46bd      	mov	sp, r7
 80059a0:	bc80      	pop	{r7}
 80059a2:	4770      	bx	lr
 80059a4:	40012c00 	.word	0x40012c00

080059a8 <TIM_OC3_SetConfig>:
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	621a      	str	r2, [r3, #32]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	613b      	str	r3, [r7, #16]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0303 	bic.w	r3, r3, #3
 80059de:	60fb      	str	r3, [r7, #12]
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059f0:	617b      	str	r3, [r7, #20]
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	021b      	lsls	r3, r3, #8
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a1d      	ldr	r2, [pc, #116]	; (8005a78 <TIM_OC3_SetConfig+0xd0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d10d      	bne.n	8005a22 <TIM_OC3_SetConfig+0x7a>
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a0c:	617b      	str	r3, [r7, #20]
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	021b      	lsls	r3, r3, #8
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a20:	617b      	str	r3, [r7, #20]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a14      	ldr	r2, [pc, #80]	; (8005a78 <TIM_OC3_SetConfig+0xd0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d113      	bne.n	8005a52 <TIM_OC3_SetConfig+0xaa>
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a30:	613b      	str	r3, [r7, #16]
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	693a      	ldr	r2, [r7, #16]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	699b      	ldr	r3, [r3, #24]
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	693a      	ldr	r2, [r7, #16]
 8005a56:	605a      	str	r2, [r3, #4]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	61da      	str	r2, [r3, #28]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	63da      	str	r2, [r3, #60]	; 0x3c
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	621a      	str	r2, [r3, #32]
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bc80      	pop	{r7}
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40012c00 	.word	0x40012c00

08005a7c <TIM_OC4_SetConfig>:
 8005a7c:	b480      	push	{r7}
 8005a7e:	b087      	sub	sp, #28
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
 8005a84:	6039      	str	r1, [r7, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	613b      	str	r3, [r7, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	621a      	str	r2, [r3, #32]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	685b      	ldr	r3, [r3, #4]
 8005a9c:	617b      	str	r3, [r7, #20]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	69db      	ldr	r3, [r3, #28]
 8005aa2:	60fb      	str	r3, [r7, #12]
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ab2:	60fb      	str	r3, [r7, #12]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	021b      	lsls	r3, r3, #8
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ac6:	613b      	str	r3, [r7, #16]
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	031b      	lsls	r3, r3, #12
 8005ace:	693a      	ldr	r2, [r7, #16]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	613b      	str	r3, [r7, #16]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a0f      	ldr	r2, [pc, #60]	; (8005b14 <TIM_OC4_SetConfig+0x98>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d109      	bne.n	8005af0 <TIM_OC4_SetConfig+0x74>
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ae2:	617b      	str	r3, [r7, #20]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	019b      	lsls	r3, r3, #6
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	605a      	str	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	61da      	str	r2, [r3, #28]
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	641a      	str	r2, [r3, #64]	; 0x40
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	621a      	str	r2, [r3, #32]
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bc80      	pop	{r7}
 8005b12:	4770      	bx	lr
 8005b14:	40012c00 	.word	0x40012c00

08005b18 <TIM_CCxChannelCmd>:
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b30:	617b      	str	r3, [r7, #20]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a1a      	ldr	r2, [r3, #32]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	401a      	ands	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	621a      	str	r2, [r3, #32]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6a1a      	ldr	r2, [r3, #32]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	f003 031f 	and.w	r3, r3, #31
 8005b4a:	6879      	ldr	r1, [r7, #4]
 8005b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b50:	431a      	orrs	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	621a      	str	r2, [r3, #32]
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bc80      	pop	{r7}
 8005b5e:	4770      	bx	lr

08005b60 <HAL_TIMEx_MasterConfigSynchronization>:
 8005b60:	b480      	push	{r7}
 8005b62:	b085      	sub	sp, #20
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d101      	bne.n	8005b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b74:	2302      	movs	r3, #2
 8005b76:	e046      	b.n	8005c06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	60bb      	str	r3, [r7, #8]
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b9e:	60fb      	str	r3, [r7, #12]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	68fa      	ldr	r2, [r7, #12]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	605a      	str	r2, [r3, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a16      	ldr	r2, [pc, #88]	; (8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00e      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bc4:	d009      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a12      	ldr	r2, [pc, #72]	; (8005c14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d004      	beq.n	8005bda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a10      	ldr	r2, [pc, #64]	; (8005c18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d10c      	bne.n	8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be0:	60bb      	str	r3, [r7, #8]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60bb      	str	r3, [r7, #8]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68ba      	ldr	r2, [r7, #8]
 8005bf2:	609a      	str	r2, [r3, #8]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c04:	2300      	movs	r3, #0
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr
 8005c10:	40012c00 	.word	0x40012c00
 8005c14:	40000400 	.word	0x40000400
 8005c18:	40000800 	.word	0x40000800

08005c1c <HAL_TIMEx_ConfigBreakDeadTime>:
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e03d      	b.n	8005cb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	60fb      	str	r3, [r7, #12]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	645a      	str	r2, [r3, #68]	; 0x44
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3714      	adds	r7, #20
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bc80      	pop	{r7}
 8005cbc:	4770      	bx	lr

08005cbe <HAL_TIMEx_CommutCallback>:
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bc80      	pop	{r7}
 8005cce:	4770      	bx	lr

08005cd0 <HAL_TIMEx_BreakCallback>:
 8005cd0:	b480      	push	{r7}
 8005cd2:	b083      	sub	sp, #12
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	bf00      	nop
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bc80      	pop	{r7}
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_UART_Init>:
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <HAL_UART_Init+0x12>
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e042      	b.n	8005d7a <HAL_UART_Init+0x98>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <HAL_UART_Init+0x2c>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7fd faf3 	bl	80032f4 <HAL_UART_MspInit>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2224      	movs	r2, #36	; 0x24
 8005d12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d24:	60da      	str	r2, [r3, #12]
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fe50 	bl	80069cc <UART_SetConfig>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d3a:	611a      	str	r2, [r3, #16]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695a      	ldr	r2, [r3, #20]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d4a:	615a      	str	r2, [r3, #20]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d5a:	60da      	str	r2, [r3, #12]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	645a      	str	r2, [r3, #68]	; 0x44
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	635a      	str	r2, [r3, #52]	; 0x34
 8005d78:	2300      	movs	r3, #0
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3708      	adds	r7, #8
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <HAL_HalfDuplex_Init>:
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b082      	sub	sp, #8
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d101      	bne.n	8005d94 <HAL_HalfDuplex_Init+0x12>
 8005d90:	2301      	movs	r3, #1
 8005d92:	e04a      	b.n	8005e2a <HAL_HalfDuplex_Init+0xa8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d106      	bne.n	8005dae <HAL_HalfDuplex_Init+0x2c>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f7fd faa3 	bl	80032f4 <HAL_UART_MspInit>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2224      	movs	r2, #36	; 0x24
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dc4:	60da      	str	r2, [r3, #12]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fe00 	bl	80069cc <UART_SetConfig>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005dda:	611a      	str	r2, [r3, #16]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695a      	ldr	r2, [r3, #20]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005dea:	615a      	str	r2, [r3, #20]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	695a      	ldr	r2, [r3, #20]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f042 0208 	orr.w	r2, r2, #8
 8005dfa:	615a      	str	r2, [r3, #20]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	68da      	ldr	r2, [r3, #12]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e0a:	60da      	str	r2, [r3, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	645a      	str	r2, [r3, #68]	; 0x44
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2220      	movs	r2, #32
 8005e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	635a      	str	r2, [r3, #52]	; 0x34
 8005e28:	2300      	movs	r3, #0
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <HAL_UART_Transmit>:
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b08a      	sub	sp, #40	; 0x28
 8005e36:	af02      	add	r7, sp, #8
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	603b      	str	r3, [r7, #0]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	80fb      	strh	r3, [r7, #6]
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e4c:	b2db      	uxtb	r3, r3
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d16d      	bne.n	8005f2e <HAL_UART_Transmit+0xfc>
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <HAL_UART_Transmit+0x2c>
 8005e58:	88fb      	ldrh	r3, [r7, #6]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d101      	bne.n	8005e62 <HAL_UART_Transmit+0x30>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e066      	b.n	8005f30 <HAL_UART_Transmit+0xfe>
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2200      	movs	r2, #0
 8005e66:	645a      	str	r2, [r3, #68]	; 0x44
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2221      	movs	r2, #33	; 0x21
 8005e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e70:	f7fd fcbe 	bl	80037f0 <HAL_GetTick>
 8005e74:	6178      	str	r0, [r7, #20]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	88fa      	ldrh	r2, [r7, #6]
 8005e7a:	849a      	strh	r2, [r3, #36]	; 0x24
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	88fa      	ldrh	r2, [r7, #6]
 8005e80:	84da      	strh	r2, [r3, #38]	; 0x26
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e8a:	d108      	bne.n	8005e9e <HAL_UART_Transmit+0x6c>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d104      	bne.n	8005e9e <HAL_UART_Transmit+0x6c>
 8005e94:	2300      	movs	r3, #0
 8005e96:	61fb      	str	r3, [r7, #28]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	61bb      	str	r3, [r7, #24]
 8005e9c:	e003      	b.n	8005ea6 <HAL_UART_Transmit+0x74>
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	61fb      	str	r3, [r7, #28]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	61bb      	str	r3, [r7, #24]
 8005ea6:	e02a      	b.n	8005efe <HAL_UART_Transmit+0xcc>
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	9300      	str	r3, [sp, #0]
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	2180      	movs	r1, #128	; 0x80
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f000 fb48 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d001      	beq.n	8005ec2 <HAL_UART_Transmit+0x90>
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e036      	b.n	8005f30 <HAL_UART_Transmit+0xfe>
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10b      	bne.n	8005ee0 <HAL_UART_Transmit+0xae>
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	461a      	mov	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ed6:	605a      	str	r2, [r3, #4]
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	3302      	adds	r3, #2
 8005edc:	61bb      	str	r3, [r7, #24]
 8005ede:	e007      	b.n	8005ef0 <HAL_UART_Transmit+0xbe>
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	781a      	ldrb	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	605a      	str	r2, [r3, #4]
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	3301      	adds	r3, #1
 8005eee:	61fb      	str	r3, [r7, #28]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	b29a      	uxth	r2, r3
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	84da      	strh	r2, [r3, #38]	; 0x26
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1cf      	bne.n	8005ea8 <HAL_UART_Transmit+0x76>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	9300      	str	r3, [sp, #0]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	2140      	movs	r1, #64	; 0x40
 8005f12:	68f8      	ldr	r0, [r7, #12]
 8005f14:	f000 fb18 	bl	8006548 <UART_WaitOnFlagUntilTimeout>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d001      	beq.n	8005f22 <HAL_UART_Transmit+0xf0>
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e006      	b.n	8005f30 <HAL_UART_Transmit+0xfe>
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	e000      	b.n	8005f30 <HAL_UART_Transmit+0xfe>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	4618      	mov	r0, r3
 8005f32:	3720      	adds	r7, #32
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <HAL_UART_Receive_IT>:
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b084      	sub	sp, #16
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	60f8      	str	r0, [r7, #12]
 8005f40:	60b9      	str	r1, [r7, #8]
 8005f42:	4613      	mov	r3, r2
 8005f44:	80fb      	strh	r3, [r7, #6]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	2b20      	cmp	r3, #32
 8005f50:	d112      	bne.n	8005f78 <HAL_UART_Receive_IT+0x40>
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_UART_Receive_IT+0x26>
 8005f58:	88fb      	ldrh	r3, [r7, #6]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d101      	bne.n	8005f62 <HAL_UART_Receive_IT+0x2a>
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e00b      	b.n	8005f7a <HAL_UART_Receive_IT+0x42>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30
 8005f68:	88fb      	ldrh	r3, [r7, #6]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 fb58 	bl	8006624 <UART_Start_Receive_IT>
 8005f74:	4603      	mov	r3, r0
 8005f76:	e000      	b.n	8005f7a <HAL_UART_Receive_IT+0x42>
 8005f78:	2302      	movs	r3, #2
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_UART_IRQHandler>:
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b0ba      	sub	sp, #232	; 0xe8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005faa:	2300      	movs	r3, #0
 8005fac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fba:	f003 030f 	and.w	r3, r3, #15
 8005fbe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d10f      	bne.n	8005fea <HAL_UART_IRQHandler+0x66>
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d009      	beq.n	8005fea <HAL_UART_IRQHandler+0x66>
 8005fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <HAL_UART_IRQHandler+0x66>
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f000 fc34 	bl	8006850 <UART_Receive_IT>
 8005fe8:	e25b      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
 8005fea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 80de 	beq.w	80061b0 <HAL_UART_IRQHandler+0x22c>
 8005ff4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ff8:	f003 0301 	and.w	r3, r3, #1
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <HAL_UART_IRQHandler+0x8a>
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006004:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 80d1 	beq.w	80061b0 <HAL_UART_IRQHandler+0x22c>
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00b      	beq.n	8006032 <HAL_UART_IRQHandler+0xae>
 800601a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006022:	2b00      	cmp	r3, #0
 8006024:	d005      	beq.n	8006032 <HAL_UART_IRQHandler+0xae>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602a:	f043 0201 	orr.w	r2, r3, #1
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	645a      	str	r2, [r3, #68]	; 0x44
 8006032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006036:	f003 0304 	and.w	r3, r3, #4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00b      	beq.n	8006056 <HAL_UART_IRQHandler+0xd2>
 800603e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d005      	beq.n	8006056 <HAL_UART_IRQHandler+0xd2>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604e:	f043 0202 	orr.w	r2, r3, #2
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	645a      	str	r2, [r3, #68]	; 0x44
 8006056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800605a:	f003 0302 	and.w	r3, r3, #2
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00b      	beq.n	800607a <HAL_UART_IRQHandler+0xf6>
 8006062:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d005      	beq.n	800607a <HAL_UART_IRQHandler+0xf6>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006072:	f043 0204 	orr.w	r2, r3, #4
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	645a      	str	r2, [r3, #68]	; 0x44
 800607a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800607e:	f003 0308 	and.w	r3, r3, #8
 8006082:	2b00      	cmp	r3, #0
 8006084:	d011      	beq.n	80060aa <HAL_UART_IRQHandler+0x126>
 8006086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d105      	bne.n	800609e <HAL_UART_IRQHandler+0x11a>
 8006092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006096:	f003 0301 	and.w	r3, r3, #1
 800609a:	2b00      	cmp	r3, #0
 800609c:	d005      	beq.n	80060aa <HAL_UART_IRQHandler+0x126>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a2:	f043 0208 	orr.w	r2, r3, #8
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	645a      	str	r2, [r3, #68]	; 0x44
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 81f2 	beq.w	8006498 <HAL_UART_IRQHandler+0x514>
 80060b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b8:	f003 0320 	and.w	r3, r3, #32
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <HAL_UART_IRQHandler+0x14e>
 80060c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060c4:	f003 0320 	and.w	r3, r3, #32
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <HAL_UART_IRQHandler+0x14e>
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 fbbf 	bl	8006850 <UART_Receive_IT>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b00      	cmp	r3, #0
 80060de:	bf14      	ite	ne
 80060e0:	2301      	movne	r3, #1
 80060e2:	2300      	moveq	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d103      	bne.n	80060fe <HAL_UART_IRQHandler+0x17a>
 80060f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d04f      	beq.n	800619e <HAL_UART_IRQHandler+0x21a>
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 fac9 	bl	8006696 <UART_EndRxTransfer>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800610e:	2b00      	cmp	r3, #0
 8006110:	d041      	beq.n	8006196 <HAL_UART_IRQHandler+0x212>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3314      	adds	r3, #20
 8006118:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800611c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006120:	e853 3f00 	ldrex	r3, [r3]
 8006124:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006128:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800612c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006130:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3314      	adds	r3, #20
 800613a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800613e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006142:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006146:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800614a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d1d9      	bne.n	8006112 <HAL_UART_IRQHandler+0x18e>
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006162:	2b00      	cmp	r3, #0
 8006164:	d013      	beq.n	800618e <HAL_UART_IRQHandler+0x20a>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800616a:	4a7e      	ldr	r2, [pc, #504]	; (8006364 <HAL_UART_IRQHandler+0x3e0>)
 800616c:	635a      	str	r2, [r3, #52]	; 0x34
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006172:	4618      	mov	r0, r3
 8006174:	f7fd fc60 	bl	8003a38 <HAL_DMA_Abort_IT>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d016      	beq.n	80061ac <HAL_UART_IRQHandler+0x228>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006184:	687a      	ldr	r2, [r7, #4]
 8006186:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006188:	4610      	mov	r0, r2
 800618a:	4798      	blx	r3
 800618c:	e00e      	b.n	80061ac <HAL_UART_IRQHandler+0x228>
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 f993 	bl	80064ba <HAL_UART_ErrorCallback>
 8006194:	e00a      	b.n	80061ac <HAL_UART_IRQHandler+0x228>
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 f98f 	bl	80064ba <HAL_UART_ErrorCallback>
 800619c:	e006      	b.n	80061ac <HAL_UART_IRQHandler+0x228>
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f98b 	bl	80064ba <HAL_UART_ErrorCallback>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	645a      	str	r2, [r3, #68]	; 0x44
 80061aa:	e175      	b.n	8006498 <HAL_UART_IRQHandler+0x514>
 80061ac:	bf00      	nop
 80061ae:	e173      	b.n	8006498 <HAL_UART_IRQHandler+0x514>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	f040 814f 	bne.w	8006458 <HAL_UART_IRQHandler+0x4d4>
 80061ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061be:	f003 0310 	and.w	r3, r3, #16
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8148 	beq.w	8006458 <HAL_UART_IRQHandler+0x4d4>
 80061c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061cc:	f003 0310 	and.w	r3, r3, #16
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 8141 	beq.w	8006458 <HAL_UART_IRQHandler+0x4d4>
 80061d6:	2300      	movs	r3, #0
 80061d8:	60bb      	str	r3, [r7, #8]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	60bb      	str	r3, [r7, #8]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	60bb      	str	r3, [r7, #8]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f000 80b6 	beq.w	8006368 <HAL_UART_IRQHandler+0x3e4>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8006208:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800620c:	2b00      	cmp	r3, #0
 800620e:	f000 8145 	beq.w	800649c <HAL_UART_IRQHandler+0x518>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006216:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800621a:	429a      	cmp	r2, r3
 800621c:	f080 813e 	bcs.w	800649c <HAL_UART_IRQHandler+0x518>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006226:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	2b20      	cmp	r3, #32
 8006230:	f000 8088 	beq.w	8006344 <HAL_UART_IRQHandler+0x3c0>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	330c      	adds	r3, #12
 800623a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800623e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800624a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800624e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006252:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	330c      	adds	r3, #12
 800625c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006260:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006264:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006268:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800626c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006270:	e841 2300 	strex	r3, r2, [r1]
 8006274:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006278:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1d9      	bne.n	8006234 <HAL_UART_IRQHandler+0x2b0>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3314      	adds	r3, #20
 8006286:	677b      	str	r3, [r7, #116]	; 0x74
 8006288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	673b      	str	r3, [r7, #112]	; 0x70
 8006290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006292:	f023 0301 	bic.w	r3, r3, #1
 8006296:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	3314      	adds	r3, #20
 80062a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80062a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80062a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80062aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80062ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80062b0:	e841 2300 	strex	r3, r2, [r1]
 80062b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80062b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1e1      	bne.n	8006280 <HAL_UART_IRQHandler+0x2fc>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3314      	adds	r3, #20
 80062c2:	663b      	str	r3, [r7, #96]	; 0x60
 80062c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80062c6:	e853 3f00 	ldrex	r3, [r3]
 80062ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	3314      	adds	r3, #20
 80062dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80062e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80062e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062e8:	e841 2300 	strex	r3, r2, [r1]
 80062ec:	667b      	str	r3, [r7, #100]	; 0x64
 80062ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1e3      	bne.n	80062bc <HAL_UART_IRQHandler+0x338>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	631a      	str	r2, [r3, #48]	; 0x30
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	330c      	adds	r3, #12
 8006308:	64fb      	str	r3, [r7, #76]	; 0x4c
 800630a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	64bb      	str	r3, [r7, #72]	; 0x48
 8006312:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006314:	f023 0310 	bic.w	r3, r3, #16
 8006318:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	330c      	adds	r3, #12
 8006322:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006326:	65ba      	str	r2, [r7, #88]	; 0x58
 8006328:	657b      	str	r3, [r7, #84]	; 0x54
 800632a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800632c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800632e:	e841 2300 	strex	r3, r2, [r1]
 8006332:	653b      	str	r3, [r7, #80]	; 0x50
 8006334:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1e3      	bne.n	8006302 <HAL_UART_IRQHandler+0x37e>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633e:	4618      	mov	r0, r3
 8006340:	f7fd fb3f 	bl	80039c2 <HAL_DMA_Abort>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	635a      	str	r2, [r3, #52]	; 0x34
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006352:	b29b      	uxth	r3, r3
 8006354:	1ad3      	subs	r3, r2, r3
 8006356:	b29b      	uxth	r3, r3
 8006358:	4619      	mov	r1, r3
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f8b6 	bl	80064cc <HAL_UARTEx_RxEventCallback>
 8006360:	e09c      	b.n	800649c <HAL_UART_IRQHandler+0x518>
 8006362:	bf00      	nop
 8006364:	0800675b 	.word	0x0800675b
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006370:	b29b      	uxth	r3, r3
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800637c:	b29b      	uxth	r3, r3
 800637e:	2b00      	cmp	r3, #0
 8006380:	f000 808e 	beq.w	80064a0 <HAL_UART_IRQHandler+0x51c>
 8006384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 8089 	beq.w	80064a0 <HAL_UART_IRQHandler+0x51c>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	330c      	adds	r3, #12
 8006394:	63bb      	str	r3, [r7, #56]	; 0x38
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	637b      	str	r3, [r7, #52]	; 0x34
 800639e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	330c      	adds	r3, #12
 80063ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80063b2:	647a      	str	r2, [r7, #68]	; 0x44
 80063b4:	643b      	str	r3, [r7, #64]	; 0x40
 80063b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e3      	bne.n	800638e <HAL_UART_IRQHandler+0x40a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	3314      	adds	r3, #20
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	e853 3f00 	ldrex	r3, [r3]
 80063d4:	623b      	str	r3, [r7, #32]
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	f023 0301 	bic.w	r3, r3, #1
 80063dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	3314      	adds	r3, #20
 80063e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80063ea:	633a      	str	r2, [r7, #48]	; 0x30
 80063ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f2:	e841 2300 	strex	r3, r2, [r1]
 80063f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80063f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1e3      	bne.n	80063c6 <HAL_UART_IRQHandler+0x442>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	330c      	adds	r3, #12
 8006412:	613b      	str	r3, [r7, #16]
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	e853 3f00 	ldrex	r3, [r3]
 800641a:	60fb      	str	r3, [r7, #12]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f023 0310 	bic.w	r3, r3, #16
 8006422:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006430:	61fa      	str	r2, [r7, #28]
 8006432:	61bb      	str	r3, [r7, #24]
 8006434:	69b9      	ldr	r1, [r7, #24]
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	e841 2300 	strex	r3, r2, [r1]
 800643c:	617b      	str	r3, [r7, #20]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1e3      	bne.n	800640c <HAL_UART_IRQHandler+0x488>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	635a      	str	r2, [r3, #52]	; 0x34
 800644a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800644e:	4619      	mov	r1, r3
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f83b 	bl	80064cc <HAL_UARTEx_RxEventCallback>
 8006456:	e023      	b.n	80064a0 <HAL_UART_IRQHandler+0x51c>
 8006458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800645c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006460:	2b00      	cmp	r3, #0
 8006462:	d009      	beq.n	8006478 <HAL_UART_IRQHandler+0x4f4>
 8006464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800646c:	2b00      	cmp	r3, #0
 800646e:	d003      	beq.n	8006478 <HAL_UART_IRQHandler+0x4f4>
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f986 	bl	8006782 <UART_Transmit_IT>
 8006476:	e014      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
 8006478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00e      	beq.n	80064a2 <HAL_UART_IRQHandler+0x51e>
 8006484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648c:	2b00      	cmp	r3, #0
 800648e:	d008      	beq.n	80064a2 <HAL_UART_IRQHandler+0x51e>
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f9c5 	bl	8006820 <UART_EndTransmit_IT>
 8006496:	e004      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
 8006498:	bf00      	nop
 800649a:	e002      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
 800649c:	bf00      	nop
 800649e:	e000      	b.n	80064a2 <HAL_UART_IRQHandler+0x51e>
 80064a0:	bf00      	nop
 80064a2:	37e8      	adds	r7, #232	; 0xe8
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <HAL_UART_TxCpltCallback>:
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bc80      	pop	{r7}
 80064b8:	4770      	bx	lr

080064ba <HAL_UART_ErrorCallback>:
 80064ba:	b480      	push	{r7}
 80064bc:	b083      	sub	sp, #12
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
 80064c2:	bf00      	nop
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bc80      	pop	{r7}
 80064ca:	4770      	bx	lr

080064cc <HAL_UARTEx_RxEventCallback>:
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	460b      	mov	r3, r1
 80064d6:	807b      	strh	r3, [r7, #2]
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	bc80      	pop	{r7}
 80064e0:	4770      	bx	lr

080064e2 <HAL_HalfDuplex_EnableTransmitter>:
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	2300      	movs	r3, #0
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	d101      	bne.n	80064fc <HAL_HalfDuplex_EnableTransmitter+0x1a>
 80064f8:	2302      	movs	r3, #2
 80064fa:	e020      	b.n	800653e <HAL_HalfDuplex_EnableTransmitter+0x5c>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2224      	movs	r2, #36	; 0x24
 8006508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 030c 	bic.w	r3, r3, #12
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f043 0308 	orr.w	r3, r3, #8
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	60da      	str	r2, [r3, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800653c:	2300      	movs	r3, #0
 800653e:	4618      	mov	r0, r3
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	bc80      	pop	{r7}
 8006546:	4770      	bx	lr

08006548 <UART_WaitOnFlagUntilTimeout>:
 8006548:	b580      	push	{r7, lr}
 800654a:	b090      	sub	sp, #64	; 0x40
 800654c:	af00      	add	r7, sp, #0
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	603b      	str	r3, [r7, #0]
 8006554:	4613      	mov	r3, r2
 8006556:	71fb      	strb	r3, [r7, #7]
 8006558:	e050      	b.n	80065fc <UART_WaitOnFlagUntilTimeout+0xb4>
 800655a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800655c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006560:	d04c      	beq.n	80065fc <UART_WaitOnFlagUntilTimeout+0xb4>
 8006562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006564:	2b00      	cmp	r3, #0
 8006566:	d007      	beq.n	8006578 <UART_WaitOnFlagUntilTimeout+0x30>
 8006568:	f7fd f942 	bl	80037f0 <HAL_GetTick>
 800656c:	4602      	mov	r2, r0
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006574:	429a      	cmp	r2, r3
 8006576:	d241      	bcs.n	80065fc <UART_WaitOnFlagUntilTimeout+0xb4>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	330c      	adds	r3, #12
 800657e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	627b      	str	r3, [r7, #36]	; 0x24
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800658e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	330c      	adds	r3, #12
 8006596:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006598:	637a      	str	r2, [r7, #52]	; 0x34
 800659a:	633b      	str	r3, [r7, #48]	; 0x30
 800659c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800659e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80065a0:	e841 2300 	strex	r3, r2, [r1]
 80065a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1e5      	bne.n	8006578 <UART_WaitOnFlagUntilTimeout+0x30>
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3314      	adds	r3, #20
 80065b2:	617b      	str	r3, [r7, #20]
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	e853 3f00 	ldrex	r3, [r3]
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f023 0301 	bic.w	r3, r3, #1
 80065c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3314      	adds	r3, #20
 80065ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065cc:	623a      	str	r2, [r7, #32]
 80065ce:	61fb      	str	r3, [r7, #28]
 80065d0:	69f9      	ldr	r1, [r7, #28]
 80065d2:	6a3a      	ldr	r2, [r7, #32]
 80065d4:	e841 2300 	strex	r3, r2, [r1]
 80065d8:	61bb      	str	r3, [r7, #24]
 80065da:	69bb      	ldr	r3, [r7, #24]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d1e5      	bne.n	80065ac <UART_WaitOnFlagUntilTimeout+0x64>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2220      	movs	r2, #32
 80065ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065f8:	2303      	movs	r3, #3
 80065fa:	e00f      	b.n	800661c <UART_WaitOnFlagUntilTimeout+0xd4>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	4013      	ands	r3, r2
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	429a      	cmp	r2, r3
 800660a:	bf0c      	ite	eq
 800660c:	2301      	moveq	r3, #1
 800660e:	2300      	movne	r3, #0
 8006610:	b2db      	uxtb	r3, r3
 8006612:	461a      	mov	r2, r3
 8006614:	79fb      	ldrb	r3, [r7, #7]
 8006616:	429a      	cmp	r2, r3
 8006618:	d09f      	beq.n	800655a <UART_WaitOnFlagUntilTimeout+0x12>
 800661a:	2300      	movs	r3, #0
 800661c:	4618      	mov	r0, r3
 800661e:	3740      	adds	r7, #64	; 0x40
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <UART_Start_Receive_IT>:
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	4613      	mov	r3, r2
 8006630:	80fb      	strh	r3, [r7, #6]
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	629a      	str	r2, [r3, #40]	; 0x28
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	88fa      	ldrh	r2, [r7, #6]
 800663c:	859a      	strh	r2, [r3, #44]	; 0x2c
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	88fa      	ldrh	r2, [r7, #6]
 8006642:	85da      	strh	r2, [r3, #46]	; 0x2e
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	645a      	str	r2, [r3, #68]	; 0x44
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	2222      	movs	r2, #34	; 0x22
 800664e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	691b      	ldr	r3, [r3, #16]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d007      	beq.n	800666a <UART_Start_Receive_IT+0x46>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006668:	60da      	str	r2, [r3, #12]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	695a      	ldr	r2, [r3, #20]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0201 	orr.w	r2, r2, #1
 8006678:	615a      	str	r2, [r3, #20]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f042 0220 	orr.w	r2, r2, #32
 8006688:	60da      	str	r2, [r3, #12]
 800668a:	2300      	movs	r3, #0
 800668c:	4618      	mov	r0, r3
 800668e:	3714      	adds	r7, #20
 8006690:	46bd      	mov	sp, r7
 8006692:	bc80      	pop	{r7}
 8006694:	4770      	bx	lr

08006696 <UART_EndRxTransfer>:
 8006696:	b480      	push	{r7}
 8006698:	b095      	sub	sp, #84	; 0x54
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	330c      	adds	r3, #12
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
 80066a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a8:	e853 3f00 	ldrex	r3, [r3]
 80066ac:	633b      	str	r3, [r7, #48]	; 0x30
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	330c      	adds	r3, #12
 80066bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80066be:	643a      	str	r2, [r7, #64]	; 0x40
 80066c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80066c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80066cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e5      	bne.n	800669e <UART_EndRxTransfer+0x8>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3314      	adds	r3, #20
 80066d8:	623b      	str	r3, [r7, #32]
 80066da:	6a3b      	ldr	r3, [r7, #32]
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	61fb      	str	r3, [r7, #28]
 80066e2:	69fb      	ldr	r3, [r7, #28]
 80066e4:	f023 0301 	bic.w	r3, r3, #1
 80066e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	3314      	adds	r3, #20
 80066f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80066f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e5      	bne.n	80066d2 <UART_EndRxTransfer+0x3c>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800670a:	2b01      	cmp	r3, #1
 800670c:	d119      	bne.n	8006742 <UART_EndRxTransfer+0xac>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	330c      	adds	r3, #12
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	60bb      	str	r3, [r7, #8]
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f023 0310 	bic.w	r3, r3, #16
 8006724:	647b      	str	r3, [r7, #68]	; 0x44
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	330c      	adds	r3, #12
 800672c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800672e:	61ba      	str	r2, [r7, #24]
 8006730:	617b      	str	r3, [r7, #20]
 8006732:	6979      	ldr	r1, [r7, #20]
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	613b      	str	r3, [r7, #16]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e5      	bne.n	800670e <UART_EndRxTransfer+0x78>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2220      	movs	r2, #32
 8006746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	631a      	str	r2, [r3, #48]	; 0x30
 8006750:	bf00      	nop
 8006752:	3754      	adds	r7, #84	; 0x54
 8006754:	46bd      	mov	sp, r7
 8006756:	bc80      	pop	{r7}
 8006758:	4770      	bx	lr

0800675a <UART_DMAAbortOnError>:
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	85da      	strh	r2, [r3, #46]	; 0x2e
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	84da      	strh	r2, [r3, #38]	; 0x26
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7ff fea0 	bl	80064ba <HAL_UART_ErrorCallback>
 800677a:	bf00      	nop
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <UART_Transmit_IT>:
 8006782:	b480      	push	{r7}
 8006784:	b085      	sub	sp, #20
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b21      	cmp	r3, #33	; 0x21
 8006794:	d13e      	bne.n	8006814 <UART_Transmit_IT+0x92>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800679e:	d114      	bne.n	80067ca <UART_Transmit_IT+0x48>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d110      	bne.n	80067ca <UART_Transmit_IT+0x48>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a1b      	ldr	r3, [r3, #32]
 80067ac:	60fb      	str	r3, [r7, #12]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	461a      	mov	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80067bc:	605a      	str	r2, [r3, #4]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a1b      	ldr	r3, [r3, #32]
 80067c2:	1c9a      	adds	r2, r3, #2
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	621a      	str	r2, [r3, #32]
 80067c8:	e008      	b.n	80067dc <UART_Transmit_IT+0x5a>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	1c59      	adds	r1, r3, #1
 80067d0:	687a      	ldr	r2, [r7, #4]
 80067d2:	6211      	str	r1, [r2, #32]
 80067d4:	781a      	ldrb	r2, [r3, #0]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	605a      	str	r2, [r3, #4]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80067e0:	b29b      	uxth	r3, r3
 80067e2:	3b01      	subs	r3, #1
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	4619      	mov	r1, r3
 80067ea:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10f      	bne.n	8006810 <UART_Transmit_IT+0x8e>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68da      	ldr	r2, [r3, #12]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067fe:	60da      	str	r2, [r3, #12]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	68da      	ldr	r2, [r3, #12]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800680e:	60da      	str	r2, [r3, #12]
 8006810:	2300      	movs	r3, #0
 8006812:	e000      	b.n	8006816 <UART_Transmit_IT+0x94>
 8006814:	2302      	movs	r3, #2
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	bc80      	pop	{r7}
 800681e:	4770      	bx	lr

08006820 <UART_EndTransmit_IT>:
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68da      	ldr	r2, [r3, #12]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006836:	60da      	str	r2, [r3, #12]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7ff fe31 	bl	80064a8 <HAL_UART_TxCpltCallback>
 8006846:	2300      	movs	r3, #0
 8006848:	4618      	mov	r0, r3
 800684a:	3708      	adds	r7, #8
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <UART_Receive_IT>:
 8006850:	b580      	push	{r7, lr}
 8006852:	b08c      	sub	sp, #48	; 0x30
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b22      	cmp	r3, #34	; 0x22
 8006862:	f040 80ae 	bne.w	80069c2 <UART_Receive_IT+0x172>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800686e:	d117      	bne.n	80068a0 <UART_Receive_IT+0x50>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d113      	bne.n	80068a0 <UART_Receive_IT+0x50>
 8006878:	2300      	movs	r3, #0
 800687a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006880:	62bb      	str	r3, [r7, #40]	; 0x28
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	b29b      	uxth	r3, r3
 800688a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688e:	b29a      	uxth	r2, r3
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	801a      	strh	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006898:	1c9a      	adds	r2, r3, #2
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	629a      	str	r2, [r3, #40]	; 0x28
 800689e:	e026      	b.n	80068ee <UART_Receive_IT+0x9e>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068a6:	2300      	movs	r3, #0
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	689b      	ldr	r3, [r3, #8]
 80068ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068b2:	d007      	beq.n	80068c4 <UART_Receive_IT+0x74>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <UART_Receive_IT+0x82>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d106      	bne.n	80068d2 <UART_Receive_IT+0x82>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	701a      	strb	r2, [r3, #0]
 80068d0:	e008      	b.n	80068e4 <UART_Receive_IT+0x94>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e2:	701a      	strb	r2, [r3, #0]
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e8:	1c5a      	adds	r2, r3, #1
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	629a      	str	r2, [r3, #40]	; 0x28
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	4619      	mov	r1, r3
 80068fc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d15d      	bne.n	80069be <UART_Receive_IT+0x16e>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0220 	bic.w	r2, r2, #32
 8006910:	60da      	str	r2, [r3, #12]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68da      	ldr	r2, [r3, #12]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006920:	60da      	str	r2, [r3, #12]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f022 0201 	bic.w	r2, r2, #1
 8006930:	615a      	str	r2, [r3, #20]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	635a      	str	r2, [r3, #52]	; 0x34
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006944:	2b01      	cmp	r3, #1
 8006946:	d135      	bne.n	80069b4 <UART_Receive_IT+0x164>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	631a      	str	r2, [r3, #48]	; 0x30
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	330c      	adds	r3, #12
 8006954:	617b      	str	r3, [r7, #20]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	e853 3f00 	ldrex	r3, [r3]
 800695c:	613b      	str	r3, [r7, #16]
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	f023 0310 	bic.w	r3, r3, #16
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	330c      	adds	r3, #12
 800696c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696e:	623a      	str	r2, [r7, #32]
 8006970:	61fb      	str	r3, [r7, #28]
 8006972:	69f9      	ldr	r1, [r7, #28]
 8006974:	6a3a      	ldr	r2, [r7, #32]
 8006976:	e841 2300 	strex	r3, r2, [r1]
 800697a:	61bb      	str	r3, [r7, #24]
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d1e5      	bne.n	800694e <UART_Receive_IT+0xfe>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f003 0310 	and.w	r3, r3, #16
 800698c:	2b10      	cmp	r3, #16
 800698e:	d10a      	bne.n	80069a6 <UART_Receive_IT+0x156>
 8006990:	2300      	movs	r3, #0
 8006992:	60fb      	str	r3, [r7, #12]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069aa:	4619      	mov	r1, r3
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f7ff fd8d 	bl	80064cc <HAL_UARTEx_RxEventCallback>
 80069b2:	e002      	b.n	80069ba <UART_Receive_IT+0x16a>
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7fc f937 	bl	8002c28 <HAL_UART_RxCpltCallback>
 80069ba:	2300      	movs	r3, #0
 80069bc:	e002      	b.n	80069c4 <UART_Receive_IT+0x174>
 80069be:	2300      	movs	r3, #0
 80069c0:	e000      	b.n	80069c4 <UART_Receive_IT+0x174>
 80069c2:	2302      	movs	r3, #2
 80069c4:	4618      	mov	r0, r3
 80069c6:	3730      	adds	r7, #48	; 0x30
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}

080069cc <UART_SetConfig>:
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	691b      	ldr	r3, [r3, #16]
 80069da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	68da      	ldr	r2, [r3, #12]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	611a      	str	r2, [r3, #16]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60bb      	str	r3, [r7, #8]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006a06:	f023 030c 	bic.w	r3, r3, #12
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6812      	ldr	r2, [r2, #0]
 8006a0e:	68b9      	ldr	r1, [r7, #8]
 8006a10:	430b      	orrs	r3, r1
 8006a12:	60d3      	str	r3, [r2, #12]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699a      	ldr	r2, [r3, #24]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	615a      	str	r2, [r3, #20]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a2c      	ldr	r2, [pc, #176]	; (8006ae0 <UART_SetConfig+0x114>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d103      	bne.n	8006a3c <UART_SetConfig+0x70>
 8006a34:	f7fd fe18 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 8006a38:	60f8      	str	r0, [r7, #12]
 8006a3a:	e002      	b.n	8006a42 <UART_SetConfig+0x76>
 8006a3c:	f7fd fe00 	bl	8004640 <HAL_RCC_GetPCLK1Freq>
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4613      	mov	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4413      	add	r3, r2
 8006a4a:	009a      	lsls	r2, r3, #2
 8006a4c:	441a      	add	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	685b      	ldr	r3, [r3, #4]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a58:	4a22      	ldr	r2, [pc, #136]	; (8006ae4 <UART_SetConfig+0x118>)
 8006a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5e:	095b      	lsrs	r3, r3, #5
 8006a60:	0119      	lsls	r1, r3, #4
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	4613      	mov	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4413      	add	r3, r2
 8006a6a:	009a      	lsls	r2, r3, #2
 8006a6c:	441a      	add	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8006a78:	4b1a      	ldr	r3, [pc, #104]	; (8006ae4 <UART_SetConfig+0x118>)
 8006a7a:	fba3 0302 	umull	r0, r3, r3, r2
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	2064      	movs	r0, #100	; 0x64
 8006a82:	fb00 f303 	mul.w	r3, r0, r3
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	011b      	lsls	r3, r3, #4
 8006a8a:	3332      	adds	r3, #50	; 0x32
 8006a8c:	4a15      	ldr	r2, [pc, #84]	; (8006ae4 <UART_SetConfig+0x118>)
 8006a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a92:	095b      	lsrs	r3, r3, #5
 8006a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a98:	4419      	add	r1, r3
 8006a9a:	68fa      	ldr	r2, [r7, #12]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	009b      	lsls	r3, r3, #2
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009a      	lsls	r2, r3, #2
 8006aa4:	441a      	add	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ab0:	4b0c      	ldr	r3, [pc, #48]	; (8006ae4 <UART_SetConfig+0x118>)
 8006ab2:	fba3 0302 	umull	r0, r3, r3, r2
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	2064      	movs	r0, #100	; 0x64
 8006aba:	fb00 f303 	mul.w	r3, r0, r3
 8006abe:	1ad3      	subs	r3, r2, r3
 8006ac0:	011b      	lsls	r3, r3, #4
 8006ac2:	3332      	adds	r3, #50	; 0x32
 8006ac4:	4a07      	ldr	r2, [pc, #28]	; (8006ae4 <UART_SetConfig+0x118>)
 8006ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aca:	095b      	lsrs	r3, r3, #5
 8006acc:	f003 020f 	and.w	r2, r3, #15
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	440a      	add	r2, r1
 8006ad6:	609a      	str	r2, [r3, #8]
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	40013800 	.word	0x40013800
 8006ae4:	51eb851f 	.word	0x51eb851f

08006ae8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	4603      	mov	r3, r0
 8006af0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006af2:	2300      	movs	r3, #0
 8006af4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006af6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006afa:	2b84      	cmp	r3, #132	; 0x84
 8006afc:	d005      	beq.n	8006b0a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006afe:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	4413      	add	r3, r2
 8006b06:	3303      	adds	r3, #3
 8006b08:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3714      	adds	r7, #20
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bc80      	pop	{r7}
 8006b14:	4770      	bx	lr

08006b16 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8006b16:	b580      	push	{r7, lr}
 8006b18:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006b1a:	f000 fae7 	bl	80070ec <vTaskStartScheduler>
  
  return osOK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006b26:	b089      	sub	sp, #36	; 0x24
 8006b28:	af04      	add	r7, sp, #16
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d020      	beq.n	8006b78 <osThreadCreate+0x54>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	699b      	ldr	r3, [r3, #24]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d01c      	beq.n	8006b78 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685c      	ldr	r4, [r3, #4]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	691e      	ldr	r6, [r3, #16]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b50:	4618      	mov	r0, r3
 8006b52:	f7ff ffc9 	bl	8006ae8 <makeFreeRtosPriority>
 8006b56:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	695b      	ldr	r3, [r3, #20]
 8006b5c:	687a      	ldr	r2, [r7, #4]
 8006b5e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b60:	9202      	str	r2, [sp, #8]
 8006b62:	9301      	str	r3, [sp, #4]
 8006b64:	9100      	str	r1, [sp, #0]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	4632      	mov	r2, r6
 8006b6a:	4629      	mov	r1, r5
 8006b6c:	4620      	mov	r0, r4
 8006b6e:	f000 f8e8 	bl	8006d42 <xTaskCreateStatic>
 8006b72:	4603      	mov	r3, r0
 8006b74:	60fb      	str	r3, [r7, #12]
 8006b76:	e01c      	b.n	8006bb2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685c      	ldr	r4, [r3, #4]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b84:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	f7ff ffab 	bl	8006ae8 <makeFreeRtosPriority>
 8006b92:	4602      	mov	r2, r0
 8006b94:	f107 030c 	add.w	r3, r7, #12
 8006b98:	9301      	str	r3, [sp, #4]
 8006b9a:	9200      	str	r2, [sp, #0]
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	4632      	mov	r2, r6
 8006ba0:	4629      	mov	r1, r5
 8006ba2:	4620      	mov	r0, r4
 8006ba4:	f000 f929 	bl	8006dfa <xTaskCreate>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	2b01      	cmp	r3, #1
 8006bac:	d001      	beq.n	8006bb2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	e000      	b.n	8006bb4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006bbc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <osDelay+0x16>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	e000      	b.n	8006bd4 <osDelay+0x18>
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f000 fa55 	bl	8007084 <vTaskDelay>
  
  return osOK;
 8006bda:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3710      	adds	r7, #16
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <vListInitialise>:
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f103 0208 	add.w	r2, r3, #8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	605a      	str	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006bfc:	609a      	str	r2, [r3, #8]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f103 0208 	add.w	r2, r3, #8
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	60da      	str	r2, [r3, #12]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f103 0208 	add.w	r2, r3, #8
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	611a      	str	r2, [r3, #16]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	bf00      	nop
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr

08006c22 <vListInitialiseItem>:
 8006c22:	b480      	push	{r7}
 8006c24:	b083      	sub	sp, #12
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	611a      	str	r2, [r3, #16]
 8006c30:	bf00      	nop
 8006c32:	370c      	adds	r7, #12
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bc80      	pop	{r7}
 8006c38:	4770      	bx	lr

08006c3a <vListInsertEnd>:
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	60fb      	str	r3, [r7, #12]
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	605a      	str	r2, [r3, #4]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	689a      	ldr	r2, [r3, #8]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	609a      	str	r2, [r3, #8]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	605a      	str	r2, [r3, #4]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	609a      	str	r2, [r3, #8]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	687a      	ldr	r2, [r7, #4]
 8006c6a:	611a      	str	r2, [r3, #16]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	1c5a      	adds	r2, r3, #1
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	601a      	str	r2, [r3, #0]
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bc80      	pop	{r7}
 8006c7e:	4770      	bx	lr

08006c80 <vListInsert>:
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	6039      	str	r1, [r7, #0]
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	60bb      	str	r3, [r7, #8]
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c96:	d103      	bne.n	8006ca0 <vListInsert+0x20>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	60fb      	str	r3, [r7, #12]
 8006c9e:	e00c      	b.n	8006cba <vListInsert+0x3a>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	e002      	b.n	8006cae <vListInsert+0x2e>
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	68ba      	ldr	r2, [r7, #8]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d2f6      	bcs.n	8006ca8 <vListInsert+0x28>
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	605a      	str	r2, [r3, #4]
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	683a      	ldr	r2, [r7, #0]
 8006cc8:	609a      	str	r2, [r3, #8]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	609a      	str	r2, [r3, #8]
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	605a      	str	r2, [r3, #4]
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	611a      	str	r2, [r3, #16]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	601a      	str	r2, [r3, #0]
 8006ce6:	bf00      	nop
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bc80      	pop	{r7}
 8006cee:	4770      	bx	lr

08006cf0 <uxListRemove>:
 8006cf0:	b480      	push	{r7}
 8006cf2:	b085      	sub	sp, #20
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	60fb      	str	r3, [r7, #12]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	6892      	ldr	r2, [r2, #8]
 8006d06:	609a      	str	r2, [r3, #8]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	687a      	ldr	r2, [r7, #4]
 8006d0e:	6852      	ldr	r2, [r2, #4]
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d103      	bne.n	8006d24 <uxListRemove+0x34>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	605a      	str	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	611a      	str	r2, [r3, #16]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	1e5a      	subs	r2, r3, #1
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	601a      	str	r2, [r3, #0]
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bc80      	pop	{r7}
 8006d40:	4770      	bx	lr

08006d42 <xTaskCreateStatic>:
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b08e      	sub	sp, #56	; 0x38
 8006d46:	af04      	add	r7, sp, #16
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	60b9      	str	r1, [r7, #8]
 8006d4c:	607a      	str	r2, [r7, #4]
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10a      	bne.n	8006d6c <xTaskCreateStatic+0x2a>
 8006d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d5a:	f383 8811 	msr	BASEPRI, r3
 8006d5e:	f3bf 8f6f 	isb	sy
 8006d62:	f3bf 8f4f 	dsb	sy
 8006d66:	623b      	str	r3, [r7, #32]
 8006d68:	bf00      	nop
 8006d6a:	e7fe      	b.n	8006d6a <xTaskCreateStatic+0x28>
 8006d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10a      	bne.n	8006d88 <xTaskCreateStatic+0x46>
 8006d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	61fb      	str	r3, [r7, #28]
 8006d84:	bf00      	nop
 8006d86:	e7fe      	b.n	8006d86 <xTaskCreateStatic+0x44>
 8006d88:	23a0      	movs	r3, #160	; 0xa0
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	2ba0      	cmp	r3, #160	; 0xa0
 8006d90:	d00a      	beq.n	8006da8 <xTaskCreateStatic+0x66>
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	61bb      	str	r3, [r7, #24]
 8006da4:	bf00      	nop
 8006da6:	e7fe      	b.n	8006da6 <xTaskCreateStatic+0x64>
 8006da8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d01e      	beq.n	8006dec <xTaskCreateStatic+0xaa>
 8006dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d01b      	beq.n	8006dec <xTaskCreateStatic+0xaa>
 8006db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db6:	627b      	str	r3, [r7, #36]	; 0x24
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	2202      	movs	r2, #2
 8006dc2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	9303      	str	r3, [sp, #12]
 8006dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dcc:	9302      	str	r3, [sp, #8]
 8006dce:	f107 0314 	add.w	r3, r7, #20
 8006dd2:	9301      	str	r3, [sp, #4]
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	68b9      	ldr	r1, [r7, #8]
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f000 f850 	bl	8006e84 <prvInitialiseNewTask>
 8006de4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006de6:	f000 f8e3 	bl	8006fb0 <prvAddNewTaskToReadyList>
 8006dea:	e001      	b.n	8006df0 <xTaskCreateStatic+0xae>
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	4618      	mov	r0, r3
 8006df4:	3728      	adds	r7, #40	; 0x28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <xTaskCreate>:
 8006dfa:	b580      	push	{r7, lr}
 8006dfc:	b08c      	sub	sp, #48	; 0x30
 8006dfe:	af04      	add	r7, sp, #16
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	603b      	str	r3, [r7, #0]
 8006e06:	4613      	mov	r3, r2
 8006e08:	80fb      	strh	r3, [r7, #6]
 8006e0a:	88fb      	ldrh	r3, [r7, #6]
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 fe96 	bl	8007b40 <pvPortMalloc>
 8006e14:	6178      	str	r0, [r7, #20]
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d00e      	beq.n	8006e3a <xTaskCreate+0x40>
 8006e1c:	20a0      	movs	r0, #160	; 0xa0
 8006e1e:	f000 fe8f 	bl	8007b40 <pvPortMalloc>
 8006e22:	61f8      	str	r0, [r7, #28]
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d003      	beq.n	8006e32 <xTaskCreate+0x38>
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	697a      	ldr	r2, [r7, #20]
 8006e2e:	631a      	str	r2, [r3, #48]	; 0x30
 8006e30:	e005      	b.n	8006e3e <xTaskCreate+0x44>
 8006e32:	6978      	ldr	r0, [r7, #20]
 8006e34:	f000 ff48 	bl	8007cc8 <vPortFree>
 8006e38:	e001      	b.n	8006e3e <xTaskCreate+0x44>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61fb      	str	r3, [r7, #28]
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d017      	beq.n	8006e74 <xTaskCreate+0x7a>
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 8006e4c:	88fa      	ldrh	r2, [r7, #6]
 8006e4e:	2300      	movs	r3, #0
 8006e50:	9303      	str	r3, [sp, #12]
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	9302      	str	r3, [sp, #8]
 8006e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e58:	9301      	str	r3, [sp, #4]
 8006e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e5c:	9300      	str	r3, [sp, #0]
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68b9      	ldr	r1, [r7, #8]
 8006e62:	68f8      	ldr	r0, [r7, #12]
 8006e64:	f000 f80e 	bl	8006e84 <prvInitialiseNewTask>
 8006e68:	69f8      	ldr	r0, [r7, #28]
 8006e6a:	f000 f8a1 	bl	8006fb0 <prvAddNewTaskToReadyList>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	61bb      	str	r3, [r7, #24]
 8006e72:	e002      	b.n	8006e7a <xTaskCreate+0x80>
 8006e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e78:	61bb      	str	r3, [r7, #24]
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3720      	adds	r7, #32
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <prvInitialiseNewTask>:
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b088      	sub	sp, #32
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
 8006e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	61bb      	str	r3, [r7, #24]
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	f023 0307 	bic.w	r3, r3, #7
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <prvInitialiseNewTask+0x48>
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	617b      	str	r3, [r7, #20]
 8006ec8:	bf00      	nop
 8006eca:	e7fe      	b.n	8006eca <prvInitialiseNewTask+0x46>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	61fb      	str	r3, [r7, #28]
 8006ed0:	e012      	b.n	8006ef8 <prvInitialiseNewTask+0x74>
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	69fb      	ldr	r3, [r7, #28]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	7819      	ldrb	r1, [r3, #0]
 8006eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	4413      	add	r3, r2
 8006ee0:	3334      	adds	r3, #52	; 0x34
 8006ee2:	460a      	mov	r2, r1
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d006      	beq.n	8006f00 <prvInitialiseNewTask+0x7c>
 8006ef2:	69fb      	ldr	r3, [r7, #28]
 8006ef4:	3301      	adds	r3, #1
 8006ef6:	61fb      	str	r3, [r7, #28]
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	2b0f      	cmp	r3, #15
 8006efc:	d9e9      	bls.n	8006ed2 <prvInitialiseNewTask+0x4e>
 8006efe:	e000      	b.n	8006f02 <prvInitialiseNewTask+0x7e>
 8006f00:	bf00      	nop
 8006f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f04:	2200      	movs	r2, #0
 8006f06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0c:	2b06      	cmp	r3, #6
 8006f0e:	d901      	bls.n	8006f14 <prvInitialiseNewTask+0x90>
 8006f10:	2306      	movs	r3, #6
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f18:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f1e:	645a      	str	r2, [r3, #68]	; 0x44
 8006f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f22:	2200      	movs	r2, #0
 8006f24:	649a      	str	r2, [r3, #72]	; 0x48
 8006f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f28:	3304      	adds	r3, #4
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7ff fe79 	bl	8006c22 <vListInitialiseItem>
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	3318      	adds	r3, #24
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7ff fe74 	bl	8006c22 <vListInitialiseItem>
 8006f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f3e:	611a      	str	r2, [r3, #16]
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	f1c3 0207 	rsb	r2, r3, #7
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	619a      	str	r2, [r3, #24]
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f4e:	625a      	str	r2, [r3, #36]	; 0x24
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	2200      	movs	r2, #0
 8006f54:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f62:	334c      	adds	r3, #76	; 0x4c
 8006f64:	224c      	movs	r2, #76	; 0x4c
 8006f66:	2100      	movs	r1, #0
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f001 fd64 	bl	8008a36 <memset>
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f70:	4a0c      	ldr	r2, [pc, #48]	; (8006fa4 <prvInitialiseNewTask+0x120>)
 8006f72:	651a      	str	r2, [r3, #80]	; 0x50
 8006f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f76:	4a0c      	ldr	r2, [pc, #48]	; (8006fa8 <prvInitialiseNewTask+0x124>)
 8006f78:	655a      	str	r2, [r3, #84]	; 0x54
 8006f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f7c:	4a0b      	ldr	r2, [pc, #44]	; (8006fac <prvInitialiseNewTask+0x128>)
 8006f7e:	659a      	str	r2, [r3, #88]	; 0x58
 8006f80:	683a      	ldr	r2, [r7, #0]
 8006f82:	68f9      	ldr	r1, [r7, #12]
 8006f84:	69b8      	ldr	r0, [r7, #24]
 8006f86:	f000 fc29 	bl	80077dc <pxPortInitialiseStack>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <prvInitialiseNewTask+0x118>
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	bf00      	nop
 8006f9e:	3720      	adds	r7, #32
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}
 8006fa4:	20001544 	.word	0x20001544
 8006fa8:	200015ac 	.word	0x200015ac
 8006fac:	20001614 	.word	0x20001614

08006fb0 <prvAddNewTaskToReadyList>:
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
 8006fb8:	f000 fd00 	bl	80079bc <vPortEnterCritical>
 8006fbc:	4b2a      	ldr	r3, [pc, #168]	; (8007068 <prvAddNewTaskToReadyList+0xb8>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	4a29      	ldr	r2, [pc, #164]	; (8007068 <prvAddNewTaskToReadyList+0xb8>)
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	4b29      	ldr	r3, [pc, #164]	; (800706c <prvAddNewTaskToReadyList+0xbc>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d109      	bne.n	8006fe2 <prvAddNewTaskToReadyList+0x32>
 8006fce:	4a27      	ldr	r2, [pc, #156]	; (800706c <prvAddNewTaskToReadyList+0xbc>)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6013      	str	r3, [r2, #0]
 8006fd4:	4b24      	ldr	r3, [pc, #144]	; (8007068 <prvAddNewTaskToReadyList+0xb8>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d110      	bne.n	8006ffe <prvAddNewTaskToReadyList+0x4e>
 8006fdc:	f000 fad2 	bl	8007584 <prvInitialiseTaskLists>
 8006fe0:	e00d      	b.n	8006ffe <prvAddNewTaskToReadyList+0x4e>
 8006fe2:	4b23      	ldr	r3, [pc, #140]	; (8007070 <prvAddNewTaskToReadyList+0xc0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d109      	bne.n	8006ffe <prvAddNewTaskToReadyList+0x4e>
 8006fea:	4b20      	ldr	r3, [pc, #128]	; (800706c <prvAddNewTaskToReadyList+0xbc>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d802      	bhi.n	8006ffe <prvAddNewTaskToReadyList+0x4e>
 8006ff8:	4a1c      	ldr	r2, [pc, #112]	; (800706c <prvAddNewTaskToReadyList+0xbc>)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	4b1d      	ldr	r3, [pc, #116]	; (8007074 <prvAddNewTaskToReadyList+0xc4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3301      	adds	r3, #1
 8007004:	4a1b      	ldr	r2, [pc, #108]	; (8007074 <prvAddNewTaskToReadyList+0xc4>)
 8007006:	6013      	str	r3, [r2, #0]
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	2201      	movs	r2, #1
 800700e:	409a      	lsls	r2, r3
 8007010:	4b19      	ldr	r3, [pc, #100]	; (8007078 <prvAddNewTaskToReadyList+0xc8>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4313      	orrs	r3, r2
 8007016:	4a18      	ldr	r2, [pc, #96]	; (8007078 <prvAddNewTaskToReadyList+0xc8>)
 8007018:	6013      	str	r3, [r2, #0]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800701e:	4613      	mov	r3, r2
 8007020:	009b      	lsls	r3, r3, #2
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4a15      	ldr	r2, [pc, #84]	; (800707c <prvAddNewTaskToReadyList+0xcc>)
 8007028:	441a      	add	r2, r3
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	3304      	adds	r3, #4
 800702e:	4619      	mov	r1, r3
 8007030:	4610      	mov	r0, r2
 8007032:	f7ff fe02 	bl	8006c3a <vListInsertEnd>
 8007036:	f000 fcf1 	bl	8007a1c <vPortExitCritical>
 800703a:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <prvAddNewTaskToReadyList+0xc0>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00e      	beq.n	8007060 <prvAddNewTaskToReadyList+0xb0>
 8007042:	4b0a      	ldr	r3, [pc, #40]	; (800706c <prvAddNewTaskToReadyList+0xbc>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704c:	429a      	cmp	r2, r3
 800704e:	d207      	bcs.n	8007060 <prvAddNewTaskToReadyList+0xb0>
 8007050:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <prvAddNewTaskToReadyList+0xd0>)
 8007052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007056:	601a      	str	r2, [r3, #0]
 8007058:	f3bf 8f4f 	dsb	sy
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	bf00      	nop
 8007062:	3708      	adds	r7, #8
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	200008f8 	.word	0x200008f8
 800706c:	200007f8 	.word	0x200007f8
 8007070:	20000904 	.word	0x20000904
 8007074:	20000914 	.word	0x20000914
 8007078:	20000900 	.word	0x20000900
 800707c:	200007fc 	.word	0x200007fc
 8007080:	e000ed04 	.word	0xe000ed04

08007084 <vTaskDelay>:
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	2300      	movs	r3, #0
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d017      	beq.n	80070c6 <vTaskDelay+0x42>
 8007096:	4b13      	ldr	r3, [pc, #76]	; (80070e4 <vTaskDelay+0x60>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d00a      	beq.n	80070b4 <vTaskDelay+0x30>
 800709e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a2:	f383 8811 	msr	BASEPRI, r3
 80070a6:	f3bf 8f6f 	isb	sy
 80070aa:	f3bf 8f4f 	dsb	sy
 80070ae:	60bb      	str	r3, [r7, #8]
 80070b0:	bf00      	nop
 80070b2:	e7fe      	b.n	80070b2 <vTaskDelay+0x2e>
 80070b4:	f000 f884 	bl	80071c0 <vTaskSuspendAll>
 80070b8:	2100      	movs	r1, #0
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fb28 	bl	8007710 <prvAddCurrentTaskToDelayedList>
 80070c0:	f000 f88c 	bl	80071dc <xTaskResumeAll>
 80070c4:	60f8      	str	r0, [r7, #12]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d107      	bne.n	80070dc <vTaskDelay+0x58>
 80070cc:	4b06      	ldr	r3, [pc, #24]	; (80070e8 <vTaskDelay+0x64>)
 80070ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d2:	601a      	str	r2, [r3, #0]
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	bf00      	nop
 80070de:	3710      	adds	r7, #16
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}
 80070e4:	20000920 	.word	0x20000920
 80070e8:	e000ed04 	.word	0xe000ed04

080070ec <vTaskStartScheduler>:
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08a      	sub	sp, #40	; 0x28
 80070f0:	af04      	add	r7, sp, #16
 80070f2:	2300      	movs	r3, #0
 80070f4:	60bb      	str	r3, [r7, #8]
 80070f6:	2300      	movs	r3, #0
 80070f8:	607b      	str	r3, [r7, #4]
 80070fa:	463a      	mov	r2, r7
 80070fc:	1d39      	adds	r1, r7, #4
 80070fe:	f107 0308 	add.w	r3, r7, #8
 8007102:	4618      	mov	r0, r3
 8007104:	f7fb f9f4 	bl	80024f0 <vApplicationGetIdleTaskMemory>
 8007108:	6839      	ldr	r1, [r7, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	9202      	str	r2, [sp, #8]
 8007110:	9301      	str	r3, [sp, #4]
 8007112:	2300      	movs	r3, #0
 8007114:	9300      	str	r3, [sp, #0]
 8007116:	2300      	movs	r3, #0
 8007118:	460a      	mov	r2, r1
 800711a:	4921      	ldr	r1, [pc, #132]	; (80071a0 <vTaskStartScheduler+0xb4>)
 800711c:	4821      	ldr	r0, [pc, #132]	; (80071a4 <vTaskStartScheduler+0xb8>)
 800711e:	f7ff fe10 	bl	8006d42 <xTaskCreateStatic>
 8007122:	4603      	mov	r3, r0
 8007124:	4a20      	ldr	r2, [pc, #128]	; (80071a8 <vTaskStartScheduler+0xbc>)
 8007126:	6013      	str	r3, [r2, #0]
 8007128:	4b1f      	ldr	r3, [pc, #124]	; (80071a8 <vTaskStartScheduler+0xbc>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d002      	beq.n	8007136 <vTaskStartScheduler+0x4a>
 8007130:	2301      	movs	r3, #1
 8007132:	617b      	str	r3, [r7, #20]
 8007134:	e001      	b.n	800713a <vTaskStartScheduler+0x4e>
 8007136:	2300      	movs	r3, #0
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d11b      	bne.n	8007178 <vTaskStartScheduler+0x8c>
 8007140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	613b      	str	r3, [r7, #16]
 8007152:	bf00      	nop
 8007154:	4b15      	ldr	r3, [pc, #84]	; (80071ac <vTaskStartScheduler+0xc0>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	334c      	adds	r3, #76	; 0x4c
 800715a:	4a15      	ldr	r2, [pc, #84]	; (80071b0 <vTaskStartScheduler+0xc4>)
 800715c:	6013      	str	r3, [r2, #0]
 800715e:	4b15      	ldr	r3, [pc, #84]	; (80071b4 <vTaskStartScheduler+0xc8>)
 8007160:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	4b14      	ldr	r3, [pc, #80]	; (80071b8 <vTaskStartScheduler+0xcc>)
 8007168:	2201      	movs	r2, #1
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	4b13      	ldr	r3, [pc, #76]	; (80071bc <vTaskStartScheduler+0xd0>)
 800716e:	2200      	movs	r2, #0
 8007170:	601a      	str	r2, [r3, #0]
 8007172:	f000 fbb1 	bl	80078d8 <xPortStartScheduler>
 8007176:	e00e      	b.n	8007196 <vTaskStartScheduler+0xaa>
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800717e:	d10a      	bne.n	8007196 <vTaskStartScheduler+0xaa>
 8007180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007184:	f383 8811 	msr	BASEPRI, r3
 8007188:	f3bf 8f6f 	isb	sy
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	60fb      	str	r3, [r7, #12]
 8007192:	bf00      	nop
 8007194:	e7fe      	b.n	8007194 <vTaskStartScheduler+0xa8>
 8007196:	bf00      	nop
 8007198:	3718      	adds	r7, #24
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
 800719e:	bf00      	nop
 80071a0:	0800a9f8 	.word	0x0800a9f8
 80071a4:	08007555 	.word	0x08007555
 80071a8:	2000091c 	.word	0x2000091c
 80071ac:	200007f8 	.word	0x200007f8
 80071b0:	20000068 	.word	0x20000068
 80071b4:	20000918 	.word	0x20000918
 80071b8:	20000904 	.word	0x20000904
 80071bc:	200008fc 	.word	0x200008fc

080071c0 <vTaskSuspendAll>:
 80071c0:	b480      	push	{r7}
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	4b04      	ldr	r3, [pc, #16]	; (80071d8 <vTaskSuspendAll+0x18>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	3301      	adds	r3, #1
 80071ca:	4a03      	ldr	r2, [pc, #12]	; (80071d8 <vTaskSuspendAll+0x18>)
 80071cc:	6013      	str	r3, [r2, #0]
 80071ce:	bf00      	nop
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bc80      	pop	{r7}
 80071d4:	4770      	bx	lr
 80071d6:	bf00      	nop
 80071d8:	20000920 	.word	0x20000920

080071dc <xTaskResumeAll>:
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	2300      	movs	r3, #0
 80071e8:	60bb      	str	r3, [r7, #8]
 80071ea:	4b41      	ldr	r3, [pc, #260]	; (80072f0 <xTaskResumeAll+0x114>)
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10a      	bne.n	8007208 <xTaskResumeAll+0x2c>
 80071f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f6:	f383 8811 	msr	BASEPRI, r3
 80071fa:	f3bf 8f6f 	isb	sy
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	603b      	str	r3, [r7, #0]
 8007204:	bf00      	nop
 8007206:	e7fe      	b.n	8007206 <xTaskResumeAll+0x2a>
 8007208:	f000 fbd8 	bl	80079bc <vPortEnterCritical>
 800720c:	4b38      	ldr	r3, [pc, #224]	; (80072f0 <xTaskResumeAll+0x114>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3b01      	subs	r3, #1
 8007212:	4a37      	ldr	r2, [pc, #220]	; (80072f0 <xTaskResumeAll+0x114>)
 8007214:	6013      	str	r3, [r2, #0]
 8007216:	4b36      	ldr	r3, [pc, #216]	; (80072f0 <xTaskResumeAll+0x114>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d161      	bne.n	80072e2 <xTaskResumeAll+0x106>
 800721e:	4b35      	ldr	r3, [pc, #212]	; (80072f4 <xTaskResumeAll+0x118>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d05d      	beq.n	80072e2 <xTaskResumeAll+0x106>
 8007226:	e02e      	b.n	8007286 <xTaskResumeAll+0xaa>
 8007228:	4b33      	ldr	r3, [pc, #204]	; (80072f8 <xTaskResumeAll+0x11c>)
 800722a:	68db      	ldr	r3, [r3, #12]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	60fb      	str	r3, [r7, #12]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3318      	adds	r3, #24
 8007234:	4618      	mov	r0, r3
 8007236:	f7ff fd5b 	bl	8006cf0 <uxListRemove>
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	3304      	adds	r3, #4
 800723e:	4618      	mov	r0, r3
 8007240:	f7ff fd56 	bl	8006cf0 <uxListRemove>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007248:	2201      	movs	r2, #1
 800724a:	409a      	lsls	r2, r3
 800724c:	4b2b      	ldr	r3, [pc, #172]	; (80072fc <xTaskResumeAll+0x120>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4313      	orrs	r3, r2
 8007252:	4a2a      	ldr	r2, [pc, #168]	; (80072fc <xTaskResumeAll+0x120>)
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725a:	4613      	mov	r3, r2
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	4413      	add	r3, r2
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	4a27      	ldr	r2, [pc, #156]	; (8007300 <xTaskResumeAll+0x124>)
 8007264:	441a      	add	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	3304      	adds	r3, #4
 800726a:	4619      	mov	r1, r3
 800726c:	4610      	mov	r0, r2
 800726e:	f7ff fce4 	bl	8006c3a <vListInsertEnd>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007276:	4b23      	ldr	r3, [pc, #140]	; (8007304 <xTaskResumeAll+0x128>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727c:	429a      	cmp	r2, r3
 800727e:	d302      	bcc.n	8007286 <xTaskResumeAll+0xaa>
 8007280:	4b21      	ldr	r3, [pc, #132]	; (8007308 <xTaskResumeAll+0x12c>)
 8007282:	2201      	movs	r2, #1
 8007284:	601a      	str	r2, [r3, #0]
 8007286:	4b1c      	ldr	r3, [pc, #112]	; (80072f8 <xTaskResumeAll+0x11c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1cc      	bne.n	8007228 <xTaskResumeAll+0x4c>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d001      	beq.n	8007298 <xTaskResumeAll+0xbc>
 8007294:	f000 fa18 	bl	80076c8 <prvResetNextTaskUnblockTime>
 8007298:	4b1c      	ldr	r3, [pc, #112]	; (800730c <xTaskResumeAll+0x130>)
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	607b      	str	r3, [r7, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d010      	beq.n	80072c6 <xTaskResumeAll+0xea>
 80072a4:	f000 f836 	bl	8007314 <xTaskIncrementTick>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <xTaskResumeAll+0xd8>
 80072ae:	4b16      	ldr	r3, [pc, #88]	; (8007308 <xTaskResumeAll+0x12c>)
 80072b0:	2201      	movs	r2, #1
 80072b2:	601a      	str	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	3b01      	subs	r3, #1
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1f1      	bne.n	80072a4 <xTaskResumeAll+0xc8>
 80072c0:	4b12      	ldr	r3, [pc, #72]	; (800730c <xTaskResumeAll+0x130>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	4b10      	ldr	r3, [pc, #64]	; (8007308 <xTaskResumeAll+0x12c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d009      	beq.n	80072e2 <xTaskResumeAll+0x106>
 80072ce:	2301      	movs	r3, #1
 80072d0:	60bb      	str	r3, [r7, #8]
 80072d2:	4b0f      	ldr	r3, [pc, #60]	; (8007310 <xTaskResumeAll+0x134>)
 80072d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f000 fb9b 	bl	8007a1c <vPortExitCritical>
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	4618      	mov	r0, r3
 80072ea:	3710      	adds	r7, #16
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20000920 	.word	0x20000920
 80072f4:	200008f8 	.word	0x200008f8
 80072f8:	200008b8 	.word	0x200008b8
 80072fc:	20000900 	.word	0x20000900
 8007300:	200007fc 	.word	0x200007fc
 8007304:	200007f8 	.word	0x200007f8
 8007308:	2000090c 	.word	0x2000090c
 800730c:	20000908 	.word	0x20000908
 8007310:	e000ed04 	.word	0xe000ed04

08007314 <xTaskIncrementTick>:
 8007314:	b580      	push	{r7, lr}
 8007316:	b086      	sub	sp, #24
 8007318:	af00      	add	r7, sp, #0
 800731a:	2300      	movs	r3, #0
 800731c:	617b      	str	r3, [r7, #20]
 800731e:	4b51      	ldr	r3, [pc, #324]	; (8007464 <xTaskIncrementTick+0x150>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	f040 808d 	bne.w	8007442 <xTaskIncrementTick+0x12e>
 8007328:	4b4f      	ldr	r3, [pc, #316]	; (8007468 <xTaskIncrementTick+0x154>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	3301      	adds	r3, #1
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	4a4d      	ldr	r2, [pc, #308]	; (8007468 <xTaskIncrementTick+0x154>)
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d120      	bne.n	800737e <xTaskIncrementTick+0x6a>
 800733c:	4b4b      	ldr	r3, [pc, #300]	; (800746c <xTaskIncrementTick+0x158>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <xTaskIncrementTick+0x48>
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	603b      	str	r3, [r7, #0]
 8007358:	bf00      	nop
 800735a:	e7fe      	b.n	800735a <xTaskIncrementTick+0x46>
 800735c:	4b43      	ldr	r3, [pc, #268]	; (800746c <xTaskIncrementTick+0x158>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	60fb      	str	r3, [r7, #12]
 8007362:	4b43      	ldr	r3, [pc, #268]	; (8007470 <xTaskIncrementTick+0x15c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	4a41      	ldr	r2, [pc, #260]	; (800746c <xTaskIncrementTick+0x158>)
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	4a41      	ldr	r2, [pc, #260]	; (8007470 <xTaskIncrementTick+0x15c>)
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6013      	str	r3, [r2, #0]
 8007370:	4b40      	ldr	r3, [pc, #256]	; (8007474 <xTaskIncrementTick+0x160>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	3301      	adds	r3, #1
 8007376:	4a3f      	ldr	r2, [pc, #252]	; (8007474 <xTaskIncrementTick+0x160>)
 8007378:	6013      	str	r3, [r2, #0]
 800737a:	f000 f9a5 	bl	80076c8 <prvResetNextTaskUnblockTime>
 800737e:	4b3e      	ldr	r3, [pc, #248]	; (8007478 <xTaskIncrementTick+0x164>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	429a      	cmp	r2, r3
 8007386:	d34d      	bcc.n	8007424 <xTaskIncrementTick+0x110>
 8007388:	4b38      	ldr	r3, [pc, #224]	; (800746c <xTaskIncrementTick+0x158>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d101      	bne.n	8007396 <xTaskIncrementTick+0x82>
 8007392:	2301      	movs	r3, #1
 8007394:	e000      	b.n	8007398 <xTaskIncrementTick+0x84>
 8007396:	2300      	movs	r3, #0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d004      	beq.n	80073a6 <xTaskIncrementTick+0x92>
 800739c:	4b36      	ldr	r3, [pc, #216]	; (8007478 <xTaskIncrementTick+0x164>)
 800739e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	e03e      	b.n	8007424 <xTaskIncrementTick+0x110>
 80073a6:	4b31      	ldr	r3, [pc, #196]	; (800746c <xTaskIncrementTick+0x158>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	60bb      	str	r3, [r7, #8]
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	607b      	str	r3, [r7, #4]
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d203      	bcs.n	80073c6 <xTaskIncrementTick+0xb2>
 80073be:	4a2e      	ldr	r2, [pc, #184]	; (8007478 <xTaskIncrementTick+0x164>)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6013      	str	r3, [r2, #0]
 80073c4:	e02e      	b.n	8007424 <xTaskIncrementTick+0x110>
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	3304      	adds	r3, #4
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7ff fc90 	bl	8006cf0 <uxListRemove>
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d004      	beq.n	80073e2 <xTaskIncrementTick+0xce>
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	3318      	adds	r3, #24
 80073dc:	4618      	mov	r0, r3
 80073de:	f7ff fc87 	bl	8006cf0 <uxListRemove>
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e6:	2201      	movs	r2, #1
 80073e8:	409a      	lsls	r2, r3
 80073ea:	4b24      	ldr	r3, [pc, #144]	; (800747c <xTaskIncrementTick+0x168>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	4a22      	ldr	r2, [pc, #136]	; (800747c <xTaskIncrementTick+0x168>)
 80073f2:	6013      	str	r3, [r2, #0]
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	4a1f      	ldr	r2, [pc, #124]	; (8007480 <xTaskIncrementTick+0x16c>)
 8007402:	441a      	add	r2, r3
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	3304      	adds	r3, #4
 8007408:	4619      	mov	r1, r3
 800740a:	4610      	mov	r0, r2
 800740c:	f7ff fc15 	bl	8006c3a <vListInsertEnd>
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007414:	4b1b      	ldr	r3, [pc, #108]	; (8007484 <xTaskIncrementTick+0x170>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800741a:	429a      	cmp	r2, r3
 800741c:	d3b4      	bcc.n	8007388 <xTaskIncrementTick+0x74>
 800741e:	2301      	movs	r3, #1
 8007420:	617b      	str	r3, [r7, #20]
 8007422:	e7b1      	b.n	8007388 <xTaskIncrementTick+0x74>
 8007424:	4b17      	ldr	r3, [pc, #92]	; (8007484 <xTaskIncrementTick+0x170>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742a:	4915      	ldr	r1, [pc, #84]	; (8007480 <xTaskIncrementTick+0x16c>)
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	440b      	add	r3, r1
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d907      	bls.n	800744c <xTaskIncrementTick+0x138>
 800743c:	2301      	movs	r3, #1
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	e004      	b.n	800744c <xTaskIncrementTick+0x138>
 8007442:	4b11      	ldr	r3, [pc, #68]	; (8007488 <xTaskIncrementTick+0x174>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	3301      	adds	r3, #1
 8007448:	4a0f      	ldr	r2, [pc, #60]	; (8007488 <xTaskIncrementTick+0x174>)
 800744a:	6013      	str	r3, [r2, #0]
 800744c:	4b0f      	ldr	r3, [pc, #60]	; (800748c <xTaskIncrementTick+0x178>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d001      	beq.n	8007458 <xTaskIncrementTick+0x144>
 8007454:	2301      	movs	r3, #1
 8007456:	617b      	str	r3, [r7, #20]
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	4618      	mov	r0, r3
 800745c:	3718      	adds	r7, #24
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	20000920 	.word	0x20000920
 8007468:	200008fc 	.word	0x200008fc
 800746c:	200008b0 	.word	0x200008b0
 8007470:	200008b4 	.word	0x200008b4
 8007474:	20000910 	.word	0x20000910
 8007478:	20000918 	.word	0x20000918
 800747c:	20000900 	.word	0x20000900
 8007480:	200007fc 	.word	0x200007fc
 8007484:	200007f8 	.word	0x200007f8
 8007488:	20000908 	.word	0x20000908
 800748c:	2000090c 	.word	0x2000090c

08007490 <vTaskSwitchContext>:
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	4b29      	ldr	r3, [pc, #164]	; (800753c <vTaskSwitchContext+0xac>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <vTaskSwitchContext+0x16>
 800749e:	4b28      	ldr	r3, [pc, #160]	; (8007540 <vTaskSwitchContext+0xb0>)
 80074a0:	2201      	movs	r2, #1
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	e044      	b.n	8007530 <vTaskSwitchContext+0xa0>
 80074a6:	4b26      	ldr	r3, [pc, #152]	; (8007540 <vTaskSwitchContext+0xb0>)
 80074a8:	2200      	movs	r2, #0
 80074aa:	601a      	str	r2, [r3, #0]
 80074ac:	4b25      	ldr	r3, [pc, #148]	; (8007544 <vTaskSwitchContext+0xb4>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	fab3 f383 	clz	r3, r3
 80074b8:	72fb      	strb	r3, [r7, #11]
 80074ba:	7afb      	ldrb	r3, [r7, #11]
 80074bc:	f1c3 031f 	rsb	r3, r3, #31
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	4921      	ldr	r1, [pc, #132]	; (8007548 <vTaskSwitchContext+0xb8>)
 80074c4:	697a      	ldr	r2, [r7, #20]
 80074c6:	4613      	mov	r3, r2
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	4413      	add	r3, r2
 80074cc:	009b      	lsls	r3, r3, #2
 80074ce:	440b      	add	r3, r1
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10a      	bne.n	80074ec <vTaskSwitchContext+0x5c>
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	607b      	str	r3, [r7, #4]
 80074e8:	bf00      	nop
 80074ea:	e7fe      	b.n	80074ea <vTaskSwitchContext+0x5a>
 80074ec:	697a      	ldr	r2, [r7, #20]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4a14      	ldr	r2, [pc, #80]	; (8007548 <vTaskSwitchContext+0xb8>)
 80074f8:	4413      	add	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	685a      	ldr	r2, [r3, #4]
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	605a      	str	r2, [r3, #4]
 8007506:	693b      	ldr	r3, [r7, #16]
 8007508:	685a      	ldr	r2, [r3, #4]
 800750a:	693b      	ldr	r3, [r7, #16]
 800750c:	3308      	adds	r3, #8
 800750e:	429a      	cmp	r2, r3
 8007510:	d104      	bne.n	800751c <vTaskSwitchContext+0x8c>
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	685a      	ldr	r2, [r3, #4]
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	605a      	str	r2, [r3, #4]
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	68db      	ldr	r3, [r3, #12]
 8007522:	4a0a      	ldr	r2, [pc, #40]	; (800754c <vTaskSwitchContext+0xbc>)
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	4b09      	ldr	r3, [pc, #36]	; (800754c <vTaskSwitchContext+0xbc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	334c      	adds	r3, #76	; 0x4c
 800752c:	4a08      	ldr	r2, [pc, #32]	; (8007550 <vTaskSwitchContext+0xc0>)
 800752e:	6013      	str	r3, [r2, #0]
 8007530:	bf00      	nop
 8007532:	371c      	adds	r7, #28
 8007534:	46bd      	mov	sp, r7
 8007536:	bc80      	pop	{r7}
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	20000920 	.word	0x20000920
 8007540:	2000090c 	.word	0x2000090c
 8007544:	20000900 	.word	0x20000900
 8007548:	200007fc 	.word	0x200007fc
 800754c:	200007f8 	.word	0x200007f8
 8007550:	20000068 	.word	0x20000068

08007554 <prvIdleTask>:
 8007554:	b580      	push	{r7, lr}
 8007556:	b082      	sub	sp, #8
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	f000 f852 	bl	8007604 <prvCheckTasksWaitingTermination>
 8007560:	4b06      	ldr	r3, [pc, #24]	; (800757c <prvIdleTask+0x28>)
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d9f9      	bls.n	800755c <prvIdleTask+0x8>
 8007568:	4b05      	ldr	r3, [pc, #20]	; (8007580 <prvIdleTask+0x2c>)
 800756a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	f3bf 8f6f 	isb	sy
 8007578:	e7f0      	b.n	800755c <prvIdleTask+0x8>
 800757a:	bf00      	nop
 800757c:	200007fc 	.word	0x200007fc
 8007580:	e000ed04 	.word	0xe000ed04

08007584 <prvInitialiseTaskLists>:
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	2300      	movs	r3, #0
 800758c:	607b      	str	r3, [r7, #4]
 800758e:	e00c      	b.n	80075aa <prvInitialiseTaskLists+0x26>
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	4613      	mov	r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	4413      	add	r3, r2
 8007598:	009b      	lsls	r3, r3, #2
 800759a:	4a12      	ldr	r2, [pc, #72]	; (80075e4 <prvInitialiseTaskLists+0x60>)
 800759c:	4413      	add	r3, r2
 800759e:	4618      	mov	r0, r3
 80075a0:	f7ff fb20 	bl	8006be4 <vListInitialise>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	3301      	adds	r3, #1
 80075a8:	607b      	str	r3, [r7, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b06      	cmp	r3, #6
 80075ae:	d9ef      	bls.n	8007590 <prvInitialiseTaskLists+0xc>
 80075b0:	480d      	ldr	r0, [pc, #52]	; (80075e8 <prvInitialiseTaskLists+0x64>)
 80075b2:	f7ff fb17 	bl	8006be4 <vListInitialise>
 80075b6:	480d      	ldr	r0, [pc, #52]	; (80075ec <prvInitialiseTaskLists+0x68>)
 80075b8:	f7ff fb14 	bl	8006be4 <vListInitialise>
 80075bc:	480c      	ldr	r0, [pc, #48]	; (80075f0 <prvInitialiseTaskLists+0x6c>)
 80075be:	f7ff fb11 	bl	8006be4 <vListInitialise>
 80075c2:	480c      	ldr	r0, [pc, #48]	; (80075f4 <prvInitialiseTaskLists+0x70>)
 80075c4:	f7ff fb0e 	bl	8006be4 <vListInitialise>
 80075c8:	480b      	ldr	r0, [pc, #44]	; (80075f8 <prvInitialiseTaskLists+0x74>)
 80075ca:	f7ff fb0b 	bl	8006be4 <vListInitialise>
 80075ce:	4b0b      	ldr	r3, [pc, #44]	; (80075fc <prvInitialiseTaskLists+0x78>)
 80075d0:	4a05      	ldr	r2, [pc, #20]	; (80075e8 <prvInitialiseTaskLists+0x64>)
 80075d2:	601a      	str	r2, [r3, #0]
 80075d4:	4b0a      	ldr	r3, [pc, #40]	; (8007600 <prvInitialiseTaskLists+0x7c>)
 80075d6:	4a05      	ldr	r2, [pc, #20]	; (80075ec <prvInitialiseTaskLists+0x68>)
 80075d8:	601a      	str	r2, [r3, #0]
 80075da:	bf00      	nop
 80075dc:	3708      	adds	r7, #8
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	200007fc 	.word	0x200007fc
 80075e8:	20000888 	.word	0x20000888
 80075ec:	2000089c 	.word	0x2000089c
 80075f0:	200008b8 	.word	0x200008b8
 80075f4:	200008cc 	.word	0x200008cc
 80075f8:	200008e4 	.word	0x200008e4
 80075fc:	200008b0 	.word	0x200008b0
 8007600:	200008b4 	.word	0x200008b4

08007604 <prvCheckTasksWaitingTermination>:
 8007604:	b580      	push	{r7, lr}
 8007606:	b082      	sub	sp, #8
 8007608:	af00      	add	r7, sp, #0
 800760a:	e019      	b.n	8007640 <prvCheckTasksWaitingTermination+0x3c>
 800760c:	f000 f9d6 	bl	80079bc <vPortEnterCritical>
 8007610:	4b10      	ldr	r3, [pc, #64]	; (8007654 <prvCheckTasksWaitingTermination+0x50>)
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	68db      	ldr	r3, [r3, #12]
 8007616:	607b      	str	r3, [r7, #4]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	3304      	adds	r3, #4
 800761c:	4618      	mov	r0, r3
 800761e:	f7ff fb67 	bl	8006cf0 <uxListRemove>
 8007622:	4b0d      	ldr	r3, [pc, #52]	; (8007658 <prvCheckTasksWaitingTermination+0x54>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3b01      	subs	r3, #1
 8007628:	4a0b      	ldr	r2, [pc, #44]	; (8007658 <prvCheckTasksWaitingTermination+0x54>)
 800762a:	6013      	str	r3, [r2, #0]
 800762c:	4b0b      	ldr	r3, [pc, #44]	; (800765c <prvCheckTasksWaitingTermination+0x58>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3b01      	subs	r3, #1
 8007632:	4a0a      	ldr	r2, [pc, #40]	; (800765c <prvCheckTasksWaitingTermination+0x58>)
 8007634:	6013      	str	r3, [r2, #0]
 8007636:	f000 f9f1 	bl	8007a1c <vPortExitCritical>
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 f810 	bl	8007660 <prvDeleteTCB>
 8007640:	4b06      	ldr	r3, [pc, #24]	; (800765c <prvCheckTasksWaitingTermination+0x58>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d1e1      	bne.n	800760c <prvCheckTasksWaitingTermination+0x8>
 8007648:	bf00      	nop
 800764a:	bf00      	nop
 800764c:	3708      	adds	r7, #8
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	200008cc 	.word	0x200008cc
 8007658:	200008f8 	.word	0x200008f8
 800765c:	200008e0 	.word	0x200008e0

08007660 <prvDeleteTCB>:
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	334c      	adds	r3, #76	; 0x4c
 800766c:	4618      	mov	r0, r3
 800766e:	f001 f9ff 	bl	8008a70 <_reclaim_reent>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007678:	2b00      	cmp	r3, #0
 800767a:	d108      	bne.n	800768e <prvDeleteTCB+0x2e>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007680:	4618      	mov	r0, r3
 8007682:	f000 fb21 	bl	8007cc8 <vPortFree>
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fb1e 	bl	8007cc8 <vPortFree>
 800768c:	e018      	b.n	80076c0 <prvDeleteTCB+0x60>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8007694:	2b01      	cmp	r3, #1
 8007696:	d103      	bne.n	80076a0 <prvDeleteTCB+0x40>
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fb15 	bl	8007cc8 <vPortFree>
 800769e:	e00f      	b.n	80076c0 <prvDeleteTCB+0x60>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d00a      	beq.n	80076c0 <prvDeleteTCB+0x60>
 80076aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	60fb      	str	r3, [r7, #12]
 80076bc:	bf00      	nop
 80076be:	e7fe      	b.n	80076be <prvDeleteTCB+0x5e>
 80076c0:	bf00      	nop
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <prvResetNextTaskUnblockTime>:
 80076c8:	b480      	push	{r7}
 80076ca:	b083      	sub	sp, #12
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	4b0e      	ldr	r3, [pc, #56]	; (8007708 <prvResetNextTaskUnblockTime+0x40>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <prvResetNextTaskUnblockTime+0x14>
 80076d8:	2301      	movs	r3, #1
 80076da:	e000      	b.n	80076de <prvResetNextTaskUnblockTime+0x16>
 80076dc:	2300      	movs	r3, #0
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d004      	beq.n	80076ec <prvResetNextTaskUnblockTime+0x24>
 80076e2:	4b0a      	ldr	r3, [pc, #40]	; (800770c <prvResetNextTaskUnblockTime+0x44>)
 80076e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	e008      	b.n	80076fe <prvResetNextTaskUnblockTime+0x36>
 80076ec:	4b06      	ldr	r3, [pc, #24]	; (8007708 <prvResetNextTaskUnblockTime+0x40>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	607b      	str	r3, [r7, #4]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	4a04      	ldr	r2, [pc, #16]	; (800770c <prvResetNextTaskUnblockTime+0x44>)
 80076fc:	6013      	str	r3, [r2, #0]
 80076fe:	bf00      	nop
 8007700:	370c      	adds	r7, #12
 8007702:	46bd      	mov	sp, r7
 8007704:	bc80      	pop	{r7}
 8007706:	4770      	bx	lr
 8007708:	200008b0 	.word	0x200008b0
 800770c:	20000918 	.word	0x20000918

08007710 <prvAddCurrentTaskToDelayedList>:
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
 8007718:	6039      	str	r1, [r7, #0]
 800771a:	4b29      	ldr	r3, [pc, #164]	; (80077c0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	4b28      	ldr	r3, [pc, #160]	; (80077c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3304      	adds	r3, #4
 8007726:	4618      	mov	r0, r3
 8007728:	f7ff fae2 	bl	8006cf0 <uxListRemove>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d10b      	bne.n	800774a <prvAddCurrentTaskToDelayedList+0x3a>
 8007732:	4b24      	ldr	r3, [pc, #144]	; (80077c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007738:	2201      	movs	r2, #1
 800773a:	fa02 f303 	lsl.w	r3, r2, r3
 800773e:	43da      	mvns	r2, r3
 8007740:	4b21      	ldr	r3, [pc, #132]	; (80077c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4013      	ands	r3, r2
 8007746:	4a20      	ldr	r2, [pc, #128]	; (80077c8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007748:	6013      	str	r3, [r2, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007750:	d10a      	bne.n	8007768 <prvAddCurrentTaskToDelayedList+0x58>
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d007      	beq.n	8007768 <prvAddCurrentTaskToDelayedList+0x58>
 8007758:	4b1a      	ldr	r3, [pc, #104]	; (80077c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	3304      	adds	r3, #4
 800775e:	4619      	mov	r1, r3
 8007760:	481a      	ldr	r0, [pc, #104]	; (80077cc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007762:	f7ff fa6a 	bl	8006c3a <vListInsertEnd>
 8007766:	e026      	b.n	80077b6 <prvAddCurrentTaskToDelayedList+0xa6>
 8007768:	68fa      	ldr	r2, [r7, #12]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	4413      	add	r3, r2
 800776e:	60bb      	str	r3, [r7, #8]
 8007770:	4b14      	ldr	r3, [pc, #80]	; (80077c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	605a      	str	r2, [r3, #4]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	429a      	cmp	r2, r3
 800777e:	d209      	bcs.n	8007794 <prvAddCurrentTaskToDelayedList+0x84>
 8007780:	4b13      	ldr	r3, [pc, #76]	; (80077d0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	4b0f      	ldr	r3, [pc, #60]	; (80077c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3304      	adds	r3, #4
 800778a:	4619      	mov	r1, r3
 800778c:	4610      	mov	r0, r2
 800778e:	f7ff fa77 	bl	8006c80 <vListInsert>
 8007792:	e010      	b.n	80077b6 <prvAddCurrentTaskToDelayedList+0xa6>
 8007794:	4b0f      	ldr	r3, [pc, #60]	; (80077d4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	4b0a      	ldr	r3, [pc, #40]	; (80077c4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3304      	adds	r3, #4
 800779e:	4619      	mov	r1, r3
 80077a0:	4610      	mov	r0, r2
 80077a2:	f7ff fa6d 	bl	8006c80 <vListInsert>
 80077a6:	4b0c      	ldr	r3, [pc, #48]	; (80077d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d202      	bcs.n	80077b6 <prvAddCurrentTaskToDelayedList+0xa6>
 80077b0:	4a09      	ldr	r2, [pc, #36]	; (80077d8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	6013      	str	r3, [r2, #0]
 80077b6:	bf00      	nop
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	200008fc 	.word	0x200008fc
 80077c4:	200007f8 	.word	0x200007f8
 80077c8:	20000900 	.word	0x20000900
 80077cc:	200008e4 	.word	0x200008e4
 80077d0:	200008b4 	.word	0x200008b4
 80077d4:	200008b0 	.word	0x200008b0
 80077d8:	20000918 	.word	0x20000918

080077dc <pxPortInitialiseStack>:
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3b04      	subs	r3, #4
 80077ec:	60fb      	str	r3, [r7, #12]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077f4:	601a      	str	r2, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	3b04      	subs	r3, #4
 80077fa:	60fb      	str	r3, [r7, #12]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	f023 0201 	bic.w	r2, r3, #1
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	601a      	str	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3b04      	subs	r3, #4
 800780a:	60fb      	str	r3, [r7, #12]
 800780c:	4a08      	ldr	r2, [pc, #32]	; (8007830 <pxPortInitialiseStack+0x54>)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	601a      	str	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	3b14      	subs	r3, #20
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	601a      	str	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3b20      	subs	r3, #32
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	4618      	mov	r0, r3
 8007828:	3714      	adds	r7, #20
 800782a:	46bd      	mov	sp, r7
 800782c:	bc80      	pop	{r7}
 800782e:	4770      	bx	lr
 8007830:	08007835 	.word	0x08007835

08007834 <prvTaskExitError>:
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	2300      	movs	r3, #0
 800783c:	607b      	str	r3, [r7, #4]
 800783e:	4b12      	ldr	r3, [pc, #72]	; (8007888 <prvTaskExitError+0x54>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007846:	d00a      	beq.n	800785e <prvTaskExitError+0x2a>
 8007848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784c:	f383 8811 	msr	BASEPRI, r3
 8007850:	f3bf 8f6f 	isb	sy
 8007854:	f3bf 8f4f 	dsb	sy
 8007858:	60fb      	str	r3, [r7, #12]
 800785a:	bf00      	nop
 800785c:	e7fe      	b.n	800785c <prvTaskExitError+0x28>
 800785e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	60bb      	str	r3, [r7, #8]
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0fc      	beq.n	8007874 <prvTaskExitError+0x40>
 800787a:	bf00      	nop
 800787c:	bf00      	nop
 800787e:	3714      	adds	r7, #20
 8007880:	46bd      	mov	sp, r7
 8007882:	bc80      	pop	{r7}
 8007884:	4770      	bx	lr
 8007886:	bf00      	nop
 8007888:	2000000c 	.word	0x2000000c
 800788c:	00000000 	.word	0x00000000

08007890 <SVC_Handler>:
 8007890:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <pxCurrentTCBConst2>)
 8007892:	6819      	ldr	r1, [r3, #0]
 8007894:	6808      	ldr	r0, [r1, #0]
 8007896:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800789a:	f380 8809 	msr	PSP, r0
 800789e:	f3bf 8f6f 	isb	sy
 80078a2:	f04f 0000 	mov.w	r0, #0
 80078a6:	f380 8811 	msr	BASEPRI, r0
 80078aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80078ae:	4770      	bx	lr

080078b0 <pxCurrentTCBConst2>:
 80078b0:	200007f8 	.word	0x200007f8
 80078b4:	bf00      	nop
 80078b6:	bf00      	nop

080078b8 <prvPortStartFirstTask>:
 80078b8:	4806      	ldr	r0, [pc, #24]	; (80078d4 <prvPortStartFirstTask+0x1c>)
 80078ba:	6800      	ldr	r0, [r0, #0]
 80078bc:	6800      	ldr	r0, [r0, #0]
 80078be:	f380 8808 	msr	MSP, r0
 80078c2:	b662      	cpsie	i
 80078c4:	b661      	cpsie	f
 80078c6:	f3bf 8f4f 	dsb	sy
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	df00      	svc	0
 80078d0:	bf00      	nop
 80078d2:	bf00      	nop
 80078d4:	e000ed08 	.word	0xe000ed08

080078d8 <xPortStartScheduler>:
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	4b32      	ldr	r3, [pc, #200]	; (80079a8 <xPortStartScheduler+0xd0>)
 80078e0:	60fb      	str	r3, [r7, #12]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	607b      	str	r3, [r7, #4]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	22ff      	movs	r2, #255	; 0xff
 80078ee:	701a      	strb	r2, [r3, #0]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	781b      	ldrb	r3, [r3, #0]
 80078f4:	b2db      	uxtb	r3, r3
 80078f6:	70fb      	strb	r3, [r7, #3]
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007900:	b2da      	uxtb	r2, r3
 8007902:	4b2a      	ldr	r3, [pc, #168]	; (80079ac <xPortStartScheduler+0xd4>)
 8007904:	701a      	strb	r2, [r3, #0]
 8007906:	4b2a      	ldr	r3, [pc, #168]	; (80079b0 <xPortStartScheduler+0xd8>)
 8007908:	2207      	movs	r2, #7
 800790a:	601a      	str	r2, [r3, #0]
 800790c:	e009      	b.n	8007922 <xPortStartScheduler+0x4a>
 800790e:	4b28      	ldr	r3, [pc, #160]	; (80079b0 <xPortStartScheduler+0xd8>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	3b01      	subs	r3, #1
 8007914:	4a26      	ldr	r2, [pc, #152]	; (80079b0 <xPortStartScheduler+0xd8>)
 8007916:	6013      	str	r3, [r2, #0]
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	b2db      	uxtb	r3, r3
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	b2db      	uxtb	r3, r3
 8007920:	70fb      	strb	r3, [r7, #3]
 8007922:	78fb      	ldrb	r3, [r7, #3]
 8007924:	b2db      	uxtb	r3, r3
 8007926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800792a:	2b80      	cmp	r3, #128	; 0x80
 800792c:	d0ef      	beq.n	800790e <xPortStartScheduler+0x36>
 800792e:	4b20      	ldr	r3, [pc, #128]	; (80079b0 <xPortStartScheduler+0xd8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f1c3 0307 	rsb	r3, r3, #7
 8007936:	2b04      	cmp	r3, #4
 8007938:	d00a      	beq.n	8007950 <xPortStartScheduler+0x78>
 800793a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800793e:	f383 8811 	msr	BASEPRI, r3
 8007942:	f3bf 8f6f 	isb	sy
 8007946:	f3bf 8f4f 	dsb	sy
 800794a:	60bb      	str	r3, [r7, #8]
 800794c:	bf00      	nop
 800794e:	e7fe      	b.n	800794e <xPortStartScheduler+0x76>
 8007950:	4b17      	ldr	r3, [pc, #92]	; (80079b0 <xPortStartScheduler+0xd8>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	021b      	lsls	r3, r3, #8
 8007956:	4a16      	ldr	r2, [pc, #88]	; (80079b0 <xPortStartScheduler+0xd8>)
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	4b15      	ldr	r3, [pc, #84]	; (80079b0 <xPortStartScheduler+0xd8>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007962:	4a13      	ldr	r2, [pc, #76]	; (80079b0 <xPortStartScheduler+0xd8>)
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	b2da      	uxtb	r2, r3
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	4b11      	ldr	r3, [pc, #68]	; (80079b4 <xPortStartScheduler+0xdc>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a10      	ldr	r2, [pc, #64]	; (80079b4 <xPortStartScheduler+0xdc>)
 8007974:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	4b0e      	ldr	r3, [pc, #56]	; (80079b4 <xPortStartScheduler+0xdc>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a0d      	ldr	r2, [pc, #52]	; (80079b4 <xPortStartScheduler+0xdc>)
 8007980:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007984:	6013      	str	r3, [r2, #0]
 8007986:	f000 f8b9 	bl	8007afc <vPortSetupTimerInterrupt>
 800798a:	4b0b      	ldr	r3, [pc, #44]	; (80079b8 <xPortStartScheduler+0xe0>)
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	f7ff ff92 	bl	80078b8 <prvPortStartFirstTask>
 8007994:	f7ff fd7c 	bl	8007490 <vTaskSwitchContext>
 8007998:	f7ff ff4c 	bl	8007834 <prvTaskExitError>
 800799c:	2300      	movs	r3, #0
 800799e:	4618      	mov	r0, r3
 80079a0:	3710      	adds	r7, #16
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	e000e400 	.word	0xe000e400
 80079ac:	20000924 	.word	0x20000924
 80079b0:	20000928 	.word	0x20000928
 80079b4:	e000ed20 	.word	0xe000ed20
 80079b8:	2000000c 	.word	0x2000000c

080079bc <vPortEnterCritical>:
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	f383 8811 	msr	BASEPRI, r3
 80079ca:	f3bf 8f6f 	isb	sy
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	607b      	str	r3, [r7, #4]
 80079d4:	bf00      	nop
 80079d6:	4b0f      	ldr	r3, [pc, #60]	; (8007a14 <vPortEnterCritical+0x58>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	3301      	adds	r3, #1
 80079dc:	4a0d      	ldr	r2, [pc, #52]	; (8007a14 <vPortEnterCritical+0x58>)
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	4b0c      	ldr	r3, [pc, #48]	; (8007a14 <vPortEnterCritical+0x58>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d10f      	bne.n	8007a08 <vPortEnterCritical+0x4c>
 80079e8:	4b0b      	ldr	r3, [pc, #44]	; (8007a18 <vPortEnterCritical+0x5c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d00a      	beq.n	8007a08 <vPortEnterCritical+0x4c>
 80079f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f6:	f383 8811 	msr	BASEPRI, r3
 80079fa:	f3bf 8f6f 	isb	sy
 80079fe:	f3bf 8f4f 	dsb	sy
 8007a02:	603b      	str	r3, [r7, #0]
 8007a04:	bf00      	nop
 8007a06:	e7fe      	b.n	8007a06 <vPortEnterCritical+0x4a>
 8007a08:	bf00      	nop
 8007a0a:	370c      	adds	r7, #12
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bc80      	pop	{r7}
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	2000000c 	.word	0x2000000c
 8007a18:	e000ed04 	.word	0xe000ed04

08007a1c <vPortExitCritical>:
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	4b11      	ldr	r3, [pc, #68]	; (8007a68 <vPortExitCritical+0x4c>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10a      	bne.n	8007a40 <vPortExitCritical+0x24>
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	607b      	str	r3, [r7, #4]
 8007a3c:	bf00      	nop
 8007a3e:	e7fe      	b.n	8007a3e <vPortExitCritical+0x22>
 8007a40:	4b09      	ldr	r3, [pc, #36]	; (8007a68 <vPortExitCritical+0x4c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3b01      	subs	r3, #1
 8007a46:	4a08      	ldr	r2, [pc, #32]	; (8007a68 <vPortExitCritical+0x4c>)
 8007a48:	6013      	str	r3, [r2, #0]
 8007a4a:	4b07      	ldr	r3, [pc, #28]	; (8007a68 <vPortExitCritical+0x4c>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d105      	bne.n	8007a5e <vPortExitCritical+0x42>
 8007a52:	2300      	movs	r3, #0
 8007a54:	603b      	str	r3, [r7, #0]
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	f383 8811 	msr	BASEPRI, r3
 8007a5c:	bf00      	nop
 8007a5e:	bf00      	nop
 8007a60:	370c      	adds	r7, #12
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bc80      	pop	{r7}
 8007a66:	4770      	bx	lr
 8007a68:	2000000c 	.word	0x2000000c
 8007a6c:	00000000 	.word	0x00000000

08007a70 <PendSV_Handler>:
 8007a70:	f3ef 8009 	mrs	r0, PSP
 8007a74:	f3bf 8f6f 	isb	sy
 8007a78:	4b0d      	ldr	r3, [pc, #52]	; (8007ab0 <pxCurrentTCBConst>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007a80:	6010      	str	r0, [r2, #0]
 8007a82:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007a86:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007a8a:	f380 8811 	msr	BASEPRI, r0
 8007a8e:	f7ff fcff 	bl	8007490 <vTaskSwitchContext>
 8007a92:	f04f 0000 	mov.w	r0, #0
 8007a96:	f380 8811 	msr	BASEPRI, r0
 8007a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8007a9e:	6819      	ldr	r1, [r3, #0]
 8007aa0:	6808      	ldr	r0, [r1, #0]
 8007aa2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007aa6:	f380 8809 	msr	PSP, r0
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	4770      	bx	lr

08007ab0 <pxCurrentTCBConst>:
 8007ab0:	200007f8 	.word	0x200007f8
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop

08007ab8 <SysTick_Handler>:
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ac2:	f383 8811 	msr	BASEPRI, r3
 8007ac6:	f3bf 8f6f 	isb	sy
 8007aca:	f3bf 8f4f 	dsb	sy
 8007ace:	607b      	str	r3, [r7, #4]
 8007ad0:	bf00      	nop
 8007ad2:	f7ff fc1f 	bl	8007314 <xTaskIncrementTick>
 8007ad6:	4603      	mov	r3, r0
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d003      	beq.n	8007ae4 <SysTick_Handler+0x2c>
 8007adc:	4b06      	ldr	r3, [pc, #24]	; (8007af8 <SysTick_Handler+0x40>)
 8007ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ae2:	601a      	str	r2, [r3, #0]
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	603b      	str	r3, [r7, #0]
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	bf00      	nop
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}
 8007af8:	e000ed04 	.word	0xe000ed04

08007afc <vPortSetupTimerInterrupt>:
 8007afc:	b480      	push	{r7}
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	4b0a      	ldr	r3, [pc, #40]	; (8007b2c <vPortSetupTimerInterrupt+0x30>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	4b0a      	ldr	r3, [pc, #40]	; (8007b30 <vPortSetupTimerInterrupt+0x34>)
 8007b08:	2200      	movs	r2, #0
 8007b0a:	601a      	str	r2, [r3, #0]
 8007b0c:	4b09      	ldr	r3, [pc, #36]	; (8007b34 <vPortSetupTimerInterrupt+0x38>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a09      	ldr	r2, [pc, #36]	; (8007b38 <vPortSetupTimerInterrupt+0x3c>)
 8007b12:	fba2 2303 	umull	r2, r3, r2, r3
 8007b16:	099b      	lsrs	r3, r3, #6
 8007b18:	4a08      	ldr	r2, [pc, #32]	; (8007b3c <vPortSetupTimerInterrupt+0x40>)
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	6013      	str	r3, [r2, #0]
 8007b1e:	4b03      	ldr	r3, [pc, #12]	; (8007b2c <vPortSetupTimerInterrupt+0x30>)
 8007b20:	2207      	movs	r2, #7
 8007b22:	601a      	str	r2, [r3, #0]
 8007b24:	bf00      	nop
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr
 8007b2c:	e000e010 	.word	0xe000e010
 8007b30:	e000e018 	.word	0xe000e018
 8007b34:	20000000 	.word	0x20000000
 8007b38:	10624dd3 	.word	0x10624dd3
 8007b3c:	e000e014 	.word	0xe000e014

08007b40 <pvPortMalloc>:
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b08a      	sub	sp, #40	; 0x28
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	2300      	movs	r3, #0
 8007b4a:	61fb      	str	r3, [r7, #28]
 8007b4c:	f7ff fb38 	bl	80071c0 <vTaskSuspendAll>
 8007b50:	4b58      	ldr	r3, [pc, #352]	; (8007cb4 <pvPortMalloc+0x174>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d101      	bne.n	8007b5c <pvPortMalloc+0x1c>
 8007b58:	f000 f910 	bl	8007d7c <prvHeapInit>
 8007b5c:	4b56      	ldr	r3, [pc, #344]	; (8007cb8 <pvPortMalloc+0x178>)
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	4013      	ands	r3, r2
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f040 808e 	bne.w	8007c86 <pvPortMalloc+0x146>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d01d      	beq.n	8007bac <pvPortMalloc+0x6c>
 8007b70:	2208      	movs	r2, #8
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4413      	add	r3, r2
 8007b76:	607b      	str	r3, [r7, #4]
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f003 0307 	and.w	r3, r3, #7
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d014      	beq.n	8007bac <pvPortMalloc+0x6c>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f023 0307 	bic.w	r3, r3, #7
 8007b88:	3308      	adds	r3, #8
 8007b8a:	607b      	str	r3, [r7, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f003 0307 	and.w	r3, r3, #7
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d00a      	beq.n	8007bac <pvPortMalloc+0x6c>
 8007b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9a:	f383 8811 	msr	BASEPRI, r3
 8007b9e:	f3bf 8f6f 	isb	sy
 8007ba2:	f3bf 8f4f 	dsb	sy
 8007ba6:	617b      	str	r3, [r7, #20]
 8007ba8:	bf00      	nop
 8007baa:	e7fe      	b.n	8007baa <pvPortMalloc+0x6a>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d069      	beq.n	8007c86 <pvPortMalloc+0x146>
 8007bb2:	4b42      	ldr	r3, [pc, #264]	; (8007cbc <pvPortMalloc+0x17c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	687a      	ldr	r2, [r7, #4]
 8007bb8:	429a      	cmp	r2, r3
 8007bba:	d864      	bhi.n	8007c86 <pvPortMalloc+0x146>
 8007bbc:	4b40      	ldr	r3, [pc, #256]	; (8007cc0 <pvPortMalloc+0x180>)
 8007bbe:	623b      	str	r3, [r7, #32]
 8007bc0:	4b3f      	ldr	r3, [pc, #252]	; (8007cc0 <pvPortMalloc+0x180>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc6:	e004      	b.n	8007bd2 <pvPortMalloc+0x92>
 8007bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bca:	623b      	str	r3, [r7, #32]
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bd4:	685b      	ldr	r3, [r3, #4]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d903      	bls.n	8007be4 <pvPortMalloc+0xa4>
 8007bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d1f1      	bne.n	8007bc8 <pvPortMalloc+0x88>
 8007be4:	4b33      	ldr	r3, [pc, #204]	; (8007cb4 <pvPortMalloc+0x174>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d04b      	beq.n	8007c86 <pvPortMalloc+0x146>
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2208      	movs	r2, #8
 8007bf4:	4413      	add	r3, r2
 8007bf6:	61fb      	str	r3, [r7, #28]
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bfa:	681a      	ldr	r2, [r3, #0]
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	685a      	ldr	r2, [r3, #4]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	1ad2      	subs	r2, r2, r3
 8007c08:	2308      	movs	r3, #8
 8007c0a:	005b      	lsls	r3, r3, #1
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d91f      	bls.n	8007c50 <pvPortMalloc+0x110>
 8007c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	4413      	add	r3, r2
 8007c16:	61bb      	str	r3, [r7, #24]
 8007c18:	69bb      	ldr	r3, [r7, #24]
 8007c1a:	f003 0307 	and.w	r3, r3, #7
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <pvPortMalloc+0xf8>
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	613b      	str	r3, [r7, #16]
 8007c34:	bf00      	nop
 8007c36:	e7fe      	b.n	8007c36 <pvPortMalloc+0xf6>
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	1ad2      	subs	r2, r2, r3
 8007c40:	69bb      	ldr	r3, [r7, #24]
 8007c42:	605a      	str	r2, [r3, #4]
 8007c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	605a      	str	r2, [r3, #4]
 8007c4a:	69b8      	ldr	r0, [r7, #24]
 8007c4c:	f000 f8f8 	bl	8007e40 <prvInsertBlockIntoFreeList>
 8007c50:	4b1a      	ldr	r3, [pc, #104]	; (8007cbc <pvPortMalloc+0x17c>)
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	4a18      	ldr	r2, [pc, #96]	; (8007cbc <pvPortMalloc+0x17c>)
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	4b17      	ldr	r3, [pc, #92]	; (8007cbc <pvPortMalloc+0x17c>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	4b18      	ldr	r3, [pc, #96]	; (8007cc4 <pvPortMalloc+0x184>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	429a      	cmp	r2, r3
 8007c68:	d203      	bcs.n	8007c72 <pvPortMalloc+0x132>
 8007c6a:	4b14      	ldr	r3, [pc, #80]	; (8007cbc <pvPortMalloc+0x17c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a15      	ldr	r2, [pc, #84]	; (8007cc4 <pvPortMalloc+0x184>)
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	4b10      	ldr	r3, [pc, #64]	; (8007cb8 <pvPortMalloc+0x178>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c7e:	605a      	str	r2, [r3, #4]
 8007c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	f7ff faa9 	bl	80071dc <xTaskResumeAll>
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	f003 0307 	and.w	r3, r3, #7
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d00a      	beq.n	8007caa <pvPortMalloc+0x16a>
 8007c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	bf00      	nop
 8007ca8:	e7fe      	b.n	8007ca8 <pvPortMalloc+0x168>
 8007caa:	69fb      	ldr	r3, [r7, #28]
 8007cac:	4618      	mov	r0, r3
 8007cae:	3728      	adds	r7, #40	; 0x28
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20001534 	.word	0x20001534
 8007cb8:	20001540 	.word	0x20001540
 8007cbc:	20001538 	.word	0x20001538
 8007cc0:	2000152c 	.word	0x2000152c
 8007cc4:	2000153c 	.word	0x2000153c

08007cc8 <vPortFree>:
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	617b      	str	r3, [r7, #20]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d048      	beq.n	8007d6c <vPortFree+0xa4>
 8007cda:	2308      	movs	r3, #8
 8007cdc:	425b      	negs	r3, r3
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4413      	add	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	613b      	str	r3, [r7, #16]
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	4b21      	ldr	r3, [pc, #132]	; (8007d74 <vPortFree+0xac>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d10a      	bne.n	8007d0c <vPortFree+0x44>
 8007cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	bf00      	nop
 8007d0a:	e7fe      	b.n	8007d0a <vPortFree+0x42>
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d00a      	beq.n	8007d2a <vPortFree+0x62>
 8007d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d18:	f383 8811 	msr	BASEPRI, r3
 8007d1c:	f3bf 8f6f 	isb	sy
 8007d20:	f3bf 8f4f 	dsb	sy
 8007d24:	60bb      	str	r3, [r7, #8]
 8007d26:	bf00      	nop
 8007d28:	e7fe      	b.n	8007d28 <vPortFree+0x60>
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	4b11      	ldr	r3, [pc, #68]	; (8007d74 <vPortFree+0xac>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	4013      	ands	r3, r2
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d019      	beq.n	8007d6c <vPortFree+0xa4>
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d115      	bne.n	8007d6c <vPortFree+0xa4>
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	4b0b      	ldr	r3, [pc, #44]	; (8007d74 <vPortFree+0xac>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	43db      	mvns	r3, r3
 8007d4a:	401a      	ands	r2, r3
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	605a      	str	r2, [r3, #4]
 8007d50:	f7ff fa36 	bl	80071c0 <vTaskSuspendAll>
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	4b07      	ldr	r3, [pc, #28]	; (8007d78 <vPortFree+0xb0>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4413      	add	r3, r2
 8007d5e:	4a06      	ldr	r2, [pc, #24]	; (8007d78 <vPortFree+0xb0>)
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	6938      	ldr	r0, [r7, #16]
 8007d64:	f000 f86c 	bl	8007e40 <prvInsertBlockIntoFreeList>
 8007d68:	f7ff fa38 	bl	80071dc <xTaskResumeAll>
 8007d6c:	bf00      	nop
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	20001540 	.word	0x20001540
 8007d78:	20001538 	.word	0x20001538

08007d7c <prvHeapInit>:
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007d86:	60bb      	str	r3, [r7, #8]
 8007d88:	4b27      	ldr	r3, [pc, #156]	; (8007e28 <prvHeapInit+0xac>)
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00c      	beq.n	8007db0 <prvHeapInit+0x34>
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3307      	adds	r3, #7
 8007d9a:	60fb      	str	r3, [r7, #12]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0307 	bic.w	r3, r3, #7
 8007da2:	60fb      	str	r3, [r7, #12]
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	4a1f      	ldr	r2, [pc, #124]	; (8007e28 <prvHeapInit+0xac>)
 8007dac:	4413      	add	r3, r2
 8007dae:	60bb      	str	r3, [r7, #8]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	607b      	str	r3, [r7, #4]
 8007db4:	4a1d      	ldr	r2, [pc, #116]	; (8007e2c <prvHeapInit+0xb0>)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6013      	str	r3, [r2, #0]
 8007dba:	4b1c      	ldr	r3, [pc, #112]	; (8007e2c <prvHeapInit+0xb0>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	605a      	str	r2, [r3, #4]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	4413      	add	r3, r2
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	2208      	movs	r2, #8
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	1a9b      	subs	r3, r3, r2
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f023 0307 	bic.w	r3, r3, #7
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4a15      	ldr	r2, [pc, #84]	; (8007e30 <prvHeapInit+0xb4>)
 8007ddc:	6013      	str	r3, [r2, #0]
 8007dde:	4b14      	ldr	r3, [pc, #80]	; (8007e30 <prvHeapInit+0xb4>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	2200      	movs	r2, #0
 8007de4:	605a      	str	r2, [r3, #4]
 8007de6:	4b12      	ldr	r3, [pc, #72]	; (8007e30 <prvHeapInit+0xb4>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	603b      	str	r3, [r7, #0]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	68fa      	ldr	r2, [r7, #12]
 8007df6:	1ad2      	subs	r2, r2, r3
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	605a      	str	r2, [r3, #4]
 8007dfc:	4b0c      	ldr	r3, [pc, #48]	; (8007e30 <prvHeapInit+0xb4>)
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	601a      	str	r2, [r3, #0]
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	4a0a      	ldr	r2, [pc, #40]	; (8007e34 <prvHeapInit+0xb8>)
 8007e0a:	6013      	str	r3, [r2, #0]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	685b      	ldr	r3, [r3, #4]
 8007e10:	4a09      	ldr	r2, [pc, #36]	; (8007e38 <prvHeapInit+0xbc>)
 8007e12:	6013      	str	r3, [r2, #0]
 8007e14:	4b09      	ldr	r3, [pc, #36]	; (8007e3c <prvHeapInit+0xc0>)
 8007e16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	bf00      	nop
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bc80      	pop	{r7}
 8007e24:	4770      	bx	lr
 8007e26:	bf00      	nop
 8007e28:	2000092c 	.word	0x2000092c
 8007e2c:	2000152c 	.word	0x2000152c
 8007e30:	20001534 	.word	0x20001534
 8007e34:	2000153c 	.word	0x2000153c
 8007e38:	20001538 	.word	0x20001538
 8007e3c:	20001540 	.word	0x20001540

08007e40 <prvInsertBlockIntoFreeList>:
 8007e40:	b480      	push	{r7}
 8007e42:	b085      	sub	sp, #20
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	4b27      	ldr	r3, [pc, #156]	; (8007ee8 <prvInsertBlockIntoFreeList+0xa8>)
 8007e4a:	60fb      	str	r3, [r7, #12]
 8007e4c:	e002      	b.n	8007e54 <prvInsertBlockIntoFreeList+0x14>
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	60fb      	str	r3, [r7, #12]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d8f7      	bhi.n	8007e4e <prvInsertBlockIntoFreeList+0xe>
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	60bb      	str	r3, [r7, #8]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	685b      	ldr	r3, [r3, #4]
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	4413      	add	r3, r2
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	429a      	cmp	r2, r3
 8007e6e:	d108      	bne.n	8007e82 <prvInsertBlockIntoFreeList+0x42>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	685a      	ldr	r2, [r3, #4]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	441a      	add	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	605a      	str	r2, [r3, #4]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	607b      	str	r3, [r7, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	60bb      	str	r3, [r7, #8]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	685b      	ldr	r3, [r3, #4]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	441a      	add	r2, r3
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d118      	bne.n	8007ec8 <prvInsertBlockIntoFreeList+0x88>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	4b14      	ldr	r3, [pc, #80]	; (8007eec <prvInsertBlockIntoFreeList+0xac>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	429a      	cmp	r2, r3
 8007ea0:	d00d      	beq.n	8007ebe <prvInsertBlockIntoFreeList+0x7e>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	685a      	ldr	r2, [r3, #4]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	441a      	add	r2, r3
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	605a      	str	r2, [r3, #4]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	681a      	ldr	r2, [r3, #0]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	601a      	str	r2, [r3, #0]
 8007ebc:	e008      	b.n	8007ed0 <prvInsertBlockIntoFreeList+0x90>
 8007ebe:	4b0b      	ldr	r3, [pc, #44]	; (8007eec <prvInsertBlockIntoFreeList+0xac>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	601a      	str	r2, [r3, #0]
 8007ec6:	e003      	b.n	8007ed0 <prvInsertBlockIntoFreeList+0x90>
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681a      	ldr	r2, [r3, #0]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	68fa      	ldr	r2, [r7, #12]
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d002      	beq.n	8007ede <prvInsertBlockIntoFreeList+0x9e>
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	bf00      	nop
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bc80      	pop	{r7}
 8007ee6:	4770      	bx	lr
 8007ee8:	2000152c 	.word	0x2000152c
 8007eec:	20001534 	.word	0x20001534

08007ef0 <ceilf>:
 8007ef0:	b570      	push	{r4, r5, r6, lr}
 8007ef2:	f3c0 55c7 	ubfx	r5, r0, #23, #8
 8007ef6:	3d7f      	subs	r5, #127	; 0x7f
 8007ef8:	2d16      	cmp	r5, #22
 8007efa:	4601      	mov	r1, r0
 8007efc:	4604      	mov	r4, r0
 8007efe:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8007f02:	dc25      	bgt.n	8007f50 <ceilf+0x60>
 8007f04:	2d00      	cmp	r5, #0
 8007f06:	da0e      	bge.n	8007f26 <ceilf+0x36>
 8007f08:	4917      	ldr	r1, [pc, #92]	; (8007f68 <ceilf+0x78>)
 8007f0a:	f7f8 fe13 	bl	8000b34 <__addsf3>
 8007f0e:	2100      	movs	r1, #0
 8007f10:	f7f9 f8d4 	bl	80010bc <__aeabi_fcmpgt>
 8007f14:	b128      	cbz	r0, 8007f22 <ceilf+0x32>
 8007f16:	2c00      	cmp	r4, #0
 8007f18:	db22      	blt.n	8007f60 <ceilf+0x70>
 8007f1a:	2e00      	cmp	r6, #0
 8007f1c:	bf18      	it	ne
 8007f1e:	f04f 547e 	movne.w	r4, #1065353216	; 0x3f800000
 8007f22:	4621      	mov	r1, r4
 8007f24:	e01a      	b.n	8007f5c <ceilf+0x6c>
 8007f26:	4e11      	ldr	r6, [pc, #68]	; (8007f6c <ceilf+0x7c>)
 8007f28:	412e      	asrs	r6, r5
 8007f2a:	4230      	tst	r0, r6
 8007f2c:	d016      	beq.n	8007f5c <ceilf+0x6c>
 8007f2e:	490e      	ldr	r1, [pc, #56]	; (8007f68 <ceilf+0x78>)
 8007f30:	f7f8 fe00 	bl	8000b34 <__addsf3>
 8007f34:	2100      	movs	r1, #0
 8007f36:	f7f9 f8c1 	bl	80010bc <__aeabi_fcmpgt>
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	d0f1      	beq.n	8007f22 <ceilf+0x32>
 8007f3e:	2c00      	cmp	r4, #0
 8007f40:	bfc2      	ittt	gt
 8007f42:	f44f 0300 	movgt.w	r3, #8388608	; 0x800000
 8007f46:	412b      	asrgt	r3, r5
 8007f48:	18e4      	addgt	r4, r4, r3
 8007f4a:	ea24 0406 	bic.w	r4, r4, r6
 8007f4e:	e7e8      	b.n	8007f22 <ceilf+0x32>
 8007f50:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007f54:	d302      	bcc.n	8007f5c <ceilf+0x6c>
 8007f56:	f7f8 fded 	bl	8000b34 <__addsf3>
 8007f5a:	4601      	mov	r1, r0
 8007f5c:	4608      	mov	r0, r1
 8007f5e:	bd70      	pop	{r4, r5, r6, pc}
 8007f60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007f64:	e7dd      	b.n	8007f22 <ceilf+0x32>
 8007f66:	bf00      	nop
 8007f68:	7149f2ca 	.word	0x7149f2ca
 8007f6c:	007fffff 	.word	0x007fffff

08007f70 <__cvt>:
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f76:	461f      	mov	r7, r3
 8007f78:	bfbb      	ittet	lt
 8007f7a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007f7e:	461f      	movlt	r7, r3
 8007f80:	2300      	movge	r3, #0
 8007f82:	232d      	movlt	r3, #45	; 0x2d
 8007f84:	b088      	sub	sp, #32
 8007f86:	4614      	mov	r4, r2
 8007f88:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007f8c:	7013      	strb	r3, [r2, #0]
 8007f8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007f90:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8007f94:	f023 0820 	bic.w	r8, r3, #32
 8007f98:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007f9c:	d005      	beq.n	8007faa <__cvt+0x3a>
 8007f9e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007fa2:	d100      	bne.n	8007fa6 <__cvt+0x36>
 8007fa4:	3501      	adds	r5, #1
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	e000      	b.n	8007fac <__cvt+0x3c>
 8007faa:	2303      	movs	r3, #3
 8007fac:	aa07      	add	r2, sp, #28
 8007fae:	9204      	str	r2, [sp, #16]
 8007fb0:	aa06      	add	r2, sp, #24
 8007fb2:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007fb6:	e9cd 3500 	strd	r3, r5, [sp]
 8007fba:	4622      	mov	r2, r4
 8007fbc:	463b      	mov	r3, r7
 8007fbe:	f000 feb7 	bl	8008d30 <_dtoa_r>
 8007fc2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007fc6:	4606      	mov	r6, r0
 8007fc8:	d102      	bne.n	8007fd0 <__cvt+0x60>
 8007fca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007fcc:	07db      	lsls	r3, r3, #31
 8007fce:	d522      	bpl.n	8008016 <__cvt+0xa6>
 8007fd0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fd4:	eb06 0905 	add.w	r9, r6, r5
 8007fd8:	d110      	bne.n	8007ffc <__cvt+0x8c>
 8007fda:	7833      	ldrb	r3, [r6, #0]
 8007fdc:	2b30      	cmp	r3, #48	; 0x30
 8007fde:	d10a      	bne.n	8007ff6 <__cvt+0x86>
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	f7f8 fcde 	bl	80009a8 <__aeabi_dcmpeq>
 8007fec:	b918      	cbnz	r0, 8007ff6 <__cvt+0x86>
 8007fee:	f1c5 0501 	rsb	r5, r5, #1
 8007ff2:	f8ca 5000 	str.w	r5, [sl]
 8007ff6:	f8da 3000 	ldr.w	r3, [sl]
 8007ffa:	4499      	add	r9, r3
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	2300      	movs	r3, #0
 8008000:	4620      	mov	r0, r4
 8008002:	4639      	mov	r1, r7
 8008004:	f7f8 fcd0 	bl	80009a8 <__aeabi_dcmpeq>
 8008008:	b108      	cbz	r0, 800800e <__cvt+0x9e>
 800800a:	f8cd 901c 	str.w	r9, [sp, #28]
 800800e:	2230      	movs	r2, #48	; 0x30
 8008010:	9b07      	ldr	r3, [sp, #28]
 8008012:	454b      	cmp	r3, r9
 8008014:	d307      	bcc.n	8008026 <__cvt+0xb6>
 8008016:	4630      	mov	r0, r6
 8008018:	9b07      	ldr	r3, [sp, #28]
 800801a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800801c:	1b9b      	subs	r3, r3, r6
 800801e:	6013      	str	r3, [r2, #0]
 8008020:	b008      	add	sp, #32
 8008022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008026:	1c59      	adds	r1, r3, #1
 8008028:	9107      	str	r1, [sp, #28]
 800802a:	701a      	strb	r2, [r3, #0]
 800802c:	e7f0      	b.n	8008010 <__cvt+0xa0>

0800802e <__exponent>:
 800802e:	4603      	mov	r3, r0
 8008030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008032:	2900      	cmp	r1, #0
 8008034:	f803 2b02 	strb.w	r2, [r3], #2
 8008038:	bfb6      	itet	lt
 800803a:	222d      	movlt	r2, #45	; 0x2d
 800803c:	222b      	movge	r2, #43	; 0x2b
 800803e:	4249      	neglt	r1, r1
 8008040:	2909      	cmp	r1, #9
 8008042:	7042      	strb	r2, [r0, #1]
 8008044:	dd2a      	ble.n	800809c <__exponent+0x6e>
 8008046:	f10d 0207 	add.w	r2, sp, #7
 800804a:	4617      	mov	r7, r2
 800804c:	260a      	movs	r6, #10
 800804e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008052:	4694      	mov	ip, r2
 8008054:	fb06 1415 	mls	r4, r6, r5, r1
 8008058:	3430      	adds	r4, #48	; 0x30
 800805a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800805e:	460c      	mov	r4, r1
 8008060:	2c63      	cmp	r4, #99	; 0x63
 8008062:	4629      	mov	r1, r5
 8008064:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8008068:	dcf1      	bgt.n	800804e <__exponent+0x20>
 800806a:	3130      	adds	r1, #48	; 0x30
 800806c:	f1ac 0402 	sub.w	r4, ip, #2
 8008070:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008074:	4622      	mov	r2, r4
 8008076:	1c41      	adds	r1, r0, #1
 8008078:	42ba      	cmp	r2, r7
 800807a:	d30a      	bcc.n	8008092 <__exponent+0x64>
 800807c:	f10d 0209 	add.w	r2, sp, #9
 8008080:	eba2 020c 	sub.w	r2, r2, ip
 8008084:	42bc      	cmp	r4, r7
 8008086:	bf88      	it	hi
 8008088:	2200      	movhi	r2, #0
 800808a:	4413      	add	r3, r2
 800808c:	1a18      	subs	r0, r3, r0
 800808e:	b003      	add	sp, #12
 8008090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008092:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008096:	f801 5f01 	strb.w	r5, [r1, #1]!
 800809a:	e7ed      	b.n	8008078 <__exponent+0x4a>
 800809c:	2330      	movs	r3, #48	; 0x30
 800809e:	3130      	adds	r1, #48	; 0x30
 80080a0:	7083      	strb	r3, [r0, #2]
 80080a2:	70c1      	strb	r1, [r0, #3]
 80080a4:	1d03      	adds	r3, r0, #4
 80080a6:	e7f1      	b.n	800808c <__exponent+0x5e>

080080a8 <_printf_float>:
 80080a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ac:	b091      	sub	sp, #68	; 0x44
 80080ae:	460c      	mov	r4, r1
 80080b0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80080b4:	4616      	mov	r6, r2
 80080b6:	461f      	mov	r7, r3
 80080b8:	4605      	mov	r5, r0
 80080ba:	f000 fcc5 	bl	8008a48 <_localeconv_r>
 80080be:	6803      	ldr	r3, [r0, #0]
 80080c0:	4618      	mov	r0, r3
 80080c2:	9309      	str	r3, [sp, #36]	; 0x24
 80080c4:	f7f8 f844 	bl	8000150 <strlen>
 80080c8:	2300      	movs	r3, #0
 80080ca:	930e      	str	r3, [sp, #56]	; 0x38
 80080cc:	f8d8 3000 	ldr.w	r3, [r8]
 80080d0:	900a      	str	r0, [sp, #40]	; 0x28
 80080d2:	3307      	adds	r3, #7
 80080d4:	f023 0307 	bic.w	r3, r3, #7
 80080d8:	f103 0208 	add.w	r2, r3, #8
 80080dc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80080e0:	f8d4 b000 	ldr.w	fp, [r4]
 80080e4:	f8c8 2000 	str.w	r2, [r8]
 80080e8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80080ec:	4652      	mov	r2, sl
 80080ee:	4643      	mov	r3, r8
 80080f0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80080f4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80080f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80080fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080fe:	4650      	mov	r0, sl
 8008100:	4b9c      	ldr	r3, [pc, #624]	; (8008374 <_printf_float+0x2cc>)
 8008102:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008104:	f7f8 fc82 	bl	8000a0c <__aeabi_dcmpun>
 8008108:	bb70      	cbnz	r0, 8008168 <_printf_float+0xc0>
 800810a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800810e:	4650      	mov	r0, sl
 8008110:	4b98      	ldr	r3, [pc, #608]	; (8008374 <_printf_float+0x2cc>)
 8008112:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008114:	f7f8 fc5c 	bl	80009d0 <__aeabi_dcmple>
 8008118:	bb30      	cbnz	r0, 8008168 <_printf_float+0xc0>
 800811a:	2200      	movs	r2, #0
 800811c:	2300      	movs	r3, #0
 800811e:	4650      	mov	r0, sl
 8008120:	4641      	mov	r1, r8
 8008122:	f7f8 fc4b 	bl	80009bc <__aeabi_dcmplt>
 8008126:	b110      	cbz	r0, 800812e <_printf_float+0x86>
 8008128:	232d      	movs	r3, #45	; 0x2d
 800812a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800812e:	4a92      	ldr	r2, [pc, #584]	; (8008378 <_printf_float+0x2d0>)
 8008130:	4b92      	ldr	r3, [pc, #584]	; (800837c <_printf_float+0x2d4>)
 8008132:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008136:	bf94      	ite	ls
 8008138:	4690      	movls	r8, r2
 800813a:	4698      	movhi	r8, r3
 800813c:	2303      	movs	r3, #3
 800813e:	f04f 0a00 	mov.w	sl, #0
 8008142:	6123      	str	r3, [r4, #16]
 8008144:	f02b 0304 	bic.w	r3, fp, #4
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	4633      	mov	r3, r6
 800814c:	4621      	mov	r1, r4
 800814e:	4628      	mov	r0, r5
 8008150:	9700      	str	r7, [sp, #0]
 8008152:	aa0f      	add	r2, sp, #60	; 0x3c
 8008154:	f000 f9d6 	bl	8008504 <_printf_common>
 8008158:	3001      	adds	r0, #1
 800815a:	f040 8090 	bne.w	800827e <_printf_float+0x1d6>
 800815e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008162:	b011      	add	sp, #68	; 0x44
 8008164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008168:	4652      	mov	r2, sl
 800816a:	4643      	mov	r3, r8
 800816c:	4650      	mov	r0, sl
 800816e:	4641      	mov	r1, r8
 8008170:	f7f8 fc4c 	bl	8000a0c <__aeabi_dcmpun>
 8008174:	b148      	cbz	r0, 800818a <_printf_float+0xe2>
 8008176:	f1b8 0f00 	cmp.w	r8, #0
 800817a:	bfb8      	it	lt
 800817c:	232d      	movlt	r3, #45	; 0x2d
 800817e:	4a80      	ldr	r2, [pc, #512]	; (8008380 <_printf_float+0x2d8>)
 8008180:	bfb8      	it	lt
 8008182:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008186:	4b7f      	ldr	r3, [pc, #508]	; (8008384 <_printf_float+0x2dc>)
 8008188:	e7d3      	b.n	8008132 <_printf_float+0x8a>
 800818a:	6863      	ldr	r3, [r4, #4]
 800818c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	d142      	bne.n	800821a <_printf_float+0x172>
 8008194:	2306      	movs	r3, #6
 8008196:	6063      	str	r3, [r4, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	9206      	str	r2, [sp, #24]
 800819c:	aa0e      	add	r2, sp, #56	; 0x38
 800819e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80081a2:	aa0d      	add	r2, sp, #52	; 0x34
 80081a4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80081a8:	9203      	str	r2, [sp, #12]
 80081aa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80081ae:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80081b2:	6023      	str	r3, [r4, #0]
 80081b4:	6863      	ldr	r3, [r4, #4]
 80081b6:	4652      	mov	r2, sl
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	4628      	mov	r0, r5
 80081bc:	4643      	mov	r3, r8
 80081be:	910b      	str	r1, [sp, #44]	; 0x2c
 80081c0:	f7ff fed6 	bl	8007f70 <__cvt>
 80081c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80081c6:	4680      	mov	r8, r0
 80081c8:	2947      	cmp	r1, #71	; 0x47
 80081ca:	990d      	ldr	r1, [sp, #52]	; 0x34
 80081cc:	d108      	bne.n	80081e0 <_printf_float+0x138>
 80081ce:	1cc8      	adds	r0, r1, #3
 80081d0:	db02      	blt.n	80081d8 <_printf_float+0x130>
 80081d2:	6863      	ldr	r3, [r4, #4]
 80081d4:	4299      	cmp	r1, r3
 80081d6:	dd40      	ble.n	800825a <_printf_float+0x1b2>
 80081d8:	f1a9 0902 	sub.w	r9, r9, #2
 80081dc:	fa5f f989 	uxtb.w	r9, r9
 80081e0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80081e4:	d81f      	bhi.n	8008226 <_printf_float+0x17e>
 80081e6:	464a      	mov	r2, r9
 80081e8:	3901      	subs	r1, #1
 80081ea:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80081ee:	910d      	str	r1, [sp, #52]	; 0x34
 80081f0:	f7ff ff1d 	bl	800802e <__exponent>
 80081f4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081f6:	4682      	mov	sl, r0
 80081f8:	1813      	adds	r3, r2, r0
 80081fa:	2a01      	cmp	r2, #1
 80081fc:	6123      	str	r3, [r4, #16]
 80081fe:	dc02      	bgt.n	8008206 <_printf_float+0x15e>
 8008200:	6822      	ldr	r2, [r4, #0]
 8008202:	07d2      	lsls	r2, r2, #31
 8008204:	d501      	bpl.n	800820a <_printf_float+0x162>
 8008206:	3301      	adds	r3, #1
 8008208:	6123      	str	r3, [r4, #16]
 800820a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800820e:	2b00      	cmp	r3, #0
 8008210:	d09b      	beq.n	800814a <_printf_float+0xa2>
 8008212:	232d      	movs	r3, #45	; 0x2d
 8008214:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008218:	e797      	b.n	800814a <_printf_float+0xa2>
 800821a:	2947      	cmp	r1, #71	; 0x47
 800821c:	d1bc      	bne.n	8008198 <_printf_float+0xf0>
 800821e:	2b00      	cmp	r3, #0
 8008220:	d1ba      	bne.n	8008198 <_printf_float+0xf0>
 8008222:	2301      	movs	r3, #1
 8008224:	e7b7      	b.n	8008196 <_printf_float+0xee>
 8008226:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800822a:	d118      	bne.n	800825e <_printf_float+0x1b6>
 800822c:	2900      	cmp	r1, #0
 800822e:	6863      	ldr	r3, [r4, #4]
 8008230:	dd0b      	ble.n	800824a <_printf_float+0x1a2>
 8008232:	6121      	str	r1, [r4, #16]
 8008234:	b913      	cbnz	r3, 800823c <_printf_float+0x194>
 8008236:	6822      	ldr	r2, [r4, #0]
 8008238:	07d0      	lsls	r0, r2, #31
 800823a:	d502      	bpl.n	8008242 <_printf_float+0x19a>
 800823c:	3301      	adds	r3, #1
 800823e:	440b      	add	r3, r1
 8008240:	6123      	str	r3, [r4, #16]
 8008242:	f04f 0a00 	mov.w	sl, #0
 8008246:	65a1      	str	r1, [r4, #88]	; 0x58
 8008248:	e7df      	b.n	800820a <_printf_float+0x162>
 800824a:	b913      	cbnz	r3, 8008252 <_printf_float+0x1aa>
 800824c:	6822      	ldr	r2, [r4, #0]
 800824e:	07d2      	lsls	r2, r2, #31
 8008250:	d501      	bpl.n	8008256 <_printf_float+0x1ae>
 8008252:	3302      	adds	r3, #2
 8008254:	e7f4      	b.n	8008240 <_printf_float+0x198>
 8008256:	2301      	movs	r3, #1
 8008258:	e7f2      	b.n	8008240 <_printf_float+0x198>
 800825a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800825e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008260:	4299      	cmp	r1, r3
 8008262:	db05      	blt.n	8008270 <_printf_float+0x1c8>
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	6121      	str	r1, [r4, #16]
 8008268:	07d8      	lsls	r0, r3, #31
 800826a:	d5ea      	bpl.n	8008242 <_printf_float+0x19a>
 800826c:	1c4b      	adds	r3, r1, #1
 800826e:	e7e7      	b.n	8008240 <_printf_float+0x198>
 8008270:	2900      	cmp	r1, #0
 8008272:	bfcc      	ite	gt
 8008274:	2201      	movgt	r2, #1
 8008276:	f1c1 0202 	rsble	r2, r1, #2
 800827a:	4413      	add	r3, r2
 800827c:	e7e0      	b.n	8008240 <_printf_float+0x198>
 800827e:	6823      	ldr	r3, [r4, #0]
 8008280:	055a      	lsls	r2, r3, #21
 8008282:	d407      	bmi.n	8008294 <_printf_float+0x1ec>
 8008284:	6923      	ldr	r3, [r4, #16]
 8008286:	4642      	mov	r2, r8
 8008288:	4631      	mov	r1, r6
 800828a:	4628      	mov	r0, r5
 800828c:	47b8      	blx	r7
 800828e:	3001      	adds	r0, #1
 8008290:	d12b      	bne.n	80082ea <_printf_float+0x242>
 8008292:	e764      	b.n	800815e <_printf_float+0xb6>
 8008294:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008298:	f240 80dd 	bls.w	8008456 <_printf_float+0x3ae>
 800829c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082a0:	2200      	movs	r2, #0
 80082a2:	2300      	movs	r3, #0
 80082a4:	f7f8 fb80 	bl	80009a8 <__aeabi_dcmpeq>
 80082a8:	2800      	cmp	r0, #0
 80082aa:	d033      	beq.n	8008314 <_printf_float+0x26c>
 80082ac:	2301      	movs	r3, #1
 80082ae:	4631      	mov	r1, r6
 80082b0:	4628      	mov	r0, r5
 80082b2:	4a35      	ldr	r2, [pc, #212]	; (8008388 <_printf_float+0x2e0>)
 80082b4:	47b8      	blx	r7
 80082b6:	3001      	adds	r0, #1
 80082b8:	f43f af51 	beq.w	800815e <_printf_float+0xb6>
 80082bc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80082c0:	429a      	cmp	r2, r3
 80082c2:	db02      	blt.n	80082ca <_printf_float+0x222>
 80082c4:	6823      	ldr	r3, [r4, #0]
 80082c6:	07d8      	lsls	r0, r3, #31
 80082c8:	d50f      	bpl.n	80082ea <_printf_float+0x242>
 80082ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082ce:	4631      	mov	r1, r6
 80082d0:	4628      	mov	r0, r5
 80082d2:	47b8      	blx	r7
 80082d4:	3001      	adds	r0, #1
 80082d6:	f43f af42 	beq.w	800815e <_printf_float+0xb6>
 80082da:	f04f 0800 	mov.w	r8, #0
 80082de:	f104 091a 	add.w	r9, r4, #26
 80082e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80082e4:	3b01      	subs	r3, #1
 80082e6:	4543      	cmp	r3, r8
 80082e8:	dc09      	bgt.n	80082fe <_printf_float+0x256>
 80082ea:	6823      	ldr	r3, [r4, #0]
 80082ec:	079b      	lsls	r3, r3, #30
 80082ee:	f100 8104 	bmi.w	80084fa <_printf_float+0x452>
 80082f2:	68e0      	ldr	r0, [r4, #12]
 80082f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082f6:	4298      	cmp	r0, r3
 80082f8:	bfb8      	it	lt
 80082fa:	4618      	movlt	r0, r3
 80082fc:	e731      	b.n	8008162 <_printf_float+0xba>
 80082fe:	2301      	movs	r3, #1
 8008300:	464a      	mov	r2, r9
 8008302:	4631      	mov	r1, r6
 8008304:	4628      	mov	r0, r5
 8008306:	47b8      	blx	r7
 8008308:	3001      	adds	r0, #1
 800830a:	f43f af28 	beq.w	800815e <_printf_float+0xb6>
 800830e:	f108 0801 	add.w	r8, r8, #1
 8008312:	e7e6      	b.n	80082e2 <_printf_float+0x23a>
 8008314:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008316:	2b00      	cmp	r3, #0
 8008318:	dc38      	bgt.n	800838c <_printf_float+0x2e4>
 800831a:	2301      	movs	r3, #1
 800831c:	4631      	mov	r1, r6
 800831e:	4628      	mov	r0, r5
 8008320:	4a19      	ldr	r2, [pc, #100]	; (8008388 <_printf_float+0x2e0>)
 8008322:	47b8      	blx	r7
 8008324:	3001      	adds	r0, #1
 8008326:	f43f af1a 	beq.w	800815e <_printf_float+0xb6>
 800832a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800832e:	4313      	orrs	r3, r2
 8008330:	d102      	bne.n	8008338 <_printf_float+0x290>
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	07d9      	lsls	r1, r3, #31
 8008336:	d5d8      	bpl.n	80082ea <_printf_float+0x242>
 8008338:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	f43f af0b 	beq.w	800815e <_printf_float+0xb6>
 8008348:	f04f 0900 	mov.w	r9, #0
 800834c:	f104 0a1a 	add.w	sl, r4, #26
 8008350:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008352:	425b      	negs	r3, r3
 8008354:	454b      	cmp	r3, r9
 8008356:	dc01      	bgt.n	800835c <_printf_float+0x2b4>
 8008358:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800835a:	e794      	b.n	8008286 <_printf_float+0x1de>
 800835c:	2301      	movs	r3, #1
 800835e:	4652      	mov	r2, sl
 8008360:	4631      	mov	r1, r6
 8008362:	4628      	mov	r0, r5
 8008364:	47b8      	blx	r7
 8008366:	3001      	adds	r0, #1
 8008368:	f43f aef9 	beq.w	800815e <_printf_float+0xb6>
 800836c:	f109 0901 	add.w	r9, r9, #1
 8008370:	e7ee      	b.n	8008350 <_printf_float+0x2a8>
 8008372:	bf00      	nop
 8008374:	7fefffff 	.word	0x7fefffff
 8008378:	0800aa2a 	.word	0x0800aa2a
 800837c:	0800aa2e 	.word	0x0800aa2e
 8008380:	0800aa32 	.word	0x0800aa32
 8008384:	0800aa36 	.word	0x0800aa36
 8008388:	0800aa3a 	.word	0x0800aa3a
 800838c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800838e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008390:	429a      	cmp	r2, r3
 8008392:	bfa8      	it	ge
 8008394:	461a      	movge	r2, r3
 8008396:	2a00      	cmp	r2, #0
 8008398:	4691      	mov	r9, r2
 800839a:	dc37      	bgt.n	800840c <_printf_float+0x364>
 800839c:	f04f 0b00 	mov.w	fp, #0
 80083a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083a4:	f104 021a 	add.w	r2, r4, #26
 80083a8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80083ac:	ebaa 0309 	sub.w	r3, sl, r9
 80083b0:	455b      	cmp	r3, fp
 80083b2:	dc33      	bgt.n	800841c <_printf_float+0x374>
 80083b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083b8:	429a      	cmp	r2, r3
 80083ba:	db3b      	blt.n	8008434 <_printf_float+0x38c>
 80083bc:	6823      	ldr	r3, [r4, #0]
 80083be:	07da      	lsls	r2, r3, #31
 80083c0:	d438      	bmi.n	8008434 <_printf_float+0x38c>
 80083c2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80083c6:	eba2 0903 	sub.w	r9, r2, r3
 80083ca:	eba2 020a 	sub.w	r2, r2, sl
 80083ce:	4591      	cmp	r9, r2
 80083d0:	bfa8      	it	ge
 80083d2:	4691      	movge	r9, r2
 80083d4:	f1b9 0f00 	cmp.w	r9, #0
 80083d8:	dc34      	bgt.n	8008444 <_printf_float+0x39c>
 80083da:	f04f 0800 	mov.w	r8, #0
 80083de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083e2:	f104 0a1a 	add.w	sl, r4, #26
 80083e6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	eba3 0309 	sub.w	r3, r3, r9
 80083f0:	4543      	cmp	r3, r8
 80083f2:	f77f af7a 	ble.w	80082ea <_printf_float+0x242>
 80083f6:	2301      	movs	r3, #1
 80083f8:	4652      	mov	r2, sl
 80083fa:	4631      	mov	r1, r6
 80083fc:	4628      	mov	r0, r5
 80083fe:	47b8      	blx	r7
 8008400:	3001      	adds	r0, #1
 8008402:	f43f aeac 	beq.w	800815e <_printf_float+0xb6>
 8008406:	f108 0801 	add.w	r8, r8, #1
 800840a:	e7ec      	b.n	80083e6 <_printf_float+0x33e>
 800840c:	4613      	mov	r3, r2
 800840e:	4631      	mov	r1, r6
 8008410:	4642      	mov	r2, r8
 8008412:	4628      	mov	r0, r5
 8008414:	47b8      	blx	r7
 8008416:	3001      	adds	r0, #1
 8008418:	d1c0      	bne.n	800839c <_printf_float+0x2f4>
 800841a:	e6a0      	b.n	800815e <_printf_float+0xb6>
 800841c:	2301      	movs	r3, #1
 800841e:	4631      	mov	r1, r6
 8008420:	4628      	mov	r0, r5
 8008422:	920b      	str	r2, [sp, #44]	; 0x2c
 8008424:	47b8      	blx	r7
 8008426:	3001      	adds	r0, #1
 8008428:	f43f ae99 	beq.w	800815e <_printf_float+0xb6>
 800842c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800842e:	f10b 0b01 	add.w	fp, fp, #1
 8008432:	e7b9      	b.n	80083a8 <_printf_float+0x300>
 8008434:	4631      	mov	r1, r6
 8008436:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800843a:	4628      	mov	r0, r5
 800843c:	47b8      	blx	r7
 800843e:	3001      	adds	r0, #1
 8008440:	d1bf      	bne.n	80083c2 <_printf_float+0x31a>
 8008442:	e68c      	b.n	800815e <_printf_float+0xb6>
 8008444:	464b      	mov	r3, r9
 8008446:	4631      	mov	r1, r6
 8008448:	4628      	mov	r0, r5
 800844a:	eb08 020a 	add.w	r2, r8, sl
 800844e:	47b8      	blx	r7
 8008450:	3001      	adds	r0, #1
 8008452:	d1c2      	bne.n	80083da <_printf_float+0x332>
 8008454:	e683      	b.n	800815e <_printf_float+0xb6>
 8008456:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008458:	2a01      	cmp	r2, #1
 800845a:	dc01      	bgt.n	8008460 <_printf_float+0x3b8>
 800845c:	07db      	lsls	r3, r3, #31
 800845e:	d539      	bpl.n	80084d4 <_printf_float+0x42c>
 8008460:	2301      	movs	r3, #1
 8008462:	4642      	mov	r2, r8
 8008464:	4631      	mov	r1, r6
 8008466:	4628      	mov	r0, r5
 8008468:	47b8      	blx	r7
 800846a:	3001      	adds	r0, #1
 800846c:	f43f ae77 	beq.w	800815e <_printf_float+0xb6>
 8008470:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008474:	4631      	mov	r1, r6
 8008476:	4628      	mov	r0, r5
 8008478:	47b8      	blx	r7
 800847a:	3001      	adds	r0, #1
 800847c:	f43f ae6f 	beq.w	800815e <_printf_float+0xb6>
 8008480:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008484:	2200      	movs	r2, #0
 8008486:	2300      	movs	r3, #0
 8008488:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800848c:	f7f8 fa8c 	bl	80009a8 <__aeabi_dcmpeq>
 8008490:	b9d8      	cbnz	r0, 80084ca <_printf_float+0x422>
 8008492:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8008496:	f108 0201 	add.w	r2, r8, #1
 800849a:	4631      	mov	r1, r6
 800849c:	4628      	mov	r0, r5
 800849e:	47b8      	blx	r7
 80084a0:	3001      	adds	r0, #1
 80084a2:	d10e      	bne.n	80084c2 <_printf_float+0x41a>
 80084a4:	e65b      	b.n	800815e <_printf_float+0xb6>
 80084a6:	2301      	movs	r3, #1
 80084a8:	464a      	mov	r2, r9
 80084aa:	4631      	mov	r1, r6
 80084ac:	4628      	mov	r0, r5
 80084ae:	47b8      	blx	r7
 80084b0:	3001      	adds	r0, #1
 80084b2:	f43f ae54 	beq.w	800815e <_printf_float+0xb6>
 80084b6:	f108 0801 	add.w	r8, r8, #1
 80084ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80084bc:	3b01      	subs	r3, #1
 80084be:	4543      	cmp	r3, r8
 80084c0:	dcf1      	bgt.n	80084a6 <_printf_float+0x3fe>
 80084c2:	4653      	mov	r3, sl
 80084c4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80084c8:	e6de      	b.n	8008288 <_printf_float+0x1e0>
 80084ca:	f04f 0800 	mov.w	r8, #0
 80084ce:	f104 091a 	add.w	r9, r4, #26
 80084d2:	e7f2      	b.n	80084ba <_printf_float+0x412>
 80084d4:	2301      	movs	r3, #1
 80084d6:	4642      	mov	r2, r8
 80084d8:	e7df      	b.n	800849a <_printf_float+0x3f2>
 80084da:	2301      	movs	r3, #1
 80084dc:	464a      	mov	r2, r9
 80084de:	4631      	mov	r1, r6
 80084e0:	4628      	mov	r0, r5
 80084e2:	47b8      	blx	r7
 80084e4:	3001      	adds	r0, #1
 80084e6:	f43f ae3a 	beq.w	800815e <_printf_float+0xb6>
 80084ea:	f108 0801 	add.w	r8, r8, #1
 80084ee:	68e3      	ldr	r3, [r4, #12]
 80084f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80084f2:	1a5b      	subs	r3, r3, r1
 80084f4:	4543      	cmp	r3, r8
 80084f6:	dcf0      	bgt.n	80084da <_printf_float+0x432>
 80084f8:	e6fb      	b.n	80082f2 <_printf_float+0x24a>
 80084fa:	f04f 0800 	mov.w	r8, #0
 80084fe:	f104 0919 	add.w	r9, r4, #25
 8008502:	e7f4      	b.n	80084ee <_printf_float+0x446>

08008504 <_printf_common>:
 8008504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008508:	4616      	mov	r6, r2
 800850a:	4699      	mov	r9, r3
 800850c:	688a      	ldr	r2, [r1, #8]
 800850e:	690b      	ldr	r3, [r1, #16]
 8008510:	4607      	mov	r7, r0
 8008512:	4293      	cmp	r3, r2
 8008514:	bfb8      	it	lt
 8008516:	4613      	movlt	r3, r2
 8008518:	6033      	str	r3, [r6, #0]
 800851a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800851e:	460c      	mov	r4, r1
 8008520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008524:	b10a      	cbz	r2, 800852a <_printf_common+0x26>
 8008526:	3301      	adds	r3, #1
 8008528:	6033      	str	r3, [r6, #0]
 800852a:	6823      	ldr	r3, [r4, #0]
 800852c:	0699      	lsls	r1, r3, #26
 800852e:	bf42      	ittt	mi
 8008530:	6833      	ldrmi	r3, [r6, #0]
 8008532:	3302      	addmi	r3, #2
 8008534:	6033      	strmi	r3, [r6, #0]
 8008536:	6825      	ldr	r5, [r4, #0]
 8008538:	f015 0506 	ands.w	r5, r5, #6
 800853c:	d106      	bne.n	800854c <_printf_common+0x48>
 800853e:	f104 0a19 	add.w	sl, r4, #25
 8008542:	68e3      	ldr	r3, [r4, #12]
 8008544:	6832      	ldr	r2, [r6, #0]
 8008546:	1a9b      	subs	r3, r3, r2
 8008548:	42ab      	cmp	r3, r5
 800854a:	dc2b      	bgt.n	80085a4 <_printf_common+0xa0>
 800854c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008550:	1e13      	subs	r3, r2, #0
 8008552:	6822      	ldr	r2, [r4, #0]
 8008554:	bf18      	it	ne
 8008556:	2301      	movne	r3, #1
 8008558:	0692      	lsls	r2, r2, #26
 800855a:	d430      	bmi.n	80085be <_printf_common+0xba>
 800855c:	4649      	mov	r1, r9
 800855e:	4638      	mov	r0, r7
 8008560:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008564:	47c0      	blx	r8
 8008566:	3001      	adds	r0, #1
 8008568:	d023      	beq.n	80085b2 <_printf_common+0xae>
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	6922      	ldr	r2, [r4, #16]
 800856e:	f003 0306 	and.w	r3, r3, #6
 8008572:	2b04      	cmp	r3, #4
 8008574:	bf14      	ite	ne
 8008576:	2500      	movne	r5, #0
 8008578:	6833      	ldreq	r3, [r6, #0]
 800857a:	f04f 0600 	mov.w	r6, #0
 800857e:	bf08      	it	eq
 8008580:	68e5      	ldreq	r5, [r4, #12]
 8008582:	f104 041a 	add.w	r4, r4, #26
 8008586:	bf08      	it	eq
 8008588:	1aed      	subeq	r5, r5, r3
 800858a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800858e:	bf08      	it	eq
 8008590:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008594:	4293      	cmp	r3, r2
 8008596:	bfc4      	itt	gt
 8008598:	1a9b      	subgt	r3, r3, r2
 800859a:	18ed      	addgt	r5, r5, r3
 800859c:	42b5      	cmp	r5, r6
 800859e:	d11a      	bne.n	80085d6 <_printf_common+0xd2>
 80085a0:	2000      	movs	r0, #0
 80085a2:	e008      	b.n	80085b6 <_printf_common+0xb2>
 80085a4:	2301      	movs	r3, #1
 80085a6:	4652      	mov	r2, sl
 80085a8:	4649      	mov	r1, r9
 80085aa:	4638      	mov	r0, r7
 80085ac:	47c0      	blx	r8
 80085ae:	3001      	adds	r0, #1
 80085b0:	d103      	bne.n	80085ba <_printf_common+0xb6>
 80085b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085ba:	3501      	adds	r5, #1
 80085bc:	e7c1      	b.n	8008542 <_printf_common+0x3e>
 80085be:	2030      	movs	r0, #48	; 0x30
 80085c0:	18e1      	adds	r1, r4, r3
 80085c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085c6:	1c5a      	adds	r2, r3, #1
 80085c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085cc:	4422      	add	r2, r4
 80085ce:	3302      	adds	r3, #2
 80085d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085d4:	e7c2      	b.n	800855c <_printf_common+0x58>
 80085d6:	2301      	movs	r3, #1
 80085d8:	4622      	mov	r2, r4
 80085da:	4649      	mov	r1, r9
 80085dc:	4638      	mov	r0, r7
 80085de:	47c0      	blx	r8
 80085e0:	3001      	adds	r0, #1
 80085e2:	d0e6      	beq.n	80085b2 <_printf_common+0xae>
 80085e4:	3601      	adds	r6, #1
 80085e6:	e7d9      	b.n	800859c <_printf_common+0x98>

080085e8 <_printf_i>:
 80085e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80085ec:	7e0f      	ldrb	r7, [r1, #24]
 80085ee:	4691      	mov	r9, r2
 80085f0:	2f78      	cmp	r7, #120	; 0x78
 80085f2:	4680      	mov	r8, r0
 80085f4:	460c      	mov	r4, r1
 80085f6:	469a      	mov	sl, r3
 80085f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80085fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80085fe:	d807      	bhi.n	8008610 <_printf_i+0x28>
 8008600:	2f62      	cmp	r7, #98	; 0x62
 8008602:	d80a      	bhi.n	800861a <_printf_i+0x32>
 8008604:	2f00      	cmp	r7, #0
 8008606:	f000 80d5 	beq.w	80087b4 <_printf_i+0x1cc>
 800860a:	2f58      	cmp	r7, #88	; 0x58
 800860c:	f000 80c1 	beq.w	8008792 <_printf_i+0x1aa>
 8008610:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008614:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008618:	e03a      	b.n	8008690 <_printf_i+0xa8>
 800861a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800861e:	2b15      	cmp	r3, #21
 8008620:	d8f6      	bhi.n	8008610 <_printf_i+0x28>
 8008622:	a101      	add	r1, pc, #4	; (adr r1, 8008628 <_printf_i+0x40>)
 8008624:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008628:	08008681 	.word	0x08008681
 800862c:	08008695 	.word	0x08008695
 8008630:	08008611 	.word	0x08008611
 8008634:	08008611 	.word	0x08008611
 8008638:	08008611 	.word	0x08008611
 800863c:	08008611 	.word	0x08008611
 8008640:	08008695 	.word	0x08008695
 8008644:	08008611 	.word	0x08008611
 8008648:	08008611 	.word	0x08008611
 800864c:	08008611 	.word	0x08008611
 8008650:	08008611 	.word	0x08008611
 8008654:	0800879b 	.word	0x0800879b
 8008658:	080086c1 	.word	0x080086c1
 800865c:	08008755 	.word	0x08008755
 8008660:	08008611 	.word	0x08008611
 8008664:	08008611 	.word	0x08008611
 8008668:	080087bd 	.word	0x080087bd
 800866c:	08008611 	.word	0x08008611
 8008670:	080086c1 	.word	0x080086c1
 8008674:	08008611 	.word	0x08008611
 8008678:	08008611 	.word	0x08008611
 800867c:	0800875d 	.word	0x0800875d
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	1d1a      	adds	r2, r3, #4
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	602a      	str	r2, [r5, #0]
 8008688:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800868c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008690:	2301      	movs	r3, #1
 8008692:	e0a0      	b.n	80087d6 <_printf_i+0x1ee>
 8008694:	6820      	ldr	r0, [r4, #0]
 8008696:	682b      	ldr	r3, [r5, #0]
 8008698:	0607      	lsls	r7, r0, #24
 800869a:	f103 0104 	add.w	r1, r3, #4
 800869e:	6029      	str	r1, [r5, #0]
 80086a0:	d501      	bpl.n	80086a6 <_printf_i+0xbe>
 80086a2:	681e      	ldr	r6, [r3, #0]
 80086a4:	e003      	b.n	80086ae <_printf_i+0xc6>
 80086a6:	0646      	lsls	r6, r0, #25
 80086a8:	d5fb      	bpl.n	80086a2 <_printf_i+0xba>
 80086aa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80086ae:	2e00      	cmp	r6, #0
 80086b0:	da03      	bge.n	80086ba <_printf_i+0xd2>
 80086b2:	232d      	movs	r3, #45	; 0x2d
 80086b4:	4276      	negs	r6, r6
 80086b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ba:	230a      	movs	r3, #10
 80086bc:	4859      	ldr	r0, [pc, #356]	; (8008824 <_printf_i+0x23c>)
 80086be:	e012      	b.n	80086e6 <_printf_i+0xfe>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	6820      	ldr	r0, [r4, #0]
 80086c4:	1d19      	adds	r1, r3, #4
 80086c6:	6029      	str	r1, [r5, #0]
 80086c8:	0605      	lsls	r5, r0, #24
 80086ca:	d501      	bpl.n	80086d0 <_printf_i+0xe8>
 80086cc:	681e      	ldr	r6, [r3, #0]
 80086ce:	e002      	b.n	80086d6 <_printf_i+0xee>
 80086d0:	0641      	lsls	r1, r0, #25
 80086d2:	d5fb      	bpl.n	80086cc <_printf_i+0xe4>
 80086d4:	881e      	ldrh	r6, [r3, #0]
 80086d6:	2f6f      	cmp	r7, #111	; 0x6f
 80086d8:	bf0c      	ite	eq
 80086da:	2308      	moveq	r3, #8
 80086dc:	230a      	movne	r3, #10
 80086de:	4851      	ldr	r0, [pc, #324]	; (8008824 <_printf_i+0x23c>)
 80086e0:	2100      	movs	r1, #0
 80086e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086e6:	6865      	ldr	r5, [r4, #4]
 80086e8:	2d00      	cmp	r5, #0
 80086ea:	bfa8      	it	ge
 80086ec:	6821      	ldrge	r1, [r4, #0]
 80086ee:	60a5      	str	r5, [r4, #8]
 80086f0:	bfa4      	itt	ge
 80086f2:	f021 0104 	bicge.w	r1, r1, #4
 80086f6:	6021      	strge	r1, [r4, #0]
 80086f8:	b90e      	cbnz	r6, 80086fe <_printf_i+0x116>
 80086fa:	2d00      	cmp	r5, #0
 80086fc:	d04b      	beq.n	8008796 <_printf_i+0x1ae>
 80086fe:	4615      	mov	r5, r2
 8008700:	fbb6 f1f3 	udiv	r1, r6, r3
 8008704:	fb03 6711 	mls	r7, r3, r1, r6
 8008708:	5dc7      	ldrb	r7, [r0, r7]
 800870a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800870e:	4637      	mov	r7, r6
 8008710:	42bb      	cmp	r3, r7
 8008712:	460e      	mov	r6, r1
 8008714:	d9f4      	bls.n	8008700 <_printf_i+0x118>
 8008716:	2b08      	cmp	r3, #8
 8008718:	d10b      	bne.n	8008732 <_printf_i+0x14a>
 800871a:	6823      	ldr	r3, [r4, #0]
 800871c:	07de      	lsls	r6, r3, #31
 800871e:	d508      	bpl.n	8008732 <_printf_i+0x14a>
 8008720:	6923      	ldr	r3, [r4, #16]
 8008722:	6861      	ldr	r1, [r4, #4]
 8008724:	4299      	cmp	r1, r3
 8008726:	bfde      	ittt	le
 8008728:	2330      	movle	r3, #48	; 0x30
 800872a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800872e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008732:	1b52      	subs	r2, r2, r5
 8008734:	6122      	str	r2, [r4, #16]
 8008736:	464b      	mov	r3, r9
 8008738:	4621      	mov	r1, r4
 800873a:	4640      	mov	r0, r8
 800873c:	f8cd a000 	str.w	sl, [sp]
 8008740:	aa03      	add	r2, sp, #12
 8008742:	f7ff fedf 	bl	8008504 <_printf_common>
 8008746:	3001      	adds	r0, #1
 8008748:	d14a      	bne.n	80087e0 <_printf_i+0x1f8>
 800874a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800874e:	b004      	add	sp, #16
 8008750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008754:	6823      	ldr	r3, [r4, #0]
 8008756:	f043 0320 	orr.w	r3, r3, #32
 800875a:	6023      	str	r3, [r4, #0]
 800875c:	2778      	movs	r7, #120	; 0x78
 800875e:	4832      	ldr	r0, [pc, #200]	; (8008828 <_printf_i+0x240>)
 8008760:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008764:	6823      	ldr	r3, [r4, #0]
 8008766:	6829      	ldr	r1, [r5, #0]
 8008768:	061f      	lsls	r7, r3, #24
 800876a:	f851 6b04 	ldr.w	r6, [r1], #4
 800876e:	d402      	bmi.n	8008776 <_printf_i+0x18e>
 8008770:	065f      	lsls	r7, r3, #25
 8008772:	bf48      	it	mi
 8008774:	b2b6      	uxthmi	r6, r6
 8008776:	07df      	lsls	r7, r3, #31
 8008778:	bf48      	it	mi
 800877a:	f043 0320 	orrmi.w	r3, r3, #32
 800877e:	6029      	str	r1, [r5, #0]
 8008780:	bf48      	it	mi
 8008782:	6023      	strmi	r3, [r4, #0]
 8008784:	b91e      	cbnz	r6, 800878e <_printf_i+0x1a6>
 8008786:	6823      	ldr	r3, [r4, #0]
 8008788:	f023 0320 	bic.w	r3, r3, #32
 800878c:	6023      	str	r3, [r4, #0]
 800878e:	2310      	movs	r3, #16
 8008790:	e7a6      	b.n	80086e0 <_printf_i+0xf8>
 8008792:	4824      	ldr	r0, [pc, #144]	; (8008824 <_printf_i+0x23c>)
 8008794:	e7e4      	b.n	8008760 <_printf_i+0x178>
 8008796:	4615      	mov	r5, r2
 8008798:	e7bd      	b.n	8008716 <_printf_i+0x12e>
 800879a:	682b      	ldr	r3, [r5, #0]
 800879c:	6826      	ldr	r6, [r4, #0]
 800879e:	1d18      	adds	r0, r3, #4
 80087a0:	6961      	ldr	r1, [r4, #20]
 80087a2:	6028      	str	r0, [r5, #0]
 80087a4:	0635      	lsls	r5, r6, #24
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	d501      	bpl.n	80087ae <_printf_i+0x1c6>
 80087aa:	6019      	str	r1, [r3, #0]
 80087ac:	e002      	b.n	80087b4 <_printf_i+0x1cc>
 80087ae:	0670      	lsls	r0, r6, #25
 80087b0:	d5fb      	bpl.n	80087aa <_printf_i+0x1c2>
 80087b2:	8019      	strh	r1, [r3, #0]
 80087b4:	2300      	movs	r3, #0
 80087b6:	4615      	mov	r5, r2
 80087b8:	6123      	str	r3, [r4, #16]
 80087ba:	e7bc      	b.n	8008736 <_printf_i+0x14e>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	2100      	movs	r1, #0
 80087c0:	1d1a      	adds	r2, r3, #4
 80087c2:	602a      	str	r2, [r5, #0]
 80087c4:	681d      	ldr	r5, [r3, #0]
 80087c6:	6862      	ldr	r2, [r4, #4]
 80087c8:	4628      	mov	r0, r5
 80087ca:	f000 fa0a 	bl	8008be2 <memchr>
 80087ce:	b108      	cbz	r0, 80087d4 <_printf_i+0x1ec>
 80087d0:	1b40      	subs	r0, r0, r5
 80087d2:	6060      	str	r0, [r4, #4]
 80087d4:	6863      	ldr	r3, [r4, #4]
 80087d6:	6123      	str	r3, [r4, #16]
 80087d8:	2300      	movs	r3, #0
 80087da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087de:	e7aa      	b.n	8008736 <_printf_i+0x14e>
 80087e0:	462a      	mov	r2, r5
 80087e2:	4649      	mov	r1, r9
 80087e4:	4640      	mov	r0, r8
 80087e6:	6923      	ldr	r3, [r4, #16]
 80087e8:	47d0      	blx	sl
 80087ea:	3001      	adds	r0, #1
 80087ec:	d0ad      	beq.n	800874a <_printf_i+0x162>
 80087ee:	6823      	ldr	r3, [r4, #0]
 80087f0:	079b      	lsls	r3, r3, #30
 80087f2:	d413      	bmi.n	800881c <_printf_i+0x234>
 80087f4:	68e0      	ldr	r0, [r4, #12]
 80087f6:	9b03      	ldr	r3, [sp, #12]
 80087f8:	4298      	cmp	r0, r3
 80087fa:	bfb8      	it	lt
 80087fc:	4618      	movlt	r0, r3
 80087fe:	e7a6      	b.n	800874e <_printf_i+0x166>
 8008800:	2301      	movs	r3, #1
 8008802:	4632      	mov	r2, r6
 8008804:	4649      	mov	r1, r9
 8008806:	4640      	mov	r0, r8
 8008808:	47d0      	blx	sl
 800880a:	3001      	adds	r0, #1
 800880c:	d09d      	beq.n	800874a <_printf_i+0x162>
 800880e:	3501      	adds	r5, #1
 8008810:	68e3      	ldr	r3, [r4, #12]
 8008812:	9903      	ldr	r1, [sp, #12]
 8008814:	1a5b      	subs	r3, r3, r1
 8008816:	42ab      	cmp	r3, r5
 8008818:	dcf2      	bgt.n	8008800 <_printf_i+0x218>
 800881a:	e7eb      	b.n	80087f4 <_printf_i+0x20c>
 800881c:	2500      	movs	r5, #0
 800881e:	f104 0619 	add.w	r6, r4, #25
 8008822:	e7f5      	b.n	8008810 <_printf_i+0x228>
 8008824:	0800aa3c 	.word	0x0800aa3c
 8008828:	0800aa4d 	.word	0x0800aa4d

0800882c <std>:
 800882c:	2300      	movs	r3, #0
 800882e:	b510      	push	{r4, lr}
 8008830:	4604      	mov	r4, r0
 8008832:	e9c0 3300 	strd	r3, r3, [r0]
 8008836:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800883a:	6083      	str	r3, [r0, #8]
 800883c:	8181      	strh	r1, [r0, #12]
 800883e:	6643      	str	r3, [r0, #100]	; 0x64
 8008840:	81c2      	strh	r2, [r0, #14]
 8008842:	6183      	str	r3, [r0, #24]
 8008844:	4619      	mov	r1, r3
 8008846:	2208      	movs	r2, #8
 8008848:	305c      	adds	r0, #92	; 0x5c
 800884a:	f000 f8f4 	bl	8008a36 <memset>
 800884e:	4b0d      	ldr	r3, [pc, #52]	; (8008884 <std+0x58>)
 8008850:	6224      	str	r4, [r4, #32]
 8008852:	6263      	str	r3, [r4, #36]	; 0x24
 8008854:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <std+0x5c>)
 8008856:	62a3      	str	r3, [r4, #40]	; 0x28
 8008858:	4b0c      	ldr	r3, [pc, #48]	; (800888c <std+0x60>)
 800885a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800885c:	4b0c      	ldr	r3, [pc, #48]	; (8008890 <std+0x64>)
 800885e:	6323      	str	r3, [r4, #48]	; 0x30
 8008860:	4b0c      	ldr	r3, [pc, #48]	; (8008894 <std+0x68>)
 8008862:	429c      	cmp	r4, r3
 8008864:	d006      	beq.n	8008874 <std+0x48>
 8008866:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800886a:	4294      	cmp	r4, r2
 800886c:	d002      	beq.n	8008874 <std+0x48>
 800886e:	33d0      	adds	r3, #208	; 0xd0
 8008870:	429c      	cmp	r4, r3
 8008872:	d105      	bne.n	8008880 <std+0x54>
 8008874:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800887c:	f000 b9ae 	b.w	8008bdc <__retarget_lock_init_recursive>
 8008880:	bd10      	pop	{r4, pc}
 8008882:	bf00      	nop
 8008884:	080089b1 	.word	0x080089b1
 8008888:	080089d3 	.word	0x080089d3
 800888c:	08008a0b 	.word	0x08008a0b
 8008890:	08008a2f 	.word	0x08008a2f
 8008894:	20001544 	.word	0x20001544

08008898 <stdio_exit_handler>:
 8008898:	4a02      	ldr	r2, [pc, #8]	; (80088a4 <stdio_exit_handler+0xc>)
 800889a:	4903      	ldr	r1, [pc, #12]	; (80088a8 <stdio_exit_handler+0x10>)
 800889c:	4803      	ldr	r0, [pc, #12]	; (80088ac <stdio_exit_handler+0x14>)
 800889e:	f000 b869 	b.w	8008974 <_fwalk_sglue>
 80088a2:	bf00      	nop
 80088a4:	20000010 	.word	0x20000010
 80088a8:	0800a2e5 	.word	0x0800a2e5
 80088ac:	2000001c 	.word	0x2000001c

080088b0 <cleanup_stdio>:
 80088b0:	6841      	ldr	r1, [r0, #4]
 80088b2:	4b0c      	ldr	r3, [pc, #48]	; (80088e4 <cleanup_stdio+0x34>)
 80088b4:	b510      	push	{r4, lr}
 80088b6:	4299      	cmp	r1, r3
 80088b8:	4604      	mov	r4, r0
 80088ba:	d001      	beq.n	80088c0 <cleanup_stdio+0x10>
 80088bc:	f001 fd12 	bl	800a2e4 <_fflush_r>
 80088c0:	68a1      	ldr	r1, [r4, #8]
 80088c2:	4b09      	ldr	r3, [pc, #36]	; (80088e8 <cleanup_stdio+0x38>)
 80088c4:	4299      	cmp	r1, r3
 80088c6:	d002      	beq.n	80088ce <cleanup_stdio+0x1e>
 80088c8:	4620      	mov	r0, r4
 80088ca:	f001 fd0b 	bl	800a2e4 <_fflush_r>
 80088ce:	68e1      	ldr	r1, [r4, #12]
 80088d0:	4b06      	ldr	r3, [pc, #24]	; (80088ec <cleanup_stdio+0x3c>)
 80088d2:	4299      	cmp	r1, r3
 80088d4:	d004      	beq.n	80088e0 <cleanup_stdio+0x30>
 80088d6:	4620      	mov	r0, r4
 80088d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088dc:	f001 bd02 	b.w	800a2e4 <_fflush_r>
 80088e0:	bd10      	pop	{r4, pc}
 80088e2:	bf00      	nop
 80088e4:	20001544 	.word	0x20001544
 80088e8:	200015ac 	.word	0x200015ac
 80088ec:	20001614 	.word	0x20001614

080088f0 <global_stdio_init.part.0>:
 80088f0:	b510      	push	{r4, lr}
 80088f2:	4b0b      	ldr	r3, [pc, #44]	; (8008920 <global_stdio_init.part.0+0x30>)
 80088f4:	4c0b      	ldr	r4, [pc, #44]	; (8008924 <global_stdio_init.part.0+0x34>)
 80088f6:	4a0c      	ldr	r2, [pc, #48]	; (8008928 <global_stdio_init.part.0+0x38>)
 80088f8:	4620      	mov	r0, r4
 80088fa:	601a      	str	r2, [r3, #0]
 80088fc:	2104      	movs	r1, #4
 80088fe:	2200      	movs	r2, #0
 8008900:	f7ff ff94 	bl	800882c <std>
 8008904:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008908:	2201      	movs	r2, #1
 800890a:	2109      	movs	r1, #9
 800890c:	f7ff ff8e 	bl	800882c <std>
 8008910:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008914:	2202      	movs	r2, #2
 8008916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800891a:	2112      	movs	r1, #18
 800891c:	f7ff bf86 	b.w	800882c <std>
 8008920:	2000167c 	.word	0x2000167c
 8008924:	20001544 	.word	0x20001544
 8008928:	08008899 	.word	0x08008899

0800892c <__sfp_lock_acquire>:
 800892c:	4801      	ldr	r0, [pc, #4]	; (8008934 <__sfp_lock_acquire+0x8>)
 800892e:	f000 b956 	b.w	8008bde <__retarget_lock_acquire_recursive>
 8008932:	bf00      	nop
 8008934:	20001685 	.word	0x20001685

08008938 <__sfp_lock_release>:
 8008938:	4801      	ldr	r0, [pc, #4]	; (8008940 <__sfp_lock_release+0x8>)
 800893a:	f000 b951 	b.w	8008be0 <__retarget_lock_release_recursive>
 800893e:	bf00      	nop
 8008940:	20001685 	.word	0x20001685

08008944 <__sinit>:
 8008944:	b510      	push	{r4, lr}
 8008946:	4604      	mov	r4, r0
 8008948:	f7ff fff0 	bl	800892c <__sfp_lock_acquire>
 800894c:	6a23      	ldr	r3, [r4, #32]
 800894e:	b11b      	cbz	r3, 8008958 <__sinit+0x14>
 8008950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008954:	f7ff bff0 	b.w	8008938 <__sfp_lock_release>
 8008958:	4b04      	ldr	r3, [pc, #16]	; (800896c <__sinit+0x28>)
 800895a:	6223      	str	r3, [r4, #32]
 800895c:	4b04      	ldr	r3, [pc, #16]	; (8008970 <__sinit+0x2c>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d1f5      	bne.n	8008950 <__sinit+0xc>
 8008964:	f7ff ffc4 	bl	80088f0 <global_stdio_init.part.0>
 8008968:	e7f2      	b.n	8008950 <__sinit+0xc>
 800896a:	bf00      	nop
 800896c:	080088b1 	.word	0x080088b1
 8008970:	2000167c 	.word	0x2000167c

08008974 <_fwalk_sglue>:
 8008974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008978:	4607      	mov	r7, r0
 800897a:	4688      	mov	r8, r1
 800897c:	4614      	mov	r4, r2
 800897e:	2600      	movs	r6, #0
 8008980:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008984:	f1b9 0901 	subs.w	r9, r9, #1
 8008988:	d505      	bpl.n	8008996 <_fwalk_sglue+0x22>
 800898a:	6824      	ldr	r4, [r4, #0]
 800898c:	2c00      	cmp	r4, #0
 800898e:	d1f7      	bne.n	8008980 <_fwalk_sglue+0xc>
 8008990:	4630      	mov	r0, r6
 8008992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008996:	89ab      	ldrh	r3, [r5, #12]
 8008998:	2b01      	cmp	r3, #1
 800899a:	d907      	bls.n	80089ac <_fwalk_sglue+0x38>
 800899c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089a0:	3301      	adds	r3, #1
 80089a2:	d003      	beq.n	80089ac <_fwalk_sglue+0x38>
 80089a4:	4629      	mov	r1, r5
 80089a6:	4638      	mov	r0, r7
 80089a8:	47c0      	blx	r8
 80089aa:	4306      	orrs	r6, r0
 80089ac:	3568      	adds	r5, #104	; 0x68
 80089ae:	e7e9      	b.n	8008984 <_fwalk_sglue+0x10>

080089b0 <__sread>:
 80089b0:	b510      	push	{r4, lr}
 80089b2:	460c      	mov	r4, r1
 80089b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089b8:	f000 f8c2 	bl	8008b40 <_read_r>
 80089bc:	2800      	cmp	r0, #0
 80089be:	bfab      	itete	ge
 80089c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80089c2:	89a3      	ldrhlt	r3, [r4, #12]
 80089c4:	181b      	addge	r3, r3, r0
 80089c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80089ca:	bfac      	ite	ge
 80089cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80089ce:	81a3      	strhlt	r3, [r4, #12]
 80089d0:	bd10      	pop	{r4, pc}

080089d2 <__swrite>:
 80089d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089d6:	461f      	mov	r7, r3
 80089d8:	898b      	ldrh	r3, [r1, #12]
 80089da:	4605      	mov	r5, r0
 80089dc:	05db      	lsls	r3, r3, #23
 80089de:	460c      	mov	r4, r1
 80089e0:	4616      	mov	r6, r2
 80089e2:	d505      	bpl.n	80089f0 <__swrite+0x1e>
 80089e4:	2302      	movs	r3, #2
 80089e6:	2200      	movs	r2, #0
 80089e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80089ec:	f000 f896 	bl	8008b1c <_lseek_r>
 80089f0:	89a3      	ldrh	r3, [r4, #12]
 80089f2:	4632      	mov	r2, r6
 80089f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089f8:	81a3      	strh	r3, [r4, #12]
 80089fa:	4628      	mov	r0, r5
 80089fc:	463b      	mov	r3, r7
 80089fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a06:	f000 b8ad 	b.w	8008b64 <_write_r>

08008a0a <__sseek>:
 8008a0a:	b510      	push	{r4, lr}
 8008a0c:	460c      	mov	r4, r1
 8008a0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a12:	f000 f883 	bl	8008b1c <_lseek_r>
 8008a16:	1c43      	adds	r3, r0, #1
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	bf15      	itete	ne
 8008a1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a26:	81a3      	strheq	r3, [r4, #12]
 8008a28:	bf18      	it	ne
 8008a2a:	81a3      	strhne	r3, [r4, #12]
 8008a2c:	bd10      	pop	{r4, pc}

08008a2e <__sclose>:
 8008a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a32:	f000 b80d 	b.w	8008a50 <_close_r>

08008a36 <memset>:
 8008a36:	4603      	mov	r3, r0
 8008a38:	4402      	add	r2, r0
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d100      	bne.n	8008a40 <memset+0xa>
 8008a3e:	4770      	bx	lr
 8008a40:	f803 1b01 	strb.w	r1, [r3], #1
 8008a44:	e7f9      	b.n	8008a3a <memset+0x4>
	...

08008a48 <_localeconv_r>:
 8008a48:	4800      	ldr	r0, [pc, #0]	; (8008a4c <_localeconv_r+0x4>)
 8008a4a:	4770      	bx	lr
 8008a4c:	2000015c 	.word	0x2000015c

08008a50 <_close_r>:
 8008a50:	b538      	push	{r3, r4, r5, lr}
 8008a52:	2300      	movs	r3, #0
 8008a54:	4d05      	ldr	r5, [pc, #20]	; (8008a6c <_close_r+0x1c>)
 8008a56:	4604      	mov	r4, r0
 8008a58:	4608      	mov	r0, r1
 8008a5a:	602b      	str	r3, [r5, #0]
 8008a5c:	f7fa fe0e 	bl	800367c <_close>
 8008a60:	1c43      	adds	r3, r0, #1
 8008a62:	d102      	bne.n	8008a6a <_close_r+0x1a>
 8008a64:	682b      	ldr	r3, [r5, #0]
 8008a66:	b103      	cbz	r3, 8008a6a <_close_r+0x1a>
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	bd38      	pop	{r3, r4, r5, pc}
 8008a6c:	20001680 	.word	0x20001680

08008a70 <_reclaim_reent>:
 8008a70:	4b29      	ldr	r3, [pc, #164]	; (8008b18 <_reclaim_reent+0xa8>)
 8008a72:	b570      	push	{r4, r5, r6, lr}
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4604      	mov	r4, r0
 8008a78:	4283      	cmp	r3, r0
 8008a7a:	d04b      	beq.n	8008b14 <_reclaim_reent+0xa4>
 8008a7c:	69c3      	ldr	r3, [r0, #28]
 8008a7e:	b143      	cbz	r3, 8008a92 <_reclaim_reent+0x22>
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d144      	bne.n	8008b10 <_reclaim_reent+0xa0>
 8008a86:	69e3      	ldr	r3, [r4, #28]
 8008a88:	6819      	ldr	r1, [r3, #0]
 8008a8a:	b111      	cbz	r1, 8008a92 <_reclaim_reent+0x22>
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f000 ff33 	bl	80098f8 <_free_r>
 8008a92:	6961      	ldr	r1, [r4, #20]
 8008a94:	b111      	cbz	r1, 8008a9c <_reclaim_reent+0x2c>
 8008a96:	4620      	mov	r0, r4
 8008a98:	f000 ff2e 	bl	80098f8 <_free_r>
 8008a9c:	69e1      	ldr	r1, [r4, #28]
 8008a9e:	b111      	cbz	r1, 8008aa6 <_reclaim_reent+0x36>
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	f000 ff29 	bl	80098f8 <_free_r>
 8008aa6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008aa8:	b111      	cbz	r1, 8008ab0 <_reclaim_reent+0x40>
 8008aaa:	4620      	mov	r0, r4
 8008aac:	f000 ff24 	bl	80098f8 <_free_r>
 8008ab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ab2:	b111      	cbz	r1, 8008aba <_reclaim_reent+0x4a>
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	f000 ff1f 	bl	80098f8 <_free_r>
 8008aba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008abc:	b111      	cbz	r1, 8008ac4 <_reclaim_reent+0x54>
 8008abe:	4620      	mov	r0, r4
 8008ac0:	f000 ff1a 	bl	80098f8 <_free_r>
 8008ac4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008ac6:	b111      	cbz	r1, 8008ace <_reclaim_reent+0x5e>
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f000 ff15 	bl	80098f8 <_free_r>
 8008ace:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008ad0:	b111      	cbz	r1, 8008ad8 <_reclaim_reent+0x68>
 8008ad2:	4620      	mov	r0, r4
 8008ad4:	f000 ff10 	bl	80098f8 <_free_r>
 8008ad8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008ada:	b111      	cbz	r1, 8008ae2 <_reclaim_reent+0x72>
 8008adc:	4620      	mov	r0, r4
 8008ade:	f000 ff0b 	bl	80098f8 <_free_r>
 8008ae2:	6a23      	ldr	r3, [r4, #32]
 8008ae4:	b1b3      	cbz	r3, 8008b14 <_reclaim_reent+0xa4>
 8008ae6:	4620      	mov	r0, r4
 8008ae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008aec:	4718      	bx	r3
 8008aee:	5949      	ldr	r1, [r1, r5]
 8008af0:	b941      	cbnz	r1, 8008b04 <_reclaim_reent+0x94>
 8008af2:	3504      	adds	r5, #4
 8008af4:	69e3      	ldr	r3, [r4, #28]
 8008af6:	2d80      	cmp	r5, #128	; 0x80
 8008af8:	68d9      	ldr	r1, [r3, #12]
 8008afa:	d1f8      	bne.n	8008aee <_reclaim_reent+0x7e>
 8008afc:	4620      	mov	r0, r4
 8008afe:	f000 fefb 	bl	80098f8 <_free_r>
 8008b02:	e7c0      	b.n	8008a86 <_reclaim_reent+0x16>
 8008b04:	680e      	ldr	r6, [r1, #0]
 8008b06:	4620      	mov	r0, r4
 8008b08:	f000 fef6 	bl	80098f8 <_free_r>
 8008b0c:	4631      	mov	r1, r6
 8008b0e:	e7ef      	b.n	8008af0 <_reclaim_reent+0x80>
 8008b10:	2500      	movs	r5, #0
 8008b12:	e7ef      	b.n	8008af4 <_reclaim_reent+0x84>
 8008b14:	bd70      	pop	{r4, r5, r6, pc}
 8008b16:	bf00      	nop
 8008b18:	20000068 	.word	0x20000068

08008b1c <_lseek_r>:
 8008b1c:	b538      	push	{r3, r4, r5, lr}
 8008b1e:	4604      	mov	r4, r0
 8008b20:	4608      	mov	r0, r1
 8008b22:	4611      	mov	r1, r2
 8008b24:	2200      	movs	r2, #0
 8008b26:	4d05      	ldr	r5, [pc, #20]	; (8008b3c <_lseek_r+0x20>)
 8008b28:	602a      	str	r2, [r5, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	f7fa fdca 	bl	80036c4 <_lseek>
 8008b30:	1c43      	adds	r3, r0, #1
 8008b32:	d102      	bne.n	8008b3a <_lseek_r+0x1e>
 8008b34:	682b      	ldr	r3, [r5, #0]
 8008b36:	b103      	cbz	r3, 8008b3a <_lseek_r+0x1e>
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	bd38      	pop	{r3, r4, r5, pc}
 8008b3c:	20001680 	.word	0x20001680

08008b40 <_read_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4604      	mov	r4, r0
 8008b44:	4608      	mov	r0, r1
 8008b46:	4611      	mov	r1, r2
 8008b48:	2200      	movs	r2, #0
 8008b4a:	4d05      	ldr	r5, [pc, #20]	; (8008b60 <_read_r+0x20>)
 8008b4c:	602a      	str	r2, [r5, #0]
 8008b4e:	461a      	mov	r2, r3
 8008b50:	f7fa fd5b 	bl	800360a <_read>
 8008b54:	1c43      	adds	r3, r0, #1
 8008b56:	d102      	bne.n	8008b5e <_read_r+0x1e>
 8008b58:	682b      	ldr	r3, [r5, #0]
 8008b5a:	b103      	cbz	r3, 8008b5e <_read_r+0x1e>
 8008b5c:	6023      	str	r3, [r4, #0]
 8008b5e:	bd38      	pop	{r3, r4, r5, pc}
 8008b60:	20001680 	.word	0x20001680

08008b64 <_write_r>:
 8008b64:	b538      	push	{r3, r4, r5, lr}
 8008b66:	4604      	mov	r4, r0
 8008b68:	4608      	mov	r0, r1
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	4d05      	ldr	r5, [pc, #20]	; (8008b84 <_write_r+0x20>)
 8008b70:	602a      	str	r2, [r5, #0]
 8008b72:	461a      	mov	r2, r3
 8008b74:	f7fa fd66 	bl	8003644 <_write>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	d102      	bne.n	8008b82 <_write_r+0x1e>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	b103      	cbz	r3, 8008b82 <_write_r+0x1e>
 8008b80:	6023      	str	r3, [r4, #0]
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
 8008b84:	20001680 	.word	0x20001680

08008b88 <__errno>:
 8008b88:	4b01      	ldr	r3, [pc, #4]	; (8008b90 <__errno+0x8>)
 8008b8a:	6818      	ldr	r0, [r3, #0]
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	20000068 	.word	0x20000068

08008b94 <__libc_init_array>:
 8008b94:	b570      	push	{r4, r5, r6, lr}
 8008b96:	2600      	movs	r6, #0
 8008b98:	4d0c      	ldr	r5, [pc, #48]	; (8008bcc <__libc_init_array+0x38>)
 8008b9a:	4c0d      	ldr	r4, [pc, #52]	; (8008bd0 <__libc_init_array+0x3c>)
 8008b9c:	1b64      	subs	r4, r4, r5
 8008b9e:	10a4      	asrs	r4, r4, #2
 8008ba0:	42a6      	cmp	r6, r4
 8008ba2:	d109      	bne.n	8008bb8 <__libc_init_array+0x24>
 8008ba4:	f001 fee0 	bl	800a968 <_init>
 8008ba8:	2600      	movs	r6, #0
 8008baa:	4d0a      	ldr	r5, [pc, #40]	; (8008bd4 <__libc_init_array+0x40>)
 8008bac:	4c0a      	ldr	r4, [pc, #40]	; (8008bd8 <__libc_init_array+0x44>)
 8008bae:	1b64      	subs	r4, r4, r5
 8008bb0:	10a4      	asrs	r4, r4, #2
 8008bb2:	42a6      	cmp	r6, r4
 8008bb4:	d105      	bne.n	8008bc2 <__libc_init_array+0x2e>
 8008bb6:	bd70      	pop	{r4, r5, r6, pc}
 8008bb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bbc:	4798      	blx	r3
 8008bbe:	3601      	adds	r6, #1
 8008bc0:	e7ee      	b.n	8008ba0 <__libc_init_array+0xc>
 8008bc2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008bc6:	4798      	blx	r3
 8008bc8:	3601      	adds	r6, #1
 8008bca:	e7f2      	b.n	8008bb2 <__libc_init_array+0x1e>
 8008bcc:	0800ad9c 	.word	0x0800ad9c
 8008bd0:	0800ad9c 	.word	0x0800ad9c
 8008bd4:	0800ad9c 	.word	0x0800ad9c
 8008bd8:	0800ada4 	.word	0x0800ada4

08008bdc <__retarget_lock_init_recursive>:
 8008bdc:	4770      	bx	lr

08008bde <__retarget_lock_acquire_recursive>:
 8008bde:	4770      	bx	lr

08008be0 <__retarget_lock_release_recursive>:
 8008be0:	4770      	bx	lr

08008be2 <memchr>:
 8008be2:	4603      	mov	r3, r0
 8008be4:	b510      	push	{r4, lr}
 8008be6:	b2c9      	uxtb	r1, r1
 8008be8:	4402      	add	r2, r0
 8008bea:	4293      	cmp	r3, r2
 8008bec:	4618      	mov	r0, r3
 8008bee:	d101      	bne.n	8008bf4 <memchr+0x12>
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	e003      	b.n	8008bfc <memchr+0x1a>
 8008bf4:	7804      	ldrb	r4, [r0, #0]
 8008bf6:	3301      	adds	r3, #1
 8008bf8:	428c      	cmp	r4, r1
 8008bfa:	d1f6      	bne.n	8008bea <memchr+0x8>
 8008bfc:	bd10      	pop	{r4, pc}

08008bfe <memcpy>:
 8008bfe:	440a      	add	r2, r1
 8008c00:	4291      	cmp	r1, r2
 8008c02:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008c06:	d100      	bne.n	8008c0a <memcpy+0xc>
 8008c08:	4770      	bx	lr
 8008c0a:	b510      	push	{r4, lr}
 8008c0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c10:	4291      	cmp	r1, r2
 8008c12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c16:	d1f9      	bne.n	8008c0c <memcpy+0xe>
 8008c18:	bd10      	pop	{r4, pc}

08008c1a <quorem>:
 8008c1a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1e:	6903      	ldr	r3, [r0, #16]
 8008c20:	690c      	ldr	r4, [r1, #16]
 8008c22:	4607      	mov	r7, r0
 8008c24:	42a3      	cmp	r3, r4
 8008c26:	db7f      	blt.n	8008d28 <quorem+0x10e>
 8008c28:	3c01      	subs	r4, #1
 8008c2a:	f100 0514 	add.w	r5, r0, #20
 8008c2e:	f101 0814 	add.w	r8, r1, #20
 8008c32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c36:	9301      	str	r3, [sp, #4]
 8008c38:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008c3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c40:	3301      	adds	r3, #1
 8008c42:	429a      	cmp	r2, r3
 8008c44:	fbb2 f6f3 	udiv	r6, r2, r3
 8008c48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008c4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008c50:	d331      	bcc.n	8008cb6 <quorem+0x9c>
 8008c52:	f04f 0e00 	mov.w	lr, #0
 8008c56:	4640      	mov	r0, r8
 8008c58:	46ac      	mov	ip, r5
 8008c5a:	46f2      	mov	sl, lr
 8008c5c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008c60:	b293      	uxth	r3, r2
 8008c62:	fb06 e303 	mla	r3, r6, r3, lr
 8008c66:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c6a:	0c1a      	lsrs	r2, r3, #16
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	fb06 220e 	mla	r2, r6, lr, r2
 8008c72:	ebaa 0303 	sub.w	r3, sl, r3
 8008c76:	f8dc a000 	ldr.w	sl, [ip]
 8008c7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c7e:	fa1f fa8a 	uxth.w	sl, sl
 8008c82:	4453      	add	r3, sl
 8008c84:	f8dc a000 	ldr.w	sl, [ip]
 8008c88:	b292      	uxth	r2, r2
 8008c8a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c8e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c98:	4581      	cmp	r9, r0
 8008c9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c9e:	f84c 3b04 	str.w	r3, [ip], #4
 8008ca2:	d2db      	bcs.n	8008c5c <quorem+0x42>
 8008ca4:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ca8:	b92b      	cbnz	r3, 8008cb6 <quorem+0x9c>
 8008caa:	9b01      	ldr	r3, [sp, #4]
 8008cac:	3b04      	subs	r3, #4
 8008cae:	429d      	cmp	r5, r3
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	d32d      	bcc.n	8008d10 <quorem+0xf6>
 8008cb4:	613c      	str	r4, [r7, #16]
 8008cb6:	4638      	mov	r0, r7
 8008cb8:	f001 f994 	bl	8009fe4 <__mcmp>
 8008cbc:	2800      	cmp	r0, #0
 8008cbe:	db23      	blt.n	8008d08 <quorem+0xee>
 8008cc0:	4629      	mov	r1, r5
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	3601      	adds	r6, #1
 8008cc6:	f858 2b04 	ldr.w	r2, [r8], #4
 8008cca:	f8d1 c000 	ldr.w	ip, [r1]
 8008cce:	b293      	uxth	r3, r2
 8008cd0:	1ac3      	subs	r3, r0, r3
 8008cd2:	0c12      	lsrs	r2, r2, #16
 8008cd4:	fa1f f08c 	uxth.w	r0, ip
 8008cd8:	4403      	add	r3, r0
 8008cda:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008cde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ce8:	45c1      	cmp	r9, r8
 8008cea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008cee:	f841 3b04 	str.w	r3, [r1], #4
 8008cf2:	d2e8      	bcs.n	8008cc6 <quorem+0xac>
 8008cf4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008cfc:	b922      	cbnz	r2, 8008d08 <quorem+0xee>
 8008cfe:	3b04      	subs	r3, #4
 8008d00:	429d      	cmp	r5, r3
 8008d02:	461a      	mov	r2, r3
 8008d04:	d30a      	bcc.n	8008d1c <quorem+0x102>
 8008d06:	613c      	str	r4, [r7, #16]
 8008d08:	4630      	mov	r0, r6
 8008d0a:	b003      	add	sp, #12
 8008d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d10:	6812      	ldr	r2, [r2, #0]
 8008d12:	3b04      	subs	r3, #4
 8008d14:	2a00      	cmp	r2, #0
 8008d16:	d1cd      	bne.n	8008cb4 <quorem+0x9a>
 8008d18:	3c01      	subs	r4, #1
 8008d1a:	e7c8      	b.n	8008cae <quorem+0x94>
 8008d1c:	6812      	ldr	r2, [r2, #0]
 8008d1e:	3b04      	subs	r3, #4
 8008d20:	2a00      	cmp	r2, #0
 8008d22:	d1f0      	bne.n	8008d06 <quorem+0xec>
 8008d24:	3c01      	subs	r4, #1
 8008d26:	e7eb      	b.n	8008d00 <quorem+0xe6>
 8008d28:	2000      	movs	r0, #0
 8008d2a:	e7ee      	b.n	8008d0a <quorem+0xf0>
 8008d2c:	0000      	movs	r0, r0
	...

08008d30 <_dtoa_r>:
 8008d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d34:	4616      	mov	r6, r2
 8008d36:	461f      	mov	r7, r3
 8008d38:	69c4      	ldr	r4, [r0, #28]
 8008d3a:	b099      	sub	sp, #100	; 0x64
 8008d3c:	4605      	mov	r5, r0
 8008d3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008d42:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008d46:	b974      	cbnz	r4, 8008d66 <_dtoa_r+0x36>
 8008d48:	2010      	movs	r0, #16
 8008d4a:	f000 fe1d 	bl	8009988 <malloc>
 8008d4e:	4602      	mov	r2, r0
 8008d50:	61e8      	str	r0, [r5, #28]
 8008d52:	b920      	cbnz	r0, 8008d5e <_dtoa_r+0x2e>
 8008d54:	21ef      	movs	r1, #239	; 0xef
 8008d56:	4bac      	ldr	r3, [pc, #688]	; (8009008 <_dtoa_r+0x2d8>)
 8008d58:	48ac      	ldr	r0, [pc, #688]	; (800900c <_dtoa_r+0x2dc>)
 8008d5a:	f001 fafb 	bl	800a354 <__assert_func>
 8008d5e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008d62:	6004      	str	r4, [r0, #0]
 8008d64:	60c4      	str	r4, [r0, #12]
 8008d66:	69eb      	ldr	r3, [r5, #28]
 8008d68:	6819      	ldr	r1, [r3, #0]
 8008d6a:	b151      	cbz	r1, 8008d82 <_dtoa_r+0x52>
 8008d6c:	685a      	ldr	r2, [r3, #4]
 8008d6e:	2301      	movs	r3, #1
 8008d70:	4093      	lsls	r3, r2
 8008d72:	604a      	str	r2, [r1, #4]
 8008d74:	608b      	str	r3, [r1, #8]
 8008d76:	4628      	mov	r0, r5
 8008d78:	f000 fefa 	bl	8009b70 <_Bfree>
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	69eb      	ldr	r3, [r5, #28]
 8008d80:	601a      	str	r2, [r3, #0]
 8008d82:	1e3b      	subs	r3, r7, #0
 8008d84:	bfaf      	iteee	ge
 8008d86:	2300      	movge	r3, #0
 8008d88:	2201      	movlt	r2, #1
 8008d8a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d8e:	9305      	strlt	r3, [sp, #20]
 8008d90:	bfa8      	it	ge
 8008d92:	f8c8 3000 	strge.w	r3, [r8]
 8008d96:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8008d9a:	4b9d      	ldr	r3, [pc, #628]	; (8009010 <_dtoa_r+0x2e0>)
 8008d9c:	bfb8      	it	lt
 8008d9e:	f8c8 2000 	strlt.w	r2, [r8]
 8008da2:	ea33 0309 	bics.w	r3, r3, r9
 8008da6:	d119      	bne.n	8008ddc <_dtoa_r+0xac>
 8008da8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008dac:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008dae:	6013      	str	r3, [r2, #0]
 8008db0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008db4:	4333      	orrs	r3, r6
 8008db6:	f000 8589 	beq.w	80098cc <_dtoa_r+0xb9c>
 8008dba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008dbc:	b953      	cbnz	r3, 8008dd4 <_dtoa_r+0xa4>
 8008dbe:	4b95      	ldr	r3, [pc, #596]	; (8009014 <_dtoa_r+0x2e4>)
 8008dc0:	e023      	b.n	8008e0a <_dtoa_r+0xda>
 8008dc2:	4b95      	ldr	r3, [pc, #596]	; (8009018 <_dtoa_r+0x2e8>)
 8008dc4:	9303      	str	r3, [sp, #12]
 8008dc6:	3308      	adds	r3, #8
 8008dc8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008dca:	6013      	str	r3, [r2, #0]
 8008dcc:	9803      	ldr	r0, [sp, #12]
 8008dce:	b019      	add	sp, #100	; 0x64
 8008dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd4:	4b8f      	ldr	r3, [pc, #572]	; (8009014 <_dtoa_r+0x2e4>)
 8008dd6:	9303      	str	r3, [sp, #12]
 8008dd8:	3303      	adds	r3, #3
 8008dda:	e7f5      	b.n	8008dc8 <_dtoa_r+0x98>
 8008ddc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008de0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008de4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008de8:	2200      	movs	r2, #0
 8008dea:	2300      	movs	r3, #0
 8008dec:	f7f7 fddc 	bl	80009a8 <__aeabi_dcmpeq>
 8008df0:	4680      	mov	r8, r0
 8008df2:	b160      	cbz	r0, 8008e0e <_dtoa_r+0xde>
 8008df4:	2301      	movs	r3, #1
 8008df6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008df8:	6013      	str	r3, [r2, #0]
 8008dfa:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 8562 	beq.w	80098c6 <_dtoa_r+0xb96>
 8008e02:	4b86      	ldr	r3, [pc, #536]	; (800901c <_dtoa_r+0x2ec>)
 8008e04:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	3b01      	subs	r3, #1
 8008e0a:	9303      	str	r3, [sp, #12]
 8008e0c:	e7de      	b.n	8008dcc <_dtoa_r+0x9c>
 8008e0e:	ab16      	add	r3, sp, #88	; 0x58
 8008e10:	9301      	str	r3, [sp, #4]
 8008e12:	ab17      	add	r3, sp, #92	; 0x5c
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	4628      	mov	r0, r5
 8008e18:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008e1c:	f001 f98a 	bl	800a134 <__d2b>
 8008e20:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008e24:	4682      	mov	sl, r0
 8008e26:	2c00      	cmp	r4, #0
 8008e28:	d07e      	beq.n	8008f28 <_dtoa_r+0x1f8>
 8008e2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008e2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008e30:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008e34:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e38:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008e3c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008e40:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008e44:	4619      	mov	r1, r3
 8008e46:	2200      	movs	r2, #0
 8008e48:	4b75      	ldr	r3, [pc, #468]	; (8009020 <_dtoa_r+0x2f0>)
 8008e4a:	f7f7 f98d 	bl	8000168 <__aeabi_dsub>
 8008e4e:	a368      	add	r3, pc, #416	; (adr r3, 8008ff0 <_dtoa_r+0x2c0>)
 8008e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e54:	f7f7 fb40 	bl	80004d8 <__aeabi_dmul>
 8008e58:	a367      	add	r3, pc, #412	; (adr r3, 8008ff8 <_dtoa_r+0x2c8>)
 8008e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5e:	f7f7 f985 	bl	800016c <__adddf3>
 8008e62:	4606      	mov	r6, r0
 8008e64:	4620      	mov	r0, r4
 8008e66:	460f      	mov	r7, r1
 8008e68:	f7f7 facc 	bl	8000404 <__aeabi_i2d>
 8008e6c:	a364      	add	r3, pc, #400	; (adr r3, 8009000 <_dtoa_r+0x2d0>)
 8008e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e72:	f7f7 fb31 	bl	80004d8 <__aeabi_dmul>
 8008e76:	4602      	mov	r2, r0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4630      	mov	r0, r6
 8008e7c:	4639      	mov	r1, r7
 8008e7e:	f7f7 f975 	bl	800016c <__adddf3>
 8008e82:	4606      	mov	r6, r0
 8008e84:	460f      	mov	r7, r1
 8008e86:	f7f7 fdd7 	bl	8000a38 <__aeabi_d2iz>
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	4683      	mov	fp, r0
 8008e8e:	2300      	movs	r3, #0
 8008e90:	4630      	mov	r0, r6
 8008e92:	4639      	mov	r1, r7
 8008e94:	f7f7 fd92 	bl	80009bc <__aeabi_dcmplt>
 8008e98:	b148      	cbz	r0, 8008eae <_dtoa_r+0x17e>
 8008e9a:	4658      	mov	r0, fp
 8008e9c:	f7f7 fab2 	bl	8000404 <__aeabi_i2d>
 8008ea0:	4632      	mov	r2, r6
 8008ea2:	463b      	mov	r3, r7
 8008ea4:	f7f7 fd80 	bl	80009a8 <__aeabi_dcmpeq>
 8008ea8:	b908      	cbnz	r0, 8008eae <_dtoa_r+0x17e>
 8008eaa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008eae:	f1bb 0f16 	cmp.w	fp, #22
 8008eb2:	d857      	bhi.n	8008f64 <_dtoa_r+0x234>
 8008eb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008eb8:	4b5a      	ldr	r3, [pc, #360]	; (8009024 <_dtoa_r+0x2f4>)
 8008eba:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec2:	f7f7 fd7b 	bl	80009bc <__aeabi_dcmplt>
 8008ec6:	2800      	cmp	r0, #0
 8008ec8:	d04e      	beq.n	8008f68 <_dtoa_r+0x238>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8008ed0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ed2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008ed4:	1b1b      	subs	r3, r3, r4
 8008ed6:	1e5a      	subs	r2, r3, #1
 8008ed8:	bf46      	itte	mi
 8008eda:	f1c3 0901 	rsbmi	r9, r3, #1
 8008ede:	2300      	movmi	r3, #0
 8008ee0:	f04f 0900 	movpl.w	r9, #0
 8008ee4:	9209      	str	r2, [sp, #36]	; 0x24
 8008ee6:	bf48      	it	mi
 8008ee8:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008eea:	f1bb 0f00 	cmp.w	fp, #0
 8008eee:	db3d      	blt.n	8008f6c <_dtoa_r+0x23c>
 8008ef0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ef2:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8008ef6:	445b      	add	r3, fp
 8008ef8:	9309      	str	r3, [sp, #36]	; 0x24
 8008efa:	2300      	movs	r3, #0
 8008efc:	930a      	str	r3, [sp, #40]	; 0x28
 8008efe:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f00:	2b09      	cmp	r3, #9
 8008f02:	d867      	bhi.n	8008fd4 <_dtoa_r+0x2a4>
 8008f04:	2b05      	cmp	r3, #5
 8008f06:	bfc4      	itt	gt
 8008f08:	3b04      	subgt	r3, #4
 8008f0a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8008f0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008f0e:	bfc8      	it	gt
 8008f10:	2400      	movgt	r4, #0
 8008f12:	f1a3 0302 	sub.w	r3, r3, #2
 8008f16:	bfd8      	it	le
 8008f18:	2401      	movle	r4, #1
 8008f1a:	2b03      	cmp	r3, #3
 8008f1c:	f200 8086 	bhi.w	800902c <_dtoa_r+0x2fc>
 8008f20:	e8df f003 	tbb	[pc, r3]
 8008f24:	5637392c 	.word	0x5637392c
 8008f28:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8008f2c:	441c      	add	r4, r3
 8008f2e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008f32:	2b20      	cmp	r3, #32
 8008f34:	bfc1      	itttt	gt
 8008f36:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008f3a:	fa09 f903 	lslgt.w	r9, r9, r3
 8008f3e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8008f42:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008f46:	bfd6      	itet	le
 8008f48:	f1c3 0320 	rsble	r3, r3, #32
 8008f4c:	ea49 0003 	orrgt.w	r0, r9, r3
 8008f50:	fa06 f003 	lslle.w	r0, r6, r3
 8008f54:	f7f7 fa46 	bl	80003e4 <__aeabi_ui2d>
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008f5e:	3c01      	subs	r4, #1
 8008f60:	9213      	str	r2, [sp, #76]	; 0x4c
 8008f62:	e76f      	b.n	8008e44 <_dtoa_r+0x114>
 8008f64:	2301      	movs	r3, #1
 8008f66:	e7b3      	b.n	8008ed0 <_dtoa_r+0x1a0>
 8008f68:	900f      	str	r0, [sp, #60]	; 0x3c
 8008f6a:	e7b2      	b.n	8008ed2 <_dtoa_r+0x1a2>
 8008f6c:	f1cb 0300 	rsb	r3, fp, #0
 8008f70:	930a      	str	r3, [sp, #40]	; 0x28
 8008f72:	2300      	movs	r3, #0
 8008f74:	eba9 090b 	sub.w	r9, r9, fp
 8008f78:	930e      	str	r3, [sp, #56]	; 0x38
 8008f7a:	e7c0      	b.n	8008efe <_dtoa_r+0x1ce>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	dc55      	bgt.n	8009032 <_dtoa_r+0x302>
 8008f86:	2301      	movs	r3, #1
 8008f88:	461a      	mov	r2, r3
 8008f8a:	9306      	str	r3, [sp, #24]
 8008f8c:	9308      	str	r3, [sp, #32]
 8008f8e:	9223      	str	r2, [sp, #140]	; 0x8c
 8008f90:	e00b      	b.n	8008faa <_dtoa_r+0x27a>
 8008f92:	2301      	movs	r3, #1
 8008f94:	e7f3      	b.n	8008f7e <_dtoa_r+0x24e>
 8008f96:	2300      	movs	r3, #0
 8008f98:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f9a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008f9c:	445b      	add	r3, fp
 8008f9e:	9306      	str	r3, [sp, #24]
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	2b01      	cmp	r3, #1
 8008fa4:	9308      	str	r3, [sp, #32]
 8008fa6:	bfb8      	it	lt
 8008fa8:	2301      	movlt	r3, #1
 8008faa:	2100      	movs	r1, #0
 8008fac:	2204      	movs	r2, #4
 8008fae:	69e8      	ldr	r0, [r5, #28]
 8008fb0:	f102 0614 	add.w	r6, r2, #20
 8008fb4:	429e      	cmp	r6, r3
 8008fb6:	d940      	bls.n	800903a <_dtoa_r+0x30a>
 8008fb8:	6041      	str	r1, [r0, #4]
 8008fba:	4628      	mov	r0, r5
 8008fbc:	f000 fd98 	bl	8009af0 <_Balloc>
 8008fc0:	9003      	str	r0, [sp, #12]
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d13c      	bne.n	8009040 <_dtoa_r+0x310>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	f240 11af 	movw	r1, #431	; 0x1af
 8008fcc:	4b16      	ldr	r3, [pc, #88]	; (8009028 <_dtoa_r+0x2f8>)
 8008fce:	e6c3      	b.n	8008d58 <_dtoa_r+0x28>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e7e1      	b.n	8008f98 <_dtoa_r+0x268>
 8008fd4:	2401      	movs	r4, #1
 8008fd6:	2300      	movs	r3, #0
 8008fd8:	940b      	str	r4, [sp, #44]	; 0x2c
 8008fda:	9322      	str	r3, [sp, #136]	; 0x88
 8008fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	9306      	str	r3, [sp, #24]
 8008fe4:	9308      	str	r3, [sp, #32]
 8008fe6:	2312      	movs	r3, #18
 8008fe8:	e7d1      	b.n	8008f8e <_dtoa_r+0x25e>
 8008fea:	bf00      	nop
 8008fec:	f3af 8000 	nop.w
 8008ff0:	636f4361 	.word	0x636f4361
 8008ff4:	3fd287a7 	.word	0x3fd287a7
 8008ff8:	8b60c8b3 	.word	0x8b60c8b3
 8008ffc:	3fc68a28 	.word	0x3fc68a28
 8009000:	509f79fb 	.word	0x509f79fb
 8009004:	3fd34413 	.word	0x3fd34413
 8009008:	0800aa6b 	.word	0x0800aa6b
 800900c:	0800aa82 	.word	0x0800aa82
 8009010:	7ff00000 	.word	0x7ff00000
 8009014:	0800aa67 	.word	0x0800aa67
 8009018:	0800aa5e 	.word	0x0800aa5e
 800901c:	0800aa3b 	.word	0x0800aa3b
 8009020:	3ff80000 	.word	0x3ff80000
 8009024:	0800ab70 	.word	0x0800ab70
 8009028:	0800aada 	.word	0x0800aada
 800902c:	2301      	movs	r3, #1
 800902e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009030:	e7d4      	b.n	8008fdc <_dtoa_r+0x2ac>
 8009032:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009034:	9306      	str	r3, [sp, #24]
 8009036:	9308      	str	r3, [sp, #32]
 8009038:	e7b7      	b.n	8008faa <_dtoa_r+0x27a>
 800903a:	3101      	adds	r1, #1
 800903c:	0052      	lsls	r2, r2, #1
 800903e:	e7b7      	b.n	8008fb0 <_dtoa_r+0x280>
 8009040:	69eb      	ldr	r3, [r5, #28]
 8009042:	9a03      	ldr	r2, [sp, #12]
 8009044:	601a      	str	r2, [r3, #0]
 8009046:	9b08      	ldr	r3, [sp, #32]
 8009048:	2b0e      	cmp	r3, #14
 800904a:	f200 80a8 	bhi.w	800919e <_dtoa_r+0x46e>
 800904e:	2c00      	cmp	r4, #0
 8009050:	f000 80a5 	beq.w	800919e <_dtoa_r+0x46e>
 8009054:	f1bb 0f00 	cmp.w	fp, #0
 8009058:	dd34      	ble.n	80090c4 <_dtoa_r+0x394>
 800905a:	4b9a      	ldr	r3, [pc, #616]	; (80092c4 <_dtoa_r+0x594>)
 800905c:	f00b 020f 	and.w	r2, fp, #15
 8009060:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009064:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009068:	e9d3 3400 	ldrd	r3, r4, [r3]
 800906c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009070:	ea4f 142b 	mov.w	r4, fp, asr #4
 8009074:	d016      	beq.n	80090a4 <_dtoa_r+0x374>
 8009076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800907a:	4b93      	ldr	r3, [pc, #588]	; (80092c8 <_dtoa_r+0x598>)
 800907c:	2703      	movs	r7, #3
 800907e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009082:	f7f7 fb53 	bl	800072c <__aeabi_ddiv>
 8009086:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800908a:	f004 040f 	and.w	r4, r4, #15
 800908e:	4e8e      	ldr	r6, [pc, #568]	; (80092c8 <_dtoa_r+0x598>)
 8009090:	b954      	cbnz	r4, 80090a8 <_dtoa_r+0x378>
 8009092:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009096:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800909a:	f7f7 fb47 	bl	800072c <__aeabi_ddiv>
 800909e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090a2:	e029      	b.n	80090f8 <_dtoa_r+0x3c8>
 80090a4:	2702      	movs	r7, #2
 80090a6:	e7f2      	b.n	800908e <_dtoa_r+0x35e>
 80090a8:	07e1      	lsls	r1, r4, #31
 80090aa:	d508      	bpl.n	80090be <_dtoa_r+0x38e>
 80090ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80090b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80090b4:	f7f7 fa10 	bl	80004d8 <__aeabi_dmul>
 80090b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80090bc:	3701      	adds	r7, #1
 80090be:	1064      	asrs	r4, r4, #1
 80090c0:	3608      	adds	r6, #8
 80090c2:	e7e5      	b.n	8009090 <_dtoa_r+0x360>
 80090c4:	f000 80a5 	beq.w	8009212 <_dtoa_r+0x4e2>
 80090c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80090cc:	f1cb 0400 	rsb	r4, fp, #0
 80090d0:	4b7c      	ldr	r3, [pc, #496]	; (80092c4 <_dtoa_r+0x594>)
 80090d2:	f004 020f 	and.w	r2, r4, #15
 80090d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80090da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090de:	f7f7 f9fb 	bl	80004d8 <__aeabi_dmul>
 80090e2:	2702      	movs	r7, #2
 80090e4:	2300      	movs	r3, #0
 80090e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80090ea:	4e77      	ldr	r6, [pc, #476]	; (80092c8 <_dtoa_r+0x598>)
 80090ec:	1124      	asrs	r4, r4, #4
 80090ee:	2c00      	cmp	r4, #0
 80090f0:	f040 8084 	bne.w	80091fc <_dtoa_r+0x4cc>
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1d2      	bne.n	800909e <_dtoa_r+0x36e>
 80090f8:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80090fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8009100:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 8087 	beq.w	8009216 <_dtoa_r+0x4e6>
 8009108:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800910c:	2200      	movs	r2, #0
 800910e:	4b6f      	ldr	r3, [pc, #444]	; (80092cc <_dtoa_r+0x59c>)
 8009110:	f7f7 fc54 	bl	80009bc <__aeabi_dcmplt>
 8009114:	2800      	cmp	r0, #0
 8009116:	d07e      	beq.n	8009216 <_dtoa_r+0x4e6>
 8009118:	9b08      	ldr	r3, [sp, #32]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d07b      	beq.n	8009216 <_dtoa_r+0x4e6>
 800911e:	9b06      	ldr	r3, [sp, #24]
 8009120:	2b00      	cmp	r3, #0
 8009122:	dd38      	ble.n	8009196 <_dtoa_r+0x466>
 8009124:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009128:	2200      	movs	r2, #0
 800912a:	4b69      	ldr	r3, [pc, #420]	; (80092d0 <_dtoa_r+0x5a0>)
 800912c:	f7f7 f9d4 	bl	80004d8 <__aeabi_dmul>
 8009130:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009134:	9c06      	ldr	r4, [sp, #24]
 8009136:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 800913a:	3701      	adds	r7, #1
 800913c:	4638      	mov	r0, r7
 800913e:	f7f7 f961 	bl	8000404 <__aeabi_i2d>
 8009142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009146:	f7f7 f9c7 	bl	80004d8 <__aeabi_dmul>
 800914a:	2200      	movs	r2, #0
 800914c:	4b61      	ldr	r3, [pc, #388]	; (80092d4 <_dtoa_r+0x5a4>)
 800914e:	f7f7 f80d 	bl	800016c <__adddf3>
 8009152:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009156:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800915a:	9611      	str	r6, [sp, #68]	; 0x44
 800915c:	2c00      	cmp	r4, #0
 800915e:	d15d      	bne.n	800921c <_dtoa_r+0x4ec>
 8009160:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009164:	2200      	movs	r2, #0
 8009166:	4b5c      	ldr	r3, [pc, #368]	; (80092d8 <_dtoa_r+0x5a8>)
 8009168:	f7f6 fffe 	bl	8000168 <__aeabi_dsub>
 800916c:	4602      	mov	r2, r0
 800916e:	460b      	mov	r3, r1
 8009170:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009174:	4633      	mov	r3, r6
 8009176:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009178:	f7f7 fc3e 	bl	80009f8 <__aeabi_dcmpgt>
 800917c:	2800      	cmp	r0, #0
 800917e:	f040 8295 	bne.w	80096ac <_dtoa_r+0x97c>
 8009182:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009186:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009188:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800918c:	f7f7 fc16 	bl	80009bc <__aeabi_dcmplt>
 8009190:	2800      	cmp	r0, #0
 8009192:	f040 8289 	bne.w	80096a8 <_dtoa_r+0x978>
 8009196:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800919a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800919e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	f2c0 8151 	blt.w	8009448 <_dtoa_r+0x718>
 80091a6:	f1bb 0f0e 	cmp.w	fp, #14
 80091aa:	f300 814d 	bgt.w	8009448 <_dtoa_r+0x718>
 80091ae:	4b45      	ldr	r3, [pc, #276]	; (80092c4 <_dtoa_r+0x594>)
 80091b0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80091b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80091b8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80091bc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f280 80da 	bge.w	8009378 <_dtoa_r+0x648>
 80091c4:	9b08      	ldr	r3, [sp, #32]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f300 80d6 	bgt.w	8009378 <_dtoa_r+0x648>
 80091cc:	f040 826b 	bne.w	80096a6 <_dtoa_r+0x976>
 80091d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091d4:	2200      	movs	r2, #0
 80091d6:	4b40      	ldr	r3, [pc, #256]	; (80092d8 <_dtoa_r+0x5a8>)
 80091d8:	f7f7 f97e 	bl	80004d8 <__aeabi_dmul>
 80091dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80091e0:	f7f7 fc00 	bl	80009e4 <__aeabi_dcmpge>
 80091e4:	9c08      	ldr	r4, [sp, #32]
 80091e6:	4626      	mov	r6, r4
 80091e8:	2800      	cmp	r0, #0
 80091ea:	f040 8241 	bne.w	8009670 <_dtoa_r+0x940>
 80091ee:	2331      	movs	r3, #49	; 0x31
 80091f0:	9f03      	ldr	r7, [sp, #12]
 80091f2:	f10b 0b01 	add.w	fp, fp, #1
 80091f6:	f807 3b01 	strb.w	r3, [r7], #1
 80091fa:	e23d      	b.n	8009678 <_dtoa_r+0x948>
 80091fc:	07e2      	lsls	r2, r4, #31
 80091fe:	d505      	bpl.n	800920c <_dtoa_r+0x4dc>
 8009200:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009204:	f7f7 f968 	bl	80004d8 <__aeabi_dmul>
 8009208:	2301      	movs	r3, #1
 800920a:	3701      	adds	r7, #1
 800920c:	1064      	asrs	r4, r4, #1
 800920e:	3608      	adds	r6, #8
 8009210:	e76d      	b.n	80090ee <_dtoa_r+0x3be>
 8009212:	2702      	movs	r7, #2
 8009214:	e770      	b.n	80090f8 <_dtoa_r+0x3c8>
 8009216:	46d8      	mov	r8, fp
 8009218:	9c08      	ldr	r4, [sp, #32]
 800921a:	e78f      	b.n	800913c <_dtoa_r+0x40c>
 800921c:	9903      	ldr	r1, [sp, #12]
 800921e:	4b29      	ldr	r3, [pc, #164]	; (80092c4 <_dtoa_r+0x594>)
 8009220:	4421      	add	r1, r4
 8009222:	9112      	str	r1, [sp, #72]	; 0x48
 8009224:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009226:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800922a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800922e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009232:	2900      	cmp	r1, #0
 8009234:	d054      	beq.n	80092e0 <_dtoa_r+0x5b0>
 8009236:	2000      	movs	r0, #0
 8009238:	4928      	ldr	r1, [pc, #160]	; (80092dc <_dtoa_r+0x5ac>)
 800923a:	f7f7 fa77 	bl	800072c <__aeabi_ddiv>
 800923e:	463b      	mov	r3, r7
 8009240:	4632      	mov	r2, r6
 8009242:	f7f6 ff91 	bl	8000168 <__aeabi_dsub>
 8009246:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800924a:	9f03      	ldr	r7, [sp, #12]
 800924c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009250:	f7f7 fbf2 	bl	8000a38 <__aeabi_d2iz>
 8009254:	4604      	mov	r4, r0
 8009256:	f7f7 f8d5 	bl	8000404 <__aeabi_i2d>
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009262:	f7f6 ff81 	bl	8000168 <__aeabi_dsub>
 8009266:	4602      	mov	r2, r0
 8009268:	460b      	mov	r3, r1
 800926a:	3430      	adds	r4, #48	; 0x30
 800926c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009270:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009274:	f807 4b01 	strb.w	r4, [r7], #1
 8009278:	f7f7 fba0 	bl	80009bc <__aeabi_dcmplt>
 800927c:	2800      	cmp	r0, #0
 800927e:	d173      	bne.n	8009368 <_dtoa_r+0x638>
 8009280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009284:	2000      	movs	r0, #0
 8009286:	4911      	ldr	r1, [pc, #68]	; (80092cc <_dtoa_r+0x59c>)
 8009288:	f7f6 ff6e 	bl	8000168 <__aeabi_dsub>
 800928c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009290:	f7f7 fb94 	bl	80009bc <__aeabi_dcmplt>
 8009294:	2800      	cmp	r0, #0
 8009296:	f040 80b6 	bne.w	8009406 <_dtoa_r+0x6d6>
 800929a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800929c:	429f      	cmp	r7, r3
 800929e:	f43f af7a 	beq.w	8009196 <_dtoa_r+0x466>
 80092a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80092a6:	2200      	movs	r2, #0
 80092a8:	4b09      	ldr	r3, [pc, #36]	; (80092d0 <_dtoa_r+0x5a0>)
 80092aa:	f7f7 f915 	bl	80004d8 <__aeabi_dmul>
 80092ae:	2200      	movs	r2, #0
 80092b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80092b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092b8:	4b05      	ldr	r3, [pc, #20]	; (80092d0 <_dtoa_r+0x5a0>)
 80092ba:	f7f7 f90d 	bl	80004d8 <__aeabi_dmul>
 80092be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092c2:	e7c3      	b.n	800924c <_dtoa_r+0x51c>
 80092c4:	0800ab70 	.word	0x0800ab70
 80092c8:	0800ab48 	.word	0x0800ab48
 80092cc:	3ff00000 	.word	0x3ff00000
 80092d0:	40240000 	.word	0x40240000
 80092d4:	401c0000 	.word	0x401c0000
 80092d8:	40140000 	.word	0x40140000
 80092dc:	3fe00000 	.word	0x3fe00000
 80092e0:	4630      	mov	r0, r6
 80092e2:	4639      	mov	r1, r7
 80092e4:	f7f7 f8f8 	bl	80004d8 <__aeabi_dmul>
 80092e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80092ea:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80092ee:	9c03      	ldr	r4, [sp, #12]
 80092f0:	9314      	str	r3, [sp, #80]	; 0x50
 80092f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092f6:	f7f7 fb9f 	bl	8000a38 <__aeabi_d2iz>
 80092fa:	9015      	str	r0, [sp, #84]	; 0x54
 80092fc:	f7f7 f882 	bl	8000404 <__aeabi_i2d>
 8009300:	4602      	mov	r2, r0
 8009302:	460b      	mov	r3, r1
 8009304:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009308:	f7f6 ff2e 	bl	8000168 <__aeabi_dsub>
 800930c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800930e:	4606      	mov	r6, r0
 8009310:	3330      	adds	r3, #48	; 0x30
 8009312:	f804 3b01 	strb.w	r3, [r4], #1
 8009316:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009318:	460f      	mov	r7, r1
 800931a:	429c      	cmp	r4, r3
 800931c:	f04f 0200 	mov.w	r2, #0
 8009320:	d124      	bne.n	800936c <_dtoa_r+0x63c>
 8009322:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009326:	4baf      	ldr	r3, [pc, #700]	; (80095e4 <_dtoa_r+0x8b4>)
 8009328:	f7f6 ff20 	bl	800016c <__adddf3>
 800932c:	4602      	mov	r2, r0
 800932e:	460b      	mov	r3, r1
 8009330:	4630      	mov	r0, r6
 8009332:	4639      	mov	r1, r7
 8009334:	f7f7 fb60 	bl	80009f8 <__aeabi_dcmpgt>
 8009338:	2800      	cmp	r0, #0
 800933a:	d163      	bne.n	8009404 <_dtoa_r+0x6d4>
 800933c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009340:	2000      	movs	r0, #0
 8009342:	49a8      	ldr	r1, [pc, #672]	; (80095e4 <_dtoa_r+0x8b4>)
 8009344:	f7f6 ff10 	bl	8000168 <__aeabi_dsub>
 8009348:	4602      	mov	r2, r0
 800934a:	460b      	mov	r3, r1
 800934c:	4630      	mov	r0, r6
 800934e:	4639      	mov	r1, r7
 8009350:	f7f7 fb34 	bl	80009bc <__aeabi_dcmplt>
 8009354:	2800      	cmp	r0, #0
 8009356:	f43f af1e 	beq.w	8009196 <_dtoa_r+0x466>
 800935a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800935c:	1e7b      	subs	r3, r7, #1
 800935e:	9314      	str	r3, [sp, #80]	; 0x50
 8009360:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8009364:	2b30      	cmp	r3, #48	; 0x30
 8009366:	d0f8      	beq.n	800935a <_dtoa_r+0x62a>
 8009368:	46c3      	mov	fp, r8
 800936a:	e03b      	b.n	80093e4 <_dtoa_r+0x6b4>
 800936c:	4b9e      	ldr	r3, [pc, #632]	; (80095e8 <_dtoa_r+0x8b8>)
 800936e:	f7f7 f8b3 	bl	80004d8 <__aeabi_dmul>
 8009372:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009376:	e7bc      	b.n	80092f2 <_dtoa_r+0x5c2>
 8009378:	9f03      	ldr	r7, [sp, #12]
 800937a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800937e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009382:	4640      	mov	r0, r8
 8009384:	4649      	mov	r1, r9
 8009386:	f7f7 f9d1 	bl	800072c <__aeabi_ddiv>
 800938a:	f7f7 fb55 	bl	8000a38 <__aeabi_d2iz>
 800938e:	4604      	mov	r4, r0
 8009390:	f7f7 f838 	bl	8000404 <__aeabi_i2d>
 8009394:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009398:	f7f7 f89e 	bl	80004d8 <__aeabi_dmul>
 800939c:	4602      	mov	r2, r0
 800939e:	460b      	mov	r3, r1
 80093a0:	4640      	mov	r0, r8
 80093a2:	4649      	mov	r1, r9
 80093a4:	f7f6 fee0 	bl	8000168 <__aeabi_dsub>
 80093a8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80093ac:	f807 6b01 	strb.w	r6, [r7], #1
 80093b0:	9e03      	ldr	r6, [sp, #12]
 80093b2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80093b6:	1bbe      	subs	r6, r7, r6
 80093b8:	45b4      	cmp	ip, r6
 80093ba:	4602      	mov	r2, r0
 80093bc:	460b      	mov	r3, r1
 80093be:	d136      	bne.n	800942e <_dtoa_r+0x6fe>
 80093c0:	f7f6 fed4 	bl	800016c <__adddf3>
 80093c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093c8:	4680      	mov	r8, r0
 80093ca:	4689      	mov	r9, r1
 80093cc:	f7f7 fb14 	bl	80009f8 <__aeabi_dcmpgt>
 80093d0:	bb58      	cbnz	r0, 800942a <_dtoa_r+0x6fa>
 80093d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093d6:	4640      	mov	r0, r8
 80093d8:	4649      	mov	r1, r9
 80093da:	f7f7 fae5 	bl	80009a8 <__aeabi_dcmpeq>
 80093de:	b108      	cbz	r0, 80093e4 <_dtoa_r+0x6b4>
 80093e0:	07e3      	lsls	r3, r4, #31
 80093e2:	d422      	bmi.n	800942a <_dtoa_r+0x6fa>
 80093e4:	4651      	mov	r1, sl
 80093e6:	4628      	mov	r0, r5
 80093e8:	f000 fbc2 	bl	8009b70 <_Bfree>
 80093ec:	2300      	movs	r3, #0
 80093ee:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80093f0:	703b      	strb	r3, [r7, #0]
 80093f2:	f10b 0301 	add.w	r3, fp, #1
 80093f6:	6013      	str	r3, [r2, #0]
 80093f8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f43f ace6 	beq.w	8008dcc <_dtoa_r+0x9c>
 8009400:	601f      	str	r7, [r3, #0]
 8009402:	e4e3      	b.n	8008dcc <_dtoa_r+0x9c>
 8009404:	4627      	mov	r7, r4
 8009406:	463b      	mov	r3, r7
 8009408:	461f      	mov	r7, r3
 800940a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800940e:	2a39      	cmp	r2, #57	; 0x39
 8009410:	d107      	bne.n	8009422 <_dtoa_r+0x6f2>
 8009412:	9a03      	ldr	r2, [sp, #12]
 8009414:	429a      	cmp	r2, r3
 8009416:	d1f7      	bne.n	8009408 <_dtoa_r+0x6d8>
 8009418:	2230      	movs	r2, #48	; 0x30
 800941a:	9903      	ldr	r1, [sp, #12]
 800941c:	f108 0801 	add.w	r8, r8, #1
 8009420:	700a      	strb	r2, [r1, #0]
 8009422:	781a      	ldrb	r2, [r3, #0]
 8009424:	3201      	adds	r2, #1
 8009426:	701a      	strb	r2, [r3, #0]
 8009428:	e79e      	b.n	8009368 <_dtoa_r+0x638>
 800942a:	46d8      	mov	r8, fp
 800942c:	e7eb      	b.n	8009406 <_dtoa_r+0x6d6>
 800942e:	2200      	movs	r2, #0
 8009430:	4b6d      	ldr	r3, [pc, #436]	; (80095e8 <_dtoa_r+0x8b8>)
 8009432:	f7f7 f851 	bl	80004d8 <__aeabi_dmul>
 8009436:	2200      	movs	r2, #0
 8009438:	2300      	movs	r3, #0
 800943a:	4680      	mov	r8, r0
 800943c:	4689      	mov	r9, r1
 800943e:	f7f7 fab3 	bl	80009a8 <__aeabi_dcmpeq>
 8009442:	2800      	cmp	r0, #0
 8009444:	d09b      	beq.n	800937e <_dtoa_r+0x64e>
 8009446:	e7cd      	b.n	80093e4 <_dtoa_r+0x6b4>
 8009448:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800944a:	2a00      	cmp	r2, #0
 800944c:	f000 80c4 	beq.w	80095d8 <_dtoa_r+0x8a8>
 8009450:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8009452:	2a01      	cmp	r2, #1
 8009454:	f300 80a8 	bgt.w	80095a8 <_dtoa_r+0x878>
 8009458:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800945a:	2a00      	cmp	r2, #0
 800945c:	f000 80a0 	beq.w	80095a0 <_dtoa_r+0x870>
 8009460:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009464:	464f      	mov	r7, r9
 8009466:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8009468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800946a:	2101      	movs	r1, #1
 800946c:	441a      	add	r2, r3
 800946e:	4628      	mov	r0, r5
 8009470:	4499      	add	r9, r3
 8009472:	9209      	str	r2, [sp, #36]	; 0x24
 8009474:	f000 fc32 	bl	8009cdc <__i2b>
 8009478:	4606      	mov	r6, r0
 800947a:	b15f      	cbz	r7, 8009494 <_dtoa_r+0x764>
 800947c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800947e:	2b00      	cmp	r3, #0
 8009480:	dd08      	ble.n	8009494 <_dtoa_r+0x764>
 8009482:	42bb      	cmp	r3, r7
 8009484:	bfa8      	it	ge
 8009486:	463b      	movge	r3, r7
 8009488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800948a:	eba9 0903 	sub.w	r9, r9, r3
 800948e:	1aff      	subs	r7, r7, r3
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	9309      	str	r3, [sp, #36]	; 0x24
 8009494:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009496:	b1f3      	cbz	r3, 80094d6 <_dtoa_r+0x7a6>
 8009498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800949a:	2b00      	cmp	r3, #0
 800949c:	f000 80a0 	beq.w	80095e0 <_dtoa_r+0x8b0>
 80094a0:	2c00      	cmp	r4, #0
 80094a2:	dd10      	ble.n	80094c6 <_dtoa_r+0x796>
 80094a4:	4631      	mov	r1, r6
 80094a6:	4622      	mov	r2, r4
 80094a8:	4628      	mov	r0, r5
 80094aa:	f000 fcd5 	bl	8009e58 <__pow5mult>
 80094ae:	4652      	mov	r2, sl
 80094b0:	4601      	mov	r1, r0
 80094b2:	4606      	mov	r6, r0
 80094b4:	4628      	mov	r0, r5
 80094b6:	f000 fc27 	bl	8009d08 <__multiply>
 80094ba:	4680      	mov	r8, r0
 80094bc:	4651      	mov	r1, sl
 80094be:	4628      	mov	r0, r5
 80094c0:	f000 fb56 	bl	8009b70 <_Bfree>
 80094c4:	46c2      	mov	sl, r8
 80094c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094c8:	1b1a      	subs	r2, r3, r4
 80094ca:	d004      	beq.n	80094d6 <_dtoa_r+0x7a6>
 80094cc:	4651      	mov	r1, sl
 80094ce:	4628      	mov	r0, r5
 80094d0:	f000 fcc2 	bl	8009e58 <__pow5mult>
 80094d4:	4682      	mov	sl, r0
 80094d6:	2101      	movs	r1, #1
 80094d8:	4628      	mov	r0, r5
 80094da:	f000 fbff 	bl	8009cdc <__i2b>
 80094de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80094e0:	4604      	mov	r4, r0
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	f340 8082 	ble.w	80095ec <_dtoa_r+0x8bc>
 80094e8:	461a      	mov	r2, r3
 80094ea:	4601      	mov	r1, r0
 80094ec:	4628      	mov	r0, r5
 80094ee:	f000 fcb3 	bl	8009e58 <__pow5mult>
 80094f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80094f4:	4604      	mov	r4, r0
 80094f6:	2b01      	cmp	r3, #1
 80094f8:	dd7b      	ble.n	80095f2 <_dtoa_r+0x8c2>
 80094fa:	f04f 0800 	mov.w	r8, #0
 80094fe:	6923      	ldr	r3, [r4, #16]
 8009500:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009504:	6918      	ldr	r0, [r3, #16]
 8009506:	f000 fb9b 	bl	8009c40 <__hi0bits>
 800950a:	f1c0 0020 	rsb	r0, r0, #32
 800950e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009510:	4418      	add	r0, r3
 8009512:	f010 001f 	ands.w	r0, r0, #31
 8009516:	f000 8092 	beq.w	800963e <_dtoa_r+0x90e>
 800951a:	f1c0 0320 	rsb	r3, r0, #32
 800951e:	2b04      	cmp	r3, #4
 8009520:	f340 8085 	ble.w	800962e <_dtoa_r+0x8fe>
 8009524:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009526:	f1c0 001c 	rsb	r0, r0, #28
 800952a:	4403      	add	r3, r0
 800952c:	4481      	add	r9, r0
 800952e:	4407      	add	r7, r0
 8009530:	9309      	str	r3, [sp, #36]	; 0x24
 8009532:	f1b9 0f00 	cmp.w	r9, #0
 8009536:	dd05      	ble.n	8009544 <_dtoa_r+0x814>
 8009538:	4651      	mov	r1, sl
 800953a:	464a      	mov	r2, r9
 800953c:	4628      	mov	r0, r5
 800953e:	f000 fce5 	bl	8009f0c <__lshift>
 8009542:	4682      	mov	sl, r0
 8009544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009546:	2b00      	cmp	r3, #0
 8009548:	dd05      	ble.n	8009556 <_dtoa_r+0x826>
 800954a:	4621      	mov	r1, r4
 800954c:	461a      	mov	r2, r3
 800954e:	4628      	mov	r0, r5
 8009550:	f000 fcdc 	bl	8009f0c <__lshift>
 8009554:	4604      	mov	r4, r0
 8009556:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009558:	2b00      	cmp	r3, #0
 800955a:	d072      	beq.n	8009642 <_dtoa_r+0x912>
 800955c:	4621      	mov	r1, r4
 800955e:	4650      	mov	r0, sl
 8009560:	f000 fd40 	bl	8009fe4 <__mcmp>
 8009564:	2800      	cmp	r0, #0
 8009566:	da6c      	bge.n	8009642 <_dtoa_r+0x912>
 8009568:	2300      	movs	r3, #0
 800956a:	4651      	mov	r1, sl
 800956c:	220a      	movs	r2, #10
 800956e:	4628      	mov	r0, r5
 8009570:	f000 fb20 	bl	8009bb4 <__multadd>
 8009574:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009576:	4682      	mov	sl, r0
 8009578:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800957c:	2b00      	cmp	r3, #0
 800957e:	f000 81ac 	beq.w	80098da <_dtoa_r+0xbaa>
 8009582:	2300      	movs	r3, #0
 8009584:	4631      	mov	r1, r6
 8009586:	220a      	movs	r2, #10
 8009588:	4628      	mov	r0, r5
 800958a:	f000 fb13 	bl	8009bb4 <__multadd>
 800958e:	9b06      	ldr	r3, [sp, #24]
 8009590:	4606      	mov	r6, r0
 8009592:	2b00      	cmp	r3, #0
 8009594:	f300 8093 	bgt.w	80096be <_dtoa_r+0x98e>
 8009598:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800959a:	2b02      	cmp	r3, #2
 800959c:	dc59      	bgt.n	8009652 <_dtoa_r+0x922>
 800959e:	e08e      	b.n	80096be <_dtoa_r+0x98e>
 80095a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80095a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80095a6:	e75d      	b.n	8009464 <_dtoa_r+0x734>
 80095a8:	9b08      	ldr	r3, [sp, #32]
 80095aa:	1e5c      	subs	r4, r3, #1
 80095ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095ae:	42a3      	cmp	r3, r4
 80095b0:	bfbf      	itttt	lt
 80095b2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80095b4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80095b6:	1ae3      	sublt	r3, r4, r3
 80095b8:	18d2      	addlt	r2, r2, r3
 80095ba:	bfa8      	it	ge
 80095bc:	1b1c      	subge	r4, r3, r4
 80095be:	9b08      	ldr	r3, [sp, #32]
 80095c0:	bfbe      	ittt	lt
 80095c2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80095c4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80095c6:	2400      	movlt	r4, #0
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	bfb5      	itete	lt
 80095cc:	eba9 0703 	sublt.w	r7, r9, r3
 80095d0:	464f      	movge	r7, r9
 80095d2:	2300      	movlt	r3, #0
 80095d4:	9b08      	ldrge	r3, [sp, #32]
 80095d6:	e747      	b.n	8009468 <_dtoa_r+0x738>
 80095d8:	464f      	mov	r7, r9
 80095da:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80095dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80095de:	e74c      	b.n	800947a <_dtoa_r+0x74a>
 80095e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095e2:	e773      	b.n	80094cc <_dtoa_r+0x79c>
 80095e4:	3fe00000 	.word	0x3fe00000
 80095e8:	40240000 	.word	0x40240000
 80095ec:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	dc18      	bgt.n	8009624 <_dtoa_r+0x8f4>
 80095f2:	9b04      	ldr	r3, [sp, #16]
 80095f4:	b9b3      	cbnz	r3, 8009624 <_dtoa_r+0x8f4>
 80095f6:	9b05      	ldr	r3, [sp, #20]
 80095f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80095fc:	b993      	cbnz	r3, 8009624 <_dtoa_r+0x8f4>
 80095fe:	9b05      	ldr	r3, [sp, #20]
 8009600:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009604:	0d1b      	lsrs	r3, r3, #20
 8009606:	051b      	lsls	r3, r3, #20
 8009608:	b17b      	cbz	r3, 800962a <_dtoa_r+0x8fa>
 800960a:	f04f 0801 	mov.w	r8, #1
 800960e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009610:	f109 0901 	add.w	r9, r9, #1
 8009614:	3301      	adds	r3, #1
 8009616:	9309      	str	r3, [sp, #36]	; 0x24
 8009618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800961a:	2b00      	cmp	r3, #0
 800961c:	f47f af6f 	bne.w	80094fe <_dtoa_r+0x7ce>
 8009620:	2001      	movs	r0, #1
 8009622:	e774      	b.n	800950e <_dtoa_r+0x7de>
 8009624:	f04f 0800 	mov.w	r8, #0
 8009628:	e7f6      	b.n	8009618 <_dtoa_r+0x8e8>
 800962a:	4698      	mov	r8, r3
 800962c:	e7f4      	b.n	8009618 <_dtoa_r+0x8e8>
 800962e:	d080      	beq.n	8009532 <_dtoa_r+0x802>
 8009630:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009632:	331c      	adds	r3, #28
 8009634:	441a      	add	r2, r3
 8009636:	4499      	add	r9, r3
 8009638:	441f      	add	r7, r3
 800963a:	9209      	str	r2, [sp, #36]	; 0x24
 800963c:	e779      	b.n	8009532 <_dtoa_r+0x802>
 800963e:	4603      	mov	r3, r0
 8009640:	e7f6      	b.n	8009630 <_dtoa_r+0x900>
 8009642:	9b08      	ldr	r3, [sp, #32]
 8009644:	2b00      	cmp	r3, #0
 8009646:	dc34      	bgt.n	80096b2 <_dtoa_r+0x982>
 8009648:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800964a:	2b02      	cmp	r3, #2
 800964c:	dd31      	ble.n	80096b2 <_dtoa_r+0x982>
 800964e:	9b08      	ldr	r3, [sp, #32]
 8009650:	9306      	str	r3, [sp, #24]
 8009652:	9b06      	ldr	r3, [sp, #24]
 8009654:	b963      	cbnz	r3, 8009670 <_dtoa_r+0x940>
 8009656:	4621      	mov	r1, r4
 8009658:	2205      	movs	r2, #5
 800965a:	4628      	mov	r0, r5
 800965c:	f000 faaa 	bl	8009bb4 <__multadd>
 8009660:	4601      	mov	r1, r0
 8009662:	4604      	mov	r4, r0
 8009664:	4650      	mov	r0, sl
 8009666:	f000 fcbd 	bl	8009fe4 <__mcmp>
 800966a:	2800      	cmp	r0, #0
 800966c:	f73f adbf 	bgt.w	80091ee <_dtoa_r+0x4be>
 8009670:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009672:	9f03      	ldr	r7, [sp, #12]
 8009674:	ea6f 0b03 	mvn.w	fp, r3
 8009678:	f04f 0800 	mov.w	r8, #0
 800967c:	4621      	mov	r1, r4
 800967e:	4628      	mov	r0, r5
 8009680:	f000 fa76 	bl	8009b70 <_Bfree>
 8009684:	2e00      	cmp	r6, #0
 8009686:	f43f aead 	beq.w	80093e4 <_dtoa_r+0x6b4>
 800968a:	f1b8 0f00 	cmp.w	r8, #0
 800968e:	d005      	beq.n	800969c <_dtoa_r+0x96c>
 8009690:	45b0      	cmp	r8, r6
 8009692:	d003      	beq.n	800969c <_dtoa_r+0x96c>
 8009694:	4641      	mov	r1, r8
 8009696:	4628      	mov	r0, r5
 8009698:	f000 fa6a 	bl	8009b70 <_Bfree>
 800969c:	4631      	mov	r1, r6
 800969e:	4628      	mov	r0, r5
 80096a0:	f000 fa66 	bl	8009b70 <_Bfree>
 80096a4:	e69e      	b.n	80093e4 <_dtoa_r+0x6b4>
 80096a6:	2400      	movs	r4, #0
 80096a8:	4626      	mov	r6, r4
 80096aa:	e7e1      	b.n	8009670 <_dtoa_r+0x940>
 80096ac:	46c3      	mov	fp, r8
 80096ae:	4626      	mov	r6, r4
 80096b0:	e59d      	b.n	80091ee <_dtoa_r+0x4be>
 80096b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 80c8 	beq.w	800984a <_dtoa_r+0xb1a>
 80096ba:	9b08      	ldr	r3, [sp, #32]
 80096bc:	9306      	str	r3, [sp, #24]
 80096be:	2f00      	cmp	r7, #0
 80096c0:	dd05      	ble.n	80096ce <_dtoa_r+0x99e>
 80096c2:	4631      	mov	r1, r6
 80096c4:	463a      	mov	r2, r7
 80096c6:	4628      	mov	r0, r5
 80096c8:	f000 fc20 	bl	8009f0c <__lshift>
 80096cc:	4606      	mov	r6, r0
 80096ce:	f1b8 0f00 	cmp.w	r8, #0
 80096d2:	d05b      	beq.n	800978c <_dtoa_r+0xa5c>
 80096d4:	4628      	mov	r0, r5
 80096d6:	6871      	ldr	r1, [r6, #4]
 80096d8:	f000 fa0a 	bl	8009af0 <_Balloc>
 80096dc:	4607      	mov	r7, r0
 80096de:	b928      	cbnz	r0, 80096ec <_dtoa_r+0x9bc>
 80096e0:	4602      	mov	r2, r0
 80096e2:	f240 21ef 	movw	r1, #751	; 0x2ef
 80096e6:	4b81      	ldr	r3, [pc, #516]	; (80098ec <_dtoa_r+0xbbc>)
 80096e8:	f7ff bb36 	b.w	8008d58 <_dtoa_r+0x28>
 80096ec:	6932      	ldr	r2, [r6, #16]
 80096ee:	f106 010c 	add.w	r1, r6, #12
 80096f2:	3202      	adds	r2, #2
 80096f4:	0092      	lsls	r2, r2, #2
 80096f6:	300c      	adds	r0, #12
 80096f8:	f7ff fa81 	bl	8008bfe <memcpy>
 80096fc:	2201      	movs	r2, #1
 80096fe:	4639      	mov	r1, r7
 8009700:	4628      	mov	r0, r5
 8009702:	f000 fc03 	bl	8009f0c <__lshift>
 8009706:	46b0      	mov	r8, r6
 8009708:	4606      	mov	r6, r0
 800970a:	9b03      	ldr	r3, [sp, #12]
 800970c:	9a03      	ldr	r2, [sp, #12]
 800970e:	3301      	adds	r3, #1
 8009710:	9308      	str	r3, [sp, #32]
 8009712:	9b06      	ldr	r3, [sp, #24]
 8009714:	4413      	add	r3, r2
 8009716:	930b      	str	r3, [sp, #44]	; 0x2c
 8009718:	9b04      	ldr	r3, [sp, #16]
 800971a:	f003 0301 	and.w	r3, r3, #1
 800971e:	930a      	str	r3, [sp, #40]	; 0x28
 8009720:	9b08      	ldr	r3, [sp, #32]
 8009722:	4621      	mov	r1, r4
 8009724:	3b01      	subs	r3, #1
 8009726:	4650      	mov	r0, sl
 8009728:	9304      	str	r3, [sp, #16]
 800972a:	f7ff fa76 	bl	8008c1a <quorem>
 800972e:	4641      	mov	r1, r8
 8009730:	9006      	str	r0, [sp, #24]
 8009732:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009736:	4650      	mov	r0, sl
 8009738:	f000 fc54 	bl	8009fe4 <__mcmp>
 800973c:	4632      	mov	r2, r6
 800973e:	9009      	str	r0, [sp, #36]	; 0x24
 8009740:	4621      	mov	r1, r4
 8009742:	4628      	mov	r0, r5
 8009744:	f000 fc6a 	bl	800a01c <__mdiff>
 8009748:	68c2      	ldr	r2, [r0, #12]
 800974a:	4607      	mov	r7, r0
 800974c:	bb02      	cbnz	r2, 8009790 <_dtoa_r+0xa60>
 800974e:	4601      	mov	r1, r0
 8009750:	4650      	mov	r0, sl
 8009752:	f000 fc47 	bl	8009fe4 <__mcmp>
 8009756:	4602      	mov	r2, r0
 8009758:	4639      	mov	r1, r7
 800975a:	4628      	mov	r0, r5
 800975c:	920c      	str	r2, [sp, #48]	; 0x30
 800975e:	f000 fa07 	bl	8009b70 <_Bfree>
 8009762:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009764:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009766:	9f08      	ldr	r7, [sp, #32]
 8009768:	ea43 0102 	orr.w	r1, r3, r2
 800976c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800976e:	4319      	orrs	r1, r3
 8009770:	d110      	bne.n	8009794 <_dtoa_r+0xa64>
 8009772:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009776:	d029      	beq.n	80097cc <_dtoa_r+0xa9c>
 8009778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800977a:	2b00      	cmp	r3, #0
 800977c:	dd02      	ble.n	8009784 <_dtoa_r+0xa54>
 800977e:	9b06      	ldr	r3, [sp, #24]
 8009780:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009784:	9b04      	ldr	r3, [sp, #16]
 8009786:	f883 9000 	strb.w	r9, [r3]
 800978a:	e777      	b.n	800967c <_dtoa_r+0x94c>
 800978c:	4630      	mov	r0, r6
 800978e:	e7ba      	b.n	8009706 <_dtoa_r+0x9d6>
 8009790:	2201      	movs	r2, #1
 8009792:	e7e1      	b.n	8009758 <_dtoa_r+0xa28>
 8009794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009796:	2b00      	cmp	r3, #0
 8009798:	db04      	blt.n	80097a4 <_dtoa_r+0xa74>
 800979a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800979c:	430b      	orrs	r3, r1
 800979e:	990a      	ldr	r1, [sp, #40]	; 0x28
 80097a0:	430b      	orrs	r3, r1
 80097a2:	d120      	bne.n	80097e6 <_dtoa_r+0xab6>
 80097a4:	2a00      	cmp	r2, #0
 80097a6:	dded      	ble.n	8009784 <_dtoa_r+0xa54>
 80097a8:	4651      	mov	r1, sl
 80097aa:	2201      	movs	r2, #1
 80097ac:	4628      	mov	r0, r5
 80097ae:	f000 fbad 	bl	8009f0c <__lshift>
 80097b2:	4621      	mov	r1, r4
 80097b4:	4682      	mov	sl, r0
 80097b6:	f000 fc15 	bl	8009fe4 <__mcmp>
 80097ba:	2800      	cmp	r0, #0
 80097bc:	dc03      	bgt.n	80097c6 <_dtoa_r+0xa96>
 80097be:	d1e1      	bne.n	8009784 <_dtoa_r+0xa54>
 80097c0:	f019 0f01 	tst.w	r9, #1
 80097c4:	d0de      	beq.n	8009784 <_dtoa_r+0xa54>
 80097c6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80097ca:	d1d8      	bne.n	800977e <_dtoa_r+0xa4e>
 80097cc:	2339      	movs	r3, #57	; 0x39
 80097ce:	9a04      	ldr	r2, [sp, #16]
 80097d0:	7013      	strb	r3, [r2, #0]
 80097d2:	463b      	mov	r3, r7
 80097d4:	461f      	mov	r7, r3
 80097d6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80097da:	3b01      	subs	r3, #1
 80097dc:	2a39      	cmp	r2, #57	; 0x39
 80097de:	d06b      	beq.n	80098b8 <_dtoa_r+0xb88>
 80097e0:	3201      	adds	r2, #1
 80097e2:	701a      	strb	r2, [r3, #0]
 80097e4:	e74a      	b.n	800967c <_dtoa_r+0x94c>
 80097e6:	2a00      	cmp	r2, #0
 80097e8:	dd07      	ble.n	80097fa <_dtoa_r+0xaca>
 80097ea:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80097ee:	d0ed      	beq.n	80097cc <_dtoa_r+0xa9c>
 80097f0:	9a04      	ldr	r2, [sp, #16]
 80097f2:	f109 0301 	add.w	r3, r9, #1
 80097f6:	7013      	strb	r3, [r2, #0]
 80097f8:	e740      	b.n	800967c <_dtoa_r+0x94c>
 80097fa:	9b08      	ldr	r3, [sp, #32]
 80097fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80097fe:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009802:	4293      	cmp	r3, r2
 8009804:	d042      	beq.n	800988c <_dtoa_r+0xb5c>
 8009806:	4651      	mov	r1, sl
 8009808:	2300      	movs	r3, #0
 800980a:	220a      	movs	r2, #10
 800980c:	4628      	mov	r0, r5
 800980e:	f000 f9d1 	bl	8009bb4 <__multadd>
 8009812:	45b0      	cmp	r8, r6
 8009814:	4682      	mov	sl, r0
 8009816:	f04f 0300 	mov.w	r3, #0
 800981a:	f04f 020a 	mov.w	r2, #10
 800981e:	4641      	mov	r1, r8
 8009820:	4628      	mov	r0, r5
 8009822:	d107      	bne.n	8009834 <_dtoa_r+0xb04>
 8009824:	f000 f9c6 	bl	8009bb4 <__multadd>
 8009828:	4680      	mov	r8, r0
 800982a:	4606      	mov	r6, r0
 800982c:	9b08      	ldr	r3, [sp, #32]
 800982e:	3301      	adds	r3, #1
 8009830:	9308      	str	r3, [sp, #32]
 8009832:	e775      	b.n	8009720 <_dtoa_r+0x9f0>
 8009834:	f000 f9be 	bl	8009bb4 <__multadd>
 8009838:	4631      	mov	r1, r6
 800983a:	4680      	mov	r8, r0
 800983c:	2300      	movs	r3, #0
 800983e:	220a      	movs	r2, #10
 8009840:	4628      	mov	r0, r5
 8009842:	f000 f9b7 	bl	8009bb4 <__multadd>
 8009846:	4606      	mov	r6, r0
 8009848:	e7f0      	b.n	800982c <_dtoa_r+0xafc>
 800984a:	9b08      	ldr	r3, [sp, #32]
 800984c:	9306      	str	r3, [sp, #24]
 800984e:	9f03      	ldr	r7, [sp, #12]
 8009850:	4621      	mov	r1, r4
 8009852:	4650      	mov	r0, sl
 8009854:	f7ff f9e1 	bl	8008c1a <quorem>
 8009858:	9b03      	ldr	r3, [sp, #12]
 800985a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800985e:	f807 9b01 	strb.w	r9, [r7], #1
 8009862:	1afa      	subs	r2, r7, r3
 8009864:	9b06      	ldr	r3, [sp, #24]
 8009866:	4293      	cmp	r3, r2
 8009868:	dd07      	ble.n	800987a <_dtoa_r+0xb4a>
 800986a:	4651      	mov	r1, sl
 800986c:	2300      	movs	r3, #0
 800986e:	220a      	movs	r2, #10
 8009870:	4628      	mov	r0, r5
 8009872:	f000 f99f 	bl	8009bb4 <__multadd>
 8009876:	4682      	mov	sl, r0
 8009878:	e7ea      	b.n	8009850 <_dtoa_r+0xb20>
 800987a:	9b06      	ldr	r3, [sp, #24]
 800987c:	f04f 0800 	mov.w	r8, #0
 8009880:	2b00      	cmp	r3, #0
 8009882:	bfcc      	ite	gt
 8009884:	461f      	movgt	r7, r3
 8009886:	2701      	movle	r7, #1
 8009888:	9b03      	ldr	r3, [sp, #12]
 800988a:	441f      	add	r7, r3
 800988c:	4651      	mov	r1, sl
 800988e:	2201      	movs	r2, #1
 8009890:	4628      	mov	r0, r5
 8009892:	f000 fb3b 	bl	8009f0c <__lshift>
 8009896:	4621      	mov	r1, r4
 8009898:	4682      	mov	sl, r0
 800989a:	f000 fba3 	bl	8009fe4 <__mcmp>
 800989e:	2800      	cmp	r0, #0
 80098a0:	dc97      	bgt.n	80097d2 <_dtoa_r+0xaa2>
 80098a2:	d102      	bne.n	80098aa <_dtoa_r+0xb7a>
 80098a4:	f019 0f01 	tst.w	r9, #1
 80098a8:	d193      	bne.n	80097d2 <_dtoa_r+0xaa2>
 80098aa:	463b      	mov	r3, r7
 80098ac:	461f      	mov	r7, r3
 80098ae:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80098b2:	2a30      	cmp	r2, #48	; 0x30
 80098b4:	d0fa      	beq.n	80098ac <_dtoa_r+0xb7c>
 80098b6:	e6e1      	b.n	800967c <_dtoa_r+0x94c>
 80098b8:	9a03      	ldr	r2, [sp, #12]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d18a      	bne.n	80097d4 <_dtoa_r+0xaa4>
 80098be:	2331      	movs	r3, #49	; 0x31
 80098c0:	f10b 0b01 	add.w	fp, fp, #1
 80098c4:	e797      	b.n	80097f6 <_dtoa_r+0xac6>
 80098c6:	4b0a      	ldr	r3, [pc, #40]	; (80098f0 <_dtoa_r+0xbc0>)
 80098c8:	f7ff ba9f 	b.w	8008e0a <_dtoa_r+0xda>
 80098cc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f47f aa77 	bne.w	8008dc2 <_dtoa_r+0x92>
 80098d4:	4b07      	ldr	r3, [pc, #28]	; (80098f4 <_dtoa_r+0xbc4>)
 80098d6:	f7ff ba98 	b.w	8008e0a <_dtoa_r+0xda>
 80098da:	9b06      	ldr	r3, [sp, #24]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	dcb6      	bgt.n	800984e <_dtoa_r+0xb1e>
 80098e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80098e2:	2b02      	cmp	r3, #2
 80098e4:	f73f aeb5 	bgt.w	8009652 <_dtoa_r+0x922>
 80098e8:	e7b1      	b.n	800984e <_dtoa_r+0xb1e>
 80098ea:	bf00      	nop
 80098ec:	0800aada 	.word	0x0800aada
 80098f0:	0800aa3a 	.word	0x0800aa3a
 80098f4:	0800aa5e 	.word	0x0800aa5e

080098f8 <_free_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	4605      	mov	r5, r0
 80098fc:	2900      	cmp	r1, #0
 80098fe:	d040      	beq.n	8009982 <_free_r+0x8a>
 8009900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009904:	1f0c      	subs	r4, r1, #4
 8009906:	2b00      	cmp	r3, #0
 8009908:	bfb8      	it	lt
 800990a:	18e4      	addlt	r4, r4, r3
 800990c:	f000 f8e4 	bl	8009ad8 <__malloc_lock>
 8009910:	4a1c      	ldr	r2, [pc, #112]	; (8009984 <_free_r+0x8c>)
 8009912:	6813      	ldr	r3, [r2, #0]
 8009914:	b933      	cbnz	r3, 8009924 <_free_r+0x2c>
 8009916:	6063      	str	r3, [r4, #4]
 8009918:	6014      	str	r4, [r2, #0]
 800991a:	4628      	mov	r0, r5
 800991c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009920:	f000 b8e0 	b.w	8009ae4 <__malloc_unlock>
 8009924:	42a3      	cmp	r3, r4
 8009926:	d908      	bls.n	800993a <_free_r+0x42>
 8009928:	6820      	ldr	r0, [r4, #0]
 800992a:	1821      	adds	r1, r4, r0
 800992c:	428b      	cmp	r3, r1
 800992e:	bf01      	itttt	eq
 8009930:	6819      	ldreq	r1, [r3, #0]
 8009932:	685b      	ldreq	r3, [r3, #4]
 8009934:	1809      	addeq	r1, r1, r0
 8009936:	6021      	streq	r1, [r4, #0]
 8009938:	e7ed      	b.n	8009916 <_free_r+0x1e>
 800993a:	461a      	mov	r2, r3
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	b10b      	cbz	r3, 8009944 <_free_r+0x4c>
 8009940:	42a3      	cmp	r3, r4
 8009942:	d9fa      	bls.n	800993a <_free_r+0x42>
 8009944:	6811      	ldr	r1, [r2, #0]
 8009946:	1850      	adds	r0, r2, r1
 8009948:	42a0      	cmp	r0, r4
 800994a:	d10b      	bne.n	8009964 <_free_r+0x6c>
 800994c:	6820      	ldr	r0, [r4, #0]
 800994e:	4401      	add	r1, r0
 8009950:	1850      	adds	r0, r2, r1
 8009952:	4283      	cmp	r3, r0
 8009954:	6011      	str	r1, [r2, #0]
 8009956:	d1e0      	bne.n	800991a <_free_r+0x22>
 8009958:	6818      	ldr	r0, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	4408      	add	r0, r1
 800995e:	6010      	str	r0, [r2, #0]
 8009960:	6053      	str	r3, [r2, #4]
 8009962:	e7da      	b.n	800991a <_free_r+0x22>
 8009964:	d902      	bls.n	800996c <_free_r+0x74>
 8009966:	230c      	movs	r3, #12
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	e7d6      	b.n	800991a <_free_r+0x22>
 800996c:	6820      	ldr	r0, [r4, #0]
 800996e:	1821      	adds	r1, r4, r0
 8009970:	428b      	cmp	r3, r1
 8009972:	bf01      	itttt	eq
 8009974:	6819      	ldreq	r1, [r3, #0]
 8009976:	685b      	ldreq	r3, [r3, #4]
 8009978:	1809      	addeq	r1, r1, r0
 800997a:	6021      	streq	r1, [r4, #0]
 800997c:	6063      	str	r3, [r4, #4]
 800997e:	6054      	str	r4, [r2, #4]
 8009980:	e7cb      	b.n	800991a <_free_r+0x22>
 8009982:	bd38      	pop	{r3, r4, r5, pc}
 8009984:	20001688 	.word	0x20001688

08009988 <malloc>:
 8009988:	4b02      	ldr	r3, [pc, #8]	; (8009994 <malloc+0xc>)
 800998a:	4601      	mov	r1, r0
 800998c:	6818      	ldr	r0, [r3, #0]
 800998e:	f000 b823 	b.w	80099d8 <_malloc_r>
 8009992:	bf00      	nop
 8009994:	20000068 	.word	0x20000068

08009998 <sbrk_aligned>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	4e0e      	ldr	r6, [pc, #56]	; (80099d4 <sbrk_aligned+0x3c>)
 800999c:	460c      	mov	r4, r1
 800999e:	6831      	ldr	r1, [r6, #0]
 80099a0:	4605      	mov	r5, r0
 80099a2:	b911      	cbnz	r1, 80099aa <sbrk_aligned+0x12>
 80099a4:	f000 fcc6 	bl	800a334 <_sbrk_r>
 80099a8:	6030      	str	r0, [r6, #0]
 80099aa:	4621      	mov	r1, r4
 80099ac:	4628      	mov	r0, r5
 80099ae:	f000 fcc1 	bl	800a334 <_sbrk_r>
 80099b2:	1c43      	adds	r3, r0, #1
 80099b4:	d00a      	beq.n	80099cc <sbrk_aligned+0x34>
 80099b6:	1cc4      	adds	r4, r0, #3
 80099b8:	f024 0403 	bic.w	r4, r4, #3
 80099bc:	42a0      	cmp	r0, r4
 80099be:	d007      	beq.n	80099d0 <sbrk_aligned+0x38>
 80099c0:	1a21      	subs	r1, r4, r0
 80099c2:	4628      	mov	r0, r5
 80099c4:	f000 fcb6 	bl	800a334 <_sbrk_r>
 80099c8:	3001      	adds	r0, #1
 80099ca:	d101      	bne.n	80099d0 <sbrk_aligned+0x38>
 80099cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80099d0:	4620      	mov	r0, r4
 80099d2:	bd70      	pop	{r4, r5, r6, pc}
 80099d4:	2000168c 	.word	0x2000168c

080099d8 <_malloc_r>:
 80099d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099dc:	1ccd      	adds	r5, r1, #3
 80099de:	f025 0503 	bic.w	r5, r5, #3
 80099e2:	3508      	adds	r5, #8
 80099e4:	2d0c      	cmp	r5, #12
 80099e6:	bf38      	it	cc
 80099e8:	250c      	movcc	r5, #12
 80099ea:	2d00      	cmp	r5, #0
 80099ec:	4607      	mov	r7, r0
 80099ee:	db01      	blt.n	80099f4 <_malloc_r+0x1c>
 80099f0:	42a9      	cmp	r1, r5
 80099f2:	d905      	bls.n	8009a00 <_malloc_r+0x28>
 80099f4:	230c      	movs	r3, #12
 80099f6:	2600      	movs	r6, #0
 80099f8:	603b      	str	r3, [r7, #0]
 80099fa:	4630      	mov	r0, r6
 80099fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a00:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009ad4 <_malloc_r+0xfc>
 8009a04:	f000 f868 	bl	8009ad8 <__malloc_lock>
 8009a08:	f8d8 3000 	ldr.w	r3, [r8]
 8009a0c:	461c      	mov	r4, r3
 8009a0e:	bb5c      	cbnz	r4, 8009a68 <_malloc_r+0x90>
 8009a10:	4629      	mov	r1, r5
 8009a12:	4638      	mov	r0, r7
 8009a14:	f7ff ffc0 	bl	8009998 <sbrk_aligned>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	4604      	mov	r4, r0
 8009a1c:	d155      	bne.n	8009aca <_malloc_r+0xf2>
 8009a1e:	f8d8 4000 	ldr.w	r4, [r8]
 8009a22:	4626      	mov	r6, r4
 8009a24:	2e00      	cmp	r6, #0
 8009a26:	d145      	bne.n	8009ab4 <_malloc_r+0xdc>
 8009a28:	2c00      	cmp	r4, #0
 8009a2a:	d048      	beq.n	8009abe <_malloc_r+0xe6>
 8009a2c:	6823      	ldr	r3, [r4, #0]
 8009a2e:	4631      	mov	r1, r6
 8009a30:	4638      	mov	r0, r7
 8009a32:	eb04 0903 	add.w	r9, r4, r3
 8009a36:	f000 fc7d 	bl	800a334 <_sbrk_r>
 8009a3a:	4581      	cmp	r9, r0
 8009a3c:	d13f      	bne.n	8009abe <_malloc_r+0xe6>
 8009a3e:	6821      	ldr	r1, [r4, #0]
 8009a40:	4638      	mov	r0, r7
 8009a42:	1a6d      	subs	r5, r5, r1
 8009a44:	4629      	mov	r1, r5
 8009a46:	f7ff ffa7 	bl	8009998 <sbrk_aligned>
 8009a4a:	3001      	adds	r0, #1
 8009a4c:	d037      	beq.n	8009abe <_malloc_r+0xe6>
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	442b      	add	r3, r5
 8009a52:	6023      	str	r3, [r4, #0]
 8009a54:	f8d8 3000 	ldr.w	r3, [r8]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d038      	beq.n	8009ace <_malloc_r+0xf6>
 8009a5c:	685a      	ldr	r2, [r3, #4]
 8009a5e:	42a2      	cmp	r2, r4
 8009a60:	d12b      	bne.n	8009aba <_malloc_r+0xe2>
 8009a62:	2200      	movs	r2, #0
 8009a64:	605a      	str	r2, [r3, #4]
 8009a66:	e00f      	b.n	8009a88 <_malloc_r+0xb0>
 8009a68:	6822      	ldr	r2, [r4, #0]
 8009a6a:	1b52      	subs	r2, r2, r5
 8009a6c:	d41f      	bmi.n	8009aae <_malloc_r+0xd6>
 8009a6e:	2a0b      	cmp	r2, #11
 8009a70:	d917      	bls.n	8009aa2 <_malloc_r+0xca>
 8009a72:	1961      	adds	r1, r4, r5
 8009a74:	42a3      	cmp	r3, r4
 8009a76:	6025      	str	r5, [r4, #0]
 8009a78:	bf18      	it	ne
 8009a7a:	6059      	strne	r1, [r3, #4]
 8009a7c:	6863      	ldr	r3, [r4, #4]
 8009a7e:	bf08      	it	eq
 8009a80:	f8c8 1000 	streq.w	r1, [r8]
 8009a84:	5162      	str	r2, [r4, r5]
 8009a86:	604b      	str	r3, [r1, #4]
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f104 060b 	add.w	r6, r4, #11
 8009a8e:	f000 f829 	bl	8009ae4 <__malloc_unlock>
 8009a92:	f026 0607 	bic.w	r6, r6, #7
 8009a96:	1d23      	adds	r3, r4, #4
 8009a98:	1af2      	subs	r2, r6, r3
 8009a9a:	d0ae      	beq.n	80099fa <_malloc_r+0x22>
 8009a9c:	1b9b      	subs	r3, r3, r6
 8009a9e:	50a3      	str	r3, [r4, r2]
 8009aa0:	e7ab      	b.n	80099fa <_malloc_r+0x22>
 8009aa2:	42a3      	cmp	r3, r4
 8009aa4:	6862      	ldr	r2, [r4, #4]
 8009aa6:	d1dd      	bne.n	8009a64 <_malloc_r+0x8c>
 8009aa8:	f8c8 2000 	str.w	r2, [r8]
 8009aac:	e7ec      	b.n	8009a88 <_malloc_r+0xb0>
 8009aae:	4623      	mov	r3, r4
 8009ab0:	6864      	ldr	r4, [r4, #4]
 8009ab2:	e7ac      	b.n	8009a0e <_malloc_r+0x36>
 8009ab4:	4634      	mov	r4, r6
 8009ab6:	6876      	ldr	r6, [r6, #4]
 8009ab8:	e7b4      	b.n	8009a24 <_malloc_r+0x4c>
 8009aba:	4613      	mov	r3, r2
 8009abc:	e7cc      	b.n	8009a58 <_malloc_r+0x80>
 8009abe:	230c      	movs	r3, #12
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	603b      	str	r3, [r7, #0]
 8009ac4:	f000 f80e 	bl	8009ae4 <__malloc_unlock>
 8009ac8:	e797      	b.n	80099fa <_malloc_r+0x22>
 8009aca:	6025      	str	r5, [r4, #0]
 8009acc:	e7dc      	b.n	8009a88 <_malloc_r+0xb0>
 8009ace:	605b      	str	r3, [r3, #4]
 8009ad0:	deff      	udf	#255	; 0xff
 8009ad2:	bf00      	nop
 8009ad4:	20001688 	.word	0x20001688

08009ad8 <__malloc_lock>:
 8009ad8:	4801      	ldr	r0, [pc, #4]	; (8009ae0 <__malloc_lock+0x8>)
 8009ada:	f7ff b880 	b.w	8008bde <__retarget_lock_acquire_recursive>
 8009ade:	bf00      	nop
 8009ae0:	20001684 	.word	0x20001684

08009ae4 <__malloc_unlock>:
 8009ae4:	4801      	ldr	r0, [pc, #4]	; (8009aec <__malloc_unlock+0x8>)
 8009ae6:	f7ff b87b 	b.w	8008be0 <__retarget_lock_release_recursive>
 8009aea:	bf00      	nop
 8009aec:	20001684 	.word	0x20001684

08009af0 <_Balloc>:
 8009af0:	b570      	push	{r4, r5, r6, lr}
 8009af2:	69c6      	ldr	r6, [r0, #28]
 8009af4:	4604      	mov	r4, r0
 8009af6:	460d      	mov	r5, r1
 8009af8:	b976      	cbnz	r6, 8009b18 <_Balloc+0x28>
 8009afa:	2010      	movs	r0, #16
 8009afc:	f7ff ff44 	bl	8009988 <malloc>
 8009b00:	4602      	mov	r2, r0
 8009b02:	61e0      	str	r0, [r4, #28]
 8009b04:	b920      	cbnz	r0, 8009b10 <_Balloc+0x20>
 8009b06:	216b      	movs	r1, #107	; 0x6b
 8009b08:	4b17      	ldr	r3, [pc, #92]	; (8009b68 <_Balloc+0x78>)
 8009b0a:	4818      	ldr	r0, [pc, #96]	; (8009b6c <_Balloc+0x7c>)
 8009b0c:	f000 fc22 	bl	800a354 <__assert_func>
 8009b10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b14:	6006      	str	r6, [r0, #0]
 8009b16:	60c6      	str	r6, [r0, #12]
 8009b18:	69e6      	ldr	r6, [r4, #28]
 8009b1a:	68f3      	ldr	r3, [r6, #12]
 8009b1c:	b183      	cbz	r3, 8009b40 <_Balloc+0x50>
 8009b1e:	69e3      	ldr	r3, [r4, #28]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009b26:	b9b8      	cbnz	r0, 8009b58 <_Balloc+0x68>
 8009b28:	2101      	movs	r1, #1
 8009b2a:	fa01 f605 	lsl.w	r6, r1, r5
 8009b2e:	1d72      	adds	r2, r6, #5
 8009b30:	4620      	mov	r0, r4
 8009b32:	0092      	lsls	r2, r2, #2
 8009b34:	f000 fc2c 	bl	800a390 <_calloc_r>
 8009b38:	b160      	cbz	r0, 8009b54 <_Balloc+0x64>
 8009b3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009b3e:	e00e      	b.n	8009b5e <_Balloc+0x6e>
 8009b40:	2221      	movs	r2, #33	; 0x21
 8009b42:	2104      	movs	r1, #4
 8009b44:	4620      	mov	r0, r4
 8009b46:	f000 fc23 	bl	800a390 <_calloc_r>
 8009b4a:	69e3      	ldr	r3, [r4, #28]
 8009b4c:	60f0      	str	r0, [r6, #12]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1e4      	bne.n	8009b1e <_Balloc+0x2e>
 8009b54:	2000      	movs	r0, #0
 8009b56:	bd70      	pop	{r4, r5, r6, pc}
 8009b58:	6802      	ldr	r2, [r0, #0]
 8009b5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b5e:	2300      	movs	r3, #0
 8009b60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b64:	e7f7      	b.n	8009b56 <_Balloc+0x66>
 8009b66:	bf00      	nop
 8009b68:	0800aa6b 	.word	0x0800aa6b
 8009b6c:	0800aaeb 	.word	0x0800aaeb

08009b70 <_Bfree>:
 8009b70:	b570      	push	{r4, r5, r6, lr}
 8009b72:	69c6      	ldr	r6, [r0, #28]
 8009b74:	4605      	mov	r5, r0
 8009b76:	460c      	mov	r4, r1
 8009b78:	b976      	cbnz	r6, 8009b98 <_Bfree+0x28>
 8009b7a:	2010      	movs	r0, #16
 8009b7c:	f7ff ff04 	bl	8009988 <malloc>
 8009b80:	4602      	mov	r2, r0
 8009b82:	61e8      	str	r0, [r5, #28]
 8009b84:	b920      	cbnz	r0, 8009b90 <_Bfree+0x20>
 8009b86:	218f      	movs	r1, #143	; 0x8f
 8009b88:	4b08      	ldr	r3, [pc, #32]	; (8009bac <_Bfree+0x3c>)
 8009b8a:	4809      	ldr	r0, [pc, #36]	; (8009bb0 <_Bfree+0x40>)
 8009b8c:	f000 fbe2 	bl	800a354 <__assert_func>
 8009b90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b94:	6006      	str	r6, [r0, #0]
 8009b96:	60c6      	str	r6, [r0, #12]
 8009b98:	b13c      	cbz	r4, 8009baa <_Bfree+0x3a>
 8009b9a:	69eb      	ldr	r3, [r5, #28]
 8009b9c:	6862      	ldr	r2, [r4, #4]
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ba4:	6021      	str	r1, [r4, #0]
 8009ba6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009baa:	bd70      	pop	{r4, r5, r6, pc}
 8009bac:	0800aa6b 	.word	0x0800aa6b
 8009bb0:	0800aaeb 	.word	0x0800aaeb

08009bb4 <__multadd>:
 8009bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb8:	4607      	mov	r7, r0
 8009bba:	460c      	mov	r4, r1
 8009bbc:	461e      	mov	r6, r3
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	690d      	ldr	r5, [r1, #16]
 8009bc2:	f101 0c14 	add.w	ip, r1, #20
 8009bc6:	f8dc 3000 	ldr.w	r3, [ip]
 8009bca:	3001      	adds	r0, #1
 8009bcc:	b299      	uxth	r1, r3
 8009bce:	fb02 6101 	mla	r1, r2, r1, r6
 8009bd2:	0c1e      	lsrs	r6, r3, #16
 8009bd4:	0c0b      	lsrs	r3, r1, #16
 8009bd6:	fb02 3306 	mla	r3, r2, r6, r3
 8009bda:	b289      	uxth	r1, r1
 8009bdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009be0:	4285      	cmp	r5, r0
 8009be2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009be6:	f84c 1b04 	str.w	r1, [ip], #4
 8009bea:	dcec      	bgt.n	8009bc6 <__multadd+0x12>
 8009bec:	b30e      	cbz	r6, 8009c32 <__multadd+0x7e>
 8009bee:	68a3      	ldr	r3, [r4, #8]
 8009bf0:	42ab      	cmp	r3, r5
 8009bf2:	dc19      	bgt.n	8009c28 <__multadd+0x74>
 8009bf4:	6861      	ldr	r1, [r4, #4]
 8009bf6:	4638      	mov	r0, r7
 8009bf8:	3101      	adds	r1, #1
 8009bfa:	f7ff ff79 	bl	8009af0 <_Balloc>
 8009bfe:	4680      	mov	r8, r0
 8009c00:	b928      	cbnz	r0, 8009c0e <__multadd+0x5a>
 8009c02:	4602      	mov	r2, r0
 8009c04:	21ba      	movs	r1, #186	; 0xba
 8009c06:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <__multadd+0x84>)
 8009c08:	480c      	ldr	r0, [pc, #48]	; (8009c3c <__multadd+0x88>)
 8009c0a:	f000 fba3 	bl	800a354 <__assert_func>
 8009c0e:	6922      	ldr	r2, [r4, #16]
 8009c10:	f104 010c 	add.w	r1, r4, #12
 8009c14:	3202      	adds	r2, #2
 8009c16:	0092      	lsls	r2, r2, #2
 8009c18:	300c      	adds	r0, #12
 8009c1a:	f7fe fff0 	bl	8008bfe <memcpy>
 8009c1e:	4621      	mov	r1, r4
 8009c20:	4638      	mov	r0, r7
 8009c22:	f7ff ffa5 	bl	8009b70 <_Bfree>
 8009c26:	4644      	mov	r4, r8
 8009c28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009c2c:	3501      	adds	r5, #1
 8009c2e:	615e      	str	r6, [r3, #20]
 8009c30:	6125      	str	r5, [r4, #16]
 8009c32:	4620      	mov	r0, r4
 8009c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c38:	0800aada 	.word	0x0800aada
 8009c3c:	0800aaeb 	.word	0x0800aaeb

08009c40 <__hi0bits>:
 8009c40:	0c02      	lsrs	r2, r0, #16
 8009c42:	0412      	lsls	r2, r2, #16
 8009c44:	4603      	mov	r3, r0
 8009c46:	b9ca      	cbnz	r2, 8009c7c <__hi0bits+0x3c>
 8009c48:	0403      	lsls	r3, r0, #16
 8009c4a:	2010      	movs	r0, #16
 8009c4c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009c50:	bf04      	itt	eq
 8009c52:	021b      	lsleq	r3, r3, #8
 8009c54:	3008      	addeq	r0, #8
 8009c56:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009c5a:	bf04      	itt	eq
 8009c5c:	011b      	lsleq	r3, r3, #4
 8009c5e:	3004      	addeq	r0, #4
 8009c60:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009c64:	bf04      	itt	eq
 8009c66:	009b      	lsleq	r3, r3, #2
 8009c68:	3002      	addeq	r0, #2
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	db05      	blt.n	8009c7a <__hi0bits+0x3a>
 8009c6e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009c72:	f100 0001 	add.w	r0, r0, #1
 8009c76:	bf08      	it	eq
 8009c78:	2020      	moveq	r0, #32
 8009c7a:	4770      	bx	lr
 8009c7c:	2000      	movs	r0, #0
 8009c7e:	e7e5      	b.n	8009c4c <__hi0bits+0xc>

08009c80 <__lo0bits>:
 8009c80:	6803      	ldr	r3, [r0, #0]
 8009c82:	4602      	mov	r2, r0
 8009c84:	f013 0007 	ands.w	r0, r3, #7
 8009c88:	d00b      	beq.n	8009ca2 <__lo0bits+0x22>
 8009c8a:	07d9      	lsls	r1, r3, #31
 8009c8c:	d421      	bmi.n	8009cd2 <__lo0bits+0x52>
 8009c8e:	0798      	lsls	r0, r3, #30
 8009c90:	bf49      	itett	mi
 8009c92:	085b      	lsrmi	r3, r3, #1
 8009c94:	089b      	lsrpl	r3, r3, #2
 8009c96:	2001      	movmi	r0, #1
 8009c98:	6013      	strmi	r3, [r2, #0]
 8009c9a:	bf5c      	itt	pl
 8009c9c:	2002      	movpl	r0, #2
 8009c9e:	6013      	strpl	r3, [r2, #0]
 8009ca0:	4770      	bx	lr
 8009ca2:	b299      	uxth	r1, r3
 8009ca4:	b909      	cbnz	r1, 8009caa <__lo0bits+0x2a>
 8009ca6:	2010      	movs	r0, #16
 8009ca8:	0c1b      	lsrs	r3, r3, #16
 8009caa:	b2d9      	uxtb	r1, r3
 8009cac:	b909      	cbnz	r1, 8009cb2 <__lo0bits+0x32>
 8009cae:	3008      	adds	r0, #8
 8009cb0:	0a1b      	lsrs	r3, r3, #8
 8009cb2:	0719      	lsls	r1, r3, #28
 8009cb4:	bf04      	itt	eq
 8009cb6:	091b      	lsreq	r3, r3, #4
 8009cb8:	3004      	addeq	r0, #4
 8009cba:	0799      	lsls	r1, r3, #30
 8009cbc:	bf04      	itt	eq
 8009cbe:	089b      	lsreq	r3, r3, #2
 8009cc0:	3002      	addeq	r0, #2
 8009cc2:	07d9      	lsls	r1, r3, #31
 8009cc4:	d403      	bmi.n	8009cce <__lo0bits+0x4e>
 8009cc6:	085b      	lsrs	r3, r3, #1
 8009cc8:	f100 0001 	add.w	r0, r0, #1
 8009ccc:	d003      	beq.n	8009cd6 <__lo0bits+0x56>
 8009cce:	6013      	str	r3, [r2, #0]
 8009cd0:	4770      	bx	lr
 8009cd2:	2000      	movs	r0, #0
 8009cd4:	4770      	bx	lr
 8009cd6:	2020      	movs	r0, #32
 8009cd8:	4770      	bx	lr
	...

08009cdc <__i2b>:
 8009cdc:	b510      	push	{r4, lr}
 8009cde:	460c      	mov	r4, r1
 8009ce0:	2101      	movs	r1, #1
 8009ce2:	f7ff ff05 	bl	8009af0 <_Balloc>
 8009ce6:	4602      	mov	r2, r0
 8009ce8:	b928      	cbnz	r0, 8009cf6 <__i2b+0x1a>
 8009cea:	f240 1145 	movw	r1, #325	; 0x145
 8009cee:	4b04      	ldr	r3, [pc, #16]	; (8009d00 <__i2b+0x24>)
 8009cf0:	4804      	ldr	r0, [pc, #16]	; (8009d04 <__i2b+0x28>)
 8009cf2:	f000 fb2f 	bl	800a354 <__assert_func>
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	6144      	str	r4, [r0, #20]
 8009cfa:	6103      	str	r3, [r0, #16]
 8009cfc:	bd10      	pop	{r4, pc}
 8009cfe:	bf00      	nop
 8009d00:	0800aada 	.word	0x0800aada
 8009d04:	0800aaeb 	.word	0x0800aaeb

08009d08 <__multiply>:
 8009d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d0c:	4691      	mov	r9, r2
 8009d0e:	690a      	ldr	r2, [r1, #16]
 8009d10:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d14:	460c      	mov	r4, r1
 8009d16:	429a      	cmp	r2, r3
 8009d18:	bfbe      	ittt	lt
 8009d1a:	460b      	movlt	r3, r1
 8009d1c:	464c      	movlt	r4, r9
 8009d1e:	4699      	movlt	r9, r3
 8009d20:	6927      	ldr	r7, [r4, #16]
 8009d22:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d26:	68a3      	ldr	r3, [r4, #8]
 8009d28:	6861      	ldr	r1, [r4, #4]
 8009d2a:	eb07 060a 	add.w	r6, r7, sl
 8009d2e:	42b3      	cmp	r3, r6
 8009d30:	b085      	sub	sp, #20
 8009d32:	bfb8      	it	lt
 8009d34:	3101      	addlt	r1, #1
 8009d36:	f7ff fedb 	bl	8009af0 <_Balloc>
 8009d3a:	b930      	cbnz	r0, 8009d4a <__multiply+0x42>
 8009d3c:	4602      	mov	r2, r0
 8009d3e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009d42:	4b43      	ldr	r3, [pc, #268]	; (8009e50 <__multiply+0x148>)
 8009d44:	4843      	ldr	r0, [pc, #268]	; (8009e54 <__multiply+0x14c>)
 8009d46:	f000 fb05 	bl	800a354 <__assert_func>
 8009d4a:	f100 0514 	add.w	r5, r0, #20
 8009d4e:	462b      	mov	r3, r5
 8009d50:	2200      	movs	r2, #0
 8009d52:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d56:	4543      	cmp	r3, r8
 8009d58:	d321      	bcc.n	8009d9e <__multiply+0x96>
 8009d5a:	f104 0314 	add.w	r3, r4, #20
 8009d5e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d62:	f109 0314 	add.w	r3, r9, #20
 8009d66:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d6a:	9202      	str	r2, [sp, #8]
 8009d6c:	1b3a      	subs	r2, r7, r4
 8009d6e:	3a15      	subs	r2, #21
 8009d70:	f022 0203 	bic.w	r2, r2, #3
 8009d74:	3204      	adds	r2, #4
 8009d76:	f104 0115 	add.w	r1, r4, #21
 8009d7a:	428f      	cmp	r7, r1
 8009d7c:	bf38      	it	cc
 8009d7e:	2204      	movcc	r2, #4
 8009d80:	9201      	str	r2, [sp, #4]
 8009d82:	9a02      	ldr	r2, [sp, #8]
 8009d84:	9303      	str	r3, [sp, #12]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d80c      	bhi.n	8009da4 <__multiply+0x9c>
 8009d8a:	2e00      	cmp	r6, #0
 8009d8c:	dd03      	ble.n	8009d96 <__multiply+0x8e>
 8009d8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d05a      	beq.n	8009e4c <__multiply+0x144>
 8009d96:	6106      	str	r6, [r0, #16]
 8009d98:	b005      	add	sp, #20
 8009d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d9e:	f843 2b04 	str.w	r2, [r3], #4
 8009da2:	e7d8      	b.n	8009d56 <__multiply+0x4e>
 8009da4:	f8b3 a000 	ldrh.w	sl, [r3]
 8009da8:	f1ba 0f00 	cmp.w	sl, #0
 8009dac:	d023      	beq.n	8009df6 <__multiply+0xee>
 8009dae:	46a9      	mov	r9, r5
 8009db0:	f04f 0c00 	mov.w	ip, #0
 8009db4:	f104 0e14 	add.w	lr, r4, #20
 8009db8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009dbc:	f8d9 1000 	ldr.w	r1, [r9]
 8009dc0:	fa1f fb82 	uxth.w	fp, r2
 8009dc4:	b289      	uxth	r1, r1
 8009dc6:	fb0a 110b 	mla	r1, sl, fp, r1
 8009dca:	4461      	add	r1, ip
 8009dcc:	f8d9 c000 	ldr.w	ip, [r9]
 8009dd0:	0c12      	lsrs	r2, r2, #16
 8009dd2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009dd6:	fb0a c202 	mla	r2, sl, r2, ip
 8009dda:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009dde:	b289      	uxth	r1, r1
 8009de0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009de4:	4577      	cmp	r7, lr
 8009de6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dea:	f849 1b04 	str.w	r1, [r9], #4
 8009dee:	d8e3      	bhi.n	8009db8 <__multiply+0xb0>
 8009df0:	9a01      	ldr	r2, [sp, #4]
 8009df2:	f845 c002 	str.w	ip, [r5, r2]
 8009df6:	9a03      	ldr	r2, [sp, #12]
 8009df8:	3304      	adds	r3, #4
 8009dfa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009dfe:	f1b9 0f00 	cmp.w	r9, #0
 8009e02:	d021      	beq.n	8009e48 <__multiply+0x140>
 8009e04:	46ae      	mov	lr, r5
 8009e06:	f04f 0a00 	mov.w	sl, #0
 8009e0a:	6829      	ldr	r1, [r5, #0]
 8009e0c:	f104 0c14 	add.w	ip, r4, #20
 8009e10:	f8bc b000 	ldrh.w	fp, [ip]
 8009e14:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e18:	b289      	uxth	r1, r1
 8009e1a:	fb09 220b 	mla	r2, r9, fp, r2
 8009e1e:	4452      	add	r2, sl
 8009e20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e24:	f84e 1b04 	str.w	r1, [lr], #4
 8009e28:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009e2c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e30:	f8be 1000 	ldrh.w	r1, [lr]
 8009e34:	4567      	cmp	r7, ip
 8009e36:	fb09 110a 	mla	r1, r9, sl, r1
 8009e3a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009e3e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e42:	d8e5      	bhi.n	8009e10 <__multiply+0x108>
 8009e44:	9a01      	ldr	r2, [sp, #4]
 8009e46:	50a9      	str	r1, [r5, r2]
 8009e48:	3504      	adds	r5, #4
 8009e4a:	e79a      	b.n	8009d82 <__multiply+0x7a>
 8009e4c:	3e01      	subs	r6, #1
 8009e4e:	e79c      	b.n	8009d8a <__multiply+0x82>
 8009e50:	0800aada 	.word	0x0800aada
 8009e54:	0800aaeb 	.word	0x0800aaeb

08009e58 <__pow5mult>:
 8009e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e5c:	4615      	mov	r5, r2
 8009e5e:	f012 0203 	ands.w	r2, r2, #3
 8009e62:	4606      	mov	r6, r0
 8009e64:	460f      	mov	r7, r1
 8009e66:	d007      	beq.n	8009e78 <__pow5mult+0x20>
 8009e68:	4c25      	ldr	r4, [pc, #148]	; (8009f00 <__pow5mult+0xa8>)
 8009e6a:	3a01      	subs	r2, #1
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e72:	f7ff fe9f 	bl	8009bb4 <__multadd>
 8009e76:	4607      	mov	r7, r0
 8009e78:	10ad      	asrs	r5, r5, #2
 8009e7a:	d03d      	beq.n	8009ef8 <__pow5mult+0xa0>
 8009e7c:	69f4      	ldr	r4, [r6, #28]
 8009e7e:	b97c      	cbnz	r4, 8009ea0 <__pow5mult+0x48>
 8009e80:	2010      	movs	r0, #16
 8009e82:	f7ff fd81 	bl	8009988 <malloc>
 8009e86:	4602      	mov	r2, r0
 8009e88:	61f0      	str	r0, [r6, #28]
 8009e8a:	b928      	cbnz	r0, 8009e98 <__pow5mult+0x40>
 8009e8c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009e90:	4b1c      	ldr	r3, [pc, #112]	; (8009f04 <__pow5mult+0xac>)
 8009e92:	481d      	ldr	r0, [pc, #116]	; (8009f08 <__pow5mult+0xb0>)
 8009e94:	f000 fa5e 	bl	800a354 <__assert_func>
 8009e98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e9c:	6004      	str	r4, [r0, #0]
 8009e9e:	60c4      	str	r4, [r0, #12]
 8009ea0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009ea4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ea8:	b94c      	cbnz	r4, 8009ebe <__pow5mult+0x66>
 8009eaa:	f240 2171 	movw	r1, #625	; 0x271
 8009eae:	4630      	mov	r0, r6
 8009eb0:	f7ff ff14 	bl	8009cdc <__i2b>
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ebc:	6003      	str	r3, [r0, #0]
 8009ebe:	f04f 0900 	mov.w	r9, #0
 8009ec2:	07eb      	lsls	r3, r5, #31
 8009ec4:	d50a      	bpl.n	8009edc <__pow5mult+0x84>
 8009ec6:	4639      	mov	r1, r7
 8009ec8:	4622      	mov	r2, r4
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f7ff ff1c 	bl	8009d08 <__multiply>
 8009ed0:	4680      	mov	r8, r0
 8009ed2:	4639      	mov	r1, r7
 8009ed4:	4630      	mov	r0, r6
 8009ed6:	f7ff fe4b 	bl	8009b70 <_Bfree>
 8009eda:	4647      	mov	r7, r8
 8009edc:	106d      	asrs	r5, r5, #1
 8009ede:	d00b      	beq.n	8009ef8 <__pow5mult+0xa0>
 8009ee0:	6820      	ldr	r0, [r4, #0]
 8009ee2:	b938      	cbnz	r0, 8009ef4 <__pow5mult+0x9c>
 8009ee4:	4622      	mov	r2, r4
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	4630      	mov	r0, r6
 8009eea:	f7ff ff0d 	bl	8009d08 <__multiply>
 8009eee:	6020      	str	r0, [r4, #0]
 8009ef0:	f8c0 9000 	str.w	r9, [r0]
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	e7e4      	b.n	8009ec2 <__pow5mult+0x6a>
 8009ef8:	4638      	mov	r0, r7
 8009efa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009efe:	bf00      	nop
 8009f00:	0800ac38 	.word	0x0800ac38
 8009f04:	0800aa6b 	.word	0x0800aa6b
 8009f08:	0800aaeb 	.word	0x0800aaeb

08009f0c <__lshift>:
 8009f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f10:	460c      	mov	r4, r1
 8009f12:	4607      	mov	r7, r0
 8009f14:	4691      	mov	r9, r2
 8009f16:	6923      	ldr	r3, [r4, #16]
 8009f18:	6849      	ldr	r1, [r1, #4]
 8009f1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f1e:	68a3      	ldr	r3, [r4, #8]
 8009f20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f24:	f108 0601 	add.w	r6, r8, #1
 8009f28:	42b3      	cmp	r3, r6
 8009f2a:	db0b      	blt.n	8009f44 <__lshift+0x38>
 8009f2c:	4638      	mov	r0, r7
 8009f2e:	f7ff fddf 	bl	8009af0 <_Balloc>
 8009f32:	4605      	mov	r5, r0
 8009f34:	b948      	cbnz	r0, 8009f4a <__lshift+0x3e>
 8009f36:	4602      	mov	r2, r0
 8009f38:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009f3c:	4b27      	ldr	r3, [pc, #156]	; (8009fdc <__lshift+0xd0>)
 8009f3e:	4828      	ldr	r0, [pc, #160]	; (8009fe0 <__lshift+0xd4>)
 8009f40:	f000 fa08 	bl	800a354 <__assert_func>
 8009f44:	3101      	adds	r1, #1
 8009f46:	005b      	lsls	r3, r3, #1
 8009f48:	e7ee      	b.n	8009f28 <__lshift+0x1c>
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	f100 0114 	add.w	r1, r0, #20
 8009f50:	f100 0210 	add.w	r2, r0, #16
 8009f54:	4618      	mov	r0, r3
 8009f56:	4553      	cmp	r3, sl
 8009f58:	db33      	blt.n	8009fc2 <__lshift+0xb6>
 8009f5a:	6920      	ldr	r0, [r4, #16]
 8009f5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f60:	f104 0314 	add.w	r3, r4, #20
 8009f64:	f019 091f 	ands.w	r9, r9, #31
 8009f68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f70:	d02b      	beq.n	8009fca <__lshift+0xbe>
 8009f72:	468a      	mov	sl, r1
 8009f74:	2200      	movs	r2, #0
 8009f76:	f1c9 0e20 	rsb	lr, r9, #32
 8009f7a:	6818      	ldr	r0, [r3, #0]
 8009f7c:	fa00 f009 	lsl.w	r0, r0, r9
 8009f80:	4310      	orrs	r0, r2
 8009f82:	f84a 0b04 	str.w	r0, [sl], #4
 8009f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f8a:	459c      	cmp	ip, r3
 8009f8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f90:	d8f3      	bhi.n	8009f7a <__lshift+0x6e>
 8009f92:	ebac 0304 	sub.w	r3, ip, r4
 8009f96:	3b15      	subs	r3, #21
 8009f98:	f023 0303 	bic.w	r3, r3, #3
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	f104 0015 	add.w	r0, r4, #21
 8009fa2:	4584      	cmp	ip, r0
 8009fa4:	bf38      	it	cc
 8009fa6:	2304      	movcc	r3, #4
 8009fa8:	50ca      	str	r2, [r1, r3]
 8009faa:	b10a      	cbz	r2, 8009fb0 <__lshift+0xa4>
 8009fac:	f108 0602 	add.w	r6, r8, #2
 8009fb0:	3e01      	subs	r6, #1
 8009fb2:	4638      	mov	r0, r7
 8009fb4:	4621      	mov	r1, r4
 8009fb6:	612e      	str	r6, [r5, #16]
 8009fb8:	f7ff fdda 	bl	8009b70 <_Bfree>
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	e7c5      	b.n	8009f56 <__lshift+0x4a>
 8009fca:	3904      	subs	r1, #4
 8009fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fd0:	459c      	cmp	ip, r3
 8009fd2:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fd6:	d8f9      	bhi.n	8009fcc <__lshift+0xc0>
 8009fd8:	e7ea      	b.n	8009fb0 <__lshift+0xa4>
 8009fda:	bf00      	nop
 8009fdc:	0800aada 	.word	0x0800aada
 8009fe0:	0800aaeb 	.word	0x0800aaeb

08009fe4 <__mcmp>:
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	690a      	ldr	r2, [r1, #16]
 8009fe8:	6900      	ldr	r0, [r0, #16]
 8009fea:	b530      	push	{r4, r5, lr}
 8009fec:	1a80      	subs	r0, r0, r2
 8009fee:	d10d      	bne.n	800a00c <__mcmp+0x28>
 8009ff0:	3314      	adds	r3, #20
 8009ff2:	3114      	adds	r1, #20
 8009ff4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ff8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009ffc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a004:	4295      	cmp	r5, r2
 800a006:	d002      	beq.n	800a00e <__mcmp+0x2a>
 800a008:	d304      	bcc.n	800a014 <__mcmp+0x30>
 800a00a:	2001      	movs	r0, #1
 800a00c:	bd30      	pop	{r4, r5, pc}
 800a00e:	42a3      	cmp	r3, r4
 800a010:	d3f4      	bcc.n	8009ffc <__mcmp+0x18>
 800a012:	e7fb      	b.n	800a00c <__mcmp+0x28>
 800a014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a018:	e7f8      	b.n	800a00c <__mcmp+0x28>
	...

0800a01c <__mdiff>:
 800a01c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a020:	460d      	mov	r5, r1
 800a022:	4607      	mov	r7, r0
 800a024:	4611      	mov	r1, r2
 800a026:	4628      	mov	r0, r5
 800a028:	4614      	mov	r4, r2
 800a02a:	f7ff ffdb 	bl	8009fe4 <__mcmp>
 800a02e:	1e06      	subs	r6, r0, #0
 800a030:	d111      	bne.n	800a056 <__mdiff+0x3a>
 800a032:	4631      	mov	r1, r6
 800a034:	4638      	mov	r0, r7
 800a036:	f7ff fd5b 	bl	8009af0 <_Balloc>
 800a03a:	4602      	mov	r2, r0
 800a03c:	b928      	cbnz	r0, 800a04a <__mdiff+0x2e>
 800a03e:	f240 2137 	movw	r1, #567	; 0x237
 800a042:	4b3a      	ldr	r3, [pc, #232]	; (800a12c <__mdiff+0x110>)
 800a044:	483a      	ldr	r0, [pc, #232]	; (800a130 <__mdiff+0x114>)
 800a046:	f000 f985 	bl	800a354 <__assert_func>
 800a04a:	2301      	movs	r3, #1
 800a04c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a050:	4610      	mov	r0, r2
 800a052:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a056:	bfa4      	itt	ge
 800a058:	4623      	movge	r3, r4
 800a05a:	462c      	movge	r4, r5
 800a05c:	4638      	mov	r0, r7
 800a05e:	6861      	ldr	r1, [r4, #4]
 800a060:	bfa6      	itte	ge
 800a062:	461d      	movge	r5, r3
 800a064:	2600      	movge	r6, #0
 800a066:	2601      	movlt	r6, #1
 800a068:	f7ff fd42 	bl	8009af0 <_Balloc>
 800a06c:	4602      	mov	r2, r0
 800a06e:	b918      	cbnz	r0, 800a078 <__mdiff+0x5c>
 800a070:	f240 2145 	movw	r1, #581	; 0x245
 800a074:	4b2d      	ldr	r3, [pc, #180]	; (800a12c <__mdiff+0x110>)
 800a076:	e7e5      	b.n	800a044 <__mdiff+0x28>
 800a078:	f102 0814 	add.w	r8, r2, #20
 800a07c:	46c2      	mov	sl, r8
 800a07e:	f04f 0c00 	mov.w	ip, #0
 800a082:	6927      	ldr	r7, [r4, #16]
 800a084:	60c6      	str	r6, [r0, #12]
 800a086:	692e      	ldr	r6, [r5, #16]
 800a088:	f104 0014 	add.w	r0, r4, #20
 800a08c:	f105 0914 	add.w	r9, r5, #20
 800a090:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a094:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a098:	3410      	adds	r4, #16
 800a09a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a09e:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0a2:	fa1f f18b 	uxth.w	r1, fp
 800a0a6:	4461      	add	r1, ip
 800a0a8:	fa1f fc83 	uxth.w	ip, r3
 800a0ac:	0c1b      	lsrs	r3, r3, #16
 800a0ae:	eba1 010c 	sub.w	r1, r1, ip
 800a0b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a0ba:	b289      	uxth	r1, r1
 800a0bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800a0c0:	454e      	cmp	r6, r9
 800a0c2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a0c6:	f84a 1b04 	str.w	r1, [sl], #4
 800a0ca:	d8e6      	bhi.n	800a09a <__mdiff+0x7e>
 800a0cc:	1b73      	subs	r3, r6, r5
 800a0ce:	3b15      	subs	r3, #21
 800a0d0:	f023 0303 	bic.w	r3, r3, #3
 800a0d4:	3515      	adds	r5, #21
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	42ae      	cmp	r6, r5
 800a0da:	bf38      	it	cc
 800a0dc:	2304      	movcc	r3, #4
 800a0de:	4418      	add	r0, r3
 800a0e0:	4443      	add	r3, r8
 800a0e2:	461e      	mov	r6, r3
 800a0e4:	4605      	mov	r5, r0
 800a0e6:	4575      	cmp	r5, lr
 800a0e8:	d30e      	bcc.n	800a108 <__mdiff+0xec>
 800a0ea:	f10e 0103 	add.w	r1, lr, #3
 800a0ee:	1a09      	subs	r1, r1, r0
 800a0f0:	f021 0103 	bic.w	r1, r1, #3
 800a0f4:	3803      	subs	r0, #3
 800a0f6:	4586      	cmp	lr, r0
 800a0f8:	bf38      	it	cc
 800a0fa:	2100      	movcc	r1, #0
 800a0fc:	440b      	add	r3, r1
 800a0fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a102:	b189      	cbz	r1, 800a128 <__mdiff+0x10c>
 800a104:	6117      	str	r7, [r2, #16]
 800a106:	e7a3      	b.n	800a050 <__mdiff+0x34>
 800a108:	f855 8b04 	ldr.w	r8, [r5], #4
 800a10c:	fa1f f188 	uxth.w	r1, r8
 800a110:	4461      	add	r1, ip
 800a112:	140c      	asrs	r4, r1, #16
 800a114:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a118:	b289      	uxth	r1, r1
 800a11a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a11e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a122:	f846 1b04 	str.w	r1, [r6], #4
 800a126:	e7de      	b.n	800a0e6 <__mdiff+0xca>
 800a128:	3f01      	subs	r7, #1
 800a12a:	e7e8      	b.n	800a0fe <__mdiff+0xe2>
 800a12c:	0800aada 	.word	0x0800aada
 800a130:	0800aaeb 	.word	0x0800aaeb

0800a134 <__d2b>:
 800a134:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a136:	2101      	movs	r1, #1
 800a138:	4617      	mov	r7, r2
 800a13a:	461c      	mov	r4, r3
 800a13c:	9e08      	ldr	r6, [sp, #32]
 800a13e:	f7ff fcd7 	bl	8009af0 <_Balloc>
 800a142:	4605      	mov	r5, r0
 800a144:	b930      	cbnz	r0, 800a154 <__d2b+0x20>
 800a146:	4602      	mov	r2, r0
 800a148:	f240 310f 	movw	r1, #783	; 0x30f
 800a14c:	4b22      	ldr	r3, [pc, #136]	; (800a1d8 <__d2b+0xa4>)
 800a14e:	4823      	ldr	r0, [pc, #140]	; (800a1dc <__d2b+0xa8>)
 800a150:	f000 f900 	bl	800a354 <__assert_func>
 800a154:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a158:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800a15c:	bb24      	cbnz	r4, 800a1a8 <__d2b+0x74>
 800a15e:	2f00      	cmp	r7, #0
 800a160:	9301      	str	r3, [sp, #4]
 800a162:	d026      	beq.n	800a1b2 <__d2b+0x7e>
 800a164:	4668      	mov	r0, sp
 800a166:	9700      	str	r7, [sp, #0]
 800a168:	f7ff fd8a 	bl	8009c80 <__lo0bits>
 800a16c:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a170:	b1e8      	cbz	r0, 800a1ae <__d2b+0x7a>
 800a172:	f1c0 0320 	rsb	r3, r0, #32
 800a176:	fa02 f303 	lsl.w	r3, r2, r3
 800a17a:	430b      	orrs	r3, r1
 800a17c:	40c2      	lsrs	r2, r0
 800a17e:	616b      	str	r3, [r5, #20]
 800a180:	9201      	str	r2, [sp, #4]
 800a182:	9b01      	ldr	r3, [sp, #4]
 800a184:	2b00      	cmp	r3, #0
 800a186:	bf14      	ite	ne
 800a188:	2102      	movne	r1, #2
 800a18a:	2101      	moveq	r1, #1
 800a18c:	61ab      	str	r3, [r5, #24]
 800a18e:	6129      	str	r1, [r5, #16]
 800a190:	b1bc      	cbz	r4, 800a1c2 <__d2b+0x8e>
 800a192:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a196:	4404      	add	r4, r0
 800a198:	6034      	str	r4, [r6, #0]
 800a19a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1a0:	6018      	str	r0, [r3, #0]
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	b003      	add	sp, #12
 800a1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a1ac:	e7d7      	b.n	800a15e <__d2b+0x2a>
 800a1ae:	6169      	str	r1, [r5, #20]
 800a1b0:	e7e7      	b.n	800a182 <__d2b+0x4e>
 800a1b2:	a801      	add	r0, sp, #4
 800a1b4:	f7ff fd64 	bl	8009c80 <__lo0bits>
 800a1b8:	9b01      	ldr	r3, [sp, #4]
 800a1ba:	2101      	movs	r1, #1
 800a1bc:	616b      	str	r3, [r5, #20]
 800a1be:	3020      	adds	r0, #32
 800a1c0:	e7e5      	b.n	800a18e <__d2b+0x5a>
 800a1c2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a1c6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800a1ca:	6030      	str	r0, [r6, #0]
 800a1cc:	6918      	ldr	r0, [r3, #16]
 800a1ce:	f7ff fd37 	bl	8009c40 <__hi0bits>
 800a1d2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a1d6:	e7e2      	b.n	800a19e <__d2b+0x6a>
 800a1d8:	0800aada 	.word	0x0800aada
 800a1dc:	0800aaeb 	.word	0x0800aaeb

0800a1e0 <__sflush_r>:
 800a1e0:	898a      	ldrh	r2, [r1, #12]
 800a1e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1e4:	4605      	mov	r5, r0
 800a1e6:	0710      	lsls	r0, r2, #28
 800a1e8:	460c      	mov	r4, r1
 800a1ea:	d457      	bmi.n	800a29c <__sflush_r+0xbc>
 800a1ec:	684b      	ldr	r3, [r1, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	dc04      	bgt.n	800a1fc <__sflush_r+0x1c>
 800a1f2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	dc01      	bgt.n	800a1fc <__sflush_r+0x1c>
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1fe:	2e00      	cmp	r6, #0
 800a200:	d0fa      	beq.n	800a1f8 <__sflush_r+0x18>
 800a202:	2300      	movs	r3, #0
 800a204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a208:	682f      	ldr	r7, [r5, #0]
 800a20a:	6a21      	ldr	r1, [r4, #32]
 800a20c:	602b      	str	r3, [r5, #0]
 800a20e:	d032      	beq.n	800a276 <__sflush_r+0x96>
 800a210:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a212:	89a3      	ldrh	r3, [r4, #12]
 800a214:	075a      	lsls	r2, r3, #29
 800a216:	d505      	bpl.n	800a224 <__sflush_r+0x44>
 800a218:	6863      	ldr	r3, [r4, #4]
 800a21a:	1ac0      	subs	r0, r0, r3
 800a21c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a21e:	b10b      	cbz	r3, 800a224 <__sflush_r+0x44>
 800a220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a222:	1ac0      	subs	r0, r0, r3
 800a224:	2300      	movs	r3, #0
 800a226:	4602      	mov	r2, r0
 800a228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a22a:	4628      	mov	r0, r5
 800a22c:	6a21      	ldr	r1, [r4, #32]
 800a22e:	47b0      	blx	r6
 800a230:	1c43      	adds	r3, r0, #1
 800a232:	89a3      	ldrh	r3, [r4, #12]
 800a234:	d106      	bne.n	800a244 <__sflush_r+0x64>
 800a236:	6829      	ldr	r1, [r5, #0]
 800a238:	291d      	cmp	r1, #29
 800a23a:	d82b      	bhi.n	800a294 <__sflush_r+0xb4>
 800a23c:	4a28      	ldr	r2, [pc, #160]	; (800a2e0 <__sflush_r+0x100>)
 800a23e:	410a      	asrs	r2, r1
 800a240:	07d6      	lsls	r6, r2, #31
 800a242:	d427      	bmi.n	800a294 <__sflush_r+0xb4>
 800a244:	2200      	movs	r2, #0
 800a246:	6062      	str	r2, [r4, #4]
 800a248:	6922      	ldr	r2, [r4, #16]
 800a24a:	04d9      	lsls	r1, r3, #19
 800a24c:	6022      	str	r2, [r4, #0]
 800a24e:	d504      	bpl.n	800a25a <__sflush_r+0x7a>
 800a250:	1c42      	adds	r2, r0, #1
 800a252:	d101      	bne.n	800a258 <__sflush_r+0x78>
 800a254:	682b      	ldr	r3, [r5, #0]
 800a256:	b903      	cbnz	r3, 800a25a <__sflush_r+0x7a>
 800a258:	6560      	str	r0, [r4, #84]	; 0x54
 800a25a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a25c:	602f      	str	r7, [r5, #0]
 800a25e:	2900      	cmp	r1, #0
 800a260:	d0ca      	beq.n	800a1f8 <__sflush_r+0x18>
 800a262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a266:	4299      	cmp	r1, r3
 800a268:	d002      	beq.n	800a270 <__sflush_r+0x90>
 800a26a:	4628      	mov	r0, r5
 800a26c:	f7ff fb44 	bl	80098f8 <_free_r>
 800a270:	2000      	movs	r0, #0
 800a272:	6360      	str	r0, [r4, #52]	; 0x34
 800a274:	e7c1      	b.n	800a1fa <__sflush_r+0x1a>
 800a276:	2301      	movs	r3, #1
 800a278:	4628      	mov	r0, r5
 800a27a:	47b0      	blx	r6
 800a27c:	1c41      	adds	r1, r0, #1
 800a27e:	d1c8      	bne.n	800a212 <__sflush_r+0x32>
 800a280:	682b      	ldr	r3, [r5, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d0c5      	beq.n	800a212 <__sflush_r+0x32>
 800a286:	2b1d      	cmp	r3, #29
 800a288:	d001      	beq.n	800a28e <__sflush_r+0xae>
 800a28a:	2b16      	cmp	r3, #22
 800a28c:	d101      	bne.n	800a292 <__sflush_r+0xb2>
 800a28e:	602f      	str	r7, [r5, #0]
 800a290:	e7b2      	b.n	800a1f8 <__sflush_r+0x18>
 800a292:	89a3      	ldrh	r3, [r4, #12]
 800a294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a298:	81a3      	strh	r3, [r4, #12]
 800a29a:	e7ae      	b.n	800a1fa <__sflush_r+0x1a>
 800a29c:	690f      	ldr	r7, [r1, #16]
 800a29e:	2f00      	cmp	r7, #0
 800a2a0:	d0aa      	beq.n	800a1f8 <__sflush_r+0x18>
 800a2a2:	0793      	lsls	r3, r2, #30
 800a2a4:	bf18      	it	ne
 800a2a6:	2300      	movne	r3, #0
 800a2a8:	680e      	ldr	r6, [r1, #0]
 800a2aa:	bf08      	it	eq
 800a2ac:	694b      	ldreq	r3, [r1, #20]
 800a2ae:	1bf6      	subs	r6, r6, r7
 800a2b0:	600f      	str	r7, [r1, #0]
 800a2b2:	608b      	str	r3, [r1, #8]
 800a2b4:	2e00      	cmp	r6, #0
 800a2b6:	dd9f      	ble.n	800a1f8 <__sflush_r+0x18>
 800a2b8:	4633      	mov	r3, r6
 800a2ba:	463a      	mov	r2, r7
 800a2bc:	4628      	mov	r0, r5
 800a2be:	6a21      	ldr	r1, [r4, #32]
 800a2c0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a2c4:	47e0      	blx	ip
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	dc06      	bgt.n	800a2d8 <__sflush_r+0xf8>
 800a2ca:	89a3      	ldrh	r3, [r4, #12]
 800a2cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2d4:	81a3      	strh	r3, [r4, #12]
 800a2d6:	e790      	b.n	800a1fa <__sflush_r+0x1a>
 800a2d8:	4407      	add	r7, r0
 800a2da:	1a36      	subs	r6, r6, r0
 800a2dc:	e7ea      	b.n	800a2b4 <__sflush_r+0xd4>
 800a2de:	bf00      	nop
 800a2e0:	dfbffffe 	.word	0xdfbffffe

0800a2e4 <_fflush_r>:
 800a2e4:	b538      	push	{r3, r4, r5, lr}
 800a2e6:	690b      	ldr	r3, [r1, #16]
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	460c      	mov	r4, r1
 800a2ec:	b913      	cbnz	r3, 800a2f4 <_fflush_r+0x10>
 800a2ee:	2500      	movs	r5, #0
 800a2f0:	4628      	mov	r0, r5
 800a2f2:	bd38      	pop	{r3, r4, r5, pc}
 800a2f4:	b118      	cbz	r0, 800a2fe <_fflush_r+0x1a>
 800a2f6:	6a03      	ldr	r3, [r0, #32]
 800a2f8:	b90b      	cbnz	r3, 800a2fe <_fflush_r+0x1a>
 800a2fa:	f7fe fb23 	bl	8008944 <__sinit>
 800a2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d0f3      	beq.n	800a2ee <_fflush_r+0xa>
 800a306:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a308:	07d0      	lsls	r0, r2, #31
 800a30a:	d404      	bmi.n	800a316 <_fflush_r+0x32>
 800a30c:	0599      	lsls	r1, r3, #22
 800a30e:	d402      	bmi.n	800a316 <_fflush_r+0x32>
 800a310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a312:	f7fe fc64 	bl	8008bde <__retarget_lock_acquire_recursive>
 800a316:	4628      	mov	r0, r5
 800a318:	4621      	mov	r1, r4
 800a31a:	f7ff ff61 	bl	800a1e0 <__sflush_r>
 800a31e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a320:	4605      	mov	r5, r0
 800a322:	07da      	lsls	r2, r3, #31
 800a324:	d4e4      	bmi.n	800a2f0 <_fflush_r+0xc>
 800a326:	89a3      	ldrh	r3, [r4, #12]
 800a328:	059b      	lsls	r3, r3, #22
 800a32a:	d4e1      	bmi.n	800a2f0 <_fflush_r+0xc>
 800a32c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a32e:	f7fe fc57 	bl	8008be0 <__retarget_lock_release_recursive>
 800a332:	e7dd      	b.n	800a2f0 <_fflush_r+0xc>

0800a334 <_sbrk_r>:
 800a334:	b538      	push	{r3, r4, r5, lr}
 800a336:	2300      	movs	r3, #0
 800a338:	4d05      	ldr	r5, [pc, #20]	; (800a350 <_sbrk_r+0x1c>)
 800a33a:	4604      	mov	r4, r0
 800a33c:	4608      	mov	r0, r1
 800a33e:	602b      	str	r3, [r5, #0]
 800a340:	f7f9 f9cc 	bl	80036dc <_sbrk>
 800a344:	1c43      	adds	r3, r0, #1
 800a346:	d102      	bne.n	800a34e <_sbrk_r+0x1a>
 800a348:	682b      	ldr	r3, [r5, #0]
 800a34a:	b103      	cbz	r3, 800a34e <_sbrk_r+0x1a>
 800a34c:	6023      	str	r3, [r4, #0]
 800a34e:	bd38      	pop	{r3, r4, r5, pc}
 800a350:	20001680 	.word	0x20001680

0800a354 <__assert_func>:
 800a354:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a356:	4614      	mov	r4, r2
 800a358:	461a      	mov	r2, r3
 800a35a:	4b09      	ldr	r3, [pc, #36]	; (800a380 <__assert_func+0x2c>)
 800a35c:	4605      	mov	r5, r0
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	68d8      	ldr	r0, [r3, #12]
 800a362:	b14c      	cbz	r4, 800a378 <__assert_func+0x24>
 800a364:	4b07      	ldr	r3, [pc, #28]	; (800a384 <__assert_func+0x30>)
 800a366:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a36a:	9100      	str	r1, [sp, #0]
 800a36c:	462b      	mov	r3, r5
 800a36e:	4906      	ldr	r1, [pc, #24]	; (800a388 <__assert_func+0x34>)
 800a370:	f000 f842 	bl	800a3f8 <fiprintf>
 800a374:	f000 f852 	bl	800a41c <abort>
 800a378:	4b04      	ldr	r3, [pc, #16]	; (800a38c <__assert_func+0x38>)
 800a37a:	461c      	mov	r4, r3
 800a37c:	e7f3      	b.n	800a366 <__assert_func+0x12>
 800a37e:	bf00      	nop
 800a380:	20000068 	.word	0x20000068
 800a384:	0800ac4e 	.word	0x0800ac4e
 800a388:	0800ac5b 	.word	0x0800ac5b
 800a38c:	0800ac89 	.word	0x0800ac89

0800a390 <_calloc_r>:
 800a390:	b570      	push	{r4, r5, r6, lr}
 800a392:	fba1 5402 	umull	r5, r4, r1, r2
 800a396:	b934      	cbnz	r4, 800a3a6 <_calloc_r+0x16>
 800a398:	4629      	mov	r1, r5
 800a39a:	f7ff fb1d 	bl	80099d8 <_malloc_r>
 800a39e:	4606      	mov	r6, r0
 800a3a0:	b928      	cbnz	r0, 800a3ae <_calloc_r+0x1e>
 800a3a2:	4630      	mov	r0, r6
 800a3a4:	bd70      	pop	{r4, r5, r6, pc}
 800a3a6:	220c      	movs	r2, #12
 800a3a8:	2600      	movs	r6, #0
 800a3aa:	6002      	str	r2, [r0, #0]
 800a3ac:	e7f9      	b.n	800a3a2 <_calloc_r+0x12>
 800a3ae:	462a      	mov	r2, r5
 800a3b0:	4621      	mov	r1, r4
 800a3b2:	f7fe fb40 	bl	8008a36 <memset>
 800a3b6:	e7f4      	b.n	800a3a2 <_calloc_r+0x12>

0800a3b8 <__ascii_mbtowc>:
 800a3b8:	b082      	sub	sp, #8
 800a3ba:	b901      	cbnz	r1, 800a3be <__ascii_mbtowc+0x6>
 800a3bc:	a901      	add	r1, sp, #4
 800a3be:	b142      	cbz	r2, 800a3d2 <__ascii_mbtowc+0x1a>
 800a3c0:	b14b      	cbz	r3, 800a3d6 <__ascii_mbtowc+0x1e>
 800a3c2:	7813      	ldrb	r3, [r2, #0]
 800a3c4:	600b      	str	r3, [r1, #0]
 800a3c6:	7812      	ldrb	r2, [r2, #0]
 800a3c8:	1e10      	subs	r0, r2, #0
 800a3ca:	bf18      	it	ne
 800a3cc:	2001      	movne	r0, #1
 800a3ce:	b002      	add	sp, #8
 800a3d0:	4770      	bx	lr
 800a3d2:	4610      	mov	r0, r2
 800a3d4:	e7fb      	b.n	800a3ce <__ascii_mbtowc+0x16>
 800a3d6:	f06f 0001 	mvn.w	r0, #1
 800a3da:	e7f8      	b.n	800a3ce <__ascii_mbtowc+0x16>

0800a3dc <__ascii_wctomb>:
 800a3dc:	4603      	mov	r3, r0
 800a3de:	4608      	mov	r0, r1
 800a3e0:	b141      	cbz	r1, 800a3f4 <__ascii_wctomb+0x18>
 800a3e2:	2aff      	cmp	r2, #255	; 0xff
 800a3e4:	d904      	bls.n	800a3f0 <__ascii_wctomb+0x14>
 800a3e6:	228a      	movs	r2, #138	; 0x8a
 800a3e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	4770      	bx	lr
 800a3f0:	2001      	movs	r0, #1
 800a3f2:	700a      	strb	r2, [r1, #0]
 800a3f4:	4770      	bx	lr
	...

0800a3f8 <fiprintf>:
 800a3f8:	b40e      	push	{r1, r2, r3}
 800a3fa:	b503      	push	{r0, r1, lr}
 800a3fc:	4601      	mov	r1, r0
 800a3fe:	ab03      	add	r3, sp, #12
 800a400:	4805      	ldr	r0, [pc, #20]	; (800a418 <fiprintf+0x20>)
 800a402:	f853 2b04 	ldr.w	r2, [r3], #4
 800a406:	6800      	ldr	r0, [r0, #0]
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	f000 f835 	bl	800a478 <_vfiprintf_r>
 800a40e:	b002      	add	sp, #8
 800a410:	f85d eb04 	ldr.w	lr, [sp], #4
 800a414:	b003      	add	sp, #12
 800a416:	4770      	bx	lr
 800a418:	20000068 	.word	0x20000068

0800a41c <abort>:
 800a41c:	2006      	movs	r0, #6
 800a41e:	b508      	push	{r3, lr}
 800a420:	f000 fa02 	bl	800a828 <raise>
 800a424:	2001      	movs	r0, #1
 800a426:	f7f9 f8e6 	bl	80035f6 <_exit>

0800a42a <__sfputc_r>:
 800a42a:	6893      	ldr	r3, [r2, #8]
 800a42c:	b410      	push	{r4}
 800a42e:	3b01      	subs	r3, #1
 800a430:	2b00      	cmp	r3, #0
 800a432:	6093      	str	r3, [r2, #8]
 800a434:	da07      	bge.n	800a446 <__sfputc_r+0x1c>
 800a436:	6994      	ldr	r4, [r2, #24]
 800a438:	42a3      	cmp	r3, r4
 800a43a:	db01      	blt.n	800a440 <__sfputc_r+0x16>
 800a43c:	290a      	cmp	r1, #10
 800a43e:	d102      	bne.n	800a446 <__sfputc_r+0x1c>
 800a440:	bc10      	pop	{r4}
 800a442:	f000 b933 	b.w	800a6ac <__swbuf_r>
 800a446:	6813      	ldr	r3, [r2, #0]
 800a448:	1c58      	adds	r0, r3, #1
 800a44a:	6010      	str	r0, [r2, #0]
 800a44c:	7019      	strb	r1, [r3, #0]
 800a44e:	4608      	mov	r0, r1
 800a450:	bc10      	pop	{r4}
 800a452:	4770      	bx	lr

0800a454 <__sfputs_r>:
 800a454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a456:	4606      	mov	r6, r0
 800a458:	460f      	mov	r7, r1
 800a45a:	4614      	mov	r4, r2
 800a45c:	18d5      	adds	r5, r2, r3
 800a45e:	42ac      	cmp	r4, r5
 800a460:	d101      	bne.n	800a466 <__sfputs_r+0x12>
 800a462:	2000      	movs	r0, #0
 800a464:	e007      	b.n	800a476 <__sfputs_r+0x22>
 800a466:	463a      	mov	r2, r7
 800a468:	4630      	mov	r0, r6
 800a46a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a46e:	f7ff ffdc 	bl	800a42a <__sfputc_r>
 800a472:	1c43      	adds	r3, r0, #1
 800a474:	d1f3      	bne.n	800a45e <__sfputs_r+0xa>
 800a476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a478 <_vfiprintf_r>:
 800a478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a47c:	460d      	mov	r5, r1
 800a47e:	4614      	mov	r4, r2
 800a480:	4698      	mov	r8, r3
 800a482:	4606      	mov	r6, r0
 800a484:	b09d      	sub	sp, #116	; 0x74
 800a486:	b118      	cbz	r0, 800a490 <_vfiprintf_r+0x18>
 800a488:	6a03      	ldr	r3, [r0, #32]
 800a48a:	b90b      	cbnz	r3, 800a490 <_vfiprintf_r+0x18>
 800a48c:	f7fe fa5a 	bl	8008944 <__sinit>
 800a490:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a492:	07d9      	lsls	r1, r3, #31
 800a494:	d405      	bmi.n	800a4a2 <_vfiprintf_r+0x2a>
 800a496:	89ab      	ldrh	r3, [r5, #12]
 800a498:	059a      	lsls	r2, r3, #22
 800a49a:	d402      	bmi.n	800a4a2 <_vfiprintf_r+0x2a>
 800a49c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a49e:	f7fe fb9e 	bl	8008bde <__retarget_lock_acquire_recursive>
 800a4a2:	89ab      	ldrh	r3, [r5, #12]
 800a4a4:	071b      	lsls	r3, r3, #28
 800a4a6:	d501      	bpl.n	800a4ac <_vfiprintf_r+0x34>
 800a4a8:	692b      	ldr	r3, [r5, #16]
 800a4aa:	b99b      	cbnz	r3, 800a4d4 <_vfiprintf_r+0x5c>
 800a4ac:	4629      	mov	r1, r5
 800a4ae:	4630      	mov	r0, r6
 800a4b0:	f000 f93a 	bl	800a728 <__swsetup_r>
 800a4b4:	b170      	cbz	r0, 800a4d4 <_vfiprintf_r+0x5c>
 800a4b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a4b8:	07dc      	lsls	r4, r3, #31
 800a4ba:	d504      	bpl.n	800a4c6 <_vfiprintf_r+0x4e>
 800a4bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a4c0:	b01d      	add	sp, #116	; 0x74
 800a4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c6:	89ab      	ldrh	r3, [r5, #12]
 800a4c8:	0598      	lsls	r0, r3, #22
 800a4ca:	d4f7      	bmi.n	800a4bc <_vfiprintf_r+0x44>
 800a4cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a4ce:	f7fe fb87 	bl	8008be0 <__retarget_lock_release_recursive>
 800a4d2:	e7f3      	b.n	800a4bc <_vfiprintf_r+0x44>
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a4d8:	2320      	movs	r3, #32
 800a4da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4de:	2330      	movs	r3, #48	; 0x30
 800a4e0:	f04f 0901 	mov.w	r9, #1
 800a4e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800a698 <_vfiprintf_r+0x220>
 800a4ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4f0:	4623      	mov	r3, r4
 800a4f2:	469a      	mov	sl, r3
 800a4f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4f8:	b10a      	cbz	r2, 800a4fe <_vfiprintf_r+0x86>
 800a4fa:	2a25      	cmp	r2, #37	; 0x25
 800a4fc:	d1f9      	bne.n	800a4f2 <_vfiprintf_r+0x7a>
 800a4fe:	ebba 0b04 	subs.w	fp, sl, r4
 800a502:	d00b      	beq.n	800a51c <_vfiprintf_r+0xa4>
 800a504:	465b      	mov	r3, fp
 800a506:	4622      	mov	r2, r4
 800a508:	4629      	mov	r1, r5
 800a50a:	4630      	mov	r0, r6
 800a50c:	f7ff ffa2 	bl	800a454 <__sfputs_r>
 800a510:	3001      	adds	r0, #1
 800a512:	f000 80a9 	beq.w	800a668 <_vfiprintf_r+0x1f0>
 800a516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a518:	445a      	add	r2, fp
 800a51a:	9209      	str	r2, [sp, #36]	; 0x24
 800a51c:	f89a 3000 	ldrb.w	r3, [sl]
 800a520:	2b00      	cmp	r3, #0
 800a522:	f000 80a1 	beq.w	800a668 <_vfiprintf_r+0x1f0>
 800a526:	2300      	movs	r3, #0
 800a528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a52c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a530:	f10a 0a01 	add.w	sl, sl, #1
 800a534:	9304      	str	r3, [sp, #16]
 800a536:	9307      	str	r3, [sp, #28]
 800a538:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a53c:	931a      	str	r3, [sp, #104]	; 0x68
 800a53e:	4654      	mov	r4, sl
 800a540:	2205      	movs	r2, #5
 800a542:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a546:	4854      	ldr	r0, [pc, #336]	; (800a698 <_vfiprintf_r+0x220>)
 800a548:	f7fe fb4b 	bl	8008be2 <memchr>
 800a54c:	9a04      	ldr	r2, [sp, #16]
 800a54e:	b9d8      	cbnz	r0, 800a588 <_vfiprintf_r+0x110>
 800a550:	06d1      	lsls	r1, r2, #27
 800a552:	bf44      	itt	mi
 800a554:	2320      	movmi	r3, #32
 800a556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a55a:	0713      	lsls	r3, r2, #28
 800a55c:	bf44      	itt	mi
 800a55e:	232b      	movmi	r3, #43	; 0x2b
 800a560:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a564:	f89a 3000 	ldrb.w	r3, [sl]
 800a568:	2b2a      	cmp	r3, #42	; 0x2a
 800a56a:	d015      	beq.n	800a598 <_vfiprintf_r+0x120>
 800a56c:	4654      	mov	r4, sl
 800a56e:	2000      	movs	r0, #0
 800a570:	f04f 0c0a 	mov.w	ip, #10
 800a574:	9a07      	ldr	r2, [sp, #28]
 800a576:	4621      	mov	r1, r4
 800a578:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a57c:	3b30      	subs	r3, #48	; 0x30
 800a57e:	2b09      	cmp	r3, #9
 800a580:	d94d      	bls.n	800a61e <_vfiprintf_r+0x1a6>
 800a582:	b1b0      	cbz	r0, 800a5b2 <_vfiprintf_r+0x13a>
 800a584:	9207      	str	r2, [sp, #28]
 800a586:	e014      	b.n	800a5b2 <_vfiprintf_r+0x13a>
 800a588:	eba0 0308 	sub.w	r3, r0, r8
 800a58c:	fa09 f303 	lsl.w	r3, r9, r3
 800a590:	4313      	orrs	r3, r2
 800a592:	46a2      	mov	sl, r4
 800a594:	9304      	str	r3, [sp, #16]
 800a596:	e7d2      	b.n	800a53e <_vfiprintf_r+0xc6>
 800a598:	9b03      	ldr	r3, [sp, #12]
 800a59a:	1d19      	adds	r1, r3, #4
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	9103      	str	r1, [sp, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	bfbb      	ittet	lt
 800a5a4:	425b      	neglt	r3, r3
 800a5a6:	f042 0202 	orrlt.w	r2, r2, #2
 800a5aa:	9307      	strge	r3, [sp, #28]
 800a5ac:	9307      	strlt	r3, [sp, #28]
 800a5ae:	bfb8      	it	lt
 800a5b0:	9204      	strlt	r2, [sp, #16]
 800a5b2:	7823      	ldrb	r3, [r4, #0]
 800a5b4:	2b2e      	cmp	r3, #46	; 0x2e
 800a5b6:	d10c      	bne.n	800a5d2 <_vfiprintf_r+0x15a>
 800a5b8:	7863      	ldrb	r3, [r4, #1]
 800a5ba:	2b2a      	cmp	r3, #42	; 0x2a
 800a5bc:	d134      	bne.n	800a628 <_vfiprintf_r+0x1b0>
 800a5be:	9b03      	ldr	r3, [sp, #12]
 800a5c0:	3402      	adds	r4, #2
 800a5c2:	1d1a      	adds	r2, r3, #4
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	9203      	str	r2, [sp, #12]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	bfb8      	it	lt
 800a5cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a5d0:	9305      	str	r3, [sp, #20]
 800a5d2:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a69c <_vfiprintf_r+0x224>
 800a5d6:	2203      	movs	r2, #3
 800a5d8:	4650      	mov	r0, sl
 800a5da:	7821      	ldrb	r1, [r4, #0]
 800a5dc:	f7fe fb01 	bl	8008be2 <memchr>
 800a5e0:	b138      	cbz	r0, 800a5f2 <_vfiprintf_r+0x17a>
 800a5e2:	2240      	movs	r2, #64	; 0x40
 800a5e4:	9b04      	ldr	r3, [sp, #16]
 800a5e6:	eba0 000a 	sub.w	r0, r0, sl
 800a5ea:	4082      	lsls	r2, r0
 800a5ec:	4313      	orrs	r3, r2
 800a5ee:	3401      	adds	r4, #1
 800a5f0:	9304      	str	r3, [sp, #16]
 800a5f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5f6:	2206      	movs	r2, #6
 800a5f8:	4829      	ldr	r0, [pc, #164]	; (800a6a0 <_vfiprintf_r+0x228>)
 800a5fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5fe:	f7fe faf0 	bl	8008be2 <memchr>
 800a602:	2800      	cmp	r0, #0
 800a604:	d03f      	beq.n	800a686 <_vfiprintf_r+0x20e>
 800a606:	4b27      	ldr	r3, [pc, #156]	; (800a6a4 <_vfiprintf_r+0x22c>)
 800a608:	bb1b      	cbnz	r3, 800a652 <_vfiprintf_r+0x1da>
 800a60a:	9b03      	ldr	r3, [sp, #12]
 800a60c:	3307      	adds	r3, #7
 800a60e:	f023 0307 	bic.w	r3, r3, #7
 800a612:	3308      	adds	r3, #8
 800a614:	9303      	str	r3, [sp, #12]
 800a616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a618:	443b      	add	r3, r7
 800a61a:	9309      	str	r3, [sp, #36]	; 0x24
 800a61c:	e768      	b.n	800a4f0 <_vfiprintf_r+0x78>
 800a61e:	460c      	mov	r4, r1
 800a620:	2001      	movs	r0, #1
 800a622:	fb0c 3202 	mla	r2, ip, r2, r3
 800a626:	e7a6      	b.n	800a576 <_vfiprintf_r+0xfe>
 800a628:	2300      	movs	r3, #0
 800a62a:	f04f 0c0a 	mov.w	ip, #10
 800a62e:	4619      	mov	r1, r3
 800a630:	3401      	adds	r4, #1
 800a632:	9305      	str	r3, [sp, #20]
 800a634:	4620      	mov	r0, r4
 800a636:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a63a:	3a30      	subs	r2, #48	; 0x30
 800a63c:	2a09      	cmp	r2, #9
 800a63e:	d903      	bls.n	800a648 <_vfiprintf_r+0x1d0>
 800a640:	2b00      	cmp	r3, #0
 800a642:	d0c6      	beq.n	800a5d2 <_vfiprintf_r+0x15a>
 800a644:	9105      	str	r1, [sp, #20]
 800a646:	e7c4      	b.n	800a5d2 <_vfiprintf_r+0x15a>
 800a648:	4604      	mov	r4, r0
 800a64a:	2301      	movs	r3, #1
 800a64c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a650:	e7f0      	b.n	800a634 <_vfiprintf_r+0x1bc>
 800a652:	ab03      	add	r3, sp, #12
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	462a      	mov	r2, r5
 800a658:	4630      	mov	r0, r6
 800a65a:	4b13      	ldr	r3, [pc, #76]	; (800a6a8 <_vfiprintf_r+0x230>)
 800a65c:	a904      	add	r1, sp, #16
 800a65e:	f7fd fd23 	bl	80080a8 <_printf_float>
 800a662:	4607      	mov	r7, r0
 800a664:	1c78      	adds	r0, r7, #1
 800a666:	d1d6      	bne.n	800a616 <_vfiprintf_r+0x19e>
 800a668:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a66a:	07d9      	lsls	r1, r3, #31
 800a66c:	d405      	bmi.n	800a67a <_vfiprintf_r+0x202>
 800a66e:	89ab      	ldrh	r3, [r5, #12]
 800a670:	059a      	lsls	r2, r3, #22
 800a672:	d402      	bmi.n	800a67a <_vfiprintf_r+0x202>
 800a674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a676:	f7fe fab3 	bl	8008be0 <__retarget_lock_release_recursive>
 800a67a:	89ab      	ldrh	r3, [r5, #12]
 800a67c:	065b      	lsls	r3, r3, #25
 800a67e:	f53f af1d 	bmi.w	800a4bc <_vfiprintf_r+0x44>
 800a682:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a684:	e71c      	b.n	800a4c0 <_vfiprintf_r+0x48>
 800a686:	ab03      	add	r3, sp, #12
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	462a      	mov	r2, r5
 800a68c:	4630      	mov	r0, r6
 800a68e:	4b06      	ldr	r3, [pc, #24]	; (800a6a8 <_vfiprintf_r+0x230>)
 800a690:	a904      	add	r1, sp, #16
 800a692:	f7fd ffa9 	bl	80085e8 <_printf_i>
 800a696:	e7e4      	b.n	800a662 <_vfiprintf_r+0x1ea>
 800a698:	0800ad8b 	.word	0x0800ad8b
 800a69c:	0800ad91 	.word	0x0800ad91
 800a6a0:	0800ad95 	.word	0x0800ad95
 800a6a4:	080080a9 	.word	0x080080a9
 800a6a8:	0800a455 	.word	0x0800a455

0800a6ac <__swbuf_r>:
 800a6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ae:	460e      	mov	r6, r1
 800a6b0:	4614      	mov	r4, r2
 800a6b2:	4605      	mov	r5, r0
 800a6b4:	b118      	cbz	r0, 800a6be <__swbuf_r+0x12>
 800a6b6:	6a03      	ldr	r3, [r0, #32]
 800a6b8:	b90b      	cbnz	r3, 800a6be <__swbuf_r+0x12>
 800a6ba:	f7fe f943 	bl	8008944 <__sinit>
 800a6be:	69a3      	ldr	r3, [r4, #24]
 800a6c0:	60a3      	str	r3, [r4, #8]
 800a6c2:	89a3      	ldrh	r3, [r4, #12]
 800a6c4:	071a      	lsls	r2, r3, #28
 800a6c6:	d525      	bpl.n	800a714 <__swbuf_r+0x68>
 800a6c8:	6923      	ldr	r3, [r4, #16]
 800a6ca:	b31b      	cbz	r3, 800a714 <__swbuf_r+0x68>
 800a6cc:	6823      	ldr	r3, [r4, #0]
 800a6ce:	6922      	ldr	r2, [r4, #16]
 800a6d0:	b2f6      	uxtb	r6, r6
 800a6d2:	1a98      	subs	r0, r3, r2
 800a6d4:	6963      	ldr	r3, [r4, #20]
 800a6d6:	4637      	mov	r7, r6
 800a6d8:	4283      	cmp	r3, r0
 800a6da:	dc04      	bgt.n	800a6e6 <__swbuf_r+0x3a>
 800a6dc:	4621      	mov	r1, r4
 800a6de:	4628      	mov	r0, r5
 800a6e0:	f7ff fe00 	bl	800a2e4 <_fflush_r>
 800a6e4:	b9e0      	cbnz	r0, 800a720 <__swbuf_r+0x74>
 800a6e6:	68a3      	ldr	r3, [r4, #8]
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	60a3      	str	r3, [r4, #8]
 800a6ec:	6823      	ldr	r3, [r4, #0]
 800a6ee:	1c5a      	adds	r2, r3, #1
 800a6f0:	6022      	str	r2, [r4, #0]
 800a6f2:	701e      	strb	r6, [r3, #0]
 800a6f4:	6962      	ldr	r2, [r4, #20]
 800a6f6:	1c43      	adds	r3, r0, #1
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d004      	beq.n	800a706 <__swbuf_r+0x5a>
 800a6fc:	89a3      	ldrh	r3, [r4, #12]
 800a6fe:	07db      	lsls	r3, r3, #31
 800a700:	d506      	bpl.n	800a710 <__swbuf_r+0x64>
 800a702:	2e0a      	cmp	r6, #10
 800a704:	d104      	bne.n	800a710 <__swbuf_r+0x64>
 800a706:	4621      	mov	r1, r4
 800a708:	4628      	mov	r0, r5
 800a70a:	f7ff fdeb 	bl	800a2e4 <_fflush_r>
 800a70e:	b938      	cbnz	r0, 800a720 <__swbuf_r+0x74>
 800a710:	4638      	mov	r0, r7
 800a712:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a714:	4621      	mov	r1, r4
 800a716:	4628      	mov	r0, r5
 800a718:	f000 f806 	bl	800a728 <__swsetup_r>
 800a71c:	2800      	cmp	r0, #0
 800a71e:	d0d5      	beq.n	800a6cc <__swbuf_r+0x20>
 800a720:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a724:	e7f4      	b.n	800a710 <__swbuf_r+0x64>
	...

0800a728 <__swsetup_r>:
 800a728:	b538      	push	{r3, r4, r5, lr}
 800a72a:	4b2a      	ldr	r3, [pc, #168]	; (800a7d4 <__swsetup_r+0xac>)
 800a72c:	4605      	mov	r5, r0
 800a72e:	6818      	ldr	r0, [r3, #0]
 800a730:	460c      	mov	r4, r1
 800a732:	b118      	cbz	r0, 800a73c <__swsetup_r+0x14>
 800a734:	6a03      	ldr	r3, [r0, #32]
 800a736:	b90b      	cbnz	r3, 800a73c <__swsetup_r+0x14>
 800a738:	f7fe f904 	bl	8008944 <__sinit>
 800a73c:	89a3      	ldrh	r3, [r4, #12]
 800a73e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a742:	0718      	lsls	r0, r3, #28
 800a744:	d422      	bmi.n	800a78c <__swsetup_r+0x64>
 800a746:	06d9      	lsls	r1, r3, #27
 800a748:	d407      	bmi.n	800a75a <__swsetup_r+0x32>
 800a74a:	2309      	movs	r3, #9
 800a74c:	602b      	str	r3, [r5, #0]
 800a74e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a752:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a756:	81a3      	strh	r3, [r4, #12]
 800a758:	e034      	b.n	800a7c4 <__swsetup_r+0x9c>
 800a75a:	0758      	lsls	r0, r3, #29
 800a75c:	d512      	bpl.n	800a784 <__swsetup_r+0x5c>
 800a75e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a760:	b141      	cbz	r1, 800a774 <__swsetup_r+0x4c>
 800a762:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a766:	4299      	cmp	r1, r3
 800a768:	d002      	beq.n	800a770 <__swsetup_r+0x48>
 800a76a:	4628      	mov	r0, r5
 800a76c:	f7ff f8c4 	bl	80098f8 <_free_r>
 800a770:	2300      	movs	r3, #0
 800a772:	6363      	str	r3, [r4, #52]	; 0x34
 800a774:	89a3      	ldrh	r3, [r4, #12]
 800a776:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a77a:	81a3      	strh	r3, [r4, #12]
 800a77c:	2300      	movs	r3, #0
 800a77e:	6063      	str	r3, [r4, #4]
 800a780:	6923      	ldr	r3, [r4, #16]
 800a782:	6023      	str	r3, [r4, #0]
 800a784:	89a3      	ldrh	r3, [r4, #12]
 800a786:	f043 0308 	orr.w	r3, r3, #8
 800a78a:	81a3      	strh	r3, [r4, #12]
 800a78c:	6923      	ldr	r3, [r4, #16]
 800a78e:	b94b      	cbnz	r3, 800a7a4 <__swsetup_r+0x7c>
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a79a:	d003      	beq.n	800a7a4 <__swsetup_r+0x7c>
 800a79c:	4621      	mov	r1, r4
 800a79e:	4628      	mov	r0, r5
 800a7a0:	f000 f883 	bl	800a8aa <__smakebuf_r>
 800a7a4:	89a0      	ldrh	r0, [r4, #12]
 800a7a6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7aa:	f010 0301 	ands.w	r3, r0, #1
 800a7ae:	d00a      	beq.n	800a7c6 <__swsetup_r+0x9e>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	60a3      	str	r3, [r4, #8]
 800a7b4:	6963      	ldr	r3, [r4, #20]
 800a7b6:	425b      	negs	r3, r3
 800a7b8:	61a3      	str	r3, [r4, #24]
 800a7ba:	6923      	ldr	r3, [r4, #16]
 800a7bc:	b943      	cbnz	r3, 800a7d0 <__swsetup_r+0xa8>
 800a7be:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7c2:	d1c4      	bne.n	800a74e <__swsetup_r+0x26>
 800a7c4:	bd38      	pop	{r3, r4, r5, pc}
 800a7c6:	0781      	lsls	r1, r0, #30
 800a7c8:	bf58      	it	pl
 800a7ca:	6963      	ldrpl	r3, [r4, #20]
 800a7cc:	60a3      	str	r3, [r4, #8]
 800a7ce:	e7f4      	b.n	800a7ba <__swsetup_r+0x92>
 800a7d0:	2000      	movs	r0, #0
 800a7d2:	e7f7      	b.n	800a7c4 <__swsetup_r+0x9c>
 800a7d4:	20000068 	.word	0x20000068

0800a7d8 <_raise_r>:
 800a7d8:	291f      	cmp	r1, #31
 800a7da:	b538      	push	{r3, r4, r5, lr}
 800a7dc:	4604      	mov	r4, r0
 800a7de:	460d      	mov	r5, r1
 800a7e0:	d904      	bls.n	800a7ec <_raise_r+0x14>
 800a7e2:	2316      	movs	r3, #22
 800a7e4:	6003      	str	r3, [r0, #0]
 800a7e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a7ea:	bd38      	pop	{r3, r4, r5, pc}
 800a7ec:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a7ee:	b112      	cbz	r2, 800a7f6 <_raise_r+0x1e>
 800a7f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7f4:	b94b      	cbnz	r3, 800a80a <_raise_r+0x32>
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f000 f830 	bl	800a85c <_getpid_r>
 800a7fc:	462a      	mov	r2, r5
 800a7fe:	4601      	mov	r1, r0
 800a800:	4620      	mov	r0, r4
 800a802:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a806:	f000 b817 	b.w	800a838 <_kill_r>
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d00a      	beq.n	800a824 <_raise_r+0x4c>
 800a80e:	1c59      	adds	r1, r3, #1
 800a810:	d103      	bne.n	800a81a <_raise_r+0x42>
 800a812:	2316      	movs	r3, #22
 800a814:	6003      	str	r3, [r0, #0]
 800a816:	2001      	movs	r0, #1
 800a818:	e7e7      	b.n	800a7ea <_raise_r+0x12>
 800a81a:	2400      	movs	r4, #0
 800a81c:	4628      	mov	r0, r5
 800a81e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a822:	4798      	blx	r3
 800a824:	2000      	movs	r0, #0
 800a826:	e7e0      	b.n	800a7ea <_raise_r+0x12>

0800a828 <raise>:
 800a828:	4b02      	ldr	r3, [pc, #8]	; (800a834 <raise+0xc>)
 800a82a:	4601      	mov	r1, r0
 800a82c:	6818      	ldr	r0, [r3, #0]
 800a82e:	f7ff bfd3 	b.w	800a7d8 <_raise_r>
 800a832:	bf00      	nop
 800a834:	20000068 	.word	0x20000068

0800a838 <_kill_r>:
 800a838:	b538      	push	{r3, r4, r5, lr}
 800a83a:	2300      	movs	r3, #0
 800a83c:	4d06      	ldr	r5, [pc, #24]	; (800a858 <_kill_r+0x20>)
 800a83e:	4604      	mov	r4, r0
 800a840:	4608      	mov	r0, r1
 800a842:	4611      	mov	r1, r2
 800a844:	602b      	str	r3, [r5, #0]
 800a846:	f7f8 fec6 	bl	80035d6 <_kill>
 800a84a:	1c43      	adds	r3, r0, #1
 800a84c:	d102      	bne.n	800a854 <_kill_r+0x1c>
 800a84e:	682b      	ldr	r3, [r5, #0]
 800a850:	b103      	cbz	r3, 800a854 <_kill_r+0x1c>
 800a852:	6023      	str	r3, [r4, #0]
 800a854:	bd38      	pop	{r3, r4, r5, pc}
 800a856:	bf00      	nop
 800a858:	20001680 	.word	0x20001680

0800a85c <_getpid_r>:
 800a85c:	f7f8 beb4 	b.w	80035c8 <_getpid>

0800a860 <__swhatbuf_r>:
 800a860:	b570      	push	{r4, r5, r6, lr}
 800a862:	460c      	mov	r4, r1
 800a864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a868:	4615      	mov	r5, r2
 800a86a:	2900      	cmp	r1, #0
 800a86c:	461e      	mov	r6, r3
 800a86e:	b096      	sub	sp, #88	; 0x58
 800a870:	da0c      	bge.n	800a88c <__swhatbuf_r+0x2c>
 800a872:	89a3      	ldrh	r3, [r4, #12]
 800a874:	2100      	movs	r1, #0
 800a876:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a87a:	bf0c      	ite	eq
 800a87c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a880:	2340      	movne	r3, #64	; 0x40
 800a882:	2000      	movs	r0, #0
 800a884:	6031      	str	r1, [r6, #0]
 800a886:	602b      	str	r3, [r5, #0]
 800a888:	b016      	add	sp, #88	; 0x58
 800a88a:	bd70      	pop	{r4, r5, r6, pc}
 800a88c:	466a      	mov	r2, sp
 800a88e:	f000 f849 	bl	800a924 <_fstat_r>
 800a892:	2800      	cmp	r0, #0
 800a894:	dbed      	blt.n	800a872 <__swhatbuf_r+0x12>
 800a896:	9901      	ldr	r1, [sp, #4]
 800a898:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a89c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a8a0:	4259      	negs	r1, r3
 800a8a2:	4159      	adcs	r1, r3
 800a8a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a8a8:	e7eb      	b.n	800a882 <__swhatbuf_r+0x22>

0800a8aa <__smakebuf_r>:
 800a8aa:	898b      	ldrh	r3, [r1, #12]
 800a8ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8ae:	079d      	lsls	r5, r3, #30
 800a8b0:	4606      	mov	r6, r0
 800a8b2:	460c      	mov	r4, r1
 800a8b4:	d507      	bpl.n	800a8c6 <__smakebuf_r+0x1c>
 800a8b6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8ba:	6023      	str	r3, [r4, #0]
 800a8bc:	6123      	str	r3, [r4, #16]
 800a8be:	2301      	movs	r3, #1
 800a8c0:	6163      	str	r3, [r4, #20]
 800a8c2:	b002      	add	sp, #8
 800a8c4:	bd70      	pop	{r4, r5, r6, pc}
 800a8c6:	466a      	mov	r2, sp
 800a8c8:	ab01      	add	r3, sp, #4
 800a8ca:	f7ff ffc9 	bl	800a860 <__swhatbuf_r>
 800a8ce:	9900      	ldr	r1, [sp, #0]
 800a8d0:	4605      	mov	r5, r0
 800a8d2:	4630      	mov	r0, r6
 800a8d4:	f7ff f880 	bl	80099d8 <_malloc_r>
 800a8d8:	b948      	cbnz	r0, 800a8ee <__smakebuf_r+0x44>
 800a8da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8de:	059a      	lsls	r2, r3, #22
 800a8e0:	d4ef      	bmi.n	800a8c2 <__smakebuf_r+0x18>
 800a8e2:	f023 0303 	bic.w	r3, r3, #3
 800a8e6:	f043 0302 	orr.w	r3, r3, #2
 800a8ea:	81a3      	strh	r3, [r4, #12]
 800a8ec:	e7e3      	b.n	800a8b6 <__smakebuf_r+0xc>
 800a8ee:	89a3      	ldrh	r3, [r4, #12]
 800a8f0:	6020      	str	r0, [r4, #0]
 800a8f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8f6:	81a3      	strh	r3, [r4, #12]
 800a8f8:	9b00      	ldr	r3, [sp, #0]
 800a8fa:	6120      	str	r0, [r4, #16]
 800a8fc:	6163      	str	r3, [r4, #20]
 800a8fe:	9b01      	ldr	r3, [sp, #4]
 800a900:	b15b      	cbz	r3, 800a91a <__smakebuf_r+0x70>
 800a902:	4630      	mov	r0, r6
 800a904:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a908:	f000 f81e 	bl	800a948 <_isatty_r>
 800a90c:	b128      	cbz	r0, 800a91a <__smakebuf_r+0x70>
 800a90e:	89a3      	ldrh	r3, [r4, #12]
 800a910:	f023 0303 	bic.w	r3, r3, #3
 800a914:	f043 0301 	orr.w	r3, r3, #1
 800a918:	81a3      	strh	r3, [r4, #12]
 800a91a:	89a3      	ldrh	r3, [r4, #12]
 800a91c:	431d      	orrs	r5, r3
 800a91e:	81a5      	strh	r5, [r4, #12]
 800a920:	e7cf      	b.n	800a8c2 <__smakebuf_r+0x18>
	...

0800a924 <_fstat_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	2300      	movs	r3, #0
 800a928:	4d06      	ldr	r5, [pc, #24]	; (800a944 <_fstat_r+0x20>)
 800a92a:	4604      	mov	r4, r0
 800a92c:	4608      	mov	r0, r1
 800a92e:	4611      	mov	r1, r2
 800a930:	602b      	str	r3, [r5, #0]
 800a932:	f7f8 feae 	bl	8003692 <_fstat>
 800a936:	1c43      	adds	r3, r0, #1
 800a938:	d102      	bne.n	800a940 <_fstat_r+0x1c>
 800a93a:	682b      	ldr	r3, [r5, #0]
 800a93c:	b103      	cbz	r3, 800a940 <_fstat_r+0x1c>
 800a93e:	6023      	str	r3, [r4, #0]
 800a940:	bd38      	pop	{r3, r4, r5, pc}
 800a942:	bf00      	nop
 800a944:	20001680 	.word	0x20001680

0800a948 <_isatty_r>:
 800a948:	b538      	push	{r3, r4, r5, lr}
 800a94a:	2300      	movs	r3, #0
 800a94c:	4d05      	ldr	r5, [pc, #20]	; (800a964 <_isatty_r+0x1c>)
 800a94e:	4604      	mov	r4, r0
 800a950:	4608      	mov	r0, r1
 800a952:	602b      	str	r3, [r5, #0]
 800a954:	f7f8 feac 	bl	80036b0 <_isatty>
 800a958:	1c43      	adds	r3, r0, #1
 800a95a:	d102      	bne.n	800a962 <_isatty_r+0x1a>
 800a95c:	682b      	ldr	r3, [r5, #0]
 800a95e:	b103      	cbz	r3, 800a962 <_isatty_r+0x1a>
 800a960:	6023      	str	r3, [r4, #0]
 800a962:	bd38      	pop	{r3, r4, r5, pc}
 800a964:	20001680 	.word	0x20001680

0800a968 <_init>:
 800a968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96a:	bf00      	nop
 800a96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a96e:	bc08      	pop	{r3}
 800a970:	469e      	mov	lr, r3
 800a972:	4770      	bx	lr

0800a974 <_fini>:
 800a974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a976:	bf00      	nop
 800a978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a97a:	bc08      	pop	{r3}
 800a97c:	469e      	mov	lr, r3
 800a97e:	4770      	bx	lr
